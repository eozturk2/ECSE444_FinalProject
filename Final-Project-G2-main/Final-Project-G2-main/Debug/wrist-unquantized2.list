
wrist-unquantized2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012230  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00134514  08012400  08012400  00022400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08146914  08146914  00160da0  2**0
                  CONTENTS
  4 .ARM          00000008  08146914  08146914  00156914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0814691c  0814691c  00160da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0814691c  0814691c  0015691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08146920  08146920  00156920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000da0  20000000  08146924  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001328  20000da0  081476c4  00160da0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200020c8  081476c4  001620c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00160da0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002321f  00000000  00000000  00160dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004439  00000000  00000000  00183fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00188428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00189cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f86a  00000000  00000000  0018b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f30f  00000000  00000000  001bac62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121feb  00000000  00000000  001d9f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  002fbf5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c7c  00000000  00000000  002fc024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000106d  00000000  00000000  00303ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00304d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00304ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000da0 	.word	0x20000da0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080123d8 	.word	0x080123d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000da4 	.word	0x20000da4
 80001fc:	080123d8 	.word	0x080123d8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_frsub>:
 8000c18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	e002      	b.n	8000c24 <__addsf3>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_fsub>:
 8000c20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c24 <__addsf3>:
 8000c24:	0042      	lsls	r2, r0, #1
 8000c26:	bf1f      	itttt	ne
 8000c28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c2c:	ea92 0f03 	teqne	r2, r3
 8000c30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c38:	d06a      	beq.n	8000d10 <__addsf3+0xec>
 8000c3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c42:	bfc1      	itttt	gt
 8000c44:	18d2      	addgt	r2, r2, r3
 8000c46:	4041      	eorgt	r1, r0
 8000c48:	4048      	eorgt	r0, r1
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	bfb8      	it	lt
 8000c4e:	425b      	neglt	r3, r3
 8000c50:	2b19      	cmp	r3, #25
 8000c52:	bf88      	it	hi
 8000c54:	4770      	bxhi	lr
 8000c56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4249      	negne	r1, r1
 8000c76:	ea92 0f03 	teq	r2, r3
 8000c7a:	d03f      	beq.n	8000cfc <__addsf3+0xd8>
 8000c7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c80:	fa41 fc03 	asr.w	ip, r1, r3
 8000c84:	eb10 000c 	adds.w	r0, r0, ip
 8000c88:	f1c3 0320 	rsb	r3, r3, #32
 8000c8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__addsf3+0x78>
 8000c96:	4249      	negs	r1, r1
 8000c98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca0:	d313      	bcc.n	8000cca <__addsf3+0xa6>
 8000ca2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ca6:	d306      	bcc.n	8000cb6 <__addsf3+0x92>
 8000ca8:	0840      	lsrs	r0, r0, #1
 8000caa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cae:	f102 0201 	add.w	r2, r2, #1
 8000cb2:	2afe      	cmp	r2, #254	; 0xfe
 8000cb4:	d251      	bcs.n	8000d5a <__addsf3+0x136>
 8000cb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cbe:	bf08      	it	eq
 8000cc0:	f020 0001 	biceq.w	r0, r0, #1
 8000cc4:	ea40 0003 	orr.w	r0, r0, r3
 8000cc8:	4770      	bx	lr
 8000cca:	0049      	lsls	r1, r1, #1
 8000ccc:	eb40 0000 	adc.w	r0, r0, r0
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cd8:	d2ed      	bcs.n	8000cb6 <__addsf3+0x92>
 8000cda:	fab0 fc80 	clz	ip, r0
 8000cde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ce6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cea:	bfaa      	itet	ge
 8000cec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf0:	4252      	neglt	r2, r2
 8000cf2:	4318      	orrge	r0, r3
 8000cf4:	bfbc      	itt	lt
 8000cf6:	40d0      	lsrlt	r0, r2
 8000cf8:	4318      	orrlt	r0, r3
 8000cfa:	4770      	bx	lr
 8000cfc:	f092 0f00 	teq	r2, #0
 8000d00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d04:	bf06      	itte	eq
 8000d06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0a:	3201      	addeq	r2, #1
 8000d0c:	3b01      	subne	r3, #1
 8000d0e:	e7b5      	b.n	8000c7c <__addsf3+0x58>
 8000d10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d18:	bf18      	it	ne
 8000d1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1e:	d021      	beq.n	8000d64 <__addsf3+0x140>
 8000d20:	ea92 0f03 	teq	r2, r3
 8000d24:	d004      	beq.n	8000d30 <__addsf3+0x10c>
 8000d26:	f092 0f00 	teq	r2, #0
 8000d2a:	bf08      	it	eq
 8000d2c:	4608      	moveq	r0, r1
 8000d2e:	4770      	bx	lr
 8000d30:	ea90 0f01 	teq	r0, r1
 8000d34:	bf1c      	itt	ne
 8000d36:	2000      	movne	r0, #0
 8000d38:	4770      	bxne	lr
 8000d3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d3e:	d104      	bne.n	8000d4a <__addsf3+0x126>
 8000d40:	0040      	lsls	r0, r0, #1
 8000d42:	bf28      	it	cs
 8000d44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d48:	4770      	bx	lr
 8000d4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d4e:	bf3c      	itt	cc
 8000d50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bxcc	lr
 8000d56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	4770      	bx	lr
 8000d64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d68:	bf16      	itet	ne
 8000d6a:	4608      	movne	r0, r1
 8000d6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d70:	4601      	movne	r1, r0
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	bf06      	itte	eq
 8000d76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7a:	ea90 0f01 	teqeq	r0, r1
 8000d7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_ui2f>:
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e004      	b.n	8000d94 <__aeabi_i2f+0x8>
 8000d8a:	bf00      	nop

08000d8c <__aeabi_i2f>:
 8000d8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d90:	bf48      	it	mi
 8000d92:	4240      	negmi	r0, r0
 8000d94:	ea5f 0c00 	movs.w	ip, r0
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da0:	4601      	mov	r1, r0
 8000da2:	f04f 0000 	mov.w	r0, #0
 8000da6:	e01c      	b.n	8000de2 <__aeabi_l2f+0x2a>

08000da8 <__aeabi_ul2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e00a      	b.n	8000dcc <__aeabi_l2f+0x14>
 8000db6:	bf00      	nop

08000db8 <__aeabi_l2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc4:	d502      	bpl.n	8000dcc <__aeabi_l2f+0x14>
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dcc:	ea5f 0c01 	movs.w	ip, r1
 8000dd0:	bf02      	ittt	eq
 8000dd2:	4684      	moveq	ip, r0
 8000dd4:	4601      	moveq	r1, r0
 8000dd6:	2000      	moveq	r0, #0
 8000dd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ddc:	bf08      	it	eq
 8000dde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000de6:	fabc f28c 	clz	r2, ip
 8000dea:	3a08      	subs	r2, #8
 8000dec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df0:	db10      	blt.n	8000e14 <__aeabi_l2f+0x5c>
 8000df2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df6:	4463      	add	r3, ip
 8000df8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e04:	fa20 f202 	lsr.w	r2, r0, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	f020 0001 	biceq.w	r0, r0, #1
 8000e12:	4770      	bx	lr
 8000e14:	f102 0220 	add.w	r2, r2, #32
 8000e18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e24:	fa21 f202 	lsr.w	r2, r1, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_uldivmod>:
 8000e34:	b953      	cbnz	r3, 8000e4c <__aeabi_uldivmod+0x18>
 8000e36:	b94a      	cbnz	r2, 8000e4c <__aeabi_uldivmod+0x18>
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	bf08      	it	eq
 8000e3c:	2800      	cmpeq	r0, #0
 8000e3e:	bf1c      	itt	ne
 8000e40:	f04f 31ff 	movne.w	r1, #4294967295
 8000e44:	f04f 30ff 	movne.w	r0, #4294967295
 8000e48:	f000 b974 	b.w	8001134 <__aeabi_idiv0>
 8000e4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e54:	f000 f806 	bl	8000e64 <__udivmoddi4>
 8000e58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e60:	b004      	add	sp, #16
 8000e62:	4770      	bx	lr

08000e64 <__udivmoddi4>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	9d08      	ldr	r5, [sp, #32]
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	468e      	mov	lr, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d14d      	bne.n	8000f0e <__udivmoddi4+0xaa>
 8000e72:	428a      	cmp	r2, r1
 8000e74:	4694      	mov	ip, r2
 8000e76:	d969      	bls.n	8000f4c <__udivmoddi4+0xe8>
 8000e78:	fab2 f282 	clz	r2, r2
 8000e7c:	b152      	cbz	r2, 8000e94 <__udivmoddi4+0x30>
 8000e7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e82:	f1c2 0120 	rsb	r1, r2, #32
 8000e86:	fa20 f101 	lsr.w	r1, r0, r1
 8000e8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e92:	4094      	lsls	r4, r2
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	0c21      	lsrs	r1, r4, #16
 8000e9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e9e:	fa1f f78c 	uxth.w	r7, ip
 8000ea2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ea6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eaa:	fb06 f107 	mul.w	r1, r6, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d90a      	bls.n	8000ec8 <__udivmoddi4+0x64>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000eba:	f080 811f 	bcs.w	80010fc <__udivmoddi4+0x298>
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	f240 811c 	bls.w	80010fc <__udivmoddi4+0x298>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb00 f707 	mul.w	r7, r0, r7
 8000edc:	42a7      	cmp	r7, r4
 8000ede:	d90a      	bls.n	8000ef6 <__udivmoddi4+0x92>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	f080 810a 	bcs.w	8001100 <__udivmoddi4+0x29c>
 8000eec:	42a7      	cmp	r7, r4
 8000eee:	f240 8107 	bls.w	8001100 <__udivmoddi4+0x29c>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000efa:	1be4      	subs	r4, r4, r7
 8000efc:	2600      	movs	r6, #0
 8000efe:	b11d      	cbz	r5, 8000f08 <__udivmoddi4+0xa4>
 8000f00:	40d4      	lsrs	r4, r2
 8000f02:	2300      	movs	r3, #0
 8000f04:	e9c5 4300 	strd	r4, r3, [r5]
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d909      	bls.n	8000f26 <__udivmoddi4+0xc2>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	f000 80ef 	beq.w	80010f6 <__udivmoddi4+0x292>
 8000f18:	2600      	movs	r6, #0
 8000f1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1e:	4630      	mov	r0, r6
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	fab3 f683 	clz	r6, r3
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d14a      	bne.n	8000fc4 <__udivmoddi4+0x160>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d302      	bcc.n	8000f38 <__udivmoddi4+0xd4>
 8000f32:	4282      	cmp	r2, r0
 8000f34:	f200 80f9 	bhi.w	800112a <__udivmoddi4+0x2c6>
 8000f38:	1a84      	subs	r4, r0, r2
 8000f3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	469e      	mov	lr, r3
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d0e0      	beq.n	8000f08 <__udivmoddi4+0xa4>
 8000f46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f4a:	e7dd      	b.n	8000f08 <__udivmoddi4+0xa4>
 8000f4c:	b902      	cbnz	r2, 8000f50 <__udivmoddi4+0xec>
 8000f4e:	deff      	udf	#255	; 0xff
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	f040 8092 	bne.w	800107e <__udivmoddi4+0x21a>
 8000f5a:	eba1 010c 	sub.w	r1, r1, ip
 8000f5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f62:	fa1f fe8c 	uxth.w	lr, ip
 8000f66:	2601      	movs	r6, #1
 8000f68:	0c20      	lsrs	r0, r4, #16
 8000f6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f76:	fb0e f003 	mul.w	r0, lr, r3
 8000f7a:	4288      	cmp	r0, r1
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x12c>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x12a>
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	f200 80cb 	bhi.w	8001124 <__udivmoddi4+0x2c0>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f98:	fb07 1110 	mls	r1, r7, r0, r1
 8000f9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fa0:	fb0e fe00 	mul.w	lr, lr, r0
 8000fa4:	45a6      	cmp	lr, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x156>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d202      	bcs.n	8000fb8 <__udivmoddi4+0x154>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f200 80bb 	bhi.w	800112e <__udivmoddi4+0x2ca>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	eba4 040e 	sub.w	r4, r4, lr
 8000fbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fc2:	e79c      	b.n	8000efe <__udivmoddi4+0x9a>
 8000fc4:	f1c6 0720 	rsb	r7, r6, #32
 8000fc8:	40b3      	lsls	r3, r6
 8000fca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fd2:	fa20 f407 	lsr.w	r4, r0, r7
 8000fd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	40f9      	lsrs	r1, r7
 8000fde:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fe2:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fea:	0c20      	lsrs	r0, r4, #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ff4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ff8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ffc:	4288      	cmp	r0, r1
 8000ffe:	fa02 f206 	lsl.w	r2, r2, r6
 8001002:	d90b      	bls.n	800101c <__udivmoddi4+0x1b8>
 8001004:	eb1c 0101 	adds.w	r1, ip, r1
 8001008:	f108 3aff 	add.w	sl, r8, #4294967295
 800100c:	f080 8088 	bcs.w	8001120 <__udivmoddi4+0x2bc>
 8001010:	4288      	cmp	r0, r1
 8001012:	f240 8085 	bls.w	8001120 <__udivmoddi4+0x2bc>
 8001016:	f1a8 0802 	sub.w	r8, r8, #2
 800101a:	4461      	add	r1, ip
 800101c:	1a09      	subs	r1, r1, r0
 800101e:	b2a4      	uxth	r4, r4
 8001020:	fbb1 f0f9 	udiv	r0, r1, r9
 8001024:	fb09 1110 	mls	r1, r9, r0, r1
 8001028:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800102c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001030:	458e      	cmp	lr, r1
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x1e2>
 8001034:	eb1c 0101 	adds.w	r1, ip, r1
 8001038:	f100 34ff 	add.w	r4, r0, #4294967295
 800103c:	d26c      	bcs.n	8001118 <__udivmoddi4+0x2b4>
 800103e:	458e      	cmp	lr, r1
 8001040:	d96a      	bls.n	8001118 <__udivmoddi4+0x2b4>
 8001042:	3802      	subs	r0, #2
 8001044:	4461      	add	r1, ip
 8001046:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800104a:	fba0 9402 	umull	r9, r4, r0, r2
 800104e:	eba1 010e 	sub.w	r1, r1, lr
 8001052:	42a1      	cmp	r1, r4
 8001054:	46c8      	mov	r8, r9
 8001056:	46a6      	mov	lr, r4
 8001058:	d356      	bcc.n	8001108 <__udivmoddi4+0x2a4>
 800105a:	d053      	beq.n	8001104 <__udivmoddi4+0x2a0>
 800105c:	b15d      	cbz	r5, 8001076 <__udivmoddi4+0x212>
 800105e:	ebb3 0208 	subs.w	r2, r3, r8
 8001062:	eb61 010e 	sbc.w	r1, r1, lr
 8001066:	fa01 f707 	lsl.w	r7, r1, r7
 800106a:	fa22 f306 	lsr.w	r3, r2, r6
 800106e:	40f1      	lsrs	r1, r6
 8001070:	431f      	orrs	r7, r3
 8001072:	e9c5 7100 	strd	r7, r1, [r5]
 8001076:	2600      	movs	r6, #0
 8001078:	4631      	mov	r1, r6
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	f1c2 0320 	rsb	r3, r2, #32
 8001082:	40d8      	lsrs	r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	fa21 f303 	lsr.w	r3, r1, r3
 800108c:	4091      	lsls	r1, r2
 800108e:	4301      	orrs	r1, r0
 8001090:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001094:	fa1f fe8c 	uxth.w	lr, ip
 8001098:	fbb3 f0f7 	udiv	r0, r3, r7
 800109c:	fb07 3610 	mls	r6, r7, r0, r3
 80010a0:	0c0b      	lsrs	r3, r1, #16
 80010a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010a6:	fb00 f60e 	mul.w	r6, r0, lr
 80010aa:	429e      	cmp	r6, r3
 80010ac:	fa04 f402 	lsl.w	r4, r4, r2
 80010b0:	d908      	bls.n	80010c4 <__udivmoddi4+0x260>
 80010b2:	eb1c 0303 	adds.w	r3, ip, r3
 80010b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80010ba:	d22f      	bcs.n	800111c <__udivmoddi4+0x2b8>
 80010bc:	429e      	cmp	r6, r3
 80010be:	d92d      	bls.n	800111c <__udivmoddi4+0x2b8>
 80010c0:	3802      	subs	r0, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1b9b      	subs	r3, r3, r6
 80010c6:	b289      	uxth	r1, r1
 80010c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80010cc:	fb07 3316 	mls	r3, r7, r6, r3
 80010d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010d4:	fb06 f30e 	mul.w	r3, r6, lr
 80010d8:	428b      	cmp	r3, r1
 80010da:	d908      	bls.n	80010ee <__udivmoddi4+0x28a>
 80010dc:	eb1c 0101 	adds.w	r1, ip, r1
 80010e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80010e4:	d216      	bcs.n	8001114 <__udivmoddi4+0x2b0>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d914      	bls.n	8001114 <__udivmoddi4+0x2b0>
 80010ea:	3e02      	subs	r6, #2
 80010ec:	4461      	add	r1, ip
 80010ee:	1ac9      	subs	r1, r1, r3
 80010f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010f4:	e738      	b.n	8000f68 <__udivmoddi4+0x104>
 80010f6:	462e      	mov	r6, r5
 80010f8:	4628      	mov	r0, r5
 80010fa:	e705      	b.n	8000f08 <__udivmoddi4+0xa4>
 80010fc:	4606      	mov	r6, r0
 80010fe:	e6e3      	b.n	8000ec8 <__udivmoddi4+0x64>
 8001100:	4618      	mov	r0, r3
 8001102:	e6f8      	b.n	8000ef6 <__udivmoddi4+0x92>
 8001104:	454b      	cmp	r3, r9
 8001106:	d2a9      	bcs.n	800105c <__udivmoddi4+0x1f8>
 8001108:	ebb9 0802 	subs.w	r8, r9, r2
 800110c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001110:	3801      	subs	r0, #1
 8001112:	e7a3      	b.n	800105c <__udivmoddi4+0x1f8>
 8001114:	4646      	mov	r6, r8
 8001116:	e7ea      	b.n	80010ee <__udivmoddi4+0x28a>
 8001118:	4620      	mov	r0, r4
 800111a:	e794      	b.n	8001046 <__udivmoddi4+0x1e2>
 800111c:	4640      	mov	r0, r8
 800111e:	e7d1      	b.n	80010c4 <__udivmoddi4+0x260>
 8001120:	46d0      	mov	r8, sl
 8001122:	e77b      	b.n	800101c <__udivmoddi4+0x1b8>
 8001124:	3b02      	subs	r3, #2
 8001126:	4461      	add	r1, ip
 8001128:	e732      	b.n	8000f90 <__udivmoddi4+0x12c>
 800112a:	4630      	mov	r0, r6
 800112c:	e709      	b.n	8000f42 <__udivmoddi4+0xde>
 800112e:	4464      	add	r4, ip
 8001130:	3802      	subs	r0, #2
 8001132:	e742      	b.n	8000fba <__udivmoddi4+0x156>

08001134 <__aeabi_idiv0>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <flashWrite>:

	}
}

void flashWrite(uint8_t* write_array, int write_array_size, uint8_t* label)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ce      	sub	sp, #312	; 0x138
 800113c:	af00      	add	r7, sp, #0
 800113e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800114c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001156:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800115a:	601a      	str	r2, [r3, #0]
	uint32_t current_addr = current_block * 64 * 1024;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <flashWrite+0x100>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	if(BSP_QSPI_Erase_Block(current_addr) != QSPI_OK) Error_Handler();
 8001166:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800116a:	f001 f9d3 	bl	8002514 <BSP_QSPI_Erase_Block>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <flashWrite+0x40>
 8001174:	f000 fecc 	bl	8001f10 <Error_Handler>
	if(BSP_QSPI_Write(&label, current_addr, 1) != QSPI_OK) Error_Handler();
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2201      	movs	r2, #1
 800117c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001180:	4618      	mov	r0, r3
 8001182:	f001 f941 	bl	8002408 <BSP_QSPI_Write>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <flashWrite+0x58>
 800118c:	f000 fec0 	bl	8001f10 <Error_Handler>
	uint8_t label_read[1];
	if(BSP_QSPI_Read(&label_read, current_addr, 1)!= QSPI_OK) Error_Handler();
 8001190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001194:	2201      	movs	r2, #1
 8001196:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f8e2 	bl	8002364 <BSP_QSPI_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <flashWrite+0x72>
 80011a6:	f000 feb3 	bl	8001f10 <Error_Handler>
	current_addr += 1;
 80011aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011ae:	3301      	adds	r3, #1
 80011b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	if(BSP_QSPI_Write(write_array, current_addr, 288) != QSPI_OK) Error_Handler();
 80011b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011bc:	f44f 7290 	mov.w	r2, #288	; 0x120
 80011c0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f001 f91f 	bl	8002408 <BSP_QSPI_Write>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <flashWrite+0x9c>
 80011d0:	f000 fe9e 	bl	8001f10 <Error_Handler>
	uint8_t arr_cp[288];
	if(BSP_QSPI_Read(arr_cp, current_addr, 288)!= QSPI_OK) Error_Handler();
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80011dc:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 f8bf 	bl	8002364 <BSP_QSPI_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <flashWrite+0xb8>
 80011ec:	f000 fe90 	bl	8001f10 <Error_Handler>
	++current_block;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <flashWrite+0x100>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <flashWrite+0x100>)
 80011fa:	701a      	strb	r2, [r3, #0]
	if(BSP_QSPI_Erase_Block(0x00) != QSPI_OK) Error_Handler();
 80011fc:	2000      	movs	r0, #0
 80011fe:	f001 f989 	bl	8002514 <BSP_QSPI_Erase_Block>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <flashWrite+0xd4>
 8001208:	f000 fe82 	bl	8001f10 <Error_Handler>
	++num_samples;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <flashWrite+0x104>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <flashWrite+0x104>)
 8001216:	701a      	strb	r2, [r3, #0]
	if(BSP_QSPI_Write(&num_samples, 0x00, sizeof(num_samples)) != QSPI_OK) Error_Handler();
 8001218:	2201      	movs	r2, #1
 800121a:	2100      	movs	r1, #0
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <flashWrite+0x104>)
 800121e:	f001 f8f3 	bl	8002408 <BSP_QSPI_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <flashWrite+0xf4>
 8001228:	f000 fe72 	bl	8001f10 <Error_Handler>
}
 800122c:	bf00      	nop
 800122e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001d8 	.word	0x200001d8
 800123c:	20001f10 	.word	0x20001f10

08001240 <FlashRead>:


void FlashRead()
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b0dd      	sub	sp, #372	; 0x174
 8001244:	af02      	add	r7, sp, #8
	uint8_t num_samples;
	if(BSP_QSPI_Read(&num_samples, 0x00, sizeof(num_samples))!= QSPI_OK) Error_Handler();
 8001246:	f207 135b 	addw	r3, r7, #347	; 0x15b
 800124a:	2201      	movs	r2, #1
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f888 	bl	8002364 <BSP_QSPI_Read>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <FlashRead+0x1e>
 800125a:	f000 fe59 	bl	8001f10 <Error_Handler>
	for (int i=1; i<=num_samples; ++i)
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001264:	e0a1      	b.n	80013aa <FlashRead+0x16a>
	{
		uint32_t addr = i * 64 * 1024;
 8001266:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		uint8_t current_label;
		if(BSP_QSPI_Read(&current_label, addr, sizeof(current_label))!= QSPI_OK) Error_Handler();
 8001270:	f507 73ad 	add.w	r3, r7, #346	; 0x15a
 8001274:	2201      	movs	r2, #1
 8001276:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800127a:	4618      	mov	r0, r3
 800127c:	f001 f872 	bl	8002364 <BSP_QSPI_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <FlashRead+0x4a>
 8001286:	f000 fe43 	bl	8001f10 <Error_Handler>
		addr += sizeof(current_label);
 800128a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		uint8_t arr[288];
		if(BSP_QSPI_Read(arr, addr, sizeof(arr))!= QSPI_OK) Error_Handler();
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	f44f 7290 	mov.w	r2, #288	; 0x120
 800129a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f860 	bl	8002364 <BSP_QSPI_Read>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <FlashRead+0x6e>
 80012aa:	f000 fe31 	bl	8001f10 <Error_Handler>
		char task_dsc[30] = "";
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	831a      	strh	r2, [r3, #24]
		sprintf(task_dsc, "\r\n %s \r\n", output_labels[current_label]);
 80012c8:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <FlashRead+0x188>)
 80012d8:	441a      	add	r2, r3
 80012da:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80012de:	493b      	ldr	r1, [pc, #236]	; (80013cc <FlashRead+0x18c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00e fcb7 	bl	800fc54 <siprintf>
		HAL_UART_Transmit(&huart1, task_dsc, sizeof(task_dsc), HAL_MAX_DELAY);
 80012e6:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	221e      	movs	r2, #30
 80012f0:	4837      	ldr	r0, [pc, #220]	; (80013d0 <FlashRead+0x190>)
 80012f2:	f006 fb99 	bl	8007a28 <HAL_UART_Transmit>
		for (int j=0; j<288/3; ++j)
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80012fc:	e040      	b.n	8001380 <FlashRead+0x140>
		{
			char current_line[20] = "";
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001304:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
			sprintf(current_line, "\r\n%d, %d, %d", arr[j*3], arr[j*3+1],arr[j*3+2]);
 8001312:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001320:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	4619      	mov	r1, r3
 8001328:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	3301      	adds	r3, #1
 8001334:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001338:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	461c      	mov	r4, r3
 8001340:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3302      	adds	r3, #2
 800134c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001350:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4623      	mov	r3, r4
 800135e:	460a      	mov	r2, r1
 8001360:	491c      	ldr	r1, [pc, #112]	; (80013d4 <FlashRead+0x194>)
 8001362:	f00e fc77 	bl	800fc54 <siprintf>
			HAL_UART_Transmit(&huart1, current_line, sizeof(current_line), HAL_MAX_DELAY);
 8001366:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2214      	movs	r2, #20
 8001370:	4817      	ldr	r0, [pc, #92]	; (80013d0 <FlashRead+0x190>)
 8001372:	f006 fb59 	bl	8007a28 <HAL_UART_Transmit>
		for (int j=0; j<288/3; ++j)
 8001376:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800137a:	3301      	adds	r3, #1
 800137c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001380:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001384:	2b5f      	cmp	r3, #95	; 0x5f
 8001386:	ddba      	ble.n	80012fe <FlashRead+0xbe>
		}
		char newline[2] = "\r\n";
 8001388:	f640 230d 	movw	r3, #2573	; 0xa0d
 800138c:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8001390:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	2202      	movs	r2, #2
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <FlashRead+0x190>)
 800139c:	f006 fb44 	bl	8007a28 <HAL_UART_Transmit>
	for (int i=1; i<=num_samples; ++i)
 80013a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013a4:	3301      	adds	r3, #1
 80013a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80013aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80013ae:	461a      	mov	r2, r3
 80013b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f77f af56 	ble.w	8001266 <FlashRead+0x26>
	}
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	08012400 	.word	0x08012400
 80013d0:	20000ed0 	.word	0x20000ed0
 80013d4:	0801240c 	.word	0x0801240c

080013d8 <aiInit>:

int aiInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <aiInit+0x54>)
 80013e0:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <aiInit+0x58>)
 80013ea:	f007 fbbd 	bl	8008b68 <ai_network_create_and_init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {return 1;}
 80013f2:	793b      	ldrb	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <aiInit+0x24>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e012      	b.n	8001422 <aiInit+0x4a>

  /* Receive pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network, NULL);
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <aiInit+0x58>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f007 fc24 	bl	8008c50 <ai_network_inputs_get>
 8001408:	4603      	mov	r3, r0
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <aiInit+0x5c>)
 800140c:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <aiInit+0x58>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f007 fc35 	bl	8008c84 <ai_network_outputs_get>
 800141a:	4603      	mov	r3, r0
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <aiInit+0x60>)
 800141e:	6013      	str	r3, [r2, #0]

  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000f80 	.word	0x20000f80
 8001430:	20000f60 	.word	0x20000f60
 8001434:	20001c00 	.word	0x20001c00
 8001438:	20001c04 	.word	0x20001c04

0800143c <aiRun>:

int aiRun(const void *in_data, void *out_data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;
  ai_error err;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <aiRun+0x54>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <aiRun+0x58>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <aiRun+0x5c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <aiRun+0x54>)
 800145c:	6811      	ldr	r1, [r2, #0]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <aiRun+0x58>)
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 fc64 	bl	8008d30 <ai_network_run>
 8001468:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d009      	beq.n	8001484 <aiRun+0x48>
      err = ai_network_get_error(network);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <aiRun+0x5c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fb55 	bl	8008b24 <ai_network_get_error>
 800147a:	4603      	mov	r3, r0
 800147c:	60bb      	str	r3, [r7, #8]
      return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e000      	b.n	8001486 <aiRun+0x4a>
  };

  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20001c00 	.word	0x20001c00
 8001494:	20001c04 	.word	0x20001c04
 8001498:	20000f60 	.word	0x20000f60

0800149c <formatOutputFromResult>:

int formatOutputFromResult(uint32_t classification_result, uint32_t time_ms, uint8_t movement_changed)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0aa      	sub	sp, #168	; 0xa8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	71fb      	strb	r3, [r7, #7]
	char output_string[70] = "";
 80014aa:	2300      	movs	r3, #0
 80014ac:	663b      	str	r3, [r7, #96]	; 0x60
 80014ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014b2:	2242      	movs	r2, #66	; 0x42
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d fe6a 	bl	800f190 <memset>
	char interbuf[70] = "";
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2242      	movs	r2, #66	; 0x42
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00d fe61 	bl	800f190 <memset>
	if(movement_changed)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <formatOutputFromResult+0x54>
	{
		sprintf(output_string, "%s", output_labels[classification_result]);
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <formatOutputFromResult+0xd8>)
 80014e0:	441a      	add	r2, r3
 80014e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014e6:	4924      	ldr	r1, [pc, #144]	; (8001578 <formatOutputFromResult+0xdc>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00e fbb3 	bl	800fc54 <siprintf>
 80014ee:	e033      	b.n	8001558 <formatOutputFromResult+0xbc>
	}else{
		sprintf(output_string, "%s for %d seconds", output_labels[classification_result], time_ms/1000);
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4613      	mov	r3, r2
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <formatOutputFromResult+0xd8>)
 80014fc:	441a      	add	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	491e      	ldr	r1, [pc, #120]	; (800157c <formatOutputFromResult+0xe0>)
 8001502:	fba1 1303 	umull	r1, r3, r1, r3
 8001506:	099b      	lsrs	r3, r3, #6
 8001508:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800150c:	491c      	ldr	r1, [pc, #112]	; (8001580 <formatOutputFromResult+0xe4>)
 800150e:	f00e fba1 	bl	800fc54 <siprintf>
		char clear_line[] = "\x1B[2K\r"; // escape code to clear line
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <formatOutputFromResult+0xe8>)
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151c:	6018      	str	r0, [r3, #0]
 800151e:	3304      	adds	r3, #4
 8001520:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)clear_line, strlen(clear_line), HAL_MAX_DELAY);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	b29a      	uxth	r2, r3
 8001530:	f107 0110 	add.w	r1, r7, #16
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <formatOutputFromResult+0xec>)
 800153a:	f006 fa75 	bl	8007a28 <HAL_UART_Transmit>
		strcpy(interbuf, output_labels[classification_result]);
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4613      	mov	r3, r2
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <formatOutputFromResult+0xd8>)
 800154a:	441a      	add	r2, r3
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f00e fb9e 	bl	800fc94 <strcpy>
	}
	HAL_UART_Transmit(&huart1, output_string, sizeof(output_string), HAL_MAX_DELAY);
 8001558:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2246      	movs	r2, #70	; 0x46
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <formatOutputFromResult+0xec>)
 8001564:	f006 fa60 	bl	8007a28 <HAL_UART_Transmit>

	return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	37a8      	adds	r7, #168	; 0xa8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	0801241c 	.word	0x0801241c
 800157c:	10624dd3 	.word	0x10624dd3
 8001580:	08012420 	.word	0x08012420
 8001584:	08012434 	.word	0x08012434
 8001588:	20000ed0 	.word	0x20000ed0

0800158c <getUserInput>:

uint8_t getUserInput(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0a0      	sub	sp, #128	; 0x80
 8001590:	af00      	add	r7, sp, #0
	char prompt[40] = "", first_task[40] = "";
 8001592:	2300      	movs	r3, #0
 8001594:	657b      	str	r3, [r7, #84]	; 0x54
 8001596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800159a:	2224      	movs	r2, #36	; 0x24
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00d fdf6 	bl	800f190 <memset>
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00d fded 	bl	800f190 <memset>
	sprintf(prompt, "Enter the task number as follows:\r\n");
 80015b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ba:	492f      	ldr	r1, [pc, #188]	; (8001678 <getUserInput+0xec>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00e fb49 	bl	800fc54 <siprintf>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80015c2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	2228      	movs	r2, #40	; 0x28
 80015cc:	482b      	ldr	r0, [pc, #172]	; (800167c <getUserInput+0xf0>)
 80015ce:	f006 fa2b 	bl	8007a28 <HAL_UART_Transmit>
	//HAL_Delay(200);
	sprintf(first_task, "%02d - %s\r\n", 0, "TO TRANSMIT TRHOUGH UART");
 80015d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <getUserInput+0xf4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	492a      	ldr	r1, [pc, #168]	; (8001684 <getUserInput+0xf8>)
 80015dc:	f00e fb3a 	bl	800fc54 <siprintf>
	HAL_UART_Transmit(&huart1, first_task, sizeof(first_task), HAL_MAX_DELAY);
 80015e0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	2228      	movs	r2, #40	; 0x28
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <getUserInput+0xf0>)
 80015ec:	f006 fa1c 	bl	8007a28 <HAL_UART_Transmit>
	for (int i=0; i<14; ++i)
 80015f0:	2300      	movs	r3, #0
 80015f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015f4:	e01f      	b.n	8001636 <getUserInput+0xaa>
	{
		char task[40] = "";
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2224      	movs	r2, #36	; 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00d fdc5 	bl	800f190 <memset>
		sprintf(task, "%02d - %s\r\n", i+1, output_labels[i]);
 8001606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001608:	1c59      	adds	r1, r3, #1
 800160a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800160c:	4613      	mov	r3, r2
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <getUserInput+0xfc>)
 8001616:	4413      	add	r3, r2
 8001618:	4638      	mov	r0, r7
 800161a:	460a      	mov	r2, r1
 800161c:	4919      	ldr	r1, [pc, #100]	; (8001684 <getUserInput+0xf8>)
 800161e:	f00e fb19 	bl	800fc54 <siprintf>
		HAL_UART_Transmit(&huart1, task, sizeof(task), HAL_MAX_DELAY);
 8001622:	4639      	mov	r1, r7
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	2228      	movs	r2, #40	; 0x28
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <getUserInput+0xf0>)
 800162c:	f006 f9fc 	bl	8007a28 <HAL_UART_Transmit>
	for (int i=0; i<14; ++i)
 8001630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001632:	3301      	adds	r3, #1
 8001634:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001638:	2b0d      	cmp	r3, #13
 800163a:	dddc      	ble.n	80015f6 <getUserInput+0x6a>
		//HAL_Delay();
	}
	char response[2] = "";
 800163c:	2300      	movs	r3, #0
 800163e:	853b      	strh	r3, [r7, #40]	; 0x28
	HAL_UART_Receive(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8001640:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	2202      	movs	r2, #2
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <getUserInput+0xf0>)
 800164c:	f006 fa83 	bl	8007b56 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8001650:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	2202      	movs	r2, #2
 800165a:	4808      	ldr	r0, [pc, #32]	; (800167c <getUserInput+0xf0>)
 800165c:	f006 f9e4 	bl	8007a28 <HAL_UART_Transmit>
	return atoi(response);
 8001660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001664:	4618      	mov	r0, r3
 8001666:	f00d fd4f 	bl	800f108 <atoi>
 800166a:	4603      	mov	r3, r0
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	3780      	adds	r7, #128	; 0x80
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	0801243c 	.word	0x0801243c
 800167c:	20000ed0 	.word	0x20000ed0
 8001680:	08012460 	.word	0x08012460
 8001684:	0801247c 	.word	0x0801247c
 8001688:	20000000 	.word	0x20000000

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8001692:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f001 fe56 	bl	8003344 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_fir_init_f32(&x_instance, WINDOW_SIZE, coeff, x_state, 1);
 8001698:	2301      	movs	r3, #1
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <main+0x20c>)
 800169e:	4a7f      	ldr	r2, [pc, #508]	; (800189c <main+0x210>)
 80016a0:	210a      	movs	r1, #10
 80016a2:	487f      	ldr	r0, [pc, #508]	; (80018a0 <main+0x214>)
 80016a4:	f00d faa0 	bl	800ebe8 <arm_fir_init_f32>
  arm_fir_init_f32(&y_instance, WINDOW_SIZE, coeff, y_state, 1);
 80016a8:	2301      	movs	r3, #1
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <main+0x218>)
 80016ae:	4a7b      	ldr	r2, [pc, #492]	; (800189c <main+0x210>)
 80016b0:	210a      	movs	r1, #10
 80016b2:	487d      	ldr	r0, [pc, #500]	; (80018a8 <main+0x21c>)
 80016b4:	f00d fa98 	bl	800ebe8 <arm_fir_init_f32>
  arm_fir_init_f32(&z_instance, WINDOW_SIZE, coeff, z_state, 1);
 80016b8:	2301      	movs	r3, #1
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <main+0x220>)
 80016be:	4a77      	ldr	r2, [pc, #476]	; (800189c <main+0x210>)
 80016c0:	210a      	movs	r1, #10
 80016c2:	487b      	ldr	r0, [pc, #492]	; (80018b0 <main+0x224>)
 80016c4:	f00d fa90 	bl	800ebe8 <arm_fir_init_f32>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c8:	f000 f910 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016cc:	f000 fa8a 	bl	8001be4 <MX_GPIO_Init>
  MX_CRC_Init();
 80016d0:	f000 f95e 	bl	8001990 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80016d4:	f000 fa3a 	bl	8001b4c <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80016d8:	f000 fa12 	bl	8001b00 <MX_TIM17_Init>
  MX_I2C2_Init();
 80016dc:	f000 f97a 	bl	80019d4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80016e0:	f000 f9b8 	bl	8001a54 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  aiInit();
 80016e4:	f7ff fe78 	bl	80013d8 <aiInit>
  BSP_ACCELERO_Init();
 80016e8:	f000 fd68 	bl	80021bc <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 80016ec:	f000 fdbc 	bl	8002268 <BSP_QSPI_Init>
  // resetQSPIFlash();

  // On startup, read from the last sector to know where the
  // processor left off

  uint8_t in_data[288] = {38,40,48,38,40,48,40,41,46,40,45,45,41,43,42,39,48,43,38,48,42,38,45,41,37,42,40,34,46,43,33,44,43,32,44,45,28,46,46,26,43,45,22,51,51,
 80016f0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80016f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016f8:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <main+0x228>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	4611      	mov	r1, r2
 80016fe:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001702:	461a      	mov	r2, r3
 8001704:	f00d fd36 	bl	800f174 <memcpy>
   							  33,17,38,36,16,38,35,18,38,35,18,38,36,19,39,36,18,39,36,17,38,35,16,40,35,14,41,35,14,42,35,13,43,35,10,43,36,11,41,35,9,43,35,3,46,
   							  35,8,44,35,13,42,37,14,42,35,13,41,33,12,39,31,15,39,32,15,41,32,15,42,32,16,40,31,16,41,32,17,39,31,18,41,32,17,41,31,17,40,32,15,40,
   							  33,14,42,33,11,42,33,9,41,33,8,43,33,2,43,32};


  HAL_TIM_Base_Start_IT(&htim17);
 8001708:	486b      	ldr	r0, [pc, #428]	; (80018b8 <main+0x22c>)
 800170a:	f005 fe9f 	bl	800744c <HAL_TIM_Base_Start_IT>
		//		data_Transmitted[i] = x_Current;
		//		data_Transmitted[i+1] = y_Current;
		//		data_Transmitted[i+2] = z_Current;
		//		i+=3;

	  uint8_t in_data[288] = {38,40,48,38,40,48,40,41,46,40,45,45,41,43,42,39,48,43,38,48,42,38,45,41,37,42,40,34,46,43,33,44,43,32,44,45,28,46,46,26,43,45,22,51,51,
 800170e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001712:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001716:	4a67      	ldr	r2, [pc, #412]	; (80018b4 <main+0x228>)
 8001718:	4618      	mov	r0, r3
 800171a:	4611      	mov	r1, r2
 800171c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001720:	461a      	mov	r2, r3
 8001722:	f00d fd27 	bl	800f174 <memcpy>
							  40,31,17,41,32,17,40,31,17,41,32,14,40,31,11,43,32,9,41,31,6,44,32,4,45,32,2,44,33,5,42,31,14,38,33,17,39,34,13,40,35,13,38,34,14,37,
							  33,17,38,36,16,38,35,18,38,35,18,38,36,19,39,36,18,39,36,17,38,35,16,40,35,14,41,35,14,42,35,13,43,35,10,43,36,11,41,35,9,43,35,3,46,
							  35,8,44,35,13,42,37,14,42,35,13,41,33,12,39,31,15,39,32,15,41,32,15,42,32,16,40,31,16,41,32,17,39,31,18,41,32,17,41,31,17,40,32,15,40,
							  33,14,42,33,11,42,33,9,41,33,8,43,33,2,43,32};

	  char test_buf[10] = "";
 8001726:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800172a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	3304      	adds	r3, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	809a      	strh	r2, [r3, #4]
	  if(array_ready)
 800173a:	4b60      	ldr	r3, [pc, #384]	; (80018bc <main+0x230>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <main+0xe2>
	  {
		  HAL_TIM_Base_Stop_IT(&htim17);
 8001744:	485c      	ldr	r0, [pc, #368]	; (80018b8 <main+0x22c>)
 8001746:	f005 fef1 	bl	800752c <HAL_TIM_Base_Stop_IT>
//		  for (int i=0;i < (sizeof (current_Data) /sizeof (current_Data[0]));i++) {
//				  sprintf(test_buf, "%d,",current_Data[i]);
//				  HAL_UART_Transmit(&huart1, (uint8_t *)test_buf, sizeof(test_buf), HAL_MAX_DELAY);
//			  }
		  memcpy(copied_Data, current_Data, 288);
 800174a:	4a5d      	ldr	r2, [pc, #372]	; (80018c0 <main+0x234>)
 800174c:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <main+0x238>)
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001756:	461a      	mov	r2, r3
 8001758:	f00d fd0c 	bl	800f174 <memcpy>
		  array_idx = 0;
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <main+0x23c>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
		  array_ready = 0;
 8001762:	4b56      	ldr	r3, [pc, #344]	; (80018bc <main+0x230>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim17);
 8001768:	4853      	ldr	r0, [pc, #332]	; (80018b8 <main+0x22c>)
 800176a:	f005 fe6f 	bl	800744c <HAL_TIM_Base_Start_IT>
	  }

	if (mode == SAMPLE)
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <main+0x240>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d156      	bne.n	8001826 <main+0x19a>
	{
//		uint8_t buftemp[10] = "";
//		sprintf(buftemp, "\r\n");
//		HAL_UART_Transmit(&huart1, buftemp, sizeof(buftemp), HAL_MAX_DELAY);
		uint8_t userVal = getUserInput();
 8001778:	f7ff ff08 	bl	800158c <getUserInput>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001784:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8001788:	701a      	strb	r2, [r3, #0]
		if(userVal == 0)
 800178a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800178e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <main+0x112>
		{
			FlashRead();
 8001798:	f7ff fd52 	bl	8001240 <FlashRead>
 800179c:	e7b7      	b.n	800170e <main+0x82>
		}else{
			char ack[70] = "";
 800179e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80017a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	3304      	adds	r3, #4
 80017ac:	2242      	movs	r2, #66	; 0x42
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00d fced 	bl	800f190 <memset>
					sprintf(ack, "\r\nSaving last 3 seconds with label: %02d\r\n", userVal);
 80017b6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80017ba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4942      	ldr	r1, [pc, #264]	; (80018d0 <main+0x244>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00e fa43 	bl	800fc54 <siprintf>
					HAL_UART_Transmit(&huart1, ack, sizeof(ack), HAL_MAX_DELAY);
 80017ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	2246      	movs	r2, #70	; 0x46
 80017d8:	483e      	ldr	r0, [pc, #248]	; (80018d4 <main+0x248>)
 80017da:	f006 f925 	bl	8007a28 <HAL_UART_Transmit>
					// Insert code to actually record
					flashWrite(copied_Data, 288, &userVal);
 80017de:	f207 1397 	addw	r3, r7, #407	; 0x197
 80017e2:	461a      	mov	r2, r3
 80017e4:	f44f 7190 	mov.w	r1, #288	; 0x120
 80017e8:	4835      	ldr	r0, [pc, #212]	; (80018c0 <main+0x234>)
 80017ea:	f7ff fca5 	bl	8001138 <flashWrite>
					// while(BSP_QSPI_GetStatus() != QSPI_OK){};
					char fin[40] = "";
 80017ee:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80017f2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	3304      	adds	r3, #4
 80017fc:	2224      	movs	r2, #36	; 0x24
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00d fcc5 	bl	800f190 <memset>
					sprintf(fin, "\r\nDone!\n");
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4933      	ldr	r1, [pc, #204]	; (80018d8 <main+0x24c>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00e fa22 	bl	800fc54 <siprintf>
					HAL_UART_Transmit(&huart1, fin, sizeof(fin), HAL_MAX_DELAY);
 8001810:	1d39      	adds	r1, r7, #4
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	2228      	movs	r2, #40	; 0x28
 8001818:	482e      	ldr	r0, [pc, #184]	; (80018d4 <main+0x248>)
 800181a:	f006 f905 	bl	8007a28 <HAL_UART_Transmit>
					mode = INFER;
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <main+0x240>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e773      	b.n	800170e <main+0x82>
		}
	} else
	{
		// Do inference
		float out_data[14];
			  aiRun(copied_Data, out_data);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4824      	ldr	r0, [pc, #144]	; (80018c0 <main+0x234>)
 800182e:	f7ff fe05 	bl	800143c <aiRun>

			  // Get the index of the maximum of the final activation layer
			  arm_max_f32(out_data, 14, NULL, &current_movement);
 8001832:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <main+0x250>)
 8001838:	2200      	movs	r2, #0
 800183a:	210e      	movs	r1, #14
 800183c:	f00d f968 	bl	800eb10 <arm_max_f32>

			  uint8_t movement_changed = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7

			  if(current_movement == previous_movement)
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <main+0x250>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <main+0x254>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d10b      	bne.n	800186a <main+0x1de>
			  {
				  current_movement_duration = (HAL_GetTick() - movement_started);
 8001852:	f001 fda3 	bl	800339c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <main+0x258>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <main+0x25c>)
 8001860:	6013      	str	r3, [r2, #0]
				  movement_changed = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
 8001868:	e00b      	b.n	8001882 <main+0x1f6>
			  }else{
				  previous_movement = current_movement;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <main+0x250>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <main+0x254>)
 8001870:	6013      	str	r3, [r2, #0]
				  movement_started = HAL_GetTick();
 8001872:	f001 fd93 	bl	800339c <HAL_GetTick>
 8001876:	4603      	mov	r3, r0
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <main+0x258>)
 800187a:	6013      	str	r3, [r2, #0]
				  movement_changed = 1;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
			  }

			  formatOutputFromResult(current_movement, current_movement_duration, movement_changed);
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <main+0x250>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <main+0x25c>)
 8001888:	6811      	ldr	r1, [r2, #0]
 800188a:	f897 22c7 	ldrb.w	r2, [r7, #711]	; 0x2c7
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe04 	bl	800149c <formatOutputFromResult>
  {
 8001894:	e73b      	b.n	800170e <main+0x82>
 8001896:	bf00      	nop
 8001898:	20001c0c 	.word	0x20001c0c
 800189c:	200001a4 	.word	0x200001a4
 80018a0:	20001ecc 	.word	0x20001ecc
 80018a4:	20001c34 	.word	0x20001c34
 80018a8:	20001ed8 	.word	0x20001ed8
 80018ac:	20001c5c 	.word	0x20001c5c
 80018b0:	20001ee4 	.word	0x20001ee4
 80018b4:	080124c0 	.word	0x080124c0
 80018b8:	20000e84 	.word	0x20000e84
 80018bc:	20001c88 	.word	0x20001c88
 80018c0:	20001dac 	.word	0x20001dac
 80018c4:	20001c8c 	.word	0x20001c8c
 80018c8:	20001c84 	.word	0x20001c84
 80018cc:	20001c08 	.word	0x20001c08
 80018d0:	08012488 	.word	0x08012488
 80018d4:	20000ed0 	.word	0x20000ed0
 80018d8:	080124b4 	.word	0x080124b4
 80018dc:	200001cc 	.word	0x200001cc
 80018e0:	200001d0 	.word	0x200001d0
 80018e4:	20001ef0 	.word	0x20001ef0
 80018e8:	20001ef4 	.word	0x20001ef4

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b096      	sub	sp, #88	; 0x58
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2244      	movs	r2, #68	; 0x44
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00d fc48 	bl	800f190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800190e:	2000      	movs	r0, #0
 8001910:	f004 f87e 	bl	8005a10 <HAL_PWREx_ControlVoltageScaling>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800191a:	f000 faf9 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800191e:	2310      	movs	r3, #16
 8001920:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001922:	2301      	movs	r3, #1
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800192a:	2360      	movs	r3, #96	; 0x60
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001932:	2301      	movs	r3, #1
 8001934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800193a:	233c      	movs	r3, #60	; 0x3c
 800193c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800193e:	2302      	movs	r3, #2
 8001940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001942:	2302      	movs	r3, #2
 8001944:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001946:	2302      	movs	r3, #2
 8001948:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4618      	mov	r0, r3
 8001950:	f004 f902 	bl	8005b58 <HAL_RCC_OscConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800195a:	f000 fad9 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195e:	230f      	movs	r3, #15
 8001960:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001962:	2303      	movs	r3, #3
 8001964:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	2105      	movs	r1, #5
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fd08 	bl	800638c <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001982:	f000 fac5 	bl	8001f10 <Error_Handler>
  }
}
 8001986:	bf00      	nop
 8001988:	3758      	adds	r7, #88	; 0x58
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_CRC_Init+0x3c>)
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <MX_CRC_Init+0x40>)
 8001998:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_CRC_Init+0x3c>)
 800199c:	2200      	movs	r2, #0
 800199e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_CRC_Init+0x3c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_CRC_Init+0x3c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <MX_CRC_Init+0x3c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_CRC_Init+0x3c>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_CRC_Init+0x3c>)
 80019ba:	f001 fddd 	bl	8003578 <HAL_CRC_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80019c4:	f000 faa4 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000dbc 	.word	0x20000dbc
 80019d0:	40023000 	.word	0x40023000

080019d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_I2C2_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_I2C2_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a10:	f002 f938 	bl	8003c84 <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a1a:	f000 fa79 	bl	8001f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a22:	f002 fec1 	bl	80047a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 fa70 	bl	8001f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a34:	f002 ff03 	bl	800483e <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 fa67 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000de0 	.word	0x20000de0
 8001a4c:	40005800 	.word	0x40005800
 8001a50:	307075b1 	.word	0x307075b1

08001a54 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <MX_OCTOSPI1_Init+0xa8>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a80:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a84:	2220      	movs	r2, #32
 8001a86:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001ab8:	480f      	ldr	r0, [pc, #60]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001aba:	f002 ff0d 	bl	80048d8 <HAL_OSPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001ac4:	f000 fa24 	bl	8001f10 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001ad0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ad4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4619      	mov	r1, r3
 8001ade:	4806      	ldr	r0, [pc, #24]	; (8001af8 <MX_OCTOSPI1_Init+0xa4>)
 8001ae0:	f003 f9f8 	bl	8004ed4 <HAL_OSPIM_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001aea:	f000 fa11 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000e34 	.word	0x20000e34
 8001afc:	a0001000 	.word	0xa0001000

08001b00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <MX_TIM17_Init+0x48>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 120;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b0c:	2278      	movs	r2, #120	; 0x78
 8001b0e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 3124;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b18:	f640 4234 	movw	r2, #3124	; 0xc34
 8001b1c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_TIM17_Init+0x44>)
 8001b32:	f005 fc33 	bl	800739c <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001b3c:	f000 f9e8 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000e84 	.word	0x20000e84
 8001b48:	40014800 	.word	0x40014800

08001b4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <MX_USART1_UART_Init+0x94>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b96:	f005 fef7 	bl	8007988 <HAL_UART_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ba0:	f000 f9b6 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001ba8:	f006 fd94 	bl	80086d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb2:	f000 f9ad 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001bba:	f006 fdc9 	bl	8008750 <HAL_UARTEx_SetRxFifoThreshold>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f000 f9a4 	bl	8001f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <MX_USART1_UART_Init+0x90>)
 8001bca:	f006 fd4a 	bl	8008662 <HAL_UARTEx_DisableFifoMode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd4:	f000 f99c 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000ed0 	.word	0x20000ed0
 8001be0:	40013800 	.word	0x40013800

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_GPIO_Init+0x94>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <MX_GPIO_Init+0x98>)
 8001c5a:	f001 fd77 	bl	800374c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2028      	movs	r0, #40	; 0x28
 8001c64:	f001 fc5e 	bl	8003524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c68:	2028      	movs	r0, #40	; 0x28
 8001c6a:	f001 fc77 	bl	800355c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6e:	bf00      	nop
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000800 	.word	0x48000800

08001c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM17) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	f040 80f3 	bne.w	8001e7a <HAL_TIM_PeriodElapsedCallback+0x1fa>
		int16_t temp_buffer[3];

		// Get raw accelerometer data and scale it according
		// to the formula given in the ADL dataset
		BSP_ACCELERO_AccGetXYZ(temp_buffer);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 facd 	bl	8002238 <BSP_ACCELERO_AccGetXYZ>
		xRaw = ratio * (temp_buffer[0] + 1500.0f);
 8001c9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001caa:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001e94 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	4b77      	ldr	r3, [pc, #476]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
		yRaw = ratio * (temp_buffer[1] + 1500.0f);
 8001cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cce:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001e94 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cd6:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
		zRaw = ratio * (temp_buffer[2] + 1500.0f);
 8001ce6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001e94 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d04:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]

		// Apply FIR filter (maybe customize the filter coeffs later?)
		arm_fir_f32(&x_instance, &xRaw, &xCurrent, 1);
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4a66      	ldr	r2, [pc, #408]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d0e:	4963      	ldr	r1, [pc, #396]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d10:	4866      	ldr	r0, [pc, #408]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d12:	f00c ff79 	bl	800ec08 <arm_fir_f32>
		arm_fir_f32(&y_instance, &yRaw, &yCurrent, 1);
 8001d16:	2301      	movs	r3, #1
 8001d18:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d1a:	4961      	ldr	r1, [pc, #388]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d1c:	4865      	ldr	r0, [pc, #404]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001d1e:	f00c ff73 	bl	800ec08 <arm_fir_f32>
		arm_fir_f32(&z_instance, &zRaw, &zCurrent, 1);
 8001d22:	2301      	movs	r3, #1
 8001d24:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d26:	495f      	ldr	r1, [pc, #380]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d28:	4864      	ldr	r0, [pc, #400]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d2a:	f00c ff6d 	bl	800ec08 <arm_fir_f32>

		// Clip, round and cast the filtered accelerometer data to fit the
		// network's specified inputs
		if(xCurrent > 63) xCurrent = 63;
 8001d2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001ec0 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	dd02      	ble.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d44:	4a5f      	ldr	r2, [pc, #380]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d46:	601a      	str	r2, [r3, #0]
		if(xCurrent < 0) xCurrent = 0;
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d503      	bpl.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
		if(yCurrent > 63) yCurrent = 63;
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001ec0 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd02      	ble.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0xfa>
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d76:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d78:	601a      	str	r2, [r3, #0]
		if(yCurrent < 0) yCurrent = 0;
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d503      	bpl.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x112>
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
		if(zCurrent > 63) zCurrent = 63;
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001ec0 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	dd02      	ble.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x12c>
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001da8:	4a46      	ldr	r2, [pc, #280]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001daa:	601a      	str	r2, [r3, #0]
		if(zCurrent < 0) zCurrent = 0;
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d503      	bpl.n	8001dc4 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001dbc:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
		uint8_t xRounded = round(xCurrent);
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbd5 	bl	8000578 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	ec43 2b10 	vmov	d0, r2, r3
 8001dd6:	f010 f943 	bl	8012060 <round>
 8001dda:	ec53 2b10 	vmov	r2, r3, d0
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fef9 	bl	8000bd8 <__aeabi_d2uiz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
		uint8_t yRounded = round(yCurrent);
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbc2 	bl	8000578 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	ec43 2b10 	vmov	d0, r2, r3
 8001dfc:	f010 f930 	bl	8012060 <round>
 8001e00:	ec53 2b10 	vmov	r2, r3, d0
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fee6 	bl	8000bd8 <__aeabi_d2uiz>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75bb      	strb	r3, [r7, #22]
		uint8_t zRounded = round(zCurrent);
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	ec43 2b10 	vmov	d0, r2, r3
 8001e22:	f010 f91d 	bl	8012060 <round>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fed3 	bl	8000bd8 <__aeabi_d2uiz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	757b      	strb	r3, [r7, #21]

		// Write to current data array, and then wait for permission from the
		// main loop to go back to beginning
		if(array_idx <= 285)
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8001e3e:	da19      	bge.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x1f4>
		{
			array_ready = 0;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
			current_Data[array_idx] = xRounded;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4921      	ldr	r1, [pc, #132]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	54ca      	strb	r2, [r1, r3]
			current_Data[array_idx+1] = yRounded;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	491e      	ldr	r1, [pc, #120]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e58:	7dba      	ldrb	r2, [r7, #22]
 8001e5a:	54ca      	strb	r2, [r1, r3]
			current_Data[array_idx+2] = zRounded;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3302      	adds	r3, #2
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e64:	7d7a      	ldrb	r2, [r7, #21]
 8001e66:	54ca      	strb	r2, [r1, r3]
			array_idx += 3;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e002      	b.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x1fa>
		}else{
			array_ready = 1;
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
		}
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x208>
    HAL_IncTick();
 8001e84:	f001 fa76 	bl	8003374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40014800 	.word	0x40014800
 8001e94:	44bb8000 	.word	0x44bb8000
 8001e98:	200001d4 	.word	0x200001d4
 8001e9c:	20001f04 	.word	0x20001f04
 8001ea0:	20001f08 	.word	0x20001f08
 8001ea4:	20001f0c 	.word	0x20001f0c
 8001ea8:	20001ef8 	.word	0x20001ef8
 8001eac:	20001ecc 	.word	0x20001ecc
 8001eb0:	20001efc 	.word	0x20001efc
 8001eb4:	20001ed8 	.word	0x20001ed8
 8001eb8:	20001f00 	.word	0x20001f00
 8001ebc:	20001ee4 	.word	0x20001ee4
 8001ec0:	427c0000 	.word	0x427c0000
 8001ec4:	427c0000 	.word	0x427c0000
 8001ec8:	20001c84 	.word	0x20001c84
 8001ecc:	20001c88 	.word	0x20001c88
 8001ed0:	20001c8c 	.word	0x20001c8c
 8001ed4:	40001000 	.word	0x40001000

08001ed8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d10a      	bne.n	8001f00 <HAL_GPIO_EXTI_Callback+0x28>
	{
		mode = !mode;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x34>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x34>)
 8001efe:	701a      	strb	r2, [r3, #0]
	}
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20001c08 	.word	0x20001c08

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f42:	2312      	movs	r3, #18
 8001f44:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <I2Cx_MspInit+0xac>)
 8001f5a:	f001 fbf7 	bl	800374c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <I2Cx_MspInit+0xac>)
 8001f66:	f001 fbf1 	bl	800374c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f74:	6593      	str	r3, [r2, #88]	; 0x58
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <I2Cx_MspInit+0xa8>)
 8001f94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f98:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	2021      	movs	r0, #33	; 0x21
 8001fa0:	f001 fac0 	bl	8003524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001fa4:	2021      	movs	r0, #33	; 0x21
 8001fa6:	f001 fad9 	bl	800355c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	210f      	movs	r1, #15
 8001fae:	2022      	movs	r0, #34	; 0x22
 8001fb0:	f001 fab8 	bl	8003524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001fb4:	2022      	movs	r0, #34	; 0x22
 8001fb6:	f001 fad1 	bl	800355c <HAL_NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <I2Cx_Init+0x54>)
 8001fd8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <I2Cx_Init+0x58>)
 8001fde:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff89 	bl	8001f1c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 fe3a 	bl	8003c84 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002010:	2100      	movs	r1, #0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f002 fbc8 	bl	80047a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40005800 	.word	0x40005800
 8002024:	00702681 	.word	0x00702681

08002028 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af04      	add	r7, sp, #16
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	4608      	mov	r0, r1
 8002032:	4611      	mov	r1, r2
 8002034:	461a      	mov	r2, r3
 8002036:	4603      	mov	r3, r0
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	460b      	mov	r3, r1
 800203c:	813b      	strh	r3, [r7, #8]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	b299      	uxth	r1, r3
 800204a:	88f8      	ldrh	r0, [r7, #6]
 800204c:	893a      	ldrh	r2, [r7, #8]
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4603      	mov	r3, r0
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f001 ffe2 	bl	8004028 <HAL_I2C_Mem_Read>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	4619      	mov	r1, r3
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f832 	bl	80020dc <I2Cx_Error>
  }
  return status;
 8002078:	7dfb      	ldrb	r3, [r7, #23]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b08a      	sub	sp, #40	; 0x28
 8002086:	af04      	add	r7, sp, #16
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	4608      	mov	r0, r1
 800208c:	4611      	mov	r1, r2
 800208e:	461a      	mov	r2, r3
 8002090:	4603      	mov	r3, r0
 8002092:	72fb      	strb	r3, [r7, #11]
 8002094:	460b      	mov	r3, r1
 8002096:	813b      	strh	r3, [r7, #8]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	88f8      	ldrh	r0, [r7, #6]
 80020a6:	893a      	ldrh	r2, [r7, #8]
 80020a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f001 fea1 	bl	8003e00 <HAL_I2C_Mem_Write>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f805 	bl	80020dc <I2Cx_Error>
  }
  return status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 fe5a 	bl	8003da2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff6c 	bl	8001fcc <I2Cx_Init>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <SENSOR_IO_Init+0x10>)
 8002102:	f7ff ff63 	bl	8001fcc <I2Cx_Init>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20001f14 	.word	0x20001f14

08002110 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	b29a      	uxth	r2, r3
 8002126:	79f9      	ldrb	r1, [r7, #7]
 8002128:	2301      	movs	r3, #1
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	1d7b      	adds	r3, r7, #5
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <SENSOR_IO_Write+0x30>)
 8002134:	f7ff ffa5 	bl	8002082 <I2Cx_WriteMultiple>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20001f14 	.word	0x20001f14

08002144 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	b29a      	uxth	r2, r3
 800215c:	79f9      	ldrb	r1, [r7, #7]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f107 030f 	add.w	r3, r7, #15
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <SENSOR_IO_Read+0x38>)
 800216c:	f7ff ff5c 	bl	8002028 <I2Cx_ReadMultiple>

  return read_value;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20001f14 	.word	0x20001f14

08002180 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af02      	add	r7, sp, #8
 8002186:	603a      	str	r2, [r7, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	460b      	mov	r3, r1
 8002190:	71bb      	strb	r3, [r7, #6]
 8002192:	4613      	mov	r3, r2
 8002194:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	b29a      	uxth	r2, r3
 800219a:	79f9      	ldrb	r1, [r7, #7]
 800219c:	88bb      	ldrh	r3, [r7, #4]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <SENSOR_IO_ReadMultiple+0x38>)
 80021a8:	f7ff ff3e 	bl	8002028 <I2Cx_ReadMultiple>
 80021ac:	4603      	mov	r3, r0
 80021ae:	b29b      	uxth	r3, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20001f14 	.word	0x20001f14

080021bc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80021c6:	2300      	movs	r3, #0
 80021c8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <BSP_ACCELERO_Init+0x74>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b6a      	cmp	r3, #106	; 0x6a
 80021d4:	d002      	beq.n	80021dc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e024      	b.n	8002226 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <BSP_ACCELERO_Init+0x78>)
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <BSP_ACCELERO_Init+0x74>)
 80021e0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80021e2:	2330      	movs	r3, #48	; 0x30
 80021e4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80021ea:	2300      	movs	r3, #0
 80021ec:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80021ee:	2340      	movs	r3, #64	; 0x40
 80021f0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80021fa:	797a      	ldrb	r2, [r7, #5]
 80021fc:	7abb      	ldrb	r3, [r7, #10]
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002204:	7a3b      	ldrb	r3, [r7, #8]
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	b2db      	uxtb	r3, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <BSP_ACCELERO_Init+0x78>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	89ba      	ldrh	r2, [r7, #12]
 8002222:	4610      	mov	r0, r2
 8002224:	4798      	blx	r3
  }  

  return ret;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200001e0 	.word	0x200001e0
 8002234:	20001f68 	.word	0x20001f68

08002238 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
    }
  }
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20001f68 	.word	0x20001f68

08002268 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <BSP_QSPI_Init+0xf4>)
 8002270:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <BSP_QSPI_Init+0xf8>)
 8002272:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8002274:	4839      	ldr	r0, [pc, #228]	; (800235c <BSP_QSPI_Init+0xf4>)
 8002276:	f002 fbd9 	bl	8004a2c <HAL_OSPI_DeInit>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e067      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }

  /* System level initialization */
  BSP_QSPI_MspInit();
 8002284:	f000 f990 	bl	80025a8 <BSP_QSPI_MspInit>

  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8002288:	4b34      	ldr	r3, [pc, #208]	; (800235c <BSP_QSPI_Init+0xf4>)
 800228a:	2204      	movs	r2, #4
 800228c:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <BSP_QSPI_Init+0xf4>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <BSP_QSPI_Init+0xf4>)
 8002296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022a0:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022c4:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022da:	2204      	movs	r2, #4
 80022dc:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80022f8:	4818      	ldr	r0, [pc, #96]	; (800235c <BSP_QSPI_Init+0xf4>)
 80022fa:	f002 faed 	bl	80048d8 <HAL_OSPI_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e025      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8002308:	4814      	ldr	r0, [pc, #80]	; (800235c <BSP_QSPI_Init+0xf4>)
 800230a:	f000 f98d 	bl	8002628 <QSPI_ResetMemory>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002314:	2304      	movs	r3, #4
 8002316:	e01d      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }

  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002318:	2101      	movs	r1, #1
 800231a:	4810      	ldr	r0, [pc, #64]	; (800235c <BSP_QSPI_Init+0xf4>)
 800231c:	f000 fa72 	bl	8002804 <QSPI_QuadMode>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e014      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }

  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800232a:	2101      	movs	r1, #1
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <BSP_QSPI_Init+0xf4>)
 800232e:	f000 fb15 	bl	800295c <QSPI_HighPerfMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e00b      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <BSP_QSPI_Init+0xf4>)
 800233e:	2202      	movs	r2, #2
 8002340:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <BSP_QSPI_Init+0xf4>)
 8002344:	f002 fac8 	bl	80048d8 <HAL_OSPI_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20001f6c 	.word	0x20001f6c
 8002360:	a0001000 	.word	0xa0001000

08002364 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b098      	sub	sp, #96	; 0x60
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8002378:	23eb      	movs	r3, #235	; 0xeb
 800237a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800237c:	2301      	movs	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800238c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8002392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800239c:	23aa      	movs	r3, #170	; 0xaa
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80023a0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 80023a6:	2300      	movs	r3, #0
 80023a8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80023ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80023bc:	2304      	movs	r3, #4
 80023be:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80023c4:	2300      	movs	r3, #0
 80023c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4619      	mov	r1, r3
 80023d2:	480c      	ldr	r0, [pc, #48]	; (8002404 <BSP_QSPI_Read+0xa0>)
 80023d4:	f002 fb51 	bl	8004a7a <HAL_OSPI_Command>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00b      	b.n	80023fa <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <BSP_QSPI_Read+0xa0>)
 80023ea:	f002 fc3a 	bl	8004c62 <HAL_OSPI_Receive>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3760      	adds	r7, #96	; 0x60
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20001f6c 	.word	0x20001f6c

08002408 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b09c      	sub	sp, #112	; 0x70
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800241c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800241e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d901      	bls.n	800242a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800243e:	2338      	movs	r3, #56	; 0x38
 8002440:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002442:	2301      	movs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800244e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8002454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8002462:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002474:	2300      	movs	r3, #0
 8002476:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8002480:	4823      	ldr	r0, [pc, #140]	; (8002510 <BSP_QSPI_Write+0x108>)
 8002482:	f000 f918 	bl	80026b6 <QSPI_WriteEnable>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e03b      	b.n	8002508 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4619      	mov	r1, r3
 800249a:	481d      	ldr	r0, [pc, #116]	; (8002510 <BSP_QSPI_Write+0x108>)
 800249c:	f002 faed 	bl	8004a7a <HAL_OSPI_Command>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02e      	b.n	8002508 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	68f9      	ldr	r1, [r7, #12]
 80024b0:	4817      	ldr	r0, [pc, #92]	; (8002510 <BSP_QSPI_Write+0x108>)
 80024b2:	f002 fb63 	bl	8004b7c <HAL_OSPI_Transmit>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e023      	b.n	8002508 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80024c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80024c4:	4812      	ldr	r0, [pc, #72]	; (8002510 <BSP_QSPI_Write+0x108>)
 80024c6:	f000 f952 	bl	800276e <QSPI_AutoPollingMemReady>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e019      	b.n	8002508 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80024d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d8:	4413      	add	r3, r2
 80024da:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80024e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d203      	bcs.n	80024f8 <BSP_QSPI_Write+0xf0>
 80024f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	e001      	b.n	80024fc <BSP_QSPI_Write+0xf4>
 80024f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80024fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002502:	429a      	cmp	r2, r3
 8002504:	d3b8      	bcc.n	8002478 <BSP_QSPI_Write+0x70>

  return QSPI_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3770      	adds	r7, #112	; 0x70
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20001f6c 	.word	0x20001f6c

08002514 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress : Block address to erase
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b096      	sub	sp, #88	; 0x58
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8002524:	23d8      	movs	r3, #216	; 0xd8
 8002526:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8002538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800253e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002558:	2300      	movs	r3, #0
 800255a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800255c:	4811      	ldr	r0, [pc, #68]	; (80025a4 <BSP_QSPI_Erase_Block+0x90>)
 800255e:	f000 f8aa 	bl	80026b6 <QSPI_WriteEnable>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e017      	b.n	800259c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800256c:	f107 0308 	add.w	r3, r7, #8
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4619      	mov	r1, r3
 8002576:	480b      	ldr	r0, [pc, #44]	; (80025a4 <BSP_QSPI_Erase_Block+0x90>)
 8002578:	f002 fa7f 	bl	8004a7a <HAL_OSPI_Command>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00a      	b.n	800259c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8002586:	f640 51ac 	movw	r1, #3500	; 0xdac
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <BSP_QSPI_Erase_Block+0x90>)
 800258c:	f000 f8ef 	bl	800276e <QSPI_AutoPollingMemReady>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3758      	adds	r7, #88	; 0x58
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20001f6c 	.word	0x20001f6c

080025a8 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6513      	str	r3, [r2, #80]	; 0x50
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <BSP_QSPI_MspInit+0x78>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80025f6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80025fa:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002608:	230a      	movs	r3, #10
 800260a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4619      	mov	r1, r3
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <BSP_QSPI_MspInit+0x7c>)
 8002614:	f001 f89a 	bl	800374c <HAL_GPIO_Init>
}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	48001000 	.word	0x48001000

08002628 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b096      	sub	sp, #88	; 0x58
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8002638:	2366      	movs	r3, #102	; 0x66
 800263a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002650:	2300      	movs	r3, #0
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800265c:	2300      	movs	r3, #0
 800265e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f002 fa05 	bl	8004a7a <HAL_OSPI_Command>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e019      	b.n	80026ae <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800267a:	2399      	movs	r3, #153	; 0x99
 800267c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 f9f6 	bl	8004a7a <HAL_OSPI_Command>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e00a      	b.n	80026ae <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002698:	f241 3188 	movw	r1, #5000	; 0x1388
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f866 	bl	800276e <QSPI_AutoPollingMemReady>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3758      	adds	r7, #88	; 0x58
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b09c      	sub	sp, #112	; 0x70
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80026c6:	2306      	movs	r3, #6
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80026de:	2300      	movs	r3, #0
 80026e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80026ea:	2300      	movs	r3, #0
 80026ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f002 f9be 	bl	8004a7a <HAL_OSPI_Command>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e02e      	b.n	8002766 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match         = MX25R6435F_SR_WEL;
 8002708:	2302      	movs	r3, #2
 800270a:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800270c:	2302      	movs	r3, #2
 800270e:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8002714:	2310      	movs	r3, #16
 8002716:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271c:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800271e:	2305      	movs	r3, #5
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8002722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002726:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f002 f99d 	bl	8004a7a <HAL_OSPI_Command>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00d      	b.n	8002766 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f002 fb27 	bl	8004da8 <HAL_OSPI_AutoPolling>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3770      	adds	r7, #112	; 0x70
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b09c      	sub	sp, #112	; 0x70
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002780:	2305      	movs	r3, #5
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002784:	2301      	movs	r3, #1
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002790:	2300      	movs	r3, #0
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002794:	2300      	movs	r3, #0
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800279c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80027ae:	2300      	movs	r3, #0
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80027be:	2310      	movs	r3, #16
 80027c0:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80027c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c6:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027c8:	f107 0320 	add.w	r3, r7, #32
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f002 f951 	bl	8004a7a <HAL_OSPI_Command>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00c      	b.n	80027fc <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f002 fadc 	bl	8004da8 <HAL_OSPI_AutoPolling>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3770      	adds	r7, #112	; 0x70
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b098      	sub	sp, #96	; 0x60
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002818:	2305      	movs	r3, #5
 800281a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800281c:	2301      	movs	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800282c:	2300      	movs	r3, #0
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002846:	2300      	movs	r3, #0
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f002 f910 	bl	8004a7a <HAL_OSPI_Command>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e077      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002864:	f107 030f 	add.w	r3, r7, #15
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f002 f9f7 	bl	8004c62 <HAL_OSPI_Receive>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06a      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff19 	bl	80026b6 <QSPI_WriteEnable>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e062      	b.n	8002954 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289a:	b2db      	uxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e004      	b.n	80028aa <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f002 f8de 	bl	8004a7a <HAL_OSPI_Command>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e045      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028c8:	f107 030f 	add.w	r3, r7, #15
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f002 f952 	bl	8004b7c <HAL_OSPI_Transmit>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e038      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80028e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff41 	bl	800276e <QSPI_AutoPollingMemReady>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02e      	b.n	8002954 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80028f6:	2305      	movs	r3, #5
 80028f8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f002 f8b8 	bl	8004a7a <HAL_OSPI_Command>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e01f      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002914:	f107 030f 	add.w	r3, r7, #15
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f002 f99f 	bl	8004c62 <HAL_OSPI_Receive>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e012      	b.n	8002954 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <QSPI_QuadMode+0x13a>
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3760      	adds	r7, #96	; 0x60
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b098      	sub	sp, #96	; 0x60
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002970:	2305      	movs	r3, #5
 8002972:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002974:	2301      	movs	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800299e:	2300      	movs	r3, #0
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f002 f864 	bl	8004a7a <HAL_OSPI_Command>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e09a      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f002 f94b 	bl	8004c62 <HAL_OSPI_Receive>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e08d      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80029d6:	2315      	movs	r3, #21
 80029d8:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80029da:	2302      	movs	r3, #2
 80029dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f002 f846 	bl	8004a7a <HAL_OSPI_Command>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07c      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	3301      	adds	r3, #1
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f002 f92c 	bl	8004c62 <HAL_OSPI_Receive>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e06e      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fe4e 	bl	80026b6 <QSPI_WriteEnable>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e066      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	73bb      	strb	r3, [r7, #14]
 8002a34:	e004      	b.n	8002a40 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	f023 0302 	bic.w	r3, r3, #2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002a40:	2301      	movs	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8002a44:	2303      	movs	r3, #3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f002 f811 	bl	8004a7a <HAL_OSPI_Command>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e047      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f002 f885 	bl	8004b7c <HAL_OSPI_Transmit>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e03a      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002a7c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fe74 	bl	800276e <QSPI_AutoPollingMemReady>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e030      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002a90:	2315      	movs	r3, #21
 8002a92:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002a94:	2302      	movs	r3, #2
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 ffe9 	bl	8004a7a <HAL_OSPI_Command>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01f      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f002 f8d0 	bl	8004c62 <HAL_OSPI_Receive>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e012      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002acc:	7b7b      	ldrb	r3, [r7, #13]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <QSPI_HighPerfMode+0x180>
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d007      	beq.n	8002aec <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3760      	adds	r7, #96	; 0x60
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_MspInit+0x44>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_MspInit+0x44>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_MspInit+0x44>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_MspInit+0x44>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <HAL_MspInit+0x44>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_MspInit+0x44>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <HAL_CRC_MspInit+0x38>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10b      	bne.n	8002b6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_CRC_MspInit+0x3c>)
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_CRC_MspInit+0x3c>)
 8002b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b60:	6493      	str	r3, [r2, #72]	; 0x48
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <HAL_CRC_MspInit+0x3c>)
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023000 	.word	0x40023000
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0ae      	sub	sp, #184	; 0xb8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	2294      	movs	r2, #148	; 0x94
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00c faf3 	bl	800f190 <memset>
  if(hi2c->Instance==I2C2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_I2C_MspInit+0xb0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d13b      	bne.n	8002c2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fed3 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bcc:	f7ff f9a0 	bl	8001f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf0:	2312      	movs	r3, #18
 8002bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c02:	2304      	movs	r3, #4
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480b      	ldr	r0, [pc, #44]	; (8002c3c <HAL_I2C_MspInit+0xb8>)
 8002c10:	f000 fd9c 	bl	800374c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_I2C_MspInit+0xb4>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	37b8      	adds	r7, #184	; 0xb8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40005800 	.word	0x40005800
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	48000400 	.word	0x48000400

08002c40 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_I2C_MspDeInit+0x3c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10f      	bne.n	8002c72 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_I2C_MspDeInit+0x40>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_I2C_MspDeInit+0x40>)
 8002c58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c62:	4808      	ldr	r0, [pc, #32]	; (8002c84 <HAL_I2C_MspDeInit+0x44>)
 8002c64:	f000 ff04 	bl	8003a70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002c68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <HAL_I2C_MspDeInit+0x44>)
 8002c6e:	f000 feff 	bl	8003a70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40005800 	.word	0x40005800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	48000400 	.word	0x48000400

08002c88 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0b0      	sub	sp, #192	; 0xc0
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca0:	f107 0318 	add.w	r3, r7, #24
 8002ca4:	2294      	movs	r2, #148	; 0x94
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f00c fa71 	bl	800f190 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a28      	ldr	r2, [pc, #160]	; (8002d54 <HAL_OSPI_MspInit+0xcc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d149      	bne.n	8002d4c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fe4f 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002cd4:	f7ff f91c 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6513      	str	r3, [r2, #80]	; 0x50
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_OSPI_MspInit+0xd0>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002d20:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d44:	4619      	mov	r1, r3
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <HAL_OSPI_MspInit+0xd4>)
 8002d48:	f000 fd00 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	37c0      	adds	r7, #192	; 0xc0
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	a0001000 	.word	0xa0001000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	48001000 	.word	0x48001000

08002d60 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_OSPI_MspDeInit+0x3c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d110      	bne.n	8002d94 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_OSPI_MspDeInit+0x40>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_OSPI_MspDeInit+0x40>)
 8002d78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_OSPI_MspDeInit+0x40>)
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_OSPI_MspDeInit+0x40>)
 8002d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d88:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002d8a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <HAL_OSPI_MspDeInit+0x44>)
 8002d90:	f000 fe6e 	bl	8003a70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	a0001000 	.word	0xa0001000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	48001000 	.word	0x48001000

08002da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_TIM_Base_MspInit+0x44>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d113      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_TIM_Base_MspInit+0x48>)
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_TIM_Base_MspInit+0x48>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_TIM_Base_MspInit+0x48>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	201a      	movs	r0, #26
 8002dd8:	f000 fba4 	bl	8003524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002ddc:	201a      	movs	r0, #26
 8002dde:	f000 fbbd 	bl	800355c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40014800 	.word	0x40014800
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0ae      	sub	sp, #184	; 0xb8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	2294      	movs	r2, #148	; 0x94
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f00c f9bb 	bl	800f190 <memset>
  if(huart->Instance==USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_UART_MspInit+0xb0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d13a      	bne.n	8002e9a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fd9b 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e3c:	f7ff f868 	bl	8001f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_UART_MspInit+0xb4>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e70:	23c0      	movs	r3, #192	; 0xc0
 8002e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <HAL_UART_MspInit+0xb8>)
 8002e96:	f000 fc59 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	37b8      	adds	r7, #184	; 0xb8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	48000400 	.word	0x48000400

08002eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_InitTick+0xe0>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <HAL_InitTick+0xe0>)
 8002ec4:	f043 0310 	orr.w	r3, r3, #16
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_InitTick+0xe0>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ed6:	f107 0210 	add.w	r2, r7, #16
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fc51 	bl	8006788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f003 fc1e 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	6378      	str	r0, [r7, #52]	; 0x34
 8002ef6:	e004      	b.n	8002f02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ef8:	f003 fc1a 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8002efc:	4603      	mov	r3, r0
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_InitTick+0xe4>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f12:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <HAL_InitTick+0xec>)
 8002f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f36:	4818      	ldr	r0, [pc, #96]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f38:	f004 fa30 	bl	800739c <HAL_TIM_Base_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11b      	bne.n	8002f82 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f4a:	4813      	ldr	r0, [pc, #76]	; (8002f98 <HAL_InitTick+0xe8>)
 8002f4c:	f004 fa7e 	bl	800744c <HAL_TIM_Base_Start_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d111      	bne.n	8002f82 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f5e:	2036      	movs	r0, #54	; 0x36
 8002f60:	f000 fafc 	bl	800355c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d808      	bhi.n	8002f7c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	2036      	movs	r0, #54	; 0x36
 8002f70:	f000 fad8 	bl	8003524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_InitTick+0xf0>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e002      	b.n	8002f82 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3738      	adds	r7, #56	; 0x38
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	431bde83 	.word	0x431bde83
 8002f98:	20001fbc 	.word	0x20001fbc
 8002f9c:	40001000 	.word	0x40001000
 8002fa0:	20000214 	.word	0x20000214

08002fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <NMI_Handler+0x4>

08002faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003002:	f004 fac2 	bl	800758a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000e84 	.word	0x20000e84

08003010 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003014:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003018:	f000 fe1c 	bl	8003c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}

08003020 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003024:	4802      	ldr	r0, [pc, #8]	; (8003030 <TIM6_DAC_IRQHandler+0x10>)
 8003026:	f004 fab0 	bl	800758a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20001fbc 	.word	0x20001fbc

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f00c f854 	bl	800f110 <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200a0000 	.word	0x200a0000
 8003094:	00000800 	.word	0x00000800
 8003098:	20002008 	.word	0x20002008
 800309c:	200020c8 	.word	0x200020c8

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
 }
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c8:	f7ff ffea 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <LoopForever+0xe>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <LoopForever+0x16>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f2:	f00c f813 	bl	800f11c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f6:	f7fe fac9 	bl	800168c <main>

080030fa <LoopForever>:

LoopForever:
    b LoopForever
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 80030fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	20000da0 	.word	0x20000da0
  ldr r2, =_sidata
 8003108:	08146924 	.word	0x08146924
  ldr r2, =_sbss
 800310c:	20000da0 	.word	0x20000da0
  ldr r4, =_ebss
 8003110:	200020c8 	.word	0x200020c8

08003114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_IRQHandler>

08003116 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003124:	2110      	movs	r1, #16
 8003126:	20d4      	movs	r0, #212	; 0xd4
 8003128:	f7ff f80c 	bl	8002144 <SENSOR_IO_Read>
 800312c:	4603      	mov	r3, r0
 800312e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800313c:	7bba      	ldrb	r2, [r7, #14]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	4313      	orrs	r3, r2
 8003142:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	461a      	mov	r2, r3
 8003148:	2110      	movs	r1, #16
 800314a:	20d4      	movs	r0, #212	; 0xd4
 800314c:	f7fe ffe0 	bl	8002110 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003150:	2112      	movs	r1, #18
 8003152:	20d4      	movs	r0, #212	; 0xd4
 8003154:	f7fe fff6 	bl	8002144 <SENSOR_IO_Read>
 8003158:	4603      	mov	r3, r0
 800315a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b29b      	uxth	r3, r3
 8003162:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003164:	7bbb      	ldrb	r3, [r7, #14]
 8003166:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800316a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800316c:	7bba      	ldrb	r2, [r7, #14]
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	4313      	orrs	r3, r2
 8003172:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003174:	7bbb      	ldrb	r3, [r7, #14]
 8003176:	461a      	mov	r2, r3
 8003178:	2112      	movs	r1, #18
 800317a:	20d4      	movs	r0, #212	; 0xd4
 800317c:	f7fe ffc8 	bl	8002110 <SENSOR_IO_Write>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800318e:	2300      	movs	r3, #0
 8003190:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003192:	2110      	movs	r1, #16
 8003194:	20d4      	movs	r0, #212	; 0xd4
 8003196:	f7fe ffd5 	bl	8002144 <SENSOR_IO_Read>
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	461a      	mov	r2, r3
 80031aa:	2110      	movs	r1, #16
 80031ac:	20d4      	movs	r0, #212	; 0xd4
 80031ae:	f7fe ffaf 	bl	8002110 <SENSOR_IO_Write>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80031be:	f7fe ff9d 	bl	80020fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80031c2:	210f      	movs	r1, #15
 80031c4:	20d4      	movs	r0, #212	; 0xd4
 80031c6:	f7fe ffbd 	bl	8002144 <SENSOR_IO_Read>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80031de:	2115      	movs	r1, #21
 80031e0:	20d4      	movs	r0, #212	; 0xd4
 80031e2:	f7fe ffaf 	bl	8002144 <SENSOR_IO_Read>
 80031e6:	4603      	mov	r3, r0
 80031e8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	f023 0310 	bic.w	r3, r3, #16
 80031f0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	461a      	mov	r2, r3
 8003204:	2115      	movs	r1, #21
 8003206:	20d4      	movs	r0, #212	; 0xd4
 8003208:	f7fe ff82 	bl	8002110 <SENSOR_IO_Write>
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800322a:	2110      	movs	r1, #16
 800322c:	20d4      	movs	r0, #212	; 0xd4
 800322e:	f7fe ff89 	bl	8002144 <SENSOR_IO_Read>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003236:	f107 0208 	add.w	r2, r7, #8
 800323a:	2306      	movs	r3, #6
 800323c:	2128      	movs	r1, #40	; 0x28
 800323e:	20d4      	movs	r0, #212	; 0xd4
 8003240:	f7fe ff9e 	bl	8002180 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003244:	2300      	movs	r3, #0
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e01c      	b.n	8003284 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	3301      	adds	r3, #1
 8003250:	3320      	adds	r3, #32
 8003252:	443b      	add	r3, r7
 8003254:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003258:	b29b      	uxth	r3, r3
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	b29a      	uxth	r2, r3
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	3320      	adds	r3, #32
 8003264:	443b      	add	r3, r7
 8003266:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800326a:	b29b      	uxth	r3, r3
 800326c:	4413      	add	r3, r2
 800326e:	b29a      	uxth	r2, r3
 8003270:	7ffb      	ldrb	r3, [r7, #31]
 8003272:	b212      	sxth	r2, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	3320      	adds	r3, #32
 8003278:	443b      	add	r3, r7
 800327a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	3301      	adds	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d9df      	bls.n	800324a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d829      	bhi.n	80032e8 <LSM6DSL_AccReadXYZ+0xd4>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <LSM6DSL_AccReadXYZ+0x88>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080032e9 	.word	0x080032e9
 80032a4:	080032e9 	.word	0x080032e9
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032e9 	.word	0x080032e9
 80032bc:	080032d7 	.word	0x080032d7
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032e9 	.word	0x080032e9
 80032cc:	080032dd 	.word	0x080032dd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <LSM6DSL_AccReadXYZ+0x120>)
 80032d2:	61bb      	str	r3, [r7, #24]
    break;
 80032d4:	e008      	b.n	80032e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <LSM6DSL_AccReadXYZ+0x124>)
 80032d8:	61bb      	str	r3, [r7, #24]
    break;
 80032da:	e005      	b.n	80032e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <LSM6DSL_AccReadXYZ+0x128>)
 80032de:	61bb      	str	r3, [r7, #24]
    break;
 80032e0:	e002      	b.n	80032e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <LSM6DSL_AccReadXYZ+0x12c>)
 80032e4:	61bb      	str	r3, [r7, #24]
    break;    
 80032e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e01a      	b.n	8003324 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3320      	adds	r3, #32
 80032f4:	443b      	add	r3, r7
 80032f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003302:	edd7 7a06 	vldr	s15, [r7, #24]
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003316:	ee17 2a90 	vmov	r2, s15
 800331a:	b212      	sxth	r2, r2
 800331c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	3301      	adds	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d9e1      	bls.n	80032ee <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	3d79db23 	.word	0x3d79db23
 8003338:	3df9db23 	.word	0x3df9db23
 800333c:	3e79db23 	.word	0x3e79db23
 8003340:	3ef9db23 	.word	0x3ef9db23

08003344 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334e:	2003      	movs	r0, #3
 8003350:	f000 f8dd 	bl	800350e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003354:	200f      	movs	r0, #15
 8003356:	f7ff fdab 	bl	8002eb0 <HAL_InitTick>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e001      	b.n	800336a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003366:	f7ff fbc9 	bl	8002afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800336a:	79fb      	ldrb	r3, [r7, #7]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000218 	.word	0x20000218
 8003398:	2000200c 	.word	0x2000200c

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	2000200c 	.word	0x2000200c

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4907      	ldr	r1, [pc, #28]	; (8003450 <__NVIC_EnableIRQ+0x38>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db0a      	blt.n	800347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <__NVIC_SetPriority+0x4c>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	440b      	add	r3, r1
 8003478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800347c:	e00a      	b.n	8003494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4908      	ldr	r1, [pc, #32]	; (80034a4 <__NVIC_SetPriority+0x50>)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	3b04      	subs	r3, #4
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	440b      	add	r3, r1
 8003492:	761a      	strb	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf28      	it	cs
 80034c6:	2304      	movcs	r3, #4
 80034c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d902      	bls.n	80034d8 <NVIC_EncodePriority+0x30>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3b03      	subs	r3, #3
 80034d6:	e000      	b.n	80034da <NVIC_EncodePriority+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	4313      	orrs	r3, r2
         );
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	; 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff4c 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003536:	f7ff ff61 	bl	80033fc <__NVIC_GetPriorityGrouping>
 800353a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	6978      	ldr	r0, [r7, #20]
 8003542:	f7ff ffb1 	bl	80034a8 <NVIC_EncodePriority>
 8003546:	4602      	mov	r2, r0
 8003548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff80 	bl	8003454 <__NVIC_SetPriority>
}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff54 	bl	8003418 <__NVIC_EnableIRQ>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e054      	b.n	8003634 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7f5b      	ldrb	r3, [r3, #29]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fad2 	bl	8002b44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_CRC_Init+0xc4>)
 80035b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0218 	bic.w	r2, r2, #24
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	e00c      	b.n	80035e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f834 	bl	8003640 <HAL_CRCEx_Polynomial_Set>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e028      	b.n	8003634 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	795b      	ldrb	r3, [r3, #5]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295
 80035f2:	611a      	str	r2, [r3, #16]
 80035f4:	e004      	b.n	8003600 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6912      	ldr	r2, [r2, #16]
 80035fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	04c11db7 	.word	0x04c11db7

08003640 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003650:	231f      	movs	r3, #31
 8003652:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003654:	bf00      	nop
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1e5a      	subs	r2, r3, #1
 800365a:	613a      	str	r2, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_CRCEx_Polynomial_Set+0x34>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b18      	cmp	r3, #24
 8003678:	d846      	bhi.n	8003708 <HAL_CRCEx_Polynomial_Set+0xc8>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <HAL_CRCEx_Polynomial_Set+0x40>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	0800370f 	.word	0x0800370f
 8003684:	08003709 	.word	0x08003709
 8003688:	08003709 	.word	0x08003709
 800368c:	08003709 	.word	0x08003709
 8003690:	08003709 	.word	0x08003709
 8003694:	08003709 	.word	0x08003709
 8003698:	08003709 	.word	0x08003709
 800369c:	08003709 	.word	0x08003709
 80036a0:	080036fd 	.word	0x080036fd
 80036a4:	08003709 	.word	0x08003709
 80036a8:	08003709 	.word	0x08003709
 80036ac:	08003709 	.word	0x08003709
 80036b0:	08003709 	.word	0x08003709
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003709 	.word	0x08003709
 80036bc:	08003709 	.word	0x08003709
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	08003709 	.word	0x08003709
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003709 	.word	0x08003709
 80036dc:	08003709 	.word	0x08003709
 80036e0:	080036e5 	.word	0x080036e5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d913      	bls.n	8003712 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036ee:	e010      	b.n	8003712 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b07      	cmp	r3, #7
 80036f4:	d90f      	bls.n	8003716 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	d90b      	bls.n	800371a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003706:	e008      	b.n	800371a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
      break;
 800370c:	e006      	b.n	800371c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800371a:	bf00      	nop
  }
  if (status == HAL_OK)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 0118 	bic.w	r1, r3, #24
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e166      	b.n	8003a2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8158 	beq.w	8003a24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_GPIO_Init+0x40>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d130      	bne.n	80037ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0201 	and.w	r2, r3, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d017      	beq.n	800382a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	6939      	ldr	r1, [r7, #16]
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80b2 	beq.w	8003a24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c4:	4a60      	ldr	r2, [pc, #384]	; (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6613      	str	r3, [r2, #96]	; 0x60
 80038cc:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_GPIO_Init+0x300>)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003902:	d02b      	beq.n	800395c <HAL_GPIO_Init+0x210>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_GPIO_Init+0x304>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d025      	beq.n	8003958 <HAL_GPIO_Init+0x20c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_GPIO_Init+0x308>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01f      	beq.n	8003954 <HAL_GPIO_Init+0x208>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_GPIO_Init+0x30c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d019      	beq.n	8003950 <HAL_GPIO_Init+0x204>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4f      	ldr	r2, [pc, #316]	; (8003a5c <HAL_GPIO_Init+0x310>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_GPIO_Init+0x200>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4e      	ldr	r2, [pc, #312]	; (8003a60 <HAL_GPIO_Init+0x314>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_Init+0x1fc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4d      	ldr	r2, [pc, #308]	; (8003a64 <HAL_GPIO_Init+0x318>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <HAL_GPIO_Init+0x1f8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <HAL_GPIO_Init+0x31c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_GPIO_Init+0x1f4>
 800393c:	2307      	movs	r3, #7
 800393e:	e00e      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003940:	2308      	movs	r3, #8
 8003942:	e00c      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003944:	2306      	movs	r3, #6
 8003946:	e00a      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003948:	2305      	movs	r3, #5
 800394a:	e008      	b.n	800395e <HAL_GPIO_Init+0x212>
 800394c:	2304      	movs	r3, #4
 800394e:	e006      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003950:	2303      	movs	r3, #3
 8003952:	e004      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003954:	2302      	movs	r3, #2
 8003956:	e002      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_GPIO_Init+0x212>
 800395c:	2300      	movs	r3, #0
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	f002 0203 	and.w	r2, r2, #3
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	4093      	lsls	r3, r2
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800396e:	4937      	ldr	r1, [pc, #220]	; (8003a4c <HAL_GPIO_Init+0x300>)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800397c:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <HAL_GPIO_Init+0x320>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039a0:	4a32      	ldr	r2, [pc, #200]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039a6:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_GPIO_Init+0x320>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_GPIO_Init+0x320>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f ae91 	bne.w	800375c <HAL_GPIO_Init+0x10>
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	48000400 	.word	0x48000400
 8003a54:	48000800 	.word	0x48000800
 8003a58:	48000c00 	.word	0x48000c00
 8003a5c:	48001000 	.word	0x48001000
 8003a60:	48001400 	.word	0x48001400
 8003a64:	48001800 	.word	0x48001800
 8003a68:	48001c00 	.word	0x48001c00
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a7e:	e0c9      	b.n	8003c14 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a80:	2201      	movs	r2, #1
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80bc 	beq.w	8003c0e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003a96:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <HAL_GPIO_DeInit+0x1c0>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	220f      	movs	r2, #15
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003abe:	d02b      	beq.n	8003b18 <HAL_GPIO_DeInit+0xa8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <HAL_GPIO_DeInit+0x1c4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d025      	beq.n	8003b14 <HAL_GPIO_DeInit+0xa4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a5b      	ldr	r2, [pc, #364]	; (8003c38 <HAL_GPIO_DeInit+0x1c8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d01f      	beq.n	8003b10 <HAL_GPIO_DeInit+0xa0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <HAL_GPIO_DeInit+0x1cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d019      	beq.n	8003b0c <HAL_GPIO_DeInit+0x9c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a59      	ldr	r2, [pc, #356]	; (8003c40 <HAL_GPIO_DeInit+0x1d0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_GPIO_DeInit+0x98>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_GPIO_DeInit+0x1d4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00d      	beq.n	8003b04 <HAL_GPIO_DeInit+0x94>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_GPIO_DeInit+0x1d8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <HAL_GPIO_DeInit+0x90>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_GPIO_DeInit+0x1dc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_GPIO_DeInit+0x8c>
 8003af8:	2307      	movs	r3, #7
 8003afa:	e00e      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003afc:	2308      	movs	r3, #8
 8003afe:	e00c      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b00:	2306      	movs	r3, #6
 8003b02:	e00a      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b04:	2305      	movs	r3, #5
 8003b06:	e008      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e006      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e004      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e002      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_GPIO_DeInit+0xaa>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	f002 0203 	and.w	r2, r2, #3
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4093      	lsls	r3, r2
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d132      	bne.n	8003b90 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b2a:	4b49      	ldr	r3, [pc, #292]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	4947      	ldr	r1, [pc, #284]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003b38:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	4943      	ldr	r1, [pc, #268]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4940      	ldr	r1, [pc, #256]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	493c      	ldr	r1, [pc, #240]	; (8003c50 <HAL_GPIO_DeInit+0x1e0>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003b72:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <HAL_GPIO_DeInit+0x1c0>)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	482b      	ldr	r0, [pc, #172]	; (8003c30 <HAL_GPIO_DeInit+0x1c0>)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	400a      	ands	r2, r1
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2103      	movs	r1, #3
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	08da      	lsrs	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3208      	adds	r2, #8
 8003bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	08d2      	lsrs	r2, r2, #3
 8003bc4:	4019      	ands	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3208      	adds	r2, #8
 8003bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2103      	movs	r1, #3
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	401a      	ands	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3301      	adds	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f47f af2f 	bne.w	8003a80 <HAL_GPIO_DeInit+0x10>
  }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40010000 	.word	0x40010000
 8003c34:	48000400 	.word	0x48000400
 8003c38:	48000800 	.word	0x48000800
 8003c3c:	48000c00 	.word	0x48000c00
 8003c40:	48001000 	.word	0x48001000
 8003c44:	48001400 	.word	0x48001400
 8003c48:	48001800 	.word	0x48001800
 8003c4c:	48001c00 	.word	0x48001c00
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe f930 	bl	8001ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e081      	b.n	8003d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe ff6a 	bl	8002b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	; 0x24
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	e006      	b.n	8003d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d104      	bne.n	8003d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e021      	b.n	8003df8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fe ff37 	bl	8002c40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	f040 80f9 	bne.w	800401a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x34>
 8003e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0ed      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Mem_Write+0x4e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0e6      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e56:	f7ff faa1 	bl	800339c <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fac3 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0d1      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2221      	movs	r2, #33	; 0x21
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ea0:	88f8      	ldrh	r0, [r7, #6]
 8003ea2:	893a      	ldrh	r2, [r7, #8]
 8003ea4:	8979      	ldrh	r1, [r7, #10]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4603      	mov	r3, r0
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f9d3 	bl	800425c <I2C_RequestMemoryWrite>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0a9      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2bff      	cmp	r3, #255	; 0xff
 8003ed0:	d90e      	bls.n	8003ef0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	8979      	ldrh	r1, [r7, #10]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fc2b 	bl	8004744 <I2C_TransferConfig>
 8003eee:	e00f      	b.n	8003f10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	8979      	ldrh	r1, [r7, #10]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fc1a 	bl	8004744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 faad 	bl	8004474 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e07b      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d034      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x1c8>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d130      	bne.n	8003fc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fa3f 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e04d      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2bff      	cmp	r3, #255	; 0xff
 8003f88:	d90e      	bls.n	8003fa8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	22ff      	movs	r2, #255	; 0xff
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8979      	ldrh	r1, [r7, #10]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fbcf 	bl	8004744 <I2C_TransferConfig>
 8003fa6:	e00f      	b.n	8003fc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fbbe 	bl	8004744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d19e      	bne.n	8003f10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa8c 	bl	80044f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01a      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2220      	movs	r2, #32
 8003fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_I2C_Mem_Write+0x224>)
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	fe00e800 	.word	0xfe00e800

08004028 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	f040 80fd 	bne.w	800424a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_I2C_Mem_Read+0x34>
 8004056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0f1      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Mem_Read+0x4e>
 8004072:	2302      	movs	r3, #2
 8004074:	e0ea      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800407e:	f7ff f98d 	bl	800339c <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f9af 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0d5      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2222      	movs	r2, #34	; 0x22
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2240      	movs	r2, #64	; 0x40
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c8:	88f8      	ldrh	r0, [r7, #6]
 80040ca:	893a      	ldrh	r2, [r7, #8]
 80040cc:	8979      	ldrh	r1, [r7, #10]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4603      	mov	r3, r0
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f913 	bl	8004304 <I2C_RequestMemoryRead>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0ad      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	; 0xff
 80040f8:	d90e      	bls.n	8004118 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	4b52      	ldr	r3, [pc, #328]	; (8004254 <HAL_I2C_Mem_Read+0x22c>)
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb17 	bl	8004744 <I2C_TransferConfig>
 8004116:	e00f      	b.n	8004138 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	b2da      	uxtb	r2, r3
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_I2C_Mem_Read+0x22c>)
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb06 	bl	8004744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2200      	movs	r2, #0
 8004140:	2104      	movs	r1, #4
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f956 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07c      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d034      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x1d0>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d130      	bne.n	80041f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	2200      	movs	r2, #0
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f927 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04d      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	; 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	; 0xff
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fab7 	bl	8004744 <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 faa6 	bl	8004744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d19a      	bne.n	8004138 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f974 	bl	80044f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e01a      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2220      	movs	r2, #32
 800421c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_I2C_Mem_Read+0x230>)
 800422a:	400b      	ands	r3, r1
 800422c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	80002400 	.word	0x80002400
 8004258:	fe00e800 	.word	0xfe00e800

0800425c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	461a      	mov	r2, r3
 800426a:	4603      	mov	r3, r0
 800426c:	817b      	strh	r3, [r7, #10]
 800426e:	460b      	mov	r3, r1
 8004270:	813b      	strh	r3, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	8979      	ldrh	r1, [r7, #10]
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <I2C_RequestMemoryWrite+0xa4>)
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa5d 	bl	8004744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f8f0 	bl	8004474 <I2C_WaitOnTXISFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e02c      	b.n	80042f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
 80042ae:	e015      	b.n	80042dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8d6 	bl	8004474 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e012      	b.n	80042f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f884 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	80002000 	.word	0x80002000

08004304 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <I2C_RequestMemoryRead+0xa4>)
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fa0a 	bl	8004744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f89d 	bl	8004474 <I2C_WaitOnTXISFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e02c      	b.n	800439e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
 8004354:	e015      	b.n	8004382 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004356:	893b      	ldrh	r3, [r7, #8]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	b29b      	uxth	r3, r3
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f883 	bl	8004474 <I2C_WaitOnTXISFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e012      	b.n	800439e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004378:	893b      	ldrh	r3, [r7, #8]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2200      	movs	r2, #0
 800438a:	2140      	movs	r1, #64	; 0x40
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f831 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	80002000 	.word	0x80002000

080043ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d007      	beq.n	80043e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	619a      	str	r2, [r3, #24]
  }
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004404:	e022      	b.n	800444c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d01e      	beq.n	800444c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe ffc5 	bl	800339c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d113      	bne.n	800444c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e00f      	b.n	800446c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	429a      	cmp	r2, r3
 8004468:	d0cd      	beq.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004480:	e02c      	b.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f870 	bl	800456c <I2C_IsErrorOccurred>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e02a      	b.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d01e      	beq.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fe ff7d 	bl	800339c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d1cb      	bne.n	8004482 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004500:	e028      	b.n	8004554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f830 	bl	800456c <I2C_IsErrorOccurred>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e026      	b.n	8004564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fe ff41 	bl	800339c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d113      	bne.n	8004554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e007      	b.n	8004564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b20      	cmp	r3, #32
 8004560:	d1cf      	bne.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d075      	beq.n	8004684 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2210      	movs	r2, #16
 800459e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045a0:	e056      	b.n	8004650 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d052      	beq.n	8004650 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fe fef7 	bl	800339c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_IsErrorOccurred+0x54>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d147      	bne.n	8004650 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d12e      	bne.n	8004642 <I2C_IsErrorOccurred+0xd6>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ea:	d02a      	beq.n	8004642 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d027      	beq.n	8004642 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004600:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004602:	f7fe fecb 	bl	800339c <HAL_GetTick>
 8004606:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004608:	e01b      	b.n	8004642 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800460a:	f7fe fec7 	bl	800339c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b19      	cmp	r3, #25
 8004616:	d914      	bls.n	8004642 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d1dc      	bne.n	800460a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d003      	beq.n	8004666 <I2C_IsErrorOccurred+0xfa>
 800465e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004662:	2b00      	cmp	r3, #0
 8004664:	d09d      	beq.n	80045a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2220      	movs	r2, #32
 8004674:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f043 0308 	orr.w	r3, r3, #8
 80046be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80046f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01c      	beq.n	8004734 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fe56 	bl	80043ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <I2C_IsErrorOccurred+0x1d4>)
 800470c:	400b      	ands	r3, r1
 800470e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004738:	4618      	mov	r0, r3
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fe00e800 	.word	0xfe00e800

08004744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	817b      	strh	r3, [r7, #10]
 8004752:	4613      	mov	r3, r2
 8004754:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800475c:	7a7b      	ldrb	r3, [r7, #9]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004764:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	4313      	orrs	r3, r2
 800476e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004772:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	0d5b      	lsrs	r3, r3, #21
 800477e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <I2C_TransferConfig+0x60>)
 8004784:	430b      	orrs	r3, r1
 8004786:	43db      	mvns	r3, r3
 8004788:	ea02 0103 	and.w	r1, r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	03ff63ff 	.word	0x03ff63ff

080047a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d138      	bne.n	8004830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e032      	b.n	8004832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b20      	cmp	r3, #32
 8004852:	d139      	bne.n	80048c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800485e:	2302      	movs	r3, #2
 8004860:	e033      	b.n	80048ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7fe fd5a 	bl	800339c <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e092      	b.n	8004a1c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 808b 	bne.w	8004a1c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fe f9be 	bl	8002c88 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800490c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fad0 	bl	8004eb6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_OSPI_Init+0x150>)
 800491e:	4013      	ands	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68d1      	ldr	r1, [r2, #12]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6912      	ldr	r2, [r2, #16]
 8004928:	3a01      	subs	r2, #1
 800492a:	0412      	lsls	r2, r2, #16
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6952      	ldr	r2, [r2, #20]
 8004932:	3a01      	subs	r2, #1
 8004934:	0212      	lsls	r2, r2, #8
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	69d2      	ldr	r2, [r2, #28]
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0412      	lsls	r2, r2, #16
 8004956:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	2120      	movs	r1, #32
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fddc 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d146      	bne.n	8004a1c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1e5a      	subs	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049c4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0202 	orr.w	r2, r2, #2
 8004a02:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a0c:	d103      	bne.n	8004a16 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	645a      	str	r2, [r3, #68]	; 0x44
 8004a14:	e002      	b.n	8004a1c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	f8e0f8f4 	.word	0xf8e0f8f4

08004a2c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	e015      	b.n	8004a70 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0202 	bic.w	r2, r2, #2
 8004a62:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fe f97b 	bl	8002d60 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b08a      	sub	sp, #40	; 0x28
 8004a7e:	af02      	add	r7, sp, #8
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004a86:	f7fe fc89 	bl	800339c <HAL_GetTick>
 8004a8a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d104      	bne.n	8004aa8 <HAL_OSPI_Command+0x2e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_OSPI_Command+0x4a>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b14      	cmp	r3, #20
 8004aac:	d103      	bne.n	8004ab6 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d006      	beq.n	8004ac4 <HAL_OSPI_Command+0x4a>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b24      	cmp	r3, #36	; 0x24
 8004aba:	d153      	bne.n	8004b64 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d14f      	bne.n	8004b64 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2120      	movs	r1, #32
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fd34 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d148      	bne.n	8004b70 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fd60 	bl	80055ac <OSPI_ConfigCmd>
 8004aec:	4603      	mov	r3, r0
 8004aee:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d13c      	bne.n	8004b70 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2201      	movs	r2, #1
 8004b06:	2102      	movs	r1, #2
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fd17 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004b1a:	e029      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2204      	movs	r2, #4
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b2a:	e021      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10b      	bne.n	8004b4c <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	2b24      	cmp	r3, #36	; 0x24
 8004b3a:	d103      	bne.n	8004b44 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b42:	e015      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2214      	movs	r2, #20
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b4a:	e011      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	2b14      	cmp	r3, #20
 8004b52:	d103      	bne.n	8004b5c <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2204      	movs	r2, #4
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b5a:	e009      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2224      	movs	r2, #36	; 0x24
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b62:	e005      	b.n	8004b70 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	649a      	str	r2, [r3, #72]	; 0x48
 8004b6e:	e000      	b.n	8004b72 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8004b70:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7fe fc08 	bl	800339c <HAL_GetTick>
 8004b8c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3350      	adds	r3, #80	; 0x50
 8004b94:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	649a      	str	r2, [r3, #72]	; 0x48
 8004ba6:	e057      	b.n	8004c58 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d14e      	bne.n	8004c4e <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bd8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2201      	movs	r2, #1
 8004be2:	2104      	movs	r1, #4
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fca9 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d113      	bne.n	8004c1c <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1df      	bne.n	8004bda <HAL_OSPI_Transmit+0x5e>
 8004c1a:	e000      	b.n	8004c1e <HAL_OSPI_Transmit+0xa2>
          break;
 8004c1c:	bf00      	nop

      if (status == HAL_OK)
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d119      	bne.n	8004c58 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fc84 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2202      	movs	r2, #2
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8004c4c:	e004      	b.n	8004c58 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2210      	movs	r2, #16
 8004c56:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b08c      	sub	sp, #48	; 0x30
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004c6e:	f7fe fb95 	bl	800339c <HAL_GetTick>
 8004c72:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3350      	adds	r3, #80	; 0x50
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	649a      	str	r2, [r3, #72]	; 0x48
 8004ca0:	e07c      	b.n	8004d9c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d172      	bne.n	8004d90 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce0:	d104      	bne.n	8004cec <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	649a      	str	r2, [r3, #72]	; 0x48
 8004cea:	e011      	b.n	8004d10 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	649a      	str	r2, [r3, #72]	; 0x48
 8004d04:	e004      	b.n	8004d10 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2201      	movs	r2, #1
 8004d18:	2106      	movs	r1, #6
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fc0e 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8004d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d114      	bne.n	8004d58 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1dc      	bne.n	8004d10 <HAL_OSPI_Receive+0xae>
 8004d56:	e000      	b.n	8004d5a <HAL_OSPI_Receive+0xf8>
          break;
 8004d58:	bf00      	nop

      if (status == HAL_OK)
 8004d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11c      	bne.n	8004d9c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fbe5 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8004d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10d      	bne.n	8004d9c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2202      	movs	r2, #2
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d8e:	e005      	b.n	8004d9c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2210      	movs	r2, #16
 8004d9a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3728      	adds	r7, #40	; 0x28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7fe faf2 	bl	800339c <HAL_GetTick>
 8004db8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004dca:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d164      	bne.n	8004e9e <HAL_OSPI_AutoPolling+0xf6>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ddc:	d15f      	bne.n	8004e9e <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2120      	movs	r1, #32
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fba7 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d158      	bne.n	8004eaa <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	6852      	ldr	r2, [r2, #4]
 8004e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	6912      	ldr	r2, [r2, #16]
 8004e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004e3a:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e44:	d104      	bne.n	8004e50 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	649a      	str	r2, [r3, #72]	; 0x48
 8004e4e:	e011      	b.n	8004e74 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	649a      	str	r2, [r3, #72]	; 0x48
 8004e68:	e004      	b.n	8004e74 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fb5c 	bl	800553c <OSPI_WaitFlagStateUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004e88:	7ffb      	ldrb	r3, [r7, #31]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2208      	movs	r2, #8
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e9c:	e005      	b.n	8004eaa <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	649a      	str	r2, [r3, #72]	; 0x48
 8004ea8:	e000      	b.n	8004eac <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8004eaa:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b092      	sub	sp, #72	; 0x48
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <HAL_OSPIM_Config+0x40>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d105      	bne.n	8004f02 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004f00:	e004      	b.n	8004f0c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004f02:	2301      	movs	r3, #1
 8004f04:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f12:	e01f      	b.n	8004f54 <HAL_OSPIM_Config+0x80>
 8004f14:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004f18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b2d8      	uxtb	r0, r3
 8004f20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004f24:	f107 0114 	add.w	r1, r7, #20
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	4619      	mov	r1, r3
 8004f34:	f000 fc9c 	bl	8005870 <OSPIM_GetConfig>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2208      	movs	r2, #8
 8004f48:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d9dd      	bls.n	8004f18 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 82de 	bne.w	8005522 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004f66:	4bc6      	ldr	r3, [pc, #792]	; (8005280 <HAL_OSPIM_Config+0x3ac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004f72:	4bc3      	ldr	r3, [pc, #780]	; (8005280 <HAL_OSPIM_Config+0x3ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4ac2      	ldr	r2, [pc, #776]	; (8005280 <HAL_OSPIM_Config+0x3ac>)
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004f7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004f8a:	4bbe      	ldr	r3, [pc, #760]	; (8005284 <HAL_OSPIM_Config+0x3b0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f96:	4bbb      	ldr	r3, [pc, #748]	; (8005284 <HAL_OSPIM_Config+0x3b0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4aba      	ldr	r2, [pc, #744]	; (8005284 <HAL_OSPIM_Config+0x3b0>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004fa2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004fa6:	f043 0302 	orr.w	r3, r3, #2
 8004faa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004fae:	49b6      	ldr	r1, [pc, #728]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8004fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3348      	adds	r3, #72	; 0x48
 8004fbc:	443b      	add	r3, r7
 8004fbe:	3b2c      	subs	r3, #44	; 0x2c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	48af      	ldr	r0, [pc, #700]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8004fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3348      	adds	r3, #72	; 0x48
 8004fd8:	443b      	add	r3, r7
 8004fda:	3b2c      	subs	r3, #44	; 0x2c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4403      	add	r3, r0
 8004fe8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3348      	adds	r3, #72	; 0x48
 8004ff6:	443b      	add	r3, r7
 8004ff8:	3b34      	subs	r3, #52	; 0x34
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a1 	beq.w	8005144 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005002:	49a1      	ldr	r1, [pc, #644]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3348      	adds	r3, #72	; 0x48
 8005010:	443b      	add	r3, r7
 8005012:	3b34      	subs	r3, #52	; 0x34
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	489a      	ldr	r0, [pc, #616]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	3348      	adds	r3, #72	; 0x48
 800502c:	443b      	add	r3, r7
 800502e:	3b34      	subs	r3, #52	; 0x34
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3b01      	subs	r3, #1
 8005034:	f021 0201 	bic.w	r2, r1, #1
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4403      	add	r3, r0
 800503c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800503e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	3348      	adds	r3, #72	; 0x48
 800504a:	443b      	add	r3, r7
 800504c:	3b30      	subs	r3, #48	; 0x30
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01d      	beq.n	8005090 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005054:	498c      	ldr	r1, [pc, #560]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3348      	adds	r3, #72	; 0x48
 8005062:	443b      	add	r3, r7
 8005064:	3b30      	subs	r3, #48	; 0x30
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	6859      	ldr	r1, [r3, #4]
 8005070:	4885      	ldr	r0, [pc, #532]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	3348      	adds	r3, #72	; 0x48
 800507e:	443b      	add	r3, r7
 8005080:	3b30      	subs	r3, #48	; 0x30
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3b01      	subs	r3, #1
 8005086:	f021 0210 	bic.w	r2, r1, #16
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4403      	add	r3, r0
 800508e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	3348      	adds	r3, #72	; 0x48
 800509c:	443b      	add	r3, r7
 800509e:	3b28      	subs	r3, #40	; 0x28
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d021      	beq.n	80050ea <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80050a6:	4978      	ldr	r1, [pc, #480]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 80050a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	3348      	adds	r3, #72	; 0x48
 80050b4:	443b      	add	r3, r7
 80050b6:	3b28      	subs	r3, #40	; 0x28
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	4870      	ldr	r0, [pc, #448]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 80050c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3348      	adds	r3, #72	; 0x48
 80050d4:	443b      	add	r3, r7
 80050d6:	3b28      	subs	r3, #40	; 0x28
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4403      	add	r3, r0
 80050e8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80050ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	3348      	adds	r3, #72	; 0x48
 80050f6:	443b      	add	r3, r7
 80050f8:	3b24      	subs	r3, #36	; 0x24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d021      	beq.n	8005144 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005100:	4961      	ldr	r1, [pc, #388]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	3348      	adds	r3, #72	; 0x48
 800510e:	443b      	add	r3, r7
 8005110:	3b24      	subs	r3, #36	; 0x24
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3b01      	subs	r3, #1
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	4859      	ldr	r0, [pc, #356]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 8005122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	3348      	adds	r3, #72	; 0x48
 800512e:	443b      	add	r3, r7
 8005130:	3b24      	subs	r3, #36	; 0x24
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4403      	add	r3, r0
 8005142:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6819      	ldr	r1, [r3, #0]
 8005148:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3348      	adds	r3, #72	; 0x48
 8005156:	443b      	add	r3, r7
 8005158:	3b34      	subs	r3, #52	; 0x34
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4299      	cmp	r1, r3
 800515e:	d038      	beq.n	80051d2 <HAL_OSPIM_Config+0x2fe>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3348      	adds	r3, #72	; 0x48
 8005172:	443b      	add	r3, r7
 8005174:	3b30      	subs	r3, #48	; 0x30
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4299      	cmp	r1, r3
 800517a:	d02a      	beq.n	80051d2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6899      	ldr	r1, [r3, #8]
 8005180:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	3348      	adds	r3, #72	; 0x48
 800518e:	443b      	add	r3, r7
 8005190:	3b2c      	subs	r3, #44	; 0x2c
 8005192:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005194:	4299      	cmp	r1, r3
 8005196:	d01c      	beq.n	80051d2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3348      	adds	r3, #72	; 0x48
 80051aa:	443b      	add	r3, r7
 80051ac:	3b28      	subs	r3, #40	; 0x28
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4299      	cmp	r1, r3
 80051b2:	d00e      	beq.n	80051d2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6919      	ldr	r1, [r3, #16]
 80051b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3348      	adds	r3, #72	; 0x48
 80051c6:	443b      	add	r3, r7
 80051c8:	3b24      	subs	r3, #36	; 0x24
 80051ca:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80051cc:	4299      	cmp	r1, r3
 80051ce:	f040 80d3 	bne.w	8005378 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80051d2:	492d      	ldr	r1, [pc, #180]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 80051d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	3348      	adds	r3, #72	; 0x48
 80051e2:	443b      	add	r3, r7
 80051e4:	3b34      	subs	r3, #52	; 0x34
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	4825      	ldr	r0, [pc, #148]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 80051f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	3348      	adds	r3, #72	; 0x48
 8005200:	443b      	add	r3, r7
 8005202:	3b34      	subs	r3, #52	; 0x34
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3b01      	subs	r3, #1
 8005208:	f021 0201 	bic.w	r2, r1, #1
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4403      	add	r3, r0
 8005210:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005212:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	3348      	adds	r3, #72	; 0x48
 8005220:	443b      	add	r3, r7
 8005222:	3b30      	subs	r3, #48	; 0x30
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01f      	beq.n	800526a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800522a:	4917      	ldr	r1, [pc, #92]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 800522c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	3348      	adds	r3, #72	; 0x48
 800523a:	443b      	add	r3, r7
 800523c:	3b30      	subs	r3, #48	; 0x30
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3b01      	subs	r3, #1
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	480f      	ldr	r0, [pc, #60]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 800524a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3348      	adds	r3, #72	; 0x48
 8005258:	443b      	add	r3, r7
 800525a:	3b30      	subs	r3, #48	; 0x30
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	f021 0210 	bic.w	r2, r1, #16
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4403      	add	r3, r0
 8005268:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800526a:	4907      	ldr	r1, [pc, #28]	; (8005288 <HAL_OSPIM_Config+0x3b4>)
 800526c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	3348      	adds	r3, #72	; 0x48
 800527a:	443b      	add	r3, r7
 800527c:	3b2c      	subs	r3, #44	; 0x2c
 800527e:	e005      	b.n	800528c <HAL_OSPIM_Config+0x3b8>
 8005280:	a0001000 	.word	0xa0001000
 8005284:	a0001400 	.word	0xa0001400
 8005288:	50061c00 	.word	0x50061c00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	48a6      	ldr	r0, [pc, #664]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005298:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3348      	adds	r3, #72	; 0x48
 80052a6:	443b      	add	r3, r7
 80052a8:	3b2c      	subs	r3, #44	; 0x2c
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4403      	add	r3, r0
 80052b6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80052b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	3348      	adds	r3, #72	; 0x48
 80052c6:	443b      	add	r3, r7
 80052c8:	3b28      	subs	r3, #40	; 0x28
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80052d0:	4997      	ldr	r1, [pc, #604]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80052d2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	3348      	adds	r3, #72	; 0x48
 80052e0:	443b      	add	r3, r7
 80052e2:	3b28      	subs	r3, #40	; 0x28
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	488f      	ldr	r0, [pc, #572]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80052f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3348      	adds	r3, #72	; 0x48
 8005302:	443b      	add	r3, r7
 8005304:	3b28      	subs	r3, #40	; 0x28
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005318:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	3348      	adds	r3, #72	; 0x48
 8005326:	443b      	add	r3, r7
 8005328:	3b24      	subs	r3, #36	; 0x24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005330:	497f      	ldr	r1, [pc, #508]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005332:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3348      	adds	r3, #72	; 0x48
 8005340:	443b      	add	r3, r7
 8005342:	3b24      	subs	r3, #36	; 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3b01      	subs	r3, #1
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	4877      	ldr	r0, [pc, #476]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005354:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	3348      	adds	r3, #72	; 0x48
 8005362:	443b      	add	r3, r7
 8005364:	3b24      	subs	r3, #36	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3b01      	subs	r3, #1
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4403      	add	r3, r0
 8005376:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005378:	4a6d      	ldr	r2, [pc, #436]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	3b01      	subs	r3, #1
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800538a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	431a      	orrs	r2, r3
 8005390:	4967      	ldr	r1, [pc, #412]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	3b01      	subs	r3, #1
 8005398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80053a2:	4a63      	ldr	r2, [pc, #396]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f023 0203 	bic.w	r2, r3, #3
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	431a      	orrs	r2, r3
 80053ba:	495d      	ldr	r1, [pc, #372]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d014      	beq.n	80053fe <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80053d4:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	015b      	lsls	r3, r3, #5
 80053ea:	431a      	orrs	r2, r3
 80053ec:	4950      	ldr	r1, [pc, #320]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f042 0210 	orr.w	r2, r2, #16
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800540a:	4a49      	ldr	r2, [pc, #292]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	3b01      	subs	r3, #1
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005422:	049b      	lsls	r3, r3, #18
 8005424:	431a      	orrs	r2, r3
 8005426:	4942      	ldr	r1, [pc, #264]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	3b01      	subs	r3, #1
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	e01c      	b.n	8005478 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d018      	beq.n	8005478 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	3b01      	subs	r3, #1
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	069b      	lsls	r3, r3, #26
 8005460:	431a      	orrs	r2, r3
 8005462:	4933      	ldr	r1, [pc, #204]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	3b01      	subs	r3, #1
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d019      	beq.n	80054b8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	3b01      	subs	r3, #1
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800549a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549c:	049b      	lsls	r3, r3, #18
 800549e:	431a      	orrs	r2, r3
 80054a0:	4923      	ldr	r1, [pc, #140]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	e01c      	b.n	80054f2 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d018      	beq.n	80054f2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80054c0:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	069b      	lsls	r3, r3, #26
 80054da:	431a      	orrs	r2, r3
 80054dc:	4914      	ldr	r1, [pc, #80]	; (8005530 <HAL_OSPIM_Config+0x65c>)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80054f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <HAL_OSPIM_Config+0x660>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0c      	ldr	r2, [pc, #48]	; (8005534 <HAL_OSPIM_Config+0x660>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800550a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_OSPIM_Config+0x664>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a07      	ldr	r2, [pc, #28]	; (8005538 <HAL_OSPIM_Config+0x664>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005522:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005526:	4618      	mov	r0, r3
 8005528:	3748      	adds	r7, #72	; 0x48
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	50061c00 	.word	0x50061c00
 8005534:	a0001000 	.word	0xa0001000
 8005538:	a0001400 	.word	0xa0001400

0800553c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800554c:	e01a      	b.n	8005584 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d016      	beq.n	8005584 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd ff21 	bl	800339c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005572:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e00e      	b.n	80055a2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d1d6      	bne.n	800554e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055c8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d114      	bne.n	800561a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80055f8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005602:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800560c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e013      	b.n	8005642 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005622:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800562c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005636:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005640:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	431a      	orrs	r2, r3
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	4319      	orrs	r1, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	430b      	orrs	r3, r1
 8005678:	431a      	orrs	r2, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 021f 	bic.w	r2, r3, #31
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	431a      	orrs	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3a01      	subs	r2, #1
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8099 	beq.w	80057e8 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d055      	beq.n	800576a <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01e      	beq.n	8005704 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b68      	ldr	r3, [pc, #416]	; (800586c <OSPI_ConfigCmd+0x2c0>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	68d1      	ldr	r1, [r2, #12]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	6952      	ldr	r2, [r2, #20]
 80056d6:	4311      	orrs	r1, r2
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	6912      	ldr	r2, [r2, #16]
 80056dc:	4311      	orrs	r1, r2
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	69d2      	ldr	r2, [r2, #28]
 80056e2:	4311      	orrs	r1, r2
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056e8:	4311      	orrs	r1, r2
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	6a12      	ldr	r2, [r2, #32]
 80056ee:	4311      	orrs	r1, r2
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056f4:	4311      	orrs	r1, r2
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056fa:	430a      	orrs	r2, r1
 80056fc:	431a      	orrs	r2, r3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e028      	b.n	8005756 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800570c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	68d1      	ldr	r1, [r2, #12]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	6952      	ldr	r2, [r2, #20]
 8005718:	4311      	orrs	r1, r2
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	6912      	ldr	r2, [r2, #16]
 800571e:	4311      	orrs	r1, r2
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	69d2      	ldr	r2, [r2, #28]
 8005724:	4311      	orrs	r1, r2
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800572a:	4311      	orrs	r1, r2
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	6a12      	ldr	r2, [r2, #32]
 8005730:	430a      	orrs	r2, r1
 8005732:	431a      	orrs	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005740:	d109      	bne.n	8005756 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005746:	2b08      	cmp	r3, #8
 8005748:	d105      	bne.n	8005756 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	6992      	ldr	r2, [r2, #24]
 8005766:	649a      	str	r2, [r3, #72]	; 0x48
 8005768:	e078      	b.n	800585c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800577a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	68d1      	ldr	r1, [r2, #12]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	6952      	ldr	r2, [r2, #20]
 8005786:	4311      	orrs	r1, r2
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	6912      	ldr	r2, [r2, #16]
 800578c:	4311      	orrs	r1, r2
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005792:	4311      	orrs	r1, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005798:	430a      	orrs	r2, r1
 800579a:	431a      	orrs	r2, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e01d      	b.n	80057de <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68d9      	ldr	r1, [r3, #12]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4319      	orrs	r1, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	431a      	orrs	r2, r3
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c8:	d109      	bne.n	80057de <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d105      	bne.n	80057de <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e039      	b.n	800585c <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d030      	beq.n	8005852 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d017      	beq.n	8005828 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005800:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	69d1      	ldr	r1, [r2, #28]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800580c:	4311      	orrs	r1, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	6a12      	ldr	r2, [r2, #32]
 8005812:	4311      	orrs	r1, r2
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005818:	4311      	orrs	r1, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800581e:	430a      	orrs	r2, r1
 8005820:	431a      	orrs	r2, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e00e      	b.n	8005846 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	4319      	orrs	r1, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	430b      	orrs	r3, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	6992      	ldr	r2, [r2, #24]
 800584e:	649a      	str	r2, [r3, #72]	; 0x48
 8005850:	e004      	b.n	800585c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2208      	movs	r2, #8
 800585a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800585c:	7ffb      	ldrb	r3, [r7, #31]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	f0ffc0c0 	.word	0xf0ffc0c0

08005870 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	6039      	str	r1, [r7, #0]
 800587a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <OSPIM_GetConfig+0x26>
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d802      	bhi.n	8005896 <OSPIM_GetConfig+0x26>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
 800589a:	e08e      	b.n	80059ba <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d101      	bne.n	80058c4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80058c0:	4b41      	ldr	r3, [pc, #260]	; (80059c8 <OSPIM_GetConfig+0x158>)
 80058c2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e074      	b.n	80059b4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80058ca:	4a40      	ldr	r2, [pc, #256]	; (80059cc <OSPIM_GetConfig+0x15c>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4053      	eors	r3, r2
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4053      	eors	r3, r2
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4053      	eors	r3, r2
 8005926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4053      	eors	r3, r2
 8005946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d111      	bne.n	8005972 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e005      	b.n	8005972 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d018      	beq.n	80059ae <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4053      	eors	r3, r2
 8005982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d111      	bne.n	80059ae <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	e005      	b.n	80059ae <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d987      	bls.n	80058ca <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	04040222 	.word	0x04040222
 80059cc:	50061c00 	.word	0x50061c00

080059d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <HAL_PWREx_GetVoltageRange+0x3c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d102      	bne.n	80059e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80059e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e6:	e00b      	b.n	8005a00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80059e8:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <HAL_PWREx_GetVoltageRange+0x3c>)
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f6:	d102      	bne.n	80059fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80059f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059fc:	e000      	b.n	8005a00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80059fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40007000 	.word	0x40007000

08005a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d141      	bne.n	8005aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a1e:	4b4b      	ldr	r3, [pc, #300]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2a:	d131      	bne.n	8005a90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a2c:	4b47      	ldr	r3, [pc, #284]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a32:	4a46      	ldr	r2, [pc, #280]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a3c:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a44:	4a41      	ldr	r2, [pc, #260]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005a4c:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2232      	movs	r2, #50	; 0x32
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	4a3f      	ldr	r2, [pc, #252]	; (8005b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	0c9b      	lsrs	r3, r3, #18
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a62:	e002      	b.n	8005a6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a6a:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a76:	d102      	bne.n	8005a7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f2      	bne.n	8005a64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8a:	d158      	bne.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e057      	b.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a90:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a96:	4a2d      	ldr	r2, [pc, #180]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005aa0:	e04d      	b.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa8:	d141      	bne.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005aaa:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d131      	bne.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005abe:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2232      	movs	r2, #50	; 0x32
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	0c9b      	lsrs	r3, r3, #18
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aee:	e002      	b.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	d102      	bne.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f2      	bne.n	8005af0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d112      	bne.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e011      	b.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b2c:	e007      	b.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b3c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	200001dc 	.word	0x200001dc
 8005b54:	431bde83 	.word	0x431bde83

08005b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f000 bc08 	b.w	800637c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6c:	4b96      	ldr	r3, [pc, #600]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 030c 	and.w	r3, r3, #12
 8005b74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b76:	4b94      	ldr	r3, [pc, #592]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80e4 	beq.w	8005d56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x4c>
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	f040 808b 	bne.w	8005cb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	f040 8087 	bne.w	8005cb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ba4:	4b88      	ldr	r3, [pc, #544]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x64>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e3df      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x7e>
 8005bcc:	4b7e      	ldr	r3, [pc, #504]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd4:	e005      	b.n	8005be2 <HAL_RCC_OscConfig+0x8a>
 8005bd6:	4b7c      	ldr	r3, [pc, #496]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d223      	bcs.n	8005c2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fdfe 	bl	80067ec <RCC_SetFlashLatencyFromMSIRange>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e3c0      	b.n	800637c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bfa:	4b73      	ldr	r3, [pc, #460]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a72      	ldr	r2, [pc, #456]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c00:	f043 0308 	orr.w	r3, r3, #8
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	496d      	ldr	r1, [pc, #436]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c18:	4b6b      	ldr	r3, [pc, #428]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	4968      	ldr	r1, [pc, #416]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
 8005c2c:	e025      	b.n	8005c7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c2e:	4b66      	ldr	r3, [pc, #408]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a65      	ldr	r2, [pc, #404]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c34:	f043 0308 	orr.w	r3, r3, #8
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4b63      	ldr	r3, [pc, #396]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4960      	ldr	r1, [pc, #384]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c4c:	4b5e      	ldr	r3, [pc, #376]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	495b      	ldr	r1, [pc, #364]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fdbe 	bl	80067ec <RCC_SetFlashLatencyFromMSIRange>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e380      	b.n	800637c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c7a:	f000 fcc1 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	4b51      	ldr	r3, [pc, #324]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	4950      	ldr	r1, [pc, #320]	; (8005dcc <HAL_RCC_OscConfig+0x274>)
 8005c8c:	5ccb      	ldrb	r3, [r1, r3]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	fa22 f303 	lsr.w	r3, r2, r3
 8005c96:	4a4e      	ldr	r2, [pc, #312]	; (8005dd0 <HAL_RCC_OscConfig+0x278>)
 8005c98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c9a:	4b4e      	ldr	r3, [pc, #312]	; (8005dd4 <HAL_RCC_OscConfig+0x27c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd f906 	bl	8002eb0 <HAL_InitTick>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d052      	beq.n	8005d54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	e364      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d032      	beq.n	8005d20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cba:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a42      	ldr	r2, [pc, #264]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cc6:	f7fd fb69 	bl	800339c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cce:	f7fd fb65 	bl	800339c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e34d      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ce0:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cec:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005cf2:	f043 0308 	orr.w	r3, r3, #8
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	4930      	ldr	r1, [pc, #192]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	492b      	ldr	r1, [pc, #172]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	604b      	str	r3, [r1, #4]
 8005d1e:	e01a      	b.n	8005d56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d20:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d2c:	f7fd fb36 	bl	800339c <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d34:	f7fd fb32 	bl	800339c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e31a      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d46:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x1dc>
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d073      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_OscConfig+0x21c>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	d10e      	bne.n	8005d8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d063      	beq.n	8005e48 <HAL_RCC_OscConfig+0x2f0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d15f      	bne.n	8005e48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e2f7      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d106      	bne.n	8005da4 <HAL_RCC_OscConfig+0x24c>
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e025      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dac:	d114      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x280>
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a02      	ldr	r2, [pc, #8]	; (8005dc8 <HAL_RCC_OscConfig+0x270>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e013      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	08012610 	.word	0x08012610
 8005dd0:	200001dc 	.word	0x200001dc
 8005dd4:	20000214 	.word	0x20000214
 8005dd8:	4ba0      	ldr	r3, [pc, #640]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a9f      	ldr	r2, [pc, #636]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4b9d      	ldr	r3, [pc, #628]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a9c      	ldr	r2, [pc, #624]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fd fad0 	bl	800339c <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e00:	f7fd facc 	bl	800339c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	; 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e2b4      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e12:	4b92      	ldr	r3, [pc, #584]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x2a8>
 8005e1e:	e014      	b.n	8005e4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fd fabc 	bl	800339c <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fd fab8 	bl	800339c <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e2a0      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e3a:	4b88      	ldr	r3, [pc, #544]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x2d0>
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d060      	beq.n	8005f18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_OscConfig+0x310>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d119      	bne.n	8005e96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d116      	bne.n	8005e96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e68:	4b7c      	ldr	r3, [pc, #496]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_OscConfig+0x328>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e27d      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e80:	4b76      	ldr	r3, [pc, #472]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	061b      	lsls	r3, r3, #24
 8005e8e:	4973      	ldr	r1, [pc, #460]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e94:	e040      	b.n	8005f18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d023      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a6e      	ldr	r2, [pc, #440]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eaa:	f7fd fa77 	bl	800339c <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb2:	f7fd fa73 	bl	800339c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e25b      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ec4:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed0:	4b62      	ldr	r3, [pc, #392]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	061b      	lsls	r3, r3, #24
 8005ede:	495f      	ldr	r1, [pc, #380]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	604b      	str	r3, [r1, #4]
 8005ee4:	e018      	b.n	8005f18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5c      	ldr	r2, [pc, #368]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef2:	f7fd fa53 	bl	800339c <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efa:	f7fd fa4f 	bl	800339c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e237      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f0      	bne.n	8005efa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d03c      	beq.n	8005f9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01c      	beq.n	8005f66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f32:	4a4a      	ldr	r2, [pc, #296]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fd fa2e 	bl	800339c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fd fa2a 	bl	800339c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e212      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ef      	beq.n	8005f44 <HAL_RCC_OscConfig+0x3ec>
 8005f64:	e01b      	b.n	8005f9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f66:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6c:	4a3b      	ldr	r2, [pc, #236]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f76:	f7fd fa11 	bl	800339c <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f7e:	f7fd fa0d 	bl	800339c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e1f5      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f90:	4b32      	ldr	r3, [pc, #200]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1ef      	bne.n	8005f7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a6 	beq.w	80060f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fac:	2300      	movs	r3, #0
 8005fae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc8:	4b24      	ldr	r3, [pc, #144]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd8:	4b21      	ldr	r3, [pc, #132]	; (8006060 <HAL_RCC_OscConfig+0x508>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d118      	bne.n	8006016 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <HAL_RCC_OscConfig+0x508>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <HAL_RCC_OscConfig+0x508>)
 8005fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff0:	f7fd f9d4 	bl	800339c <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff8:	f7fd f9d0 	bl	800339c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e1b8      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <HAL_RCC_OscConfig+0x508>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d108      	bne.n	8006030 <HAL_RCC_OscConfig+0x4d8>
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	4a0d      	ldr	r2, [pc, #52]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800602e:	e029      	b.n	8006084 <HAL_RCC_OscConfig+0x52c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b05      	cmp	r3, #5
 8006036:	d115      	bne.n	8006064 <HAL_RCC_OscConfig+0x50c>
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <HAL_RCC_OscConfig+0x504>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	4a07      	ldr	r2, [pc, #28]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_RCC_OscConfig+0x504>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	4a03      	ldr	r2, [pc, #12]	; (800605c <HAL_RCC_OscConfig+0x504>)
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006058:	e014      	b.n	8006084 <HAL_RCC_OscConfig+0x52c>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
 8006064:	4b9d      	ldr	r3, [pc, #628]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	4a9c      	ldr	r2, [pc, #624]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006074:	4b99      	ldr	r3, [pc, #612]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	4a98      	ldr	r2, [pc, #608]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d016      	beq.n	80060ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fd f986 	bl	800339c <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fd f982 	bl	800339c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e168      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060aa:	4b8c      	ldr	r3, [pc, #560]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ed      	beq.n	8006094 <HAL_RCC_OscConfig+0x53c>
 80060b8:	e015      	b.n	80060e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fd f96f 	bl	800339c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fd f96b 	bl	800339c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e151      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ed      	bne.n	80060c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ec:	4b7b      	ldr	r3, [pc, #492]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f0:	4a7a      	ldr	r2, [pc, #488]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80060f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d03c      	beq.n	800617e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01c      	beq.n	8006146 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610c:	4b73      	ldr	r3, [pc, #460]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800610e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006112:	4a72      	ldr	r2, [pc, #456]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fd f93e 	bl	800339c <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006124:	f7fd f93a 	bl	800339c <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e122      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006136:	4b69      	ldr	r3, [pc, #420]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ef      	beq.n	8006124 <HAL_RCC_OscConfig+0x5cc>
 8006144:	e01b      	b.n	800617e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006146:	4b65      	ldr	r3, [pc, #404]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614c:	4a63      	ldr	r2, [pc, #396]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fd f921 	bl	800339c <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615e:	f7fd f91d 	bl	800339c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e105      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006170:	4b5a      	ldr	r3, [pc, #360]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ef      	bne.n	800615e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80f9 	beq.w	800637a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	2b02      	cmp	r3, #2
 800618e:	f040 80cf 	bne.w	8006330 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006192:	4b52      	ldr	r3, [pc, #328]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f003 0203 	and.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d12c      	bne.n	8006200 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	3b01      	subs	r3, #1
 80061b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d123      	bne.n	8006200 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d11b      	bne.n	8006200 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d113      	bne.n	8006200 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d109      	bne.n	8006200 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	3b01      	subs	r3, #1
 80061fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d071      	beq.n	80062e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d068      	beq.n	80062d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006206:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006212:	4b32      	ldr	r3, [pc, #200]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0ac      	b.n	800637c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2d      	ldr	r2, [pc, #180]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800622c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800622e:	f7fd f8b5 	bl	800339c <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006236:	f7fd f8b1 	bl	800339c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e099      	b.n	800637c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006248:	4b24      	ldr	r3, [pc, #144]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006254:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800625a:	4013      	ands	r3, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006264:	3a01      	subs	r2, #1
 8006266:	0112      	lsls	r2, r2, #4
 8006268:	4311      	orrs	r1, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800626e:	0212      	lsls	r2, r2, #8
 8006270:	4311      	orrs	r1, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006276:	0852      	lsrs	r2, r2, #1
 8006278:	3a01      	subs	r2, #1
 800627a:	0552      	lsls	r2, r2, #21
 800627c:	4311      	orrs	r1, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006282:	0852      	lsrs	r2, r2, #1
 8006284:	3a01      	subs	r2, #1
 8006286:	0652      	lsls	r2, r2, #25
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800628e:	06d2      	lsls	r2, r2, #27
 8006290:	430a      	orrs	r2, r1
 8006292:	4912      	ldr	r1, [pc, #72]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006294:	4313      	orrs	r3, r2
 8006296:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006298:	4b10      	ldr	r3, [pc, #64]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 800629e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80062aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062b0:	f7fd f874 	bl	800339c <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fd f870 	bl	800339c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e058      	b.n	800637c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ca:	4b04      	ldr	r3, [pc, #16]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062d6:	e050      	b.n	800637a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e04f      	b.n	800637c <HAL_RCC_OscConfig+0x824>
 80062dc:	40021000 	.word	0x40021000
 80062e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e4:	4b27      	ldr	r3, [pc, #156]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d144      	bne.n	800637a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062f0:	4b24      	ldr	r3, [pc, #144]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a23      	ldr	r2, [pc, #140]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 80062f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062fc:	4b21      	ldr	r3, [pc, #132]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4a20      	ldr	r2, [pc, #128]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 8006302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006308:	f7fd f848 	bl	800339c <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006310:	f7fd f844 	bl	800339c <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e02c      	b.n	800637c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006322:	4b18      	ldr	r3, [pc, #96]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x7b8>
 800632e:	e024      	b.n	800637a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	d01f      	beq.n	8006376 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 800633c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006342:	f7fd f82b 	bl	800339c <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634a:	f7fd f827 	bl	800339c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e00f      	b.n	800637c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f0      	bne.n	800634a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	4905      	ldr	r1, [pc, #20]	; (8006384 <HAL_RCC_OscConfig+0x82c>)
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <HAL_RCC_OscConfig+0x830>)
 8006370:	4013      	ands	r3, r2
 8006372:	60cb      	str	r3, [r1, #12]
 8006374:	e001      	b.n	800637a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40021000 	.word	0x40021000
 8006388:	feeefffc 	.word	0xfeeefffc

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e11d      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a4:	4b90      	ldr	r3, [pc, #576]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d910      	bls.n	80063d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	4b8d      	ldr	r3, [pc, #564]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f023 020f 	bic.w	r2, r3, #15
 80063ba:	498b      	ldr	r1, [pc, #556]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e105      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d010      	beq.n	8006402 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	4b81      	ldr	r3, [pc, #516]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d908      	bls.n	8006402 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f0:	4b7e      	ldr	r3, [pc, #504]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	497b      	ldr	r1, [pc, #492]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d079      	beq.n	8006502 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d11e      	bne.n	8006454 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006416:	4b75      	ldr	r3, [pc, #468]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0dc      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006426:	f000 fa3b 	bl	80068a0 <RCC_GetSysClockFreqFromPLLSource>
 800642a:	4603      	mov	r3, r0
 800642c:	4a70      	ldr	r2, [pc, #448]	; (80065f0 <HAL_RCC_ClockConfig+0x264>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d946      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006432:	4b6e      	ldr	r3, [pc, #440]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d140      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800643e:	4b6b      	ldr	r3, [pc, #428]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006446:	4a69      	ldr	r2, [pc, #420]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800644e:	2380      	movs	r3, #128	; 0x80
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e035      	b.n	80064c0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d107      	bne.n	800646c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800645c:	4b63      	ldr	r3, [pc, #396]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d115      	bne.n	8006494 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0b9      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006474:	4b5d      	ldr	r3, [pc, #372]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0ad      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006484:	4b59      	ldr	r3, [pc, #356]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0a5      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006494:	f000 f8b4 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 8006498:	4603      	mov	r3, r0
 800649a:	4a55      	ldr	r2, [pc, #340]	; (80065f0 <HAL_RCC_ClockConfig+0x264>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d90f      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80064a0:	4b52      	ldr	r3, [pc, #328]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ac:	4b4f      	ldr	r3, [pc, #316]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b4:	4a4d      	ldr	r2, [pc, #308]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064c0:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f023 0203 	bic.w	r2, r3, #3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4947      	ldr	r1, [pc, #284]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d2:	f7fc ff63 	bl	800339c <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d8:	e00a      	b.n	80064f0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064da:	f7fc ff5f 	bl	800339c <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e077      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f0:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 020c 	and.w	r2, r3, #12
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	429a      	cmp	r2, r3
 8006500:	d1eb      	bne.n	80064da <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d105      	bne.n	8006514 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006508:	4b38      	ldr	r3, [pc, #224]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a37      	ldr	r2, [pc, #220]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800650e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006512:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652c:	429a      	cmp	r2, r3
 800652e:	d208      	bcs.n	8006542 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006530:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	492b      	ldr	r1, [pc, #172]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006542:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d210      	bcs.n	8006572 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f023 020f 	bic.w	r2, r3, #15
 8006558:	4923      	ldr	r1, [pc, #140]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	4313      	orrs	r3, r2
 800655e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006560:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <HAL_RCC_ClockConfig+0x25c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d001      	beq.n	8006572 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e036      	b.n	80065e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800657e:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4918      	ldr	r1, [pc, #96]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800659c:	4b13      	ldr	r3, [pc, #76]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4910      	ldr	r1, [pc, #64]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065b0:	f000 f826 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <HAL_RCC_ClockConfig+0x260>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	490c      	ldr	r1, [pc, #48]	; (80065f4 <HAL_RCC_ClockConfig+0x268>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <HAL_RCC_ClockConfig+0x26c>)
 80065ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCC_ClockConfig+0x270>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fc fc6b 	bl	8002eb0 <HAL_InitTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40022000 	.word	0x40022000
 80065ec:	40021000 	.word	0x40021000
 80065f0:	04c4b400 	.word	0x04c4b400
 80065f4:	08012610 	.word	0x08012610
 80065f8:	200001dc 	.word	0x200001dc
 80065fc:	20000214 	.word	0x20000214

08006600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006600:	b480      	push	{r7}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 030c 	and.w	r3, r3, #12
 8006616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006618:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0x34>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b0c      	cmp	r3, #12
 800662c:	d121      	bne.n	8006672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d11e      	bne.n	8006672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d107      	bne.n	8006650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006640:	4b31      	ldr	r3, [pc, #196]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e005      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800665c:	4a2b      	ldr	r2, [pc, #172]	; (800670c <HAL_RCC_GetSysClockFreq+0x10c>)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10d      	bne.n	8006688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b04      	cmp	r3, #4
 8006676:	d102      	bne.n	800667e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006678:	4b25      	ldr	r3, [pc, #148]	; (8006710 <HAL_RCC_GetSysClockFreq+0x110>)
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e004      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d101      	bne.n	8006688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <HAL_RCC_GetSysClockFreq+0x114>)
 8006686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d134      	bne.n	80066f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800668e:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d003      	beq.n	80066a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d003      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0xac>
 80066a4:	e005      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80066a6:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCC_GetSysClockFreq+0x110>)
 80066a8:	617b      	str	r3, [r7, #20]
      break;
 80066aa:	e005      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066ac:	4b19      	ldr	r3, [pc, #100]	; (8006714 <HAL_RCC_GetSysClockFreq+0x114>)
 80066ae:	617b      	str	r3, [r7, #20]
      break;
 80066b0:	e002      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	617b      	str	r3, [r7, #20]
      break;
 80066b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	3301      	adds	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	fb03 f202 	mul.w	r2, r3, r2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_RCC_GetSysClockFreq+0x108>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	0e5b      	lsrs	r3, r3, #25
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	3301      	adds	r3, #1
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066f8:	69bb      	ldr	r3, [r7, #24]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3724      	adds	r7, #36	; 0x24
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	08012628 	.word	0x08012628
 8006710:	00f42400 	.word	0x00f42400
 8006714:	007a1200 	.word	0x007a1200

08006718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <HAL_RCC_GetHCLKFreq+0x14>)
 800671e:	681b      	ldr	r3, [r3, #0]
}
 8006720:	4618      	mov	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	200001dc 	.word	0x200001dc

08006730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006734:	f7ff fff0 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	4904      	ldr	r1, [pc, #16]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40021000 	.word	0x40021000
 8006758:	08012620 	.word	0x08012620

0800675c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006760:	f7ff ffda 	bl	8006718 <HAL_RCC_GetHCLKFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	0adb      	lsrs	r3, r3, #11
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40021000 	.word	0x40021000
 8006784:	08012620 	.word	0x08012620

08006788 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	220f      	movs	r2, #15
 8006796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <HAL_RCC_GetClockConfig+0x5c>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0203 	and.w	r2, r3, #3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80067a4:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <HAL_RCC_GetClockConfig+0x5c>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <HAL_RCC_GetClockConfig+0x5c>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCC_GetClockConfig+0x5c>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_RCC_GetClockConfig+0x60>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 020f 	and.w	r2, r3, #15
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	601a      	str	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000
 80067e8:	40022000 	.word	0x40022000

080067ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006804:	f7ff f8e4 	bl	80059d0 <HAL_PWREx_GetVoltageRange>
 8006808:	6178      	str	r0, [r7, #20]
 800680a:	e014      	b.n	8006836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006816:	6593      	str	r3, [r2, #88]	; 0x58
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006824:	f7ff f8d4 	bl	80059d0 <HAL_PWREx_GetVoltageRange>
 8006828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d10b      	bne.n	8006856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d913      	bls.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2ba0      	cmp	r3, #160	; 0xa0
 8006848:	d902      	bls.n	8006850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800684a:	2302      	movs	r3, #2
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e00d      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006850:	2301      	movs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e00a      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b7f      	cmp	r3, #127	; 0x7f
 800685a:	d902      	bls.n	8006862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800685c:	2302      	movs	r3, #2
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e004      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b70      	cmp	r3, #112	; 0x70
 8006866:	d101      	bne.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006868:	2301      	movs	r3, #1
 800686a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f023 020f 	bic.w	r2, r3, #15
 8006874:	4909      	ldr	r1, [pc, #36]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	429a      	cmp	r2, r3
 8006888:	d001      	beq.n	800688e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	40022000 	.word	0x40022000

080068a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068a6:	4b2d      	ldr	r3, [pc, #180]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d00b      	beq.n	80068ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d825      	bhi.n	8006908 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d008      	beq.n	80068d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d11f      	bne.n	8006908 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068ca:	613b      	str	r3, [r7, #16]
    break;
 80068cc:	e01f      	b.n	800690e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80068ce:	4b25      	ldr	r3, [pc, #148]	; (8006964 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80068d0:	613b      	str	r3, [r7, #16]
    break;
 80068d2:	e01c      	b.n	800690e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068d4:	4b21      	ldr	r3, [pc, #132]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	e005      	b.n	80068fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80068fc:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006904:	613b      	str	r3, [r7, #16]
    break;
 8006906:	e002      	b.n	800690e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
    break;
 800690c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	3301      	adds	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	fb03 f202 	mul.w	r2, r3, r2
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006932:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	0e5b      	lsrs	r3, r3, #25
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	3301      	adds	r3, #1
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800694e:	683b      	ldr	r3, [r7, #0]
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40021000 	.word	0x40021000
 8006960:	00f42400 	.word	0x00f42400
 8006964:	007a1200 	.word	0x007a1200
 8006968:	08012628 	.word	0x08012628

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006974:	2300      	movs	r3, #0
 8006976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006978:	2300      	movs	r3, #0
 800697a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006984:	2b00      	cmp	r3, #0
 8006986:	d040      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698c:	2b80      	cmp	r3, #128	; 0x80
 800698e:	d02a      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d825      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d026      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006998:	2b60      	cmp	r3, #96	; 0x60
 800699a:	d821      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d006      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d81d      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d010      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80069ac:	e018      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069ae:	4b89      	ldr	r3, [pc, #548]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	4a88      	ldr	r2, [pc, #544]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069ba:	e015      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fb02 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069cc:	e00c      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3320      	adds	r3, #32
 80069d2:	2100      	movs	r1, #0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fbed 	bl	80071b4 <RCCEx_PLLSAI2_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069de:	e003      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	74fb      	strb	r3, [r7, #19]
      break;
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80069e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e8:	7cfb      	ldrb	r3, [r7, #19]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ee:	4b79      	ldr	r3, [pc, #484]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fc:	4975      	ldr	r1, [pc, #468]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006a04:	e001      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d047      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1e:	d030      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d82a      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a2a:	d02a      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a30:	d824      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a36:	d008      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3c:	d81e      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a46:	d010      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a48:	e018      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a4a:	4b62      	ldr	r3, [pc, #392]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4a61      	ldr	r2, [pc, #388]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a54:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a56:	e015      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fab4 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a68:	e00c      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3320      	adds	r3, #32
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fb9f 	bl	80071b4 <RCCEx_PLLSAI2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a7a:	e003      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	74fb      	strb	r3, [r7, #19]
      break;
 8006a80:	e000      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a84:	7cfb      	ldrb	r3, [r7, #19]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a8a:	4b52      	ldr	r3, [pc, #328]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	494e      	ldr	r1, [pc, #312]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006aa0:	e001      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 809f 	beq.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ab8:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4b41      	ldr	r3, [pc, #260]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	4a40      	ldr	r2, [pc, #256]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8006ada:	4b3e      	ldr	r3, [pc, #248]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aea:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006af6:	f7fc fc51 	bl	800339c <HAL_GetTick>
 8006afa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006afc:	e009      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006afe:	f7fc fc4d 	bl	800339c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d902      	bls.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	74fb      	strb	r3, [r7, #19]
        break;
 8006b10:	e005      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b12:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0ef      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006b1e:	7cfb      	ldrb	r3, [r7, #19]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d15b      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b24:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01f      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d019      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b4e:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	4a1b      	ldr	r2, [pc, #108]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d016      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b80:	f7fc fc0c 	bl	800339c <HAL_GetTick>
 8006b84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b86:	e00b      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b88:	f7fc fc08 	bl	800339c <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d902      	bls.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	74fb      	strb	r3, [r7, #19]
            break;
 8006b9e:	e006      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0ec      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006bae:	7cfb      	ldrb	r3, [r7, #19]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc4:	4903      	ldr	r1, [pc, #12]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bcc:	e008      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bce:	7cfb      	ldrb	r3, [r7, #19]
 8006bd0:	74bb      	strb	r3, [r7, #18]
 8006bd2:	e005      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006be0:	7c7b      	ldrb	r3, [r7, #17]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d105      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be6:	4ba0      	ldr	r3, [pc, #640]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bea:	4a9f      	ldr	r2, [pc, #636]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bfe:	4b9a      	ldr	r3, [pc, #616]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c04:	f023 0203 	bic.w	r2, r3, #3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	4996      	ldr	r1, [pc, #600]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c20:	4b91      	ldr	r3, [pc, #580]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	f023 020c 	bic.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	498e      	ldr	r1, [pc, #568]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c42:	4b89      	ldr	r3, [pc, #548]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	4985      	ldr	r1, [pc, #532]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c64:	4b80      	ldr	r3, [pc, #512]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	497d      	ldr	r1, [pc, #500]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c86:	4b78      	ldr	r3, [pc, #480]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	4974      	ldr	r1, [pc, #464]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ca8:	4b6f      	ldr	r3, [pc, #444]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb6:	496c      	ldr	r1, [pc, #432]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cca:	4b67      	ldr	r3, [pc, #412]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd8:	4963      	ldr	r1, [pc, #396]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cec:	4b5e      	ldr	r3, [pc, #376]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	495b      	ldr	r1, [pc, #364]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d0e:	4b56      	ldr	r3, [pc, #344]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	4952      	ldr	r1, [pc, #328]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d30:	4b4d      	ldr	r3, [pc, #308]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3e:	494a      	ldr	r1, [pc, #296]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d52:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d60:	4941      	ldr	r1, [pc, #260]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d74:	4b3c      	ldr	r3, [pc, #240]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d7a:	f023 0203 	bic.w	r2, r3, #3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d82:	4939      	ldr	r1, [pc, #228]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d028      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d96:	4b34      	ldr	r3, [pc, #208]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da4:	4930      	ldr	r1, [pc, #192]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db4:	d106      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	4a2b      	ldr	r2, [pc, #172]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc0:	60d3      	str	r3, [r2, #12]
 8006dc2:	e011      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f8f9 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006de4:	7cfb      	ldrb	r3, [r7, #19]
 8006de6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d04d      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dfc:	d108      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e0e:	e012      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006e10:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e16:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e20:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e2e:	490e      	ldr	r1, [pc, #56]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e4a:	60d3      	str	r3, [r2, #12]
 8006e4c:	e020      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e56:	d109      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a02      	ldr	r2, [pc, #8]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e62:	60d3      	str	r3, [r2, #12]
 8006e64:	e014      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006e66:	bf00      	nop
 8006e68:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f8a5 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e86:	7cfb      	ldrb	r3, [r7, #19]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d028      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e9c:	4b4a      	ldr	r3, [pc, #296]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eaa:	4947      	ldr	r1, [pc, #284]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eba:	d106      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ebc:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4a41      	ldr	r2, [pc, #260]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ec6:	60d3      	str	r3, [r2, #12]
 8006ec8:	e011      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ed2:	d10c      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f876 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ee4:	7cfb      	ldrb	r3, [r7, #19]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006eea:	7cfb      	ldrb	r3, [r7, #19]
 8006eec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01e      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006efa:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f0a:	492f      	ldr	r1, [pc, #188]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1c:	d10c      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2102      	movs	r1, #2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f851 	bl	8006fcc <RCCEx_PLLSAI1_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f2e:	7cfb      	ldrb	r3, [r7, #19]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006f34:	7cfb      	ldrb	r3, [r7, #19]
 8006f36:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f44:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f4a:	f023 0204 	bic.w	r2, r3, #4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	491c      	ldr	r1, [pc, #112]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f68:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f6e:	f023 0218 	bic.w	r2, r3, #24
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	4913      	ldr	r1, [pc, #76]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d017      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9c:	490a      	ldr	r1, [pc, #40]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fae:	d105      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000

08006fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fda:	4b72      	ldr	r3, [pc, #456]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006fe6:	4b6f      	ldr	r3, [pc, #444]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0203 	and.w	r2, r3, #3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d103      	bne.n	8006ffe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d142      	bne.n	8007084 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	e03f      	b.n	8007084 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d018      	beq.n	800703e <RCCEx_PLLSAI1_Config+0x72>
 800700c:	2b03      	cmp	r3, #3
 800700e:	d825      	bhi.n	800705c <RCCEx_PLLSAI1_Config+0x90>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d002      	beq.n	800701a <RCCEx_PLLSAI1_Config+0x4e>
 8007014:	2b02      	cmp	r3, #2
 8007016:	d009      	beq.n	800702c <RCCEx_PLLSAI1_Config+0x60>
 8007018:	e020      	b.n	800705c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800701a:	4b62      	ldr	r3, [pc, #392]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d11d      	bne.n	8007062 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800702a:	e01a      	b.n	8007062 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800702c:	4b5d      	ldr	r3, [pc, #372]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007034:	2b00      	cmp	r3, #0
 8007036:	d116      	bne.n	8007066 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800703c:	e013      	b.n	8007066 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800703e:	4b59      	ldr	r3, [pc, #356]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10f      	bne.n	800706a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800704a:	4b56      	ldr	r3, [pc, #344]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800705a:	e006      	b.n	800706a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
      break;
 8007060:	e004      	b.n	800706c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800706a:	bf00      	nop
    }

    if(status == HAL_OK)
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007072:	4b4c      	ldr	r3, [pc, #304]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f023 0203 	bic.w	r2, r3, #3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4949      	ldr	r1, [pc, #292]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007080:	4313      	orrs	r3, r2
 8007082:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 8086 	bne.w	8007198 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800708c:	4b45      	ldr	r3, [pc, #276]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a44      	ldr	r2, [pc, #272]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007098:	f7fc f980 	bl	800339c <HAL_GetTick>
 800709c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800709e:	e009      	b.n	80070b4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070a0:	f7fc f97c 	bl	800339c <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d902      	bls.n	80070b4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	73fb      	strb	r3, [r7, #15]
        break;
 80070b2:	e005      	b.n	80070c0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070b4:	4b3b      	ldr	r3, [pc, #236]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1ef      	bne.n	80070a0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d168      	bne.n	8007198 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d113      	bne.n	80070f4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070cc:	4b35      	ldr	r3, [pc, #212]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	4b35      	ldr	r3, [pc, #212]	; (80071a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6892      	ldr	r2, [r2, #8]
 80070d8:	0211      	lsls	r1, r2, #8
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68d2      	ldr	r2, [r2, #12]
 80070de:	06d2      	lsls	r2, r2, #27
 80070e0:	4311      	orrs	r1, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6852      	ldr	r2, [r2, #4]
 80070e6:	3a01      	subs	r2, #1
 80070e8:	0112      	lsls	r2, r2, #4
 80070ea:	430a      	orrs	r2, r1
 80070ec:	492d      	ldr	r1, [pc, #180]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]
 80070f2:	e02d      	b.n	8007150 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d115      	bne.n	8007126 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070fa:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6892      	ldr	r2, [r2, #8]
 8007106:	0211      	lsls	r1, r2, #8
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6912      	ldr	r2, [r2, #16]
 800710c:	0852      	lsrs	r2, r2, #1
 800710e:	3a01      	subs	r2, #1
 8007110:	0552      	lsls	r2, r2, #21
 8007112:	4311      	orrs	r1, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6852      	ldr	r2, [r2, #4]
 8007118:	3a01      	subs	r2, #1
 800711a:	0112      	lsls	r2, r2, #4
 800711c:	430a      	orrs	r2, r1
 800711e:	4921      	ldr	r1, [pc, #132]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007120:	4313      	orrs	r3, r2
 8007122:	610b      	str	r3, [r1, #16]
 8007124:	e014      	b.n	8007150 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007126:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6892      	ldr	r2, [r2, #8]
 8007132:	0211      	lsls	r1, r2, #8
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6952      	ldr	r2, [r2, #20]
 8007138:	0852      	lsrs	r2, r2, #1
 800713a:	3a01      	subs	r2, #1
 800713c:	0652      	lsls	r2, r2, #25
 800713e:	4311      	orrs	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6852      	ldr	r2, [r2, #4]
 8007144:	3a01      	subs	r2, #1
 8007146:	0112      	lsls	r2, r2, #4
 8007148:	430a      	orrs	r2, r1
 800714a:	4916      	ldr	r1, [pc, #88]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800714c:	4313      	orrs	r3, r2
 800714e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007150:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800715a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715c:	f7fc f91e 	bl	800339c <HAL_GetTick>
 8007160:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007162:	e009      	b.n	8007178 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007164:	f7fc f91a 	bl	800339c <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d902      	bls.n	8007178 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	73fb      	strb	r3, [r7, #15]
          break;
 8007176:	e005      	b.n	8007184 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0ef      	beq.n	8007164 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	4904      	ldr	r1, [pc, #16]	; (80071a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007194:	4313      	orrs	r3, r2
 8007196:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40021000 	.word	0x40021000
 80071a8:	07ff800f 	.word	0x07ff800f
 80071ac:	ff9f800f 	.word	0xff9f800f
 80071b0:	f9ff800f 	.word	0xf9ff800f

080071b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071c2:	4b72      	ldr	r3, [pc, #456]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00e      	beq.n	80071ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80071ce:	4b6f      	ldr	r3, [pc, #444]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f003 0203 	and.w	r2, r3, #3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d103      	bne.n	80071e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
       ||
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d142      	bne.n	800726c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
 80071ea:	e03f      	b.n	800726c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d018      	beq.n	8007226 <RCCEx_PLLSAI2_Config+0x72>
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d825      	bhi.n	8007244 <RCCEx_PLLSAI2_Config+0x90>
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d002      	beq.n	8007202 <RCCEx_PLLSAI2_Config+0x4e>
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d009      	beq.n	8007214 <RCCEx_PLLSAI2_Config+0x60>
 8007200:	e020      	b.n	8007244 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007202:	4b62      	ldr	r3, [pc, #392]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11d      	bne.n	800724a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007212:	e01a      	b.n	800724a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007214:	4b5d      	ldr	r3, [pc, #372]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721c:	2b00      	cmp	r3, #0
 800721e:	d116      	bne.n	800724e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007224:	e013      	b.n	800724e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007226:	4b59      	ldr	r3, [pc, #356]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007232:	4b56      	ldr	r3, [pc, #344]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007242:	e006      	b.n	8007252 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
      break;
 8007248:	e004      	b.n	8007254 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007252:	bf00      	nop
    }

    if(status == HAL_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d108      	bne.n	800726c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800725a:	4b4c      	ldr	r3, [pc, #304]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f023 0203 	bic.w	r2, r3, #3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4949      	ldr	r1, [pc, #292]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007268:	4313      	orrs	r3, r2
 800726a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 8086 	bne.w	8007380 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007274:	4b45      	ldr	r3, [pc, #276]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a44      	ldr	r2, [pc, #272]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800727a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800727e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007280:	f7fc f88c 	bl	800339c <HAL_GetTick>
 8007284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007286:	e009      	b.n	800729c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007288:	f7fc f888 	bl	800339c <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d902      	bls.n	800729c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	73fb      	strb	r3, [r7, #15]
        break;
 800729a:	e005      	b.n	80072a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800729c:	4b3b      	ldr	r3, [pc, #236]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1ef      	bne.n	8007288 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d168      	bne.n	8007380 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d113      	bne.n	80072dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072b4:	4b35      	ldr	r3, [pc, #212]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	4b35      	ldr	r3, [pc, #212]	; (8007390 <RCCEx_PLLSAI2_Config+0x1dc>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6892      	ldr	r2, [r2, #8]
 80072c0:	0211      	lsls	r1, r2, #8
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	68d2      	ldr	r2, [r2, #12]
 80072c6:	06d2      	lsls	r2, r2, #27
 80072c8:	4311      	orrs	r1, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6852      	ldr	r2, [r2, #4]
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	430a      	orrs	r2, r1
 80072d4:	492d      	ldr	r1, [pc, #180]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	614b      	str	r3, [r1, #20]
 80072da:	e02d      	b.n	8007338 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d115      	bne.n	800730e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072e2:	4b2a      	ldr	r3, [pc, #168]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <RCCEx_PLLSAI2_Config+0x1e0>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6892      	ldr	r2, [r2, #8]
 80072ee:	0211      	lsls	r1, r2, #8
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6912      	ldr	r2, [r2, #16]
 80072f4:	0852      	lsrs	r2, r2, #1
 80072f6:	3a01      	subs	r2, #1
 80072f8:	0552      	lsls	r2, r2, #21
 80072fa:	4311      	orrs	r1, r2
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6852      	ldr	r2, [r2, #4]
 8007300:	3a01      	subs	r2, #1
 8007302:	0112      	lsls	r2, r2, #4
 8007304:	430a      	orrs	r2, r1
 8007306:	4921      	ldr	r1, [pc, #132]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007308:	4313      	orrs	r3, r2
 800730a:	614b      	str	r3, [r1, #20]
 800730c:	e014      	b.n	8007338 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800730e:	4b1f      	ldr	r3, [pc, #124]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007310:	695a      	ldr	r2, [r3, #20]
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6892      	ldr	r2, [r2, #8]
 800731a:	0211      	lsls	r1, r2, #8
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6952      	ldr	r2, [r2, #20]
 8007320:	0852      	lsrs	r2, r2, #1
 8007322:	3a01      	subs	r2, #1
 8007324:	0652      	lsls	r2, r2, #25
 8007326:	4311      	orrs	r1, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6852      	ldr	r2, [r2, #4]
 800732c:	3a01      	subs	r2, #1
 800732e:	0112      	lsls	r2, r2, #4
 8007330:	430a      	orrs	r2, r1
 8007332:	4916      	ldr	r1, [pc, #88]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007334:	4313      	orrs	r3, r2
 8007336:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007338:	4b14      	ldr	r3, [pc, #80]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a13      	ldr	r2, [pc, #76]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800733e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fc f82a 	bl	800339c <HAL_GetTick>
 8007348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800734a:	e009      	b.n	8007360 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800734c:	f7fc f826 	bl	800339c <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d902      	bls.n	8007360 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	73fb      	strb	r3, [r7, #15]
          break;
 800735e:	e005      	b.n	800736c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ef      	beq.n	800734c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	4904      	ldr	r1, [pc, #16]	; (800738c <RCCEx_PLLSAI2_Config+0x1d8>)
 800737c:	4313      	orrs	r3, r2
 800737e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
 8007390:	07ff800f 	.word	0x07ff800f
 8007394:	ff9f800f 	.word	0xff9f800f
 8007398:	f9ff800f 	.word	0xf9ff800f

0800739c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e049      	b.n	8007442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fb fcf0 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f000 fa1c 	bl	8007818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d001      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e04f      	b.n	8007504 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a23      	ldr	r2, [pc, #140]	; (8007510 <HAL_TIM_Base_Start_IT+0xc4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01d      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748e:	d018      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <HAL_TIM_Base_Start_IT+0xc8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <HAL_TIM_Base_Start_IT+0xcc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_TIM_Base_Start_IT+0xd0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <HAL_TIM_Base_Start_IT+0xd4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIM_Base_Start_IT+0x76>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a19      	ldr	r2, [pc, #100]	; (8007524 <HAL_TIM_Base_Start_IT+0xd8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d115      	bne.n	80074ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	4b17      	ldr	r3, [pc, #92]	; (8007528 <HAL_TIM_Base_Start_IT+0xdc>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b06      	cmp	r3, #6
 80074d2:	d015      	beq.n	8007500 <HAL_TIM_Base_Start_IT+0xb4>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074da:	d011      	beq.n	8007500 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ec:	e008      	b.n	8007500 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0201 	orr.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e000      	b.n	8007502 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007500:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	40000c00 	.word	0x40000c00
 8007520:	40013400 	.word	0x40013400
 8007524:	40014000 	.word	0x40014000
 8007528:	00010007 	.word	0x00010007

0800752c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	f241 1311 	movw	r3, #4369	; 0x1111
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <HAL_TIM_Base_Stop_IT+0x48>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	f240 4344 	movw	r3, #1092	; 0x444
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d107      	bne.n	8007574 <HAL_TIM_Base_Stop_IT+0x48>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d122      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d11b      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0202 	mvn.w	r2, #2
 80075b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f905 	bl	80077dc <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f8f7 	bl	80077c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f908 	bl	80077f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d122      	bne.n	800763a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d11b      	bne.n	800763a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0204 	mvn.w	r2, #4
 800760a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8db 	bl	80077dc <HAL_TIM_IC_CaptureCallback>
 8007626:	e005      	b.n	8007634 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f8cd 	bl	80077c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8de 	bl	80077f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b08      	cmp	r3, #8
 8007646:	d122      	bne.n	800768e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b08      	cmp	r3, #8
 8007654:	d11b      	bne.n	800768e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0208 	mvn.w	r2, #8
 800765e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f8b1 	bl	80077dc <HAL_TIM_IC_CaptureCallback>
 800767a:	e005      	b.n	8007688 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8a3 	bl	80077c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f8b4 	bl	80077f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b10      	cmp	r3, #16
 800769a:	d122      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d11b      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0210 	mvn.w	r2, #16
 80076b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2208      	movs	r2, #8
 80076b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f887 	bl	80077dc <HAL_TIM_IC_CaptureCallback>
 80076ce:	e005      	b.n	80076dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f879 	bl	80077c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f88a 	bl	80077f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10e      	bne.n	800770e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d107      	bne.n	800770e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0201 	mvn.w	r2, #1
 8007706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fa fab9 	bl	8001c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d10e      	bne.n	800773a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b80      	cmp	r3, #128	; 0x80
 8007728:	d107      	bne.n	800773a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f913 	bl	8007960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007748:	d10e      	bne.n	8007768 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d107      	bne.n	8007768 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f906 	bl	8007974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d10e      	bne.n	8007794 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d107      	bne.n	8007794 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800778c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f838 	bl	8007804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d10e      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d107      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0220 	mvn.w	r2, #32
 80077b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8c6 	bl	800794c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a40      	ldr	r2, [pc, #256]	; (800792c <TIM_Base_SetConfig+0x114>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007836:	d00f      	beq.n	8007858 <TIM_Base_SetConfig+0x40>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a3d      	ldr	r2, [pc, #244]	; (8007930 <TIM_Base_SetConfig+0x118>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00b      	beq.n	8007858 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3c      	ldr	r2, [pc, #240]	; (8007934 <TIM_Base_SetConfig+0x11c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <TIM_Base_SetConfig+0x40>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a3b      	ldr	r2, [pc, #236]	; (8007938 <TIM_Base_SetConfig+0x120>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0x40>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a3a      	ldr	r2, [pc, #232]	; (800793c <TIM_Base_SetConfig+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2f      	ldr	r2, [pc, #188]	; (800792c <TIM_Base_SetConfig+0x114>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01f      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d01b      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2c      	ldr	r2, [pc, #176]	; (8007930 <TIM_Base_SetConfig+0x118>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d017      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a2b      	ldr	r2, [pc, #172]	; (8007934 <TIM_Base_SetConfig+0x11c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <TIM_Base_SetConfig+0x120>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a29      	ldr	r2, [pc, #164]	; (800793c <TIM_Base_SetConfig+0x124>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a28      	ldr	r2, [pc, #160]	; (8007940 <TIM_Base_SetConfig+0x128>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a27      	ldr	r2, [pc, #156]	; (8007944 <TIM_Base_SetConfig+0x12c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_Base_SetConfig+0x9a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a26      	ldr	r2, [pc, #152]	; (8007948 <TIM_Base_SetConfig+0x130>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a10      	ldr	r2, [pc, #64]	; (800792c <TIM_Base_SetConfig+0x114>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00f      	beq.n	8007910 <TIM_Base_SetConfig+0xf8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <TIM_Base_SetConfig+0x124>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_Base_SetConfig+0xf8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <TIM_Base_SetConfig+0x128>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_Base_SetConfig+0xf8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a10      	ldr	r2, [pc, #64]	; (8007944 <TIM_Base_SetConfig+0x12c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_Base_SetConfig+0xf8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a0f      	ldr	r2, [pc, #60]	; (8007948 <TIM_Base_SetConfig+0x130>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d103      	bne.n	8007918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	615a      	str	r2, [r3, #20]
}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	40013400 	.word	0x40013400
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e042      	b.n	8007a20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7fb fa21 	bl	8002df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2224      	movs	r2, #36	; 0x24
 80079b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f998 	bl	8007d00 <UART_SetConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e022      	b.n	8007a20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc88 	bl	80082f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fd0f 	bl	800843c <UART_CheckIdleState>
 8007a1e:	4603      	mov	r3, r0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	f040 8084 	bne.w	8007b4c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_UART_Transmit+0x28>
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e07c      	b.n	8007b4e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_UART_Transmit+0x3a>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e075      	b.n	8007b4e <HAL_UART_Transmit+0x126>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2221      	movs	r2, #33	; 0x21
 8007a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a7a:	f7fb fc8f 	bl	800339c <HAL_GetTick>
 8007a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	88fa      	ldrh	r2, [r7, #6]
 8007a84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a98:	d108      	bne.n	8007aac <HAL_UART_Transmit+0x84>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	e003      	b.n	8007ab4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007abc:	e02d      	b.n	8007b1a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fd02 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e03a      	b.n	8007b4e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aea:	b292      	uxth	r2, r2
 8007aec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	3302      	adds	r3, #2
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	e008      	b.n	8007b08 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	b292      	uxth	r2, r2
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	3301      	adds	r3, #1
 8007b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1cb      	bne.n	8007abe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2140      	movs	r1, #64	; 0x40
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fcce 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e006      	b.n	8007b4e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b4c:	2302      	movs	r3, #2
  }
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b08a      	sub	sp, #40	; 0x28
 8007b5a:	af02      	add	r7, sp, #8
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	f040 80c1 	bne.w	8007cf4 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_UART_Receive+0x28>
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e0b9      	b.n	8007cf6 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_UART_Receive+0x3a>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e0b2      	b.n	8007cf6 <HAL_UART_Receive+0x1a0>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2222      	movs	r2, #34	; 0x22
 8007ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bae:	f7fb fbf5 	bl	800339c <HAL_GetTick>
 8007bb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bcc:	d10e      	bne.n	8007bec <HAL_UART_Receive+0x96>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d105      	bne.n	8007be2 <HAL_UART_Receive+0x8c>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007be0:	e02d      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	22ff      	movs	r2, #255	; 0xff
 8007be6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bea:	e028      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <HAL_UART_Receive+0xba>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <HAL_UART_Receive+0xb0>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	22ff      	movs	r2, #255	; 0xff
 8007c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c04:	e01b      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	227f      	movs	r2, #127	; 0x7f
 8007c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c0e:	e016      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c18:	d10d      	bne.n	8007c36 <HAL_UART_Receive+0xe0>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <HAL_UART_Receive+0xd6>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	227f      	movs	r2, #127	; 0x7f
 8007c26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c2a:	e008      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	223f      	movs	r2, #63	; 0x3f
 8007c30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c34:	e003      	b.n	8007c3e <HAL_UART_Receive+0xe8>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d108      	bne.n	8007c62 <HAL_UART_Receive+0x10c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	e003      	b.n	8007c6a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c72:	e033      	b.n	8007cdc <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2120      	movs	r1, #32
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fc27 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e033      	b.n	8007cf6 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10c      	bne.n	8007cae <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	3302      	adds	r3, #2
 8007caa:	61bb      	str	r3, [r7, #24]
 8007cac:	e00d      	b.n	8007cca <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	8a7b      	ldrh	r3, [r7, #18]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1c5      	bne.n	8007c74 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e000      	b.n	8007cf6 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
  }
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d04:	b08c      	sub	sp, #48	; 0x30
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4baa      	ldr	r3, [pc, #680]	; (8007fd8 <UART_SetConfig+0x2d8>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a9f      	ldr	r2, [pc, #636]	; (8007fdc <UART_SetConfig+0x2dc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	f023 010f 	bic.w	r1, r3, #15
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a90      	ldr	r2, [pc, #576]	; (8007fe0 <UART_SetConfig+0x2e0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d125      	bne.n	8007df0 <UART_SetConfig+0xf0>
 8007da4:	4b8f      	ldr	r3, [pc, #572]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d81a      	bhi.n	8007de8 <UART_SetConfig+0xe8>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <UART_SetConfig+0xb8>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007dd9 	.word	0x08007dd9
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dce:	e116      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e112      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e10e      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007de0:	2308      	movs	r3, #8
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e10a      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e106      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a7c      	ldr	r2, [pc, #496]	; (8007fe8 <UART_SetConfig+0x2e8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d138      	bne.n	8007e6c <UART_SetConfig+0x16c>
 8007dfa:	4b7a      	ldr	r3, [pc, #488]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b0c      	cmp	r3, #12
 8007e06:	d82d      	bhi.n	8007e64 <UART_SetConfig+0x164>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x110>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e45 	.word	0x08007e45
 8007e14:	08007e65 	.word	0x08007e65
 8007e18:	08007e65 	.word	0x08007e65
 8007e1c:	08007e65 	.word	0x08007e65
 8007e20:	08007e55 	.word	0x08007e55
 8007e24:	08007e65 	.word	0x08007e65
 8007e28:	08007e65 	.word	0x08007e65
 8007e2c:	08007e65 	.word	0x08007e65
 8007e30:	08007e4d 	.word	0x08007e4d
 8007e34:	08007e65 	.word	0x08007e65
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4a:	e0d8      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e52:	e0d4      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007e54:	2304      	movs	r3, #4
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5a:	e0d0      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e62:	e0cc      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6a:	e0c8      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5e      	ldr	r2, [pc, #376]	; (8007fec <UART_SetConfig+0x2ec>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d125      	bne.n	8007ec2 <UART_SetConfig+0x1c2>
 8007e76:	4b5b      	ldr	r3, [pc, #364]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e80:	2b30      	cmp	r3, #48	; 0x30
 8007e82:	d016      	beq.n	8007eb2 <UART_SetConfig+0x1b2>
 8007e84:	2b30      	cmp	r3, #48	; 0x30
 8007e86:	d818      	bhi.n	8007eba <UART_SetConfig+0x1ba>
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	d00a      	beq.n	8007ea2 <UART_SetConfig+0x1a2>
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d814      	bhi.n	8007eba <UART_SetConfig+0x1ba>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <UART_SetConfig+0x19a>
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d008      	beq.n	8007eaa <UART_SetConfig+0x1aa>
 8007e98:	e00f      	b.n	8007eba <UART_SetConfig+0x1ba>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea0:	e0ad      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea8:	e0a9      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007eaa:	2304      	movs	r3, #4
 8007eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb0:	e0a5      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb8:	e0a1      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007eba:	2310      	movs	r3, #16
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec0:	e09d      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a4a      	ldr	r2, [pc, #296]	; (8007ff0 <UART_SetConfig+0x2f0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d125      	bne.n	8007f18 <UART_SetConfig+0x218>
 8007ecc:	4b45      	ldr	r3, [pc, #276]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed8:	d016      	beq.n	8007f08 <UART_SetConfig+0x208>
 8007eda:	2bc0      	cmp	r3, #192	; 0xc0
 8007edc:	d818      	bhi.n	8007f10 <UART_SetConfig+0x210>
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d00a      	beq.n	8007ef8 <UART_SetConfig+0x1f8>
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d814      	bhi.n	8007f10 <UART_SetConfig+0x210>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <UART_SetConfig+0x1f0>
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d008      	beq.n	8007f00 <UART_SetConfig+0x200>
 8007eee:	e00f      	b.n	8007f10 <UART_SetConfig+0x210>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e082      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e07e      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e07a      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	e076      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f16:	e072      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a35      	ldr	r2, [pc, #212]	; (8007ff4 <UART_SetConfig+0x2f4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d12a      	bne.n	8007f78 <UART_SetConfig+0x278>
 8007f22:	4b30      	ldr	r3, [pc, #192]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f30:	d01a      	beq.n	8007f68 <UART_SetConfig+0x268>
 8007f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f36:	d81b      	bhi.n	8007f70 <UART_SetConfig+0x270>
 8007f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3c:	d00c      	beq.n	8007f58 <UART_SetConfig+0x258>
 8007f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f42:	d815      	bhi.n	8007f70 <UART_SetConfig+0x270>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <UART_SetConfig+0x250>
 8007f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4c:	d008      	beq.n	8007f60 <UART_SetConfig+0x260>
 8007f4e:	e00f      	b.n	8007f70 <UART_SetConfig+0x270>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f56:	e052      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5e:	e04e      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f66:	e04a      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6e:	e046      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f76:	e042      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a17      	ldr	r2, [pc, #92]	; (8007fdc <UART_SetConfig+0x2dc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d13a      	bne.n	8007ff8 <UART_SetConfig+0x2f8>
 8007f82:	4b18      	ldr	r3, [pc, #96]	; (8007fe4 <UART_SetConfig+0x2e4>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f90:	d01a      	beq.n	8007fc8 <UART_SetConfig+0x2c8>
 8007f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f96:	d81b      	bhi.n	8007fd0 <UART_SetConfig+0x2d0>
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9c:	d00c      	beq.n	8007fb8 <UART_SetConfig+0x2b8>
 8007f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa2:	d815      	bhi.n	8007fd0 <UART_SetConfig+0x2d0>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <UART_SetConfig+0x2b0>
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fac:	d008      	beq.n	8007fc0 <UART_SetConfig+0x2c0>
 8007fae:	e00f      	b.n	8007fd0 <UART_SetConfig+0x2d0>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb6:	e022      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fbe:	e01e      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc6:	e01a      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fce:	e016      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd6:	e012      	b.n	8007ffe <UART_SetConfig+0x2fe>
 8007fd8:	cfff69f3 	.word	0xcfff69f3
 8007fdc:	40008000 	.word	0x40008000
 8007fe0:	40013800 	.word	0x40013800
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	40004400 	.word	0x40004400
 8007fec:	40004800 	.word	0x40004800
 8007ff0:	40004c00 	.word	0x40004c00
 8007ff4:	40005000 	.word	0x40005000
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4aae      	ldr	r2, [pc, #696]	; (80082bc <UART_SetConfig+0x5bc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	f040 8097 	bne.w	8008138 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800800a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800800e:	2b08      	cmp	r3, #8
 8008010:	d823      	bhi.n	800805a <UART_SetConfig+0x35a>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x318>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	0800803d 	.word	0x0800803d
 800801c:	0800805b 	.word	0x0800805b
 8008020:	08008045 	.word	0x08008045
 8008024:	0800805b 	.word	0x0800805b
 8008028:	0800804b 	.word	0x0800804b
 800802c:	0800805b 	.word	0x0800805b
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800805b 	.word	0x0800805b
 8008038:	08008053 	.word	0x08008053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800803c:	f7fe fb78 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008042:	e010      	b.n	8008066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008044:	4b9e      	ldr	r3, [pc, #632]	; (80082c0 <UART_SetConfig+0x5c0>)
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008048:	e00d      	b.n	8008066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804a:	f7fe fad9 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008050:	e009      	b.n	8008066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008058:	e005      	b.n	8008066 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8130 	beq.w	80082ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	4a94      	ldr	r2, [pc, #592]	; (80082c4 <UART_SetConfig+0x5c4>)
 8008074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008078:	461a      	mov	r2, r3
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4613      	mov	r3, r2
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	4413      	add	r3, r2
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	429a      	cmp	r2, r3
 8008090:	d305      	bcc.n	800809e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	429a      	cmp	r2, r3
 800809c:	d903      	bls.n	80080a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080a4:	e113      	b.n	80082ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	2200      	movs	r2, #0
 80080aa:	60bb      	str	r3, [r7, #8]
 80080ac:	60fa      	str	r2, [r7, #12]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	4a84      	ldr	r2, [pc, #528]	; (80082c4 <UART_SetConfig+0x5c4>)
 80080b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2200      	movs	r2, #0
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080c8:	f7f8 feb4 	bl	8000e34 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4610      	mov	r0, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	020b      	lsls	r3, r1, #8
 80080de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e2:	0202      	lsls	r2, r0, #8
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	6849      	ldr	r1, [r1, #4]
 80080e8:	0849      	lsrs	r1, r1, #1
 80080ea:	2000      	movs	r0, #0
 80080ec:	460c      	mov	r4, r1
 80080ee:	4605      	mov	r5, r0
 80080f0:	eb12 0804 	adds.w	r8, r2, r4
 80080f4:	eb43 0905 	adc.w	r9, r3, r5
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	469a      	mov	sl, r3
 8008100:	4693      	mov	fp, r2
 8008102:	4652      	mov	r2, sl
 8008104:	465b      	mov	r3, fp
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fe93 	bl	8000e34 <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4613      	mov	r3, r2
 8008114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800811c:	d308      	bcc.n	8008130 <UART_SetConfig+0x430>
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d204      	bcs.n	8008130 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	e0ce      	b.n	80082ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008136:	e0ca      	b.n	80082ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	d166      	bne.n	8008210 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008146:	2b08      	cmp	r3, #8
 8008148:	d827      	bhi.n	800819a <UART_SetConfig+0x49a>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0x450>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008175 	.word	0x08008175
 8008154:	0800817d 	.word	0x0800817d
 8008158:	08008185 	.word	0x08008185
 800815c:	0800819b 	.word	0x0800819b
 8008160:	0800818b 	.word	0x0800818b
 8008164:	0800819b 	.word	0x0800819b
 8008168:	0800819b 	.word	0x0800819b
 800816c:	0800819b 	.word	0x0800819b
 8008170:	08008193 	.word	0x08008193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008174:	f7fe fadc 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8008178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800817a:	e014      	b.n	80081a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817c:	f7fe faee 	bl	800675c <HAL_RCC_GetPCLK2Freq>
 8008180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008182:	e010      	b.n	80081a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008184:	4b4e      	ldr	r3, [pc, #312]	; (80082c0 <UART_SetConfig+0x5c0>)
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008188:	e00d      	b.n	80081a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818a:	f7fe fa39 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008190:	e009      	b.n	80081a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008198:	e005      	b.n	80081a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8090 	beq.w	80082ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	4a44      	ldr	r2, [pc, #272]	; (80082c4 <UART_SetConfig+0x5c4>)
 80081b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b8:	461a      	mov	r2, r3
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c0:	005a      	lsls	r2, r3, #1
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	441a      	add	r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d916      	bls.n	8008208 <UART_SetConfig+0x508>
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d212      	bcs.n	8008208 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f023 030f 	bic.w	r3, r3, #15
 80081ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	8bfb      	ldrh	r3, [r7, #30]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	8bfa      	ldrh	r2, [r7, #30]
 8008204:	60da      	str	r2, [r3, #12]
 8008206:	e062      	b.n	80082ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800820e:	e05e      	b.n	80082ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008214:	2b08      	cmp	r3, #8
 8008216:	d828      	bhi.n	800826a <UART_SetConfig+0x56a>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x520>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008245 	.word	0x08008245
 8008224:	0800824d 	.word	0x0800824d
 8008228:	08008255 	.word	0x08008255
 800822c:	0800826b 	.word	0x0800826b
 8008230:	0800825b 	.word	0x0800825b
 8008234:	0800826b 	.word	0x0800826b
 8008238:	0800826b 	.word	0x0800826b
 800823c:	0800826b 	.word	0x0800826b
 8008240:	08008263 	.word	0x08008263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008244:	f7fe fa74 	bl	8006730 <HAL_RCC_GetPCLK1Freq>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800824a:	e014      	b.n	8008276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800824c:	f7fe fa86 	bl	800675c <HAL_RCC_GetPCLK2Freq>
 8008250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008252:	e010      	b.n	8008276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008254:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <UART_SetConfig+0x5c0>)
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008258:	e00d      	b.n	8008276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800825a:	f7fe f9d1 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008260:	e009      	b.n	8008276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008268:	e005      	b.n	8008276 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008274:	bf00      	nop
    }

    if (pclk != 0U)
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d028      	beq.n	80082ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	4a10      	ldr	r2, [pc, #64]	; (80082c4 <UART_SetConfig+0x5c4>)
 8008282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008286:	461a      	mov	r2, r3
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	fbb3 f2f2 	udiv	r2, r3, r2
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	441a      	add	r2, r3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	fbb2 f3f3 	udiv	r3, r2, r3
 800829e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d910      	bls.n	80082c8 <UART_SetConfig+0x5c8>
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ac:	d20c      	bcs.n	80082c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	e009      	b.n	80082ce <UART_SetConfig+0x5ce>
 80082ba:	bf00      	nop
 80082bc:	40008000 	.word	0x40008000
 80082c0:	00f42400 	.word	0x00f42400
 80082c4:	08012658 	.word	0x08012658
      }
      else
      {
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2201      	movs	r2, #1
 80082da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2200      	movs	r2, #0
 80082e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2200      	movs	r2, #0
 80082e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80082ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3730      	adds	r7, #48	; 0x30
 80082f2:	46bd      	mov	sp, r7
 80082f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01a      	beq.n	800840e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f6:	d10a      	bne.n	800840e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	605a      	str	r2, [r3, #4]
  }
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af02      	add	r7, sp, #8
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800844c:	f7fa ffa6 	bl	800339c <HAL_GetTick>
 8008450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b08      	cmp	r3, #8
 800845e:	d10e      	bne.n	800847e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f82f 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e025      	b.n	80084ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b04      	cmp	r3, #4
 800848a:	d10e      	bne.n	80084aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f819 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e00f      	b.n	80084ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b09c      	sub	sp, #112	; 0x70
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e2:	e0a9      	b.n	8008638 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	f000 80a5 	beq.w	8008638 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ee:	f7fa ff55 	bl	800339c <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d302      	bcc.n	8008504 <UART_WaitOnFlagUntilTimeout+0x32>
 80084fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008500:	2b00      	cmp	r3, #0
 8008502:	d140      	bne.n	8008586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008518:	667b      	str	r3, [r7, #100]	; 0x64
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008524:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	663b      	str	r3, [r7, #96]	; 0x60
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008556:	64ba      	str	r2, [r7, #72]	; 0x48
 8008558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800855c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e069      	b.n	800865a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d051      	beq.n	8008638 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a2:	d149      	bne.n	8008638 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
 80085ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	613b      	str	r3, [r7, #16]
   return(result);
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008600:	623a      	str	r2, [r7, #32]
 8008602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	69f9      	ldr	r1, [r7, #28]
 8008606:	6a3a      	ldr	r2, [r7, #32]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	61bb      	str	r3, [r7, #24]
   return(result);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e5      	bne.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2220      	movs	r2, #32
 8008628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e010      	b.n	800865a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69da      	ldr	r2, [r3, #28]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4013      	ands	r3, r2
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	429a      	cmp	r2, r3
 8008646:	bf0c      	ite	eq
 8008648:	2301      	moveq	r3, #1
 800864a:	2300      	movne	r3, #0
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	429a      	cmp	r2, r3
 8008654:	f43f af46 	beq.w	80084e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3770      	adds	r7, #112	; 0x70
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_UARTEx_DisableFifoMode+0x16>
 8008674:	2302      	movs	r3, #2
 8008676:	e027      	b.n	80086c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2224      	movs	r2, #36	; 0x24
 8008684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e02d      	b.n	8008748 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2224      	movs	r2, #36	; 0x24
 80086f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f84f 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008764:	2302      	movs	r3, #2
 8008766:	e02d      	b.n	80087c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2224      	movs	r2, #36	; 0x24
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0201 	bic.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f811 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d108      	bne.n	80087ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087ec:	e031      	b.n	8008852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ee:	2308      	movs	r3, #8
 80087f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087f2:	2308      	movs	r3, #8
 80087f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	0e5b      	lsrs	r3, r3, #25
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	0f5b      	lsrs	r3, r3, #29
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	7b3a      	ldrb	r2, [r7, #12]
 800881a:	4911      	ldr	r1, [pc, #68]	; (8008860 <UARTEx_SetNbDataToProcess+0x94>)
 800881c:	5c8a      	ldrb	r2, [r1, r2]
 800881e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008822:	7b3a      	ldrb	r2, [r7, #12]
 8008824:	490f      	ldr	r1, [pc, #60]	; (8008864 <UARTEx_SetNbDataToProcess+0x98>)
 8008826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008828:	fb93 f3f2 	sdiv	r3, r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	7b7a      	ldrb	r2, [r7, #13]
 8008838:	4909      	ldr	r1, [pc, #36]	; (8008860 <UARTEx_SetNbDataToProcess+0x94>)
 800883a:	5c8a      	ldrb	r2, [r1, r2]
 800883c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008840:	7b7a      	ldrb	r2, [r7, #13]
 8008842:	4908      	ldr	r1, [pc, #32]	; (8008864 <UARTEx_SetNbDataToProcess+0x98>)
 8008844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008846:	fb93 f3f2 	sdiv	r3, r3, r2
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	08012670 	.word	0x08012670
 8008864:	08012678 	.word	0x08012678

08008868 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	2101      	movs	r1, #1
 8008876:	483b      	ldr	r0, [pc, #236]	; (8008964 <network_configure_activations+0xfc>)
 8008878:	f000 fb38 	bl	8008eec <ai_platform_get_activations_map>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d065      	beq.n	800894e <network_configure_activations+0xe6>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 1760);
 8008882:	4b38      	ldr	r3, [pc, #224]	; (8008964 <network_configure_activations+0xfc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 800888a:	4a37      	ldr	r2, [pc, #220]	; (8008968 <network_configure_activations+0x100>)
 800888c:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1760);
 800888e:	4b35      	ldr	r3, [pc, #212]	; (8008964 <network_configure_activations+0xfc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008896:	4a34      	ldr	r2, [pc, #208]	; (8008968 <network_configure_activations+0x100>)
 8008898:	60d3      	str	r3, [r2, #12]
    
    cast_0_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 800889a:	4b32      	ldr	r3, [pc, #200]	; (8008964 <network_configure_activations+0xfc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a2:	4a32      	ldr	r2, [pc, #200]	; (800896c <network_configure_activations+0x104>)
 80088a4:	6093      	str	r3, [r2, #8]
    cast_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 80088a6:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <network_configure_activations+0xfc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ae:	4a2f      	ldr	r2, [pc, #188]	; (800896c <network_configure_activations+0x104>)
 80088b0:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80088b2:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <network_configure_activations+0xfc>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a2e      	ldr	r2, [pc, #184]	; (8008970 <network_configure_activations+0x108>)
 80088b8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80088ba:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <network_configure_activations+0xfc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2c      	ldr	r2, [pc, #176]	; (8008970 <network_configure_activations+0x108>)
 80088c0:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80088c2:	4b28      	ldr	r3, [pc, #160]	; (8008964 <network_configure_activations+0xfc>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a2b      	ldr	r2, [pc, #172]	; (8008974 <network_configure_activations+0x10c>)
 80088c8:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80088ca:	4b26      	ldr	r3, [pc, #152]	; (8008964 <network_configure_activations+0xfc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a29      	ldr	r2, [pc, #164]	; (8008974 <network_configure_activations+0x10c>)
 80088d0:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 80088d2:	4b24      	ldr	r3, [pc, #144]	; (8008964 <network_configure_activations+0xfc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088da:	4a27      	ldr	r2, [pc, #156]	; (8008978 <network_configure_activations+0x110>)
 80088dc:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 80088de:	4b21      	ldr	r3, [pc, #132]	; (8008964 <network_configure_activations+0xfc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	4a24      	ldr	r2, [pc, #144]	; (8008978 <network_configure_activations+0x110>)
 80088e8:	60d3      	str	r3, [r2, #12]
    
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <network_configure_activations+0xfc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a23      	ldr	r2, [pc, #140]	; (800897c <network_configure_activations+0x114>)
 80088f0:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80088f2:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <network_configure_activations+0xfc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a21      	ldr	r2, [pc, #132]	; (800897c <network_configure_activations+0x114>)
 80088f8:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 1032);
 80088fa:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <network_configure_activations+0xfc>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <network_configure_activations+0x118>)
 8008904:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1032);
 8008906:	4b17      	ldr	r3, [pc, #92]	; (8008964 <network_configure_activations+0xfc>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800890e:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <network_configure_activations+0x118>)
 8008910:	60d3      	str	r3, [r2, #12]
    
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008912:	4b14      	ldr	r3, [pc, #80]	; (8008964 <network_configure_activations+0xfc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <network_configure_activations+0x11c>)
 8008918:	6093      	str	r3, [r2, #8]
    nl_3_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800891a:	4b12      	ldr	r3, [pc, #72]	; (8008964 <network_configure_activations+0xfc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a19      	ldr	r2, [pc, #100]	; (8008984 <network_configure_activations+0x11c>)
 8008920:	60d3      	str	r3, [r2, #12]
    
    dense_4_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8008922:	4b10      	ldr	r3, [pc, #64]	; (8008964 <network_configure_activations+0xfc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800892a:	4a17      	ldr	r2, [pc, #92]	; (8008988 <network_configure_activations+0x120>)
 800892c:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <network_configure_activations+0xfc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008936:	4a14      	ldr	r2, [pc, #80]	; (8008988 <network_configure_activations+0x120>)
 8008938:	60d3      	str	r3, [r2, #12]
    
    nl_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800893a:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <network_configure_activations+0xfc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a13      	ldr	r2, [pc, #76]	; (800898c <network_configure_activations+0x124>)
 8008940:	6093      	str	r3, [r2, #8]
    nl_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008942:	4b08      	ldr	r3, [pc, #32]	; (8008964 <network_configure_activations+0xfc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a11      	ldr	r2, [pc, #68]	; (800898c <network_configure_activations+0x124>)
 8008948:	60d3      	str	r3, [r2, #12]
    
    return true;
 800894a:	2301      	movs	r3, #1
 800894c:	e005      	b.n	800895a <network_configure_activations+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800894e:	2213      	movs	r2, #19
 8008950:	2130      	movs	r1, #48	; 0x30
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fbae 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20002010 	.word	0x20002010
 8008968:	2000023c 	.word	0x2000023c
 800896c:	2000025c 	.word	0x2000025c
 8008970:	2000026c 	.word	0x2000026c
 8008974:	2000028c 	.word	0x2000028c
 8008978:	2000029c 	.word	0x2000029c
 800897c:	200002bc 	.word	0x200002bc
 8008980:	200002cc 	.word	0x200002cc
 8008984:	200002ec 	.word	0x200002ec
 8008988:	200002fc 	.word	0x200002fc
 800898c:	2000031c 	.word	0x2000031c

08008990 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	2101      	movs	r1, #1
 800899e:	4856      	ldr	r0, [pc, #344]	; (8008af8 <network_configure_weights+0x168>)
 80089a0:	f000 fa50 	bl	8008e44 <ai_platform_get_weights_map>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 809c 	beq.w	8008ae4 <network_configure_weights+0x154>
    /* Updating weights (byte) offsets */
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80089ac:	4b53      	ldr	r3, [pc, #332]	; (8008afc <network_configure_weights+0x16c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089b4:	4a51      	ldr	r2, [pc, #324]	; (8008afc <network_configure_weights+0x16c>)
 80089b6:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80089b8:	4b4f      	ldr	r3, [pc, #316]	; (8008af8 <network_configure_weights+0x168>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a4f      	ldr	r2, [pc, #316]	; (8008afc <network_configure_weights+0x16c>)
 80089be:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80089c0:	4b4d      	ldr	r3, [pc, #308]	; (8008af8 <network_configure_weights+0x168>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a4d      	ldr	r2, [pc, #308]	; (8008afc <network_configure_weights+0x16c>)
 80089c6:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80089c8:	4b4d      	ldr	r3, [pc, #308]	; (8008b00 <network_configure_weights+0x170>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d0:	4a4b      	ldr	r2, [pc, #300]	; (8008b00 <network_configure_weights+0x170>)
 80089d2:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 589824);
 80089d4:	4b48      	ldr	r3, [pc, #288]	; (8008af8 <network_configure_weights+0x168>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 80089dc:	4a48      	ldr	r2, [pc, #288]	; (8008b00 <network_configure_weights+0x170>)
 80089de:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 589824);
 80089e0:	4b45      	ldr	r3, [pc, #276]	; (8008af8 <network_configure_weights+0x168>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 80089e8:	4a45      	ldr	r2, [pc, #276]	; (8008b00 <network_configure_weights+0x170>)
 80089ea:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80089ec:	4b45      	ldr	r3, [pc, #276]	; (8008b04 <network_configure_weights+0x174>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f4:	4a43      	ldr	r2, [pc, #268]	; (8008b04 <network_configure_weights+0x174>)
 80089f6:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 591872);
 80089f8:	4b3f      	ldr	r3, [pc, #252]	; (8008af8 <network_configure_weights+0x168>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a04:	4a3f      	ldr	r2, [pc, #252]	; (8008b04 <network_configure_weights+0x174>)
 8008a06:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 591872);
 8008a08:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <network_configure_weights+0x168>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a14:	4a3b      	ldr	r2, [pc, #236]	; (8008b04 <network_configure_weights+0x174>)
 8008a16:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a18:	4b3b      	ldr	r3, [pc, #236]	; (8008b08 <network_configure_weights+0x178>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a20:	4a39      	ldr	r2, [pc, #228]	; (8008b08 <network_configure_weights+0x178>)
 8008a22:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1120256);
 8008a24:	4b34      	ldr	r3, [pc, #208]	; (8008af8 <network_configure_weights+0x168>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f503 1388 	add.w	r3, r3, #1114112	; 0x110000
 8008a2c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008a30:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <network_configure_weights+0x178>)
 8008a32:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1120256);
 8008a34:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <network_configure_weights+0x168>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f503 1388 	add.w	r3, r3, #1114112	; 0x110000
 8008a3c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008a40:	4a31      	ldr	r2, [pc, #196]	; (8008b08 <network_configure_weights+0x178>)
 8008a42:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a44:	4b31      	ldr	r3, [pc, #196]	; (8008b0c <network_configure_weights+0x17c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a4c:	4a2f      	ldr	r2, [pc, #188]	; (8008b0c <network_configure_weights+0x17c>)
 8008a4e:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 1121288);
 8008a50:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <network_configure_weights+0x168>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <network_configure_weights+0x180>)
 8008a56:	4413      	add	r3, r2
 8008a58:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <network_configure_weights+0x17c>)
 8008a5a:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1121288);
 8008a5c:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <network_configure_weights+0x168>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b2b      	ldr	r3, [pc, #172]	; (8008b10 <network_configure_weights+0x180>)
 8008a62:	4413      	add	r3, r2
 8008a64:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <network_configure_weights+0x17c>)
 8008a66:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a68:	4b2a      	ldr	r3, [pc, #168]	; (8008b14 <network_configure_weights+0x184>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <network_configure_weights+0x184>)
 8008a72:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 1253384);
 8008a74:	4b20      	ldr	r3, [pc, #128]	; (8008af8 <network_configure_weights+0x168>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	4a25      	ldr	r2, [pc, #148]	; (8008b14 <network_configure_weights+0x184>)
 8008a80:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1253384);
 8008a82:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <network_configure_weights+0x168>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	4a21      	ldr	r2, [pc, #132]	; (8008b14 <network_configure_weights+0x184>)
 8008a8e:	60d3      	str	r3, [r2, #12]
    
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a90:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <network_configure_weights+0x188>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a98:	4a1f      	ldr	r2, [pc, #124]	; (8008b18 <network_configure_weights+0x188>)
 8008a9a:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 1253896);
 8008a9c:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <network_configure_weights+0x168>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008aa8:	4a1b      	ldr	r2, [pc, #108]	; (8008b18 <network_configure_weights+0x188>)
 8008aaa:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1253896);
 8008aac:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <network_configure_weights+0x168>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008ab4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ab8:	4a17      	ldr	r2, [pc, #92]	; (8008b18 <network_configure_weights+0x188>)
 8008aba:	60d3      	str	r3, [r2, #12]
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8008abc:	4b17      	ldr	r3, [pc, #92]	; (8008b1c <network_configure_weights+0x18c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac4:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <network_configure_weights+0x18c>)
 8008ac6:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 1261064);
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <network_configure_weights+0x168>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <network_configure_weights+0x190>)
 8008ace:	4413      	add	r3, r2
 8008ad0:	4a12      	ldr	r2, [pc, #72]	; (8008b1c <network_configure_weights+0x18c>)
 8008ad2:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1261064);
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <network_configure_weights+0x168>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <network_configure_weights+0x190>)
 8008ada:	4413      	add	r3, r2
 8008adc:	4a0f      	ldr	r2, [pc, #60]	; (8008b1c <network_configure_weights+0x18c>)
 8008ade:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e005      	b.n	8008af0 <network_configure_weights+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008ae4:	2212      	movs	r2, #18
 8008ae6:	2130      	movs	r1, #48	; 0x30
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fae3 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20002014 	.word	0x20002014
 8008afc:	2000021c 	.word	0x2000021c
 8008b00:	2000022c 	.word	0x2000022c
 8008b04:	2000024c 	.word	0x2000024c
 8008b08:	2000027c 	.word	0x2000027c
 8008b0c:	200002ac 	.word	0x200002ac
 8008b10:	00111c08 	.word	0x00111c08
 8008b14:	200002dc 	.word	0x200002dc
 8008b18:	2000030c 	.word	0x2000030c
 8008b1c:	2000032c 	.word	0x2000032c
 8008b20:	00133e08 	.word	0x00133e08

08008b24 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa53 	bl	8008fd8 <ai_platform_network_get_error>
 8008b32:	4603      	mov	r3, r0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008b46:	2300      	movs	r3, #0
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	2305      	movs	r3, #5
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <ai_network_create+0x28>)
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fc59 	bl	800940c <ai_platform_network_create>
 8008b5a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000b2c 	.word	0x20000b2c

08008b68 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b096      	sub	sp, #88	; 0x58
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff ffe0 	bl	8008b3c <ai_network_create>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8008b80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <ai_network_create_and_init+0x24>
        return err;
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	e05d      	b.n	8008c48 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f8dd 	bl	8008d50 <ai_network_data_params_get>
 8008b96:	4603      	mov	r3, r0
 8008b98:	f083 0301 	eor.w	r3, r3, #1
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d008      	beq.n	8008bb4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff ffbc 	bl	8008b24 <ai_network_get_error>
 8008bac:	4603      	mov	r3, r0
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	e049      	b.n	8008c48 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8008bbe:	e00e      	b.n	8008bde <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4413      	add	r3, r2
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	f107 0314 	add.w	r3, r7, #20
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f922 	bl	8008e1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bda:	3301      	adds	r3, #1
 8008bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8008bde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008be0:	461a      	mov	r2, r3
 8008be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008be4:	4293      	cmp	r3, r2
 8008be6:	dbeb      	blt.n	8008bc0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008bee:	2300      	movs	r3, #0
 8008bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8008bf2:	e00e      	b.n	8008c12 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008bf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f908 	bl	8008e1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c0e:	3301      	adds	r3, #1
 8008c10:	653b      	str	r3, [r7, #80]	; 0x50
 8008c12:	8b7b      	ldrh	r3, [r7, #26]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	dbeb      	blt.n	8008bf4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f107 0214 	add.w	r2, r7, #20
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f846 	bl	8008cb8 <ai_network_init>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f083 0301 	eor.w	r3, r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff ff71 	bl	8008b24 <ai_network_get_error>
 8008c42:	4603      	mov	r3, r0
 8008c44:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8008c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3758      	adds	r7, #88	; 0x58
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <ai_network_inputs_get+0x2c>)
 8008c62:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a06      	ldr	r2, [pc, #24]	; (8008c80 <ai_network_inputs_get+0x30>)
 8008c68:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa27 	bl	80090c0 <ai_platform_inputs_get>
 8008c72:	4603      	mov	r3, r0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000b2c 	.word	0x20000b2c
 8008c80:	a1c00100 	.word	0xa1c00100

08008c84 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008c94:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <ai_network_outputs_get+0x2c>)
 8008c96:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a06      	ldr	r2, [pc, #24]	; (8008cb4 <ai_network_outputs_get+0x30>)
 8008c9c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fae3 	bl	800926c <ai_platform_outputs_get>
 8008ca6:	4603      	mov	r3, r0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000b2c 	.word	0x20000b2c
 8008cb4:	a1c00100 	.word	0xa1c00100

08008cb8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc77 	bl	80095b8 <ai_platform_network_init>
 8008cca:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <ai_network_init+0x1e>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e028      	b.n	8008d28 <ai_network_init+0x70>

  ai_bool ok = true;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff fe57 	bl	8008990 <network_configure_weights>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff fdb6 	bl	8008868 <network_configure_activations>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	4013      	ands	r3, r2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fd40 	bl	8009794 <ai_platform_network_post_init>
 8008d14:	4603      	mov	r3, r0
 8008d16:	461a      	mov	r2, r3
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008d26:	7afb      	ldrb	r3, [r7, #11]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 fdaf 	bl	80098a4 <ai_platform_network_process>
 8008d46:	4603      	mov	r3, r0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <ai_network_data_params_get+0x12>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e016      	b.n	8008d90 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008d62:	4a0d      	ldr	r2, [pc, #52]	; (8008d98 <ai_network_data_params_get+0x48>)
 8008d64:	f107 0310 	add.w	r3, r7, #16
 8008d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d6c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008d70:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <ai_network_data_params_get+0x4c>)
 8008d72:	f107 0308 	add.w	r3, r7, #8
 8008d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d7a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008d7e:	f107 0210 	add.w	r2, r7, #16
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f903 	bl	8008f94 <ai_platform_bind_network_params>
 8008d8e:	4603      	mov	r3, r0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	08012600 	.word	0x08012600
 8008d9c:	08012608 	.word	0x08012608

08008da0 <ai_buffer_get_size>:
 8008da0:	b378      	cbz	r0, 8008e02 <ai_buffer_get_size+0x62>
 8008da2:	b410      	push	{r4}
 8008da4:	6803      	ldr	r3, [r0, #0]
 8008da6:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <ai_buffer_get_size+0x64>)
 8008da8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008dac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d01e      	beq.n	8008df2 <ai_buffer_get_size+0x52>
 8008db4:	6984      	ldr	r4, [r0, #24]
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	7d03      	ldrb	r3, [r0, #20]
 8008dba:	6941      	ldr	r1, [r0, #20]
 8008dbc:	f1a3 0301 	sub.w	r3, r3, #1
 8008dc0:	fab3 f383 	clz	r3, r3
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008dca:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8008dce:	da0b      	bge.n	8008de8 <ai_buffer_get_size+0x48>
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d102      	bne.n	8008dda <ai_buffer_get_size+0x3a>
 8008dd4:	2802      	cmp	r0, #2
 8008dd6:	d007      	beq.n	8008de8 <ai_buffer_get_size+0x48>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008dde:	3301      	adds	r3, #1
 8008de0:	4298      	cmp	r0, r3
 8008de2:	fb01 f202 	mul.w	r2, r1, r2
 8008de6:	d1f3      	bne.n	8008dd0 <ai_buffer_get_size+0x30>
 8008de8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d0de      	beq.n	8008db4 <ai_buffer_get_size+0x14>
 8008df6:	6984      	ldr	r4, [r0, #24]
 8008df8:	6863      	ldr	r3, [r4, #4]
 8008dfa:	331f      	adds	r3, #31
 8008dfc:	f023 021f 	bic.w	r2, r3, #31
 8008e00:	e7da      	b.n	8008db8 <ai_buffer_get_size+0x18>
 8008e02:	4770      	bx	lr
 8008e04:	000400c0 	.word	0x000400c0

08008e08 <ai_buffer_array_sane>:
 8008e08:	b138      	cbz	r0, 8008e1a <ai_buffer_array_sane+0x12>
 8008e0a:	6843      	ldr	r3, [r0, #4]
 8008e0c:	b123      	cbz	r3, 8008e18 <ai_buffer_array_sane+0x10>
 8008e0e:	8840      	ldrh	r0, [r0, #2]
 8008e10:	3800      	subs	r0, #0
 8008e12:	bf18      	it	ne
 8008e14:	2001      	movne	r0, #1
 8008e16:	4770      	bx	lr
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4770      	bx	lr

08008e1c <ai_buffer_array_item_set_address>:
 8008e1c:	b150      	cbz	r0, 8008e34 <ai_buffer_array_item_set_address+0x18>
 8008e1e:	6843      	ldr	r3, [r0, #4]
 8008e20:	b14b      	cbz	r3, 8008e36 <ai_buffer_array_item_set_address+0x1a>
 8008e22:	8840      	ldrh	r0, [r0, #2]
 8008e24:	b900      	cbnz	r0, 8008e28 <ai_buffer_array_item_set_address+0xc>
 8008e26:	4770      	bx	lr
 8008e28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008e2c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e30:	2001      	movs	r0, #1
 8008e32:	604a      	str	r2, [r1, #4]
 8008e34:	4770      	bx	lr
 8008e36:	4618      	mov	r0, r3
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <_ai_platform_acquire_crc>:
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	4770      	bx	lr

08008e40 <_ai_platform_release_crc>:
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop

08008e44 <ai_platform_get_weights_map>:
 8008e44:	2a00      	cmp	r2, #0
 8008e46:	d037      	beq.n	8008eb8 <ai_platform_get_weights_map+0x74>
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	b1a0      	cbz	r0, 8008e78 <ai_platform_get_weights_map+0x34>
 8008e4e:	460f      	mov	r7, r1
 8008e50:	b191      	cbz	r1, 8008e78 <ai_platform_get_weights_map+0x34>
 8008e52:	4b25      	ldr	r3, [pc, #148]	; (8008ee8 <ai_platform_get_weights_map+0xa4>)
 8008e54:	6810      	ldr	r0, [r2, #0]
 8008e56:	4298      	cmp	r0, r3
 8008e58:	4615      	mov	r5, r2
 8008e5a:	d00f      	beq.n	8008e7c <ai_platform_get_weights_map+0x38>
 8008e5c:	6855      	ldr	r5, [r2, #4]
 8008e5e:	b15d      	cbz	r5, 8008e78 <ai_platform_get_weights_map+0x34>
 8008e60:	682e      	ldr	r6, [r5, #0]
 8008e62:	429e      	cmp	r6, r3
 8008e64:	d02a      	beq.n	8008ebc <ai_platform_get_weights_map+0x78>
 8008e66:	f1a1 0001 	sub.w	r0, r1, #1
 8008e6a:	6025      	str	r5, [r4, #0]
 8008e6c:	fab0 f080 	clz	r0, r0
 8008e70:	0940      	lsrs	r0, r0, #5
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e74:	42a7      	cmp	r7, r4
 8008e76:	d034      	beq.n	8008ee2 <ai_platform_get_weights_map+0x9e>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7c:	1d10      	adds	r0, r2, #4
 8008e7e:	f7ff ffc3 	bl	8008e08 <ai_buffer_array_sane>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d0f8      	beq.n	8008e78 <ai_platform_get_weights_map+0x34>
 8008e86:	88eb      	ldrh	r3, [r5, #6]
 8008e88:	429f      	cmp	r7, r3
 8008e8a:	d1f5      	bne.n	8008e78 <ai_platform_get_weights_map+0x34>
 8008e8c:	f04f 0e00 	mov.w	lr, #0
 8008e90:	1f23      	subs	r3, r4, #4
 8008e92:	4670      	mov	r0, lr
 8008e94:	68aa      	ldr	r2, [r5, #8]
 8008e96:	eb02 0c0e 	add.w	ip, r2, lr
 8008e9a:	f10e 0e1c 	add.w	lr, lr, #28
 8008e9e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008ea2:	b124      	cbz	r4, 8008eae <ai_platform_get_weights_map+0x6a>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	4287      	cmp	r7, r0
 8008ea8:	f843 4f04 	str.w	r4, [r3, #4]!
 8008eac:	d1f2      	bne.n	8008e94 <ai_platform_get_weights_map+0x50>
 8008eae:	1a38      	subs	r0, r7, r0
 8008eb0:	fab0 f080 	clz	r0, r0
 8008eb4:	0940      	lsrs	r0, r0, #5
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb8:	2000      	movs	r0, #0
 8008eba:	4770      	bx	lr
 8008ebc:	1f23      	subs	r3, r4, #4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	e000      	b.n	8008ec6 <ai_platform_get_weights_map+0x82>
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008eca:	42b2      	cmp	r2, r6
 8008ecc:	d0d2      	beq.n	8008e74 <ai_platform_get_weights_map+0x30>
 8008ece:	f843 2f04 	str.w	r2, [r3, #4]!
 8008ed2:	1c62      	adds	r2, r4, #1
 8008ed4:	4297      	cmp	r7, r2
 8008ed6:	d1f5      	bne.n	8008ec4 <ai_platform_get_weights_map+0x80>
 8008ed8:	3402      	adds	r4, #2
 8008eda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008ede:	42b3      	cmp	r3, r6
 8008ee0:	d1ca      	bne.n	8008e78 <ai_platform_get_weights_map+0x34>
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	a1facade 	.word	0xa1facade

08008eec <ai_platform_get_activations_map>:
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	d038      	beq.n	8008f62 <ai_platform_get_activations_map+0x76>
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	b1a0      	cbz	r0, 8008f20 <ai_platform_get_activations_map+0x34>
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	b191      	cbz	r1, 8008f20 <ai_platform_get_activations_map+0x34>
 8008efa:	4b25      	ldr	r3, [pc, #148]	; (8008f90 <ai_platform_get_activations_map+0xa4>)
 8008efc:	6810      	ldr	r0, [r2, #0]
 8008efe:	4298      	cmp	r0, r3
 8008f00:	4615      	mov	r5, r2
 8008f02:	d00f      	beq.n	8008f24 <ai_platform_get_activations_map+0x38>
 8008f04:	6a15      	ldr	r5, [r2, #32]
 8008f06:	b15d      	cbz	r5, 8008f20 <ai_platform_get_activations_map+0x34>
 8008f08:	682e      	ldr	r6, [r5, #0]
 8008f0a:	429e      	cmp	r6, r3
 8008f0c:	d02b      	beq.n	8008f66 <ai_platform_get_activations_map+0x7a>
 8008f0e:	f1a1 0001 	sub.w	r0, r1, #1
 8008f12:	6025      	str	r5, [r4, #0]
 8008f14:	fab0 f080 	clz	r0, r0
 8008f18:	0940      	lsrs	r0, r0, #5
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	42a7      	cmp	r7, r4
 8008f1e:	d035      	beq.n	8008f8c <ai_platform_get_activations_map+0xa0>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f24:	f102 000c 	add.w	r0, r2, #12
 8008f28:	f7ff ff6e 	bl	8008e08 <ai_buffer_array_sane>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d0f7      	beq.n	8008f20 <ai_platform_get_activations_map+0x34>
 8008f30:	89eb      	ldrh	r3, [r5, #14]
 8008f32:	429f      	cmp	r7, r3
 8008f34:	d1f4      	bne.n	8008f20 <ai_platform_get_activations_map+0x34>
 8008f36:	f04f 0e00 	mov.w	lr, #0
 8008f3a:	1f23      	subs	r3, r4, #4
 8008f3c:	4670      	mov	r0, lr
 8008f3e:	692a      	ldr	r2, [r5, #16]
 8008f40:	eb02 0c0e 	add.w	ip, r2, lr
 8008f44:	f10e 0e1c 	add.w	lr, lr, #28
 8008f48:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008f4c:	b124      	cbz	r4, 8008f58 <ai_platform_get_activations_map+0x6c>
 8008f4e:	3001      	adds	r0, #1
 8008f50:	4287      	cmp	r7, r0
 8008f52:	f843 4f04 	str.w	r4, [r3, #4]!
 8008f56:	d1f2      	bne.n	8008f3e <ai_platform_get_activations_map+0x52>
 8008f58:	1a38      	subs	r0, r7, r0
 8008f5a:	fab0 f080 	clz	r0, r0
 8008f5e:	0940      	lsrs	r0, r0, #5
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f62:	2000      	movs	r0, #0
 8008f64:	4770      	bx	lr
 8008f66:	1f23      	subs	r3, r4, #4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	2400      	movs	r4, #0
 8008f6c:	e000      	b.n	8008f70 <ai_platform_get_activations_map+0x84>
 8008f6e:	4614      	mov	r4, r2
 8008f70:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008f74:	42b2      	cmp	r2, r6
 8008f76:	d0d1      	beq.n	8008f1c <ai_platform_get_activations_map+0x30>
 8008f78:	f843 2f04 	str.w	r2, [r3, #4]!
 8008f7c:	1c62      	adds	r2, r4, #1
 8008f7e:	4297      	cmp	r7, r2
 8008f80:	d1f5      	bne.n	8008f6e <ai_platform_get_activations_map+0x82>
 8008f82:	3402      	adds	r4, #2
 8008f84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f88:	42b3      	cmp	r3, r6
 8008f8a:	d1c9      	bne.n	8008f20 <ai_platform_get_activations_map+0x34>
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f90:	a1facade 	.word	0xa1facade

08008f94 <ai_platform_bind_network_params>:
 8008f94:	b1a0      	cbz	r0, 8008fc0 <ai_platform_bind_network_params+0x2c>
 8008f96:	b1b1      	cbz	r1, 8008fc6 <ai_platform_bind_network_params+0x32>
 8008f98:	b1c2      	cbz	r2, 8008fcc <ai_platform_bind_network_params+0x38>
 8008f9a:	b410      	push	{r4}
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4c0d      	ldr	r4, [pc, #52]	; (8008fd4 <ai_platform_bind_network_params+0x40>)
 8008fa0:	f843 4b04 	str.w	r4, [r3], #4
 8008fa4:	f100 0c0c 	add.w	ip, r0, #12
 8008fa8:	c903      	ldmia	r1, {r0, r1}
 8008faa:	e883 0003 	stmia.w	r3, {r0, r1}
 8008fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	4770      	bx	lr
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	4770      	bx	lr
 8008fcc:	4613      	mov	r3, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	a1facade 	.word	0xa1facade

08008fd8 <ai_platform_network_get_error>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	b1f0      	cbz	r0, 800901a <ai_platform_network_get_error+0x42>
 8008fdc:	4b2f      	ldr	r3, [pc, #188]	; (800909c <ai_platform_network_get_error+0xc4>)
 8008fde:	6802      	ldr	r2, [r0, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	d119      	bne.n	800901a <ai_platform_network_get_error+0x42>
 8008fe6:	f7ff ff29 	bl	8008e3c <_ai_platform_acquire_crc>
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <ai_platform_network_get_error+0xc8>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff6:	d03c      	beq.n	8009072 <ai_platform_network_get_error+0x9a>
 8008ff8:	4a2a      	ldr	r2, [pc, #168]	; (80090a4 <ai_platform_network_get_error+0xcc>)
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009000:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1fb      	bne.n	8009000 <ai_platform_network_get_error+0x28>
 8009008:	4b27      	ldr	r3, [pc, #156]	; (80090a8 <ai_platform_network_get_error+0xd0>)
 800900a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800900e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009012:	4b26      	ldr	r3, [pc, #152]	; (80090ac <ai_platform_network_get_error+0xd4>)
 8009014:	429a      	cmp	r2, r3
 8009016:	d038      	beq.n	800908a <ai_platform_network_get_error+0xb2>
 8009018:	e7fe      	b.n	8009018 <ai_platform_network_get_error+0x40>
 800901a:	f7ff ff0f 	bl	8008e3c <_ai_platform_acquire_crc>
 800901e:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <ai_platform_network_get_error+0xc8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902a:	d010      	beq.n	800904e <ai_platform_network_get_error+0x76>
 800902c:	4a1d      	ldr	r2, [pc, #116]	; (80090a4 <ai_platform_network_get_error+0xcc>)
 800902e:	2301      	movs	r3, #1
 8009030:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009034:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1fb      	bne.n	8009034 <ai_platform_network_get_error+0x5c>
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <ai_platform_network_get_error+0xd0>)
 800903e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009042:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009046:	4b19      	ldr	r3, [pc, #100]	; (80090ac <ai_platform_network_get_error+0xd4>)
 8009048:	429a      	cmp	r2, r3
 800904a:	d00d      	beq.n	8009068 <ai_platform_network_get_error+0x90>
 800904c:	e7fe      	b.n	800904c <ai_platform_network_get_error+0x74>
 800904e:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <ai_platform_network_get_error+0xd8>)
 8009050:	2301      	movs	r3, #1
 8009052:	6093      	str	r3, [r2, #8]
 8009054:	6893      	ldr	r3, [r2, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1fc      	bne.n	8009054 <ai_platform_network_get_error+0x7c>
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <ai_platform_network_get_error+0xd0>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <ai_platform_network_get_error+0xd4>)
 8009062:	429a      	cmp	r2, r3
 8009064:	d000      	beq.n	8009068 <ai_platform_network_get_error+0x90>
 8009066:	e7fe      	b.n	8009066 <ai_platform_network_get_error+0x8e>
 8009068:	f7ff feea 	bl	8008e40 <_ai_platform_release_crc>
 800906c:	f241 0010 	movw	r0, #4112	; 0x1010
 8009070:	bd10      	pop	{r4, pc}
 8009072:	4a0f      	ldr	r2, [pc, #60]	; (80090b0 <ai_platform_network_get_error+0xd8>)
 8009074:	2301      	movs	r3, #1
 8009076:	6093      	str	r3, [r2, #8]
 8009078:	6893      	ldr	r3, [r2, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1fc      	bne.n	8009078 <ai_platform_network_get_error+0xa0>
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <ai_platform_network_get_error+0xd0>)
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <ai_platform_network_get_error+0xd4>)
 8009086:	429a      	cmp	r2, r3
 8009088:	d107      	bne.n	800909a <ai_platform_network_get_error+0xc2>
 800908a:	f7ff fed9 	bl	8008e40 <_ai_platform_release_crc>
 800908e:	f104 0010 	add.w	r0, r4, #16
 8009092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009096:	f000 be8d 	b.w	8009db4 <core_get_error>
 800909a:	e7fe      	b.n	800909a <ai_platform_network_get_error+0xc2>
 800909c:	a1c00100 	.word	0xa1c00100
 80090a0:	e0042000 	.word	0xe0042000
 80090a4:	58024000 	.word	0x58024000
 80090a8:	f407a5c2 	.word	0xf407a5c2
 80090ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80090b0:	40023000 	.word	0x40023000

080090b4 <ai_platform_network_set_error>:
 80090b4:	b110      	cbz	r0, 80090bc <ai_platform_network_set_error+0x8>
 80090b6:	3010      	adds	r0, #16
 80090b8:	f000 be82 	b.w	8009dc0 <core_set_error>
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <ai_platform_inputs_get>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	b085      	sub	sp, #20
 80090c6:	9102      	str	r1, [sp, #8]
 80090c8:	b1f0      	cbz	r0, 8009108 <ai_platform_inputs_get+0x48>
 80090ca:	4b62      	ldr	r3, [pc, #392]	; (8009254 <ai_platform_inputs_get+0x194>)
 80090cc:	6802      	ldr	r2, [r0, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	4607      	mov	r7, r0
 80090d2:	d119      	bne.n	8009108 <ai_platform_inputs_get+0x48>
 80090d4:	f7ff feb2 	bl	8008e3c <_ai_platform_acquire_crc>
 80090d8:	4b5f      	ldr	r3, [pc, #380]	; (8009258 <ai_platform_inputs_get+0x198>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e4:	d03d      	beq.n	8009162 <ai_platform_inputs_get+0xa2>
 80090e6:	4a5d      	ldr	r2, [pc, #372]	; (800925c <ai_platform_inputs_get+0x19c>)
 80090e8:	2301      	movs	r3, #1
 80090ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80090ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1fb      	bne.n	80090ee <ai_platform_inputs_get+0x2e>
 80090f6:	4b5a      	ldr	r3, [pc, #360]	; (8009260 <ai_platform_inputs_get+0x1a0>)
 80090f8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80090fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009100:	4b58      	ldr	r3, [pc, #352]	; (8009264 <ai_platform_inputs_get+0x1a4>)
 8009102:	429a      	cmp	r2, r3
 8009104:	d039      	beq.n	800917a <ai_platform_inputs_get+0xba>
 8009106:	e7fe      	b.n	8009106 <ai_platform_inputs_get+0x46>
 8009108:	f7ff fe98 	bl	8008e3c <_ai_platform_acquire_crc>
 800910c:	4b52      	ldr	r3, [pc, #328]	; (8009258 <ai_platform_inputs_get+0x198>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009118:	d010      	beq.n	800913c <ai_platform_inputs_get+0x7c>
 800911a:	4a50      	ldr	r2, [pc, #320]	; (800925c <ai_platform_inputs_get+0x19c>)
 800911c:	2301      	movs	r3, #1
 800911e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009122:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1fb      	bne.n	8009122 <ai_platform_inputs_get+0x62>
 800912a:	4b4d      	ldr	r3, [pc, #308]	; (8009260 <ai_platform_inputs_get+0x1a0>)
 800912c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009130:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009134:	4b4b      	ldr	r3, [pc, #300]	; (8009264 <ai_platform_inputs_get+0x1a4>)
 8009136:	429a      	cmp	r2, r3
 8009138:	d00d      	beq.n	8009156 <ai_platform_inputs_get+0x96>
 800913a:	e7fe      	b.n	800913a <ai_platform_inputs_get+0x7a>
 800913c:	4a4a      	ldr	r2, [pc, #296]	; (8009268 <ai_platform_inputs_get+0x1a8>)
 800913e:	2301      	movs	r3, #1
 8009140:	6093      	str	r3, [r2, #8]
 8009142:	6893      	ldr	r3, [r2, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1fc      	bne.n	8009142 <ai_platform_inputs_get+0x82>
 8009148:	4b45      	ldr	r3, [pc, #276]	; (8009260 <ai_platform_inputs_get+0x1a0>)
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	4b45      	ldr	r3, [pc, #276]	; (8009264 <ai_platform_inputs_get+0x1a4>)
 8009150:	429a      	cmp	r2, r3
 8009152:	d000      	beq.n	8009156 <ai_platform_inputs_get+0x96>
 8009154:	e7fe      	b.n	8009154 <ai_platform_inputs_get+0x94>
 8009156:	f7ff fe73 	bl	8008e40 <_ai_platform_release_crc>
 800915a:	2000      	movs	r0, #0
 800915c:	b005      	add	sp, #20
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	4a41      	ldr	r2, [pc, #260]	; (8009268 <ai_platform_inputs_get+0x1a8>)
 8009164:	2301      	movs	r3, #1
 8009166:	6093      	str	r3, [r2, #8]
 8009168:	6893      	ldr	r3, [r2, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1fc      	bne.n	8009168 <ai_platform_inputs_get+0xa8>
 800916e:	4b3c      	ldr	r3, [pc, #240]	; (8009260 <ai_platform_inputs_get+0x1a0>)
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	6812      	ldr	r2, [r2, #0]
 8009174:	4b3b      	ldr	r3, [pc, #236]	; (8009264 <ai_platform_inputs_get+0x1a4>)
 8009176:	429a      	cmp	r2, r3
 8009178:	d155      	bne.n	8009226 <ai_platform_inputs_get+0x166>
 800917a:	f7ff fe61 	bl	8008e40 <_ai_platform_release_crc>
 800917e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009180:	2b00      	cmp	r3, #0
 8009182:	d051      	beq.n	8009228 <ai_platform_inputs_get+0x168>
 8009184:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	d04c      	beq.n	8009228 <ai_platform_inputs_get+0x168>
 800918e:	f04f 0b00 	mov.w	fp, #0
 8009192:	465d      	mov	r5, fp
 8009194:	9703      	str	r7, [sp, #12]
 8009196:	e016      	b.n	80091c6 <ai_platform_inputs_get+0x106>
 8009198:	9901      	ldr	r1, [sp, #4]
 800919a:	2301      	movs	r3, #1
 800919c:	507b      	str	r3, [r7, r1]
 800919e:	69b1      	ldr	r1, [r6, #24]
 80091a0:	6849      	ldr	r1, [r1, #4]
 80091a2:	6121      	str	r1, [r4, #16]
 80091a4:	f04f 0301 	mov.w	r3, #1
 80091a8:	7523      	strb	r3, [r4, #20]
 80091aa:	e9c4 c200 	strd	ip, r2, [r4]
 80091ae:	6962      	ldr	r2, [r4, #20]
 80091b0:	60a0      	str	r0, [r4, #8]
 80091b2:	2300      	movs	r3, #0
 80091b4:	f369 221f 	bfi	r2, r9, #8, #24
 80091b8:	f8c4 8018 	str.w	r8, [r4, #24]
 80091bc:	60e3      	str	r3, [r4, #12]
 80091be:	3501      	adds	r5, #1
 80091c0:	f10b 0b1c 	add.w	fp, fp, #28
 80091c4:	6162      	str	r2, [r4, #20]
 80091c6:	f8ba 3000 	ldrh.w	r3, [sl]
 80091ca:	42ab      	cmp	r3, r5
 80091cc:	b2aa      	uxth	r2, r5
 80091ce:	d93a      	bls.n	8009246 <ai_platform_inputs_get+0x186>
 80091d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80091d4:	00e9      	lsls	r1, r5, #3
 80091d6:	9101      	str	r1, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d034      	beq.n	8009246 <ai_platform_inputs_get+0x186>
 80091dc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	d030      	beq.n	8009246 <ai_platform_inputs_get+0x186>
 80091e4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80091e8:	69b2      	ldr	r2, [r6, #24]
 80091ea:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80091ee:	6810      	ldr	r0, [r2, #0]
 80091f0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80091f4:	68b3      	ldr	r3, [r6, #8]
 80091f6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80091fa:	f005 fbe3 	bl	800e9c4 <ai_array_to_buffer_fmt>
 80091fe:	69b1      	ldr	r1, [r6, #24]
 8009200:	4684      	mov	ip, r0
 8009202:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8009206:	688a      	ldr	r2, [r1, #8]
 8009208:	445c      	add	r4, fp
 800920a:	2800      	cmp	r0, #0
 800920c:	d0c8      	beq.n	80091a0 <ai_platform_inputs_get+0xe0>
 800920e:	2100      	movs	r1, #0
 8009210:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8009214:	6831      	ldr	r1, [r6, #0]
 8009216:	6041      	str	r1, [r0, #4]
 8009218:	b111      	cbz	r1, 8009220 <ai_platform_inputs_get+0x160>
 800921a:	8849      	ldrh	r1, [r1, #2]
 800921c:	2900      	cmp	r1, #0
 800921e:	d1bb      	bne.n	8009198 <ai_platform_inputs_get+0xd8>
 8009220:	69b1      	ldr	r1, [r6, #24]
 8009222:	2000      	movs	r0, #0
 8009224:	e7bc      	b.n	80091a0 <ai_platform_inputs_get+0xe0>
 8009226:	e7fe      	b.n	8009226 <ai_platform_inputs_get+0x166>
 8009228:	2218      	movs	r2, #24
 800922a:	2111      	movs	r1, #17
 800922c:	f107 0010 	add.w	r0, r7, #16
 8009230:	f000 fdc6 	bl	8009dc0 <core_set_error>
 8009234:	2200      	movs	r2, #0
 8009236:	4610      	mov	r0, r2
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d08e      	beq.n	800915c <ai_platform_inputs_get+0x9c>
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	b005      	add	sp, #20
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	9f03      	ldr	r7, [sp, #12]
 8009248:	2a00      	cmp	r2, #0
 800924a:	d0ed      	beq.n	8009228 <ai_platform_inputs_get+0x168>
 800924c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009250:	6858      	ldr	r0, [r3, #4]
 8009252:	e7f1      	b.n	8009238 <ai_platform_inputs_get+0x178>
 8009254:	a1c00100 	.word	0xa1c00100
 8009258:	e0042000 	.word	0xe0042000
 800925c:	58024000 	.word	0x58024000
 8009260:	f407a5c2 	.word	0xf407a5c2
 8009264:	b5e8b5cd 	.word	0xb5e8b5cd
 8009268:	40023000 	.word	0x40023000

0800926c <ai_platform_outputs_get>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	b085      	sub	sp, #20
 8009272:	9102      	str	r1, [sp, #8]
 8009274:	b1f0      	cbz	r0, 80092b4 <ai_platform_outputs_get+0x48>
 8009276:	4b5f      	ldr	r3, [pc, #380]	; (80093f4 <ai_platform_outputs_get+0x188>)
 8009278:	6802      	ldr	r2, [r0, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	4607      	mov	r7, r0
 800927e:	d119      	bne.n	80092b4 <ai_platform_outputs_get+0x48>
 8009280:	f7ff fddc 	bl	8008e3c <_ai_platform_acquire_crc>
 8009284:	4b5c      	ldr	r3, [pc, #368]	; (80093f8 <ai_platform_outputs_get+0x18c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800928c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009290:	d03d      	beq.n	800930e <ai_platform_outputs_get+0xa2>
 8009292:	4a5a      	ldr	r2, [pc, #360]	; (80093fc <ai_platform_outputs_get+0x190>)
 8009294:	2301      	movs	r3, #1
 8009296:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800929a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1fb      	bne.n	800929a <ai_platform_outputs_get+0x2e>
 80092a2:	4b57      	ldr	r3, [pc, #348]	; (8009400 <ai_platform_outputs_get+0x194>)
 80092a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092ac:	4b55      	ldr	r3, [pc, #340]	; (8009404 <ai_platform_outputs_get+0x198>)
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d039      	beq.n	8009326 <ai_platform_outputs_get+0xba>
 80092b2:	e7fe      	b.n	80092b2 <ai_platform_outputs_get+0x46>
 80092b4:	f7ff fdc2 	bl	8008e3c <_ai_platform_acquire_crc>
 80092b8:	4b4f      	ldr	r3, [pc, #316]	; (80093f8 <ai_platform_outputs_get+0x18c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c4:	d010      	beq.n	80092e8 <ai_platform_outputs_get+0x7c>
 80092c6:	4a4d      	ldr	r2, [pc, #308]	; (80093fc <ai_platform_outputs_get+0x190>)
 80092c8:	2301      	movs	r3, #1
 80092ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1fb      	bne.n	80092ce <ai_platform_outputs_get+0x62>
 80092d6:	4b4a      	ldr	r3, [pc, #296]	; (8009400 <ai_platform_outputs_get+0x194>)
 80092d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092e0:	4b48      	ldr	r3, [pc, #288]	; (8009404 <ai_platform_outputs_get+0x198>)
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d00d      	beq.n	8009302 <ai_platform_outputs_get+0x96>
 80092e6:	e7fe      	b.n	80092e6 <ai_platform_outputs_get+0x7a>
 80092e8:	4a47      	ldr	r2, [pc, #284]	; (8009408 <ai_platform_outputs_get+0x19c>)
 80092ea:	2301      	movs	r3, #1
 80092ec:	6093      	str	r3, [r2, #8]
 80092ee:	6893      	ldr	r3, [r2, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1fc      	bne.n	80092ee <ai_platform_outputs_get+0x82>
 80092f4:	4b42      	ldr	r3, [pc, #264]	; (8009400 <ai_platform_outputs_get+0x194>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	4b42      	ldr	r3, [pc, #264]	; (8009404 <ai_platform_outputs_get+0x198>)
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d000      	beq.n	8009302 <ai_platform_outputs_get+0x96>
 8009300:	e7fe      	b.n	8009300 <ai_platform_outputs_get+0x94>
 8009302:	f7ff fd9d 	bl	8008e40 <_ai_platform_release_crc>
 8009306:	2000      	movs	r0, #0
 8009308:	b005      	add	sp, #20
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	4a3e      	ldr	r2, [pc, #248]	; (8009408 <ai_platform_outputs_get+0x19c>)
 8009310:	2301      	movs	r3, #1
 8009312:	6093      	str	r3, [r2, #8]
 8009314:	6893      	ldr	r3, [r2, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1fc      	bne.n	8009314 <ai_platform_outputs_get+0xa8>
 800931a:	4b39      	ldr	r3, [pc, #228]	; (8009400 <ai_platform_outputs_get+0x194>)
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	6812      	ldr	r2, [r2, #0]
 8009320:	4b38      	ldr	r3, [pc, #224]	; (8009404 <ai_platform_outputs_get+0x198>)
 8009322:	429a      	cmp	r2, r3
 8009324:	d150      	bne.n	80093c8 <ai_platform_outputs_get+0x15c>
 8009326:	f7ff fd8b 	bl	8008e40 <_ai_platform_release_crc>
 800932a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d958      	bls.n	80093e2 <ai_platform_outputs_get+0x176>
 8009330:	f04f 0b00 	mov.w	fp, #0
 8009334:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009338:	9703      	str	r7, [sp, #12]
 800933a:	465d      	mov	r5, fp
 800933c:	e016      	b.n	800936c <ai_platform_outputs_get+0x100>
 800933e:	9901      	ldr	r1, [sp, #4]
 8009340:	2301      	movs	r3, #1
 8009342:	507b      	str	r3, [r7, r1]
 8009344:	69b1      	ldr	r1, [r6, #24]
 8009346:	6849      	ldr	r1, [r1, #4]
 8009348:	6121      	str	r1, [r4, #16]
 800934a:	f04f 0301 	mov.w	r3, #1
 800934e:	7523      	strb	r3, [r4, #20]
 8009350:	e9c4 c200 	strd	ip, r2, [r4]
 8009354:	6962      	ldr	r2, [r4, #20]
 8009356:	60a0      	str	r0, [r4, #8]
 8009358:	2300      	movs	r3, #0
 800935a:	f369 221f 	bfi	r2, r9, #8, #24
 800935e:	f8c4 8018 	str.w	r8, [r4, #24]
 8009362:	60e3      	str	r3, [r4, #12]
 8009364:	3501      	adds	r5, #1
 8009366:	f10b 0b1c 	add.w	fp, fp, #28
 800936a:	6162      	str	r2, [r4, #20]
 800936c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009370:	42ab      	cmp	r3, r5
 8009372:	b2aa      	uxth	r2, r5
 8009374:	d929      	bls.n	80093ca <ai_platform_outputs_get+0x15e>
 8009376:	f8da 3010 	ldr.w	r3, [sl, #16]
 800937a:	00e9      	lsls	r1, r5, #3
 800937c:	9101      	str	r1, [sp, #4]
 800937e:	b323      	cbz	r3, 80093ca <ai_platform_outputs_get+0x15e>
 8009380:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009384:	b30e      	cbz	r6, 80093ca <ai_platform_outputs_get+0x15e>
 8009386:	f8da 3014 	ldr.w	r3, [sl, #20]
 800938a:	69b2      	ldr	r2, [r6, #24]
 800938c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009390:	6810      	ldr	r0, [r2, #0]
 8009392:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009396:	68b3      	ldr	r3, [r6, #8]
 8009398:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800939c:	f005 fb12 	bl	800e9c4 <ai_array_to_buffer_fmt>
 80093a0:	69b1      	ldr	r1, [r6, #24]
 80093a2:	4684      	mov	ip, r0
 80093a4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80093a8:	688a      	ldr	r2, [r1, #8]
 80093aa:	445c      	add	r4, fp
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d0ca      	beq.n	8009346 <ai_platform_outputs_get+0xda>
 80093b0:	2100      	movs	r1, #0
 80093b2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80093b6:	6831      	ldr	r1, [r6, #0]
 80093b8:	6041      	str	r1, [r0, #4]
 80093ba:	b111      	cbz	r1, 80093c2 <ai_platform_outputs_get+0x156>
 80093bc:	8849      	ldrh	r1, [r1, #2]
 80093be:	2900      	cmp	r1, #0
 80093c0:	d1bd      	bne.n	800933e <ai_platform_outputs_get+0xd2>
 80093c2:	69b1      	ldr	r1, [r6, #24]
 80093c4:	2000      	movs	r0, #0
 80093c6:	e7be      	b.n	8009346 <ai_platform_outputs_get+0xda>
 80093c8:	e7fe      	b.n	80093c8 <ai_platform_outputs_get+0x15c>
 80093ca:	9f03      	ldr	r7, [sp, #12]
 80093cc:	b14a      	cbz	r2, 80093e2 <ai_platform_outputs_get+0x176>
 80093ce:	f8da 3014 	ldr.w	r3, [sl, #20]
 80093d2:	6858      	ldr	r0, [r3, #4]
 80093d4:	9b02      	ldr	r3, [sp, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d096      	beq.n	8009308 <ai_platform_outputs_get+0x9c>
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	b005      	add	sp, #20
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	2218      	movs	r2, #24
 80093e4:	2111      	movs	r1, #17
 80093e6:	f107 0010 	add.w	r0, r7, #16
 80093ea:	f000 fce9 	bl	8009dc0 <core_set_error>
 80093ee:	2200      	movs	r2, #0
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7ef      	b.n	80093d4 <ai_platform_outputs_get+0x168>
 80093f4:	a1c00100 	.word	0xa1c00100
 80093f8:	e0042000 	.word	0xe0042000
 80093fc:	58024000 	.word	0x58024000
 8009400:	f407a5c2 	.word	0xf407a5c2
 8009404:	b5e8b5cd 	.word	0xb5e8b5cd
 8009408:	40023000 	.word	0x40023000

0800940c <ai_platform_network_create>:
 800940c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009410:	b083      	sub	sp, #12
 8009412:	4606      	mov	r6, r0
 8009414:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009418:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800941c:	4615      	mov	r5, r2
 800941e:	461f      	mov	r7, r3
 8009420:	f7ff fd0c 	bl	8008e3c <_ai_platform_acquire_crc>
 8009424:	b188      	cbz	r0, 800944a <ai_platform_network_create+0x3e>
 8009426:	4a5d      	ldr	r2, [pc, #372]	; (800959c <ai_platform_network_create+0x190>)
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800942e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009432:	4603      	mov	r3, r0
 8009434:	d00e      	beq.n	8009454 <ai_platform_network_create+0x48>
 8009436:	4a5a      	ldr	r2, [pc, #360]	; (80095a0 <ai_platform_network_create+0x194>)
 8009438:	2118      	movs	r1, #24
 800943a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800943e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009442:	2918      	cmp	r1, #24
 8009444:	d018      	beq.n	8009478 <ai_platform_network_create+0x6c>
 8009446:	f7ff fcfb 	bl	8008e40 <_ai_platform_release_crc>
 800944a:	f244 1033 	movw	r0, #16691	; 0x4133
 800944e:	b003      	add	sp, #12
 8009450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009454:	4a53      	ldr	r2, [pc, #332]	; (80095a4 <ai_platform_network_create+0x198>)
 8009456:	2101      	movs	r1, #1
 8009458:	6091      	str	r1, [r2, #8]
 800945a:	2114      	movs	r1, #20
 800945c:	e001      	b.n	8009462 <ai_platform_network_create+0x56>
 800945e:	3901      	subs	r1, #1
 8009460:	d002      	beq.n	8009468 <ai_platform_network_create+0x5c>
 8009462:	6894      	ldr	r4, [r2, #8]
 8009464:	2c00      	cmp	r4, #0
 8009466:	d1fa      	bne.n	800945e <ai_platform_network_create+0x52>
 8009468:	4a4e      	ldr	r2, [pc, #312]	; (80095a4 <ai_platform_network_create+0x198>)
 800946a:	6891      	ldr	r1, [r2, #8]
 800946c:	b911      	cbnz	r1, 8009474 <ai_platform_network_create+0x68>
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	3201      	adds	r2, #1
 8009472:	d008      	beq.n	8009486 <ai_platform_network_create+0x7a>
 8009474:	4618      	mov	r0, r3
 8009476:	e7e6      	b.n	8009446 <ai_platform_network_create+0x3a>
 8009478:	2101      	movs	r1, #1
 800947a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800947e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009482:	2900      	cmp	r1, #0
 8009484:	d1fb      	bne.n	800947e <ai_platform_network_create+0x72>
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fcda 	bl	8008e40 <_ai_platform_release_crc>
 800948c:	f7ff fcd6 	bl	8008e3c <_ai_platform_acquire_crc>
 8009490:	4b42      	ldr	r3, [pc, #264]	; (800959c <ai_platform_network_create+0x190>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800949c:	d010      	beq.n	80094c0 <ai_platform_network_create+0xb4>
 800949e:	4b40      	ldr	r3, [pc, #256]	; (80095a0 <ai_platform_network_create+0x194>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80094a6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80094aa:	2900      	cmp	r1, #0
 80094ac:	d1fb      	bne.n	80094a6 <ai_platform_network_create+0x9a>
 80094ae:	4a3e      	ldr	r2, [pc, #248]	; (80095a8 <ai_platform_network_create+0x19c>)
 80094b0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80094b4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80094b8:	4b3c      	ldr	r3, [pc, #240]	; (80095ac <ai_platform_network_create+0x1a0>)
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d00c      	beq.n	80094d8 <ai_platform_network_create+0xcc>
 80094be:	e7fe      	b.n	80094be <ai_platform_network_create+0xb2>
 80094c0:	4a38      	ldr	r2, [pc, #224]	; (80095a4 <ai_platform_network_create+0x198>)
 80094c2:	2301      	movs	r3, #1
 80094c4:	6093      	str	r3, [r2, #8]
 80094c6:	6893      	ldr	r3, [r2, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1fc      	bne.n	80094c6 <ai_platform_network_create+0xba>
 80094cc:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <ai_platform_network_create+0x19c>)
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	4b36      	ldr	r3, [pc, #216]	; (80095ac <ai_platform_network_create+0x1a0>)
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d122      	bne.n	800951e <ai_platform_network_create+0x112>
 80094d8:	f7ff fcb2 	bl	8008e40 <_ai_platform_release_crc>
 80094dc:	b38e      	cbz	r6, 8009542 <ai_platform_network_create+0x136>
 80094de:	4b34      	ldr	r3, [pc, #208]	; (80095b0 <ai_platform_network_create+0x1a4>)
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	6035      	str	r5, [r6, #0]
 80094e4:	f000 fc64 	bl	8009db0 <core_init>
 80094e8:	b1d0      	cbz	r0, 8009520 <ai_platform_network_create+0x114>
 80094ea:	f7ff fca7 	bl	8008e3c <_ai_platform_acquire_crc>
 80094ee:	4b2b      	ldr	r3, [pc, #172]	; (800959c <ai_platform_network_create+0x190>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094fa:	d025      	beq.n	8009548 <ai_platform_network_create+0x13c>
 80094fc:	4a28      	ldr	r2, [pc, #160]	; (80095a0 <ai_platform_network_create+0x194>)
 80094fe:	2301      	movs	r3, #1
 8009500:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009504:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1fb      	bne.n	8009504 <ai_platform_network_create+0xf8>
 800950c:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <ai_platform_network_create+0x19c>)
 800950e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009512:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009516:	4b25      	ldr	r3, [pc, #148]	; (80095ac <ai_platform_network_create+0x1a0>)
 8009518:	429a      	cmp	r2, r3
 800951a:	d022      	beq.n	8009562 <ai_platform_network_create+0x156>
 800951c:	e7fe      	b.n	800951c <ai_platform_network_create+0x110>
 800951e:	e7fe      	b.n	800951e <ai_platform_network_create+0x112>
 8009520:	2430      	movs	r4, #48	; 0x30
 8009522:	2300      	movs	r3, #0
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	2610      	movs	r6, #16
 8009528:	464a      	mov	r2, r9
 800952a:	4641      	mov	r1, r8
 800952c:	4638      	mov	r0, r7
 800952e:	f005 fa2b 	bl	800e988 <ai_version_get>
 8009532:	4603      	mov	r3, r0
 8009534:	2000      	movs	r0, #0
 8009536:	f364 0007 	bfi	r0, r4, #0, #8
 800953a:	64ab      	str	r3, [r5, #72]	; 0x48
 800953c:	f366 201f 	bfi	r0, r6, #8, #24
 8009540:	e785      	b.n	800944e <ai_platform_network_create+0x42>
 8009542:	f241 0010 	movw	r0, #4112	; 0x1010
 8009546:	e782      	b.n	800944e <ai_platform_network_create+0x42>
 8009548:	4a16      	ldr	r2, [pc, #88]	; (80095a4 <ai_platform_network_create+0x198>)
 800954a:	2301      	movs	r3, #1
 800954c:	6093      	str	r3, [r2, #8]
 800954e:	6893      	ldr	r3, [r2, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1fc      	bne.n	800954e <ai_platform_network_create+0x142>
 8009554:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <ai_platform_network_create+0x19c>)
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <ai_platform_network_create+0x1a0>)
 800955c:	429a      	cmp	r2, r3
 800955e:	d000      	beq.n	8009562 <ai_platform_network_create+0x156>
 8009560:	e7fe      	b.n	8009560 <ai_platform_network_create+0x154>
 8009562:	f7ff fc6d 	bl	8008e40 <_ai_platform_release_crc>
 8009566:	2200      	movs	r2, #0
 8009568:	4641      	mov	r1, r8
 800956a:	4638      	mov	r0, r7
 800956c:	f005 fa0c 	bl	800e988 <ai_version_get>
 8009570:	2200      	movs	r2, #0
 8009572:	4604      	mov	r4, r0
 8009574:	2105      	movs	r1, #5
 8009576:	2001      	movs	r0, #1
 8009578:	f005 fa06 	bl	800e988 <ai_version_get>
 800957c:	4284      	cmp	r4, r0
 800957e:	d001      	beq.n	8009584 <ai_platform_network_create+0x178>
 8009580:	2401      	movs	r4, #1
 8009582:	e7ce      	b.n	8009522 <ai_platform_network_create+0x116>
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <ai_platform_network_create+0x1a8>)
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	a801      	add	r0, sp, #4
 800958a:	f005 f843 	bl	800e614 <ai_check_custom_types>
 800958e:	b110      	cbz	r0, 8009596 <ai_platform_network_create+0x18a>
 8009590:	2600      	movs	r6, #0
 8009592:	4634      	mov	r4, r6
 8009594:	e7c8      	b.n	8009528 <ai_platform_network_create+0x11c>
 8009596:	2402      	movs	r4, #2
 8009598:	e7c3      	b.n	8009522 <ai_platform_network_create+0x116>
 800959a:	bf00      	nop
 800959c:	e0042000 	.word	0xe0042000
 80095a0:	58024000 	.word	0x58024000
 80095a4:	40023000 	.word	0x40023000
 80095a8:	f407a5c2 	.word	0xf407a5c2
 80095ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80095b0:	a1c00100 	.word	0xa1c00100
 80095b4:	84048403 	.word	0x84048403

080095b8 <ai_platform_network_init>:
 80095b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095bc:	b1f8      	cbz	r0, 80095fe <ai_platform_network_init+0x46>
 80095be:	4b6e      	ldr	r3, [pc, #440]	; (8009778 <ai_platform_network_init+0x1c0>)
 80095c0:	6802      	ldr	r2, [r0, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	4604      	mov	r4, r0
 80095c6:	d11a      	bne.n	80095fe <ai_platform_network_init+0x46>
 80095c8:	460e      	mov	r6, r1
 80095ca:	f7ff fc37 	bl	8008e3c <_ai_platform_acquire_crc>
 80095ce:	4b6b      	ldr	r3, [pc, #428]	; (800977c <ai_platform_network_init+0x1c4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095da:	d03d      	beq.n	8009658 <ai_platform_network_init+0xa0>
 80095dc:	4a68      	ldr	r2, [pc, #416]	; (8009780 <ai_platform_network_init+0x1c8>)
 80095de:	2301      	movs	r3, #1
 80095e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1fb      	bne.n	80095e4 <ai_platform_network_init+0x2c>
 80095ec:	4b65      	ldr	r3, [pc, #404]	; (8009784 <ai_platform_network_init+0x1cc>)
 80095ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095f6:	4b64      	ldr	r3, [pc, #400]	; (8009788 <ai_platform_network_init+0x1d0>)
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d039      	beq.n	8009670 <ai_platform_network_init+0xb8>
 80095fc:	e7fe      	b.n	80095fc <ai_platform_network_init+0x44>
 80095fe:	f7ff fc1d 	bl	8008e3c <_ai_platform_acquire_crc>
 8009602:	4b5e      	ldr	r3, [pc, #376]	; (800977c <ai_platform_network_init+0x1c4>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800960a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800960e:	d010      	beq.n	8009632 <ai_platform_network_init+0x7a>
 8009610:	4a5b      	ldr	r2, [pc, #364]	; (8009780 <ai_platform_network_init+0x1c8>)
 8009612:	2301      	movs	r3, #1
 8009614:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009618:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1fb      	bne.n	8009618 <ai_platform_network_init+0x60>
 8009620:	4b58      	ldr	r3, [pc, #352]	; (8009784 <ai_platform_network_init+0x1cc>)
 8009622:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009626:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800962a:	4b57      	ldr	r3, [pc, #348]	; (8009788 <ai_platform_network_init+0x1d0>)
 800962c:	429a      	cmp	r2, r3
 800962e:	d00d      	beq.n	800964c <ai_platform_network_init+0x94>
 8009630:	e7fe      	b.n	8009630 <ai_platform_network_init+0x78>
 8009632:	4a56      	ldr	r2, [pc, #344]	; (800978c <ai_platform_network_init+0x1d4>)
 8009634:	2301      	movs	r3, #1
 8009636:	6093      	str	r3, [r2, #8]
 8009638:	6893      	ldr	r3, [r2, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1fc      	bne.n	8009638 <ai_platform_network_init+0x80>
 800963e:	4b51      	ldr	r3, [pc, #324]	; (8009784 <ai_platform_network_init+0x1cc>)
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	4b50      	ldr	r3, [pc, #320]	; (8009788 <ai_platform_network_init+0x1d0>)
 8009646:	429a      	cmp	r2, r3
 8009648:	d000      	beq.n	800964c <ai_platform_network_init+0x94>
 800964a:	e7fe      	b.n	800964a <ai_platform_network_init+0x92>
 800964c:	f7ff fbf8 	bl	8008e40 <_ai_platform_release_crc>
 8009650:	2600      	movs	r6, #0
 8009652:	4630      	mov	r0, r6
 8009654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009658:	4a4c      	ldr	r2, [pc, #304]	; (800978c <ai_platform_network_init+0x1d4>)
 800965a:	2301      	movs	r3, #1
 800965c:	6093      	str	r3, [r2, #8]
 800965e:	6893      	ldr	r3, [r2, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1fc      	bne.n	800965e <ai_platform_network_init+0xa6>
 8009664:	4b47      	ldr	r3, [pc, #284]	; (8009784 <ai_platform_network_init+0x1cc>)
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	6812      	ldr	r2, [r2, #0]
 800966a:	4b47      	ldr	r3, [pc, #284]	; (8009788 <ai_platform_network_init+0x1d0>)
 800966c:	429a      	cmp	r2, r3
 800966e:	d11c      	bne.n	80096aa <ai_platform_network_init+0xf2>
 8009670:	f7ff fbe6 	bl	8008e40 <_ai_platform_release_crc>
 8009674:	2e00      	cmp	r6, #0
 8009676:	d06f      	beq.n	8009758 <ai_platform_network_init+0x1a0>
 8009678:	4b45      	ldr	r3, [pc, #276]	; (8009790 <ai_platform_network_init+0x1d8>)
 800967a:	6832      	ldr	r2, [r6, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d115      	bne.n	80096ac <ai_platform_network_init+0xf4>
 8009680:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009684:	6933      	ldr	r3, [r6, #16]
 8009686:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800968a:	89f7      	ldrh	r7, [r6, #14]
 800968c:	62a3      	str	r3, [r4, #40]	; 0x28
 800968e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009692:	2303      	movs	r3, #3
 8009694:	84e7      	strh	r7, [r4, #38]	; 0x26
 8009696:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800969a:	60e3      	str	r3, [r4, #12]
 800969c:	4620      	mov	r0, r4
 800969e:	4626      	mov	r6, r4
 80096a0:	f004 ffe2 	bl	800e668 <ai_layers_init_all>
 80096a4:	4630      	mov	r0, r6
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	e7fe      	b.n	80096aa <ai_platform_network_init+0xf2>
 80096ac:	2101      	movs	r1, #1
 80096ae:	4630      	mov	r0, r6
 80096b0:	4635      	mov	r5, r6
 80096b2:	6876      	ldr	r6, [r6, #4]
 80096b4:	f7ff fb74 	bl	8008da0 <ai_buffer_get_size>
 80096b8:	f105 081c 	add.w	r8, r5, #28
 80096bc:	4681      	mov	r9, r0
 80096be:	2101      	movs	r1, #1
 80096c0:	4640      	mov	r0, r8
 80096c2:	6a2f      	ldr	r7, [r5, #32]
 80096c4:	f7ff fb6c 	bl	8008da0 <ai_buffer_get_size>
 80096c8:	f1b9 0f00 	cmp.w	r9, #0
 80096cc:	d025      	beq.n	800971a <ai_platform_network_init+0x162>
 80096ce:	2201      	movs	r2, #1
 80096d0:	4696      	mov	lr, r2
 80096d2:	bb30      	cbnz	r0, 8009722 <ai_platform_network_init+0x16a>
 80096d4:	4680      	mov	r8, r0
 80096d6:	4607      	mov	r7, r0
 80096d8:	b376      	cbz	r6, 8009738 <ai_platform_network_init+0x180>
 80096da:	8be3      	ldrh	r3, [r4, #30]
 80096dc:	4573      	cmp	r3, lr
 80096de:	d323      	bcc.n	8009728 <ai_platform_network_init+0x170>
 80096e0:	b142      	cbz	r2, 80096f4 <ai_platform_network_init+0x13c>
 80096e2:	46ac      	mov	ip, r5
 80096e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096e8:	6a25      	ldr	r5, [r4, #32]
 80096ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80096f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80096f4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80096f6:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80096fa:	2600      	movs	r6, #0
 80096fc:	42bb      	cmp	r3, r7
 80096fe:	83a6      	strh	r6, [r4, #28]
 8009700:	d323      	bcc.n	800974a <ai_platform_network_init+0x192>
 8009702:	b37f      	cbz	r7, 8009764 <ai_platform_network_init+0x1ac>
 8009704:	46c4      	mov	ip, r8
 8009706:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800970a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800970c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009712:	46b6      	mov	lr, r6
 8009714:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009718:	e7bb      	b.n	8009692 <ai_platform_network_init+0xda>
 800971a:	464a      	mov	r2, r9
 800971c:	46ce      	mov	lr, r9
 800971e:	464d      	mov	r5, r9
 8009720:	e7d7      	b.n	80096d2 <ai_platform_network_init+0x11a>
 8009722:	b30f      	cbz	r7, 8009768 <ai_platform_network_init+0x1b0>
 8009724:	2701      	movs	r7, #1
 8009726:	e7d7      	b.n	80096d8 <ai_platform_network_init+0x120>
 8009728:	2212      	movs	r2, #18
 800972a:	2116      	movs	r1, #22
 800972c:	f104 0010 	add.w	r0, r4, #16
 8009730:	f000 fb46 	bl	8009dc0 <core_set_error>
 8009734:	2600      	movs	r6, #0
 8009736:	e78c      	b.n	8009652 <ai_platform_network_init+0x9a>
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	d0cd      	beq.n	80096da <ai_platform_network_init+0x122>
 800973e:	2110      	movs	r1, #16
 8009740:	2212      	movs	r2, #18
 8009742:	1860      	adds	r0, r4, r1
 8009744:	f000 fb3c 	bl	8009dc0 <core_set_error>
 8009748:	e783      	b.n	8009652 <ai_platform_network_init+0x9a>
 800974a:	2213      	movs	r2, #19
 800974c:	2116      	movs	r1, #22
 800974e:	f104 0010 	add.w	r0, r4, #16
 8009752:	f000 fb35 	bl	8009dc0 <core_set_error>
 8009756:	e77c      	b.n	8009652 <ai_platform_network_init+0x9a>
 8009758:	2110      	movs	r1, #16
 800975a:	2211      	movs	r2, #17
 800975c:	1860      	adds	r0, r4, r1
 800975e:	f000 fb2f 	bl	8009dc0 <core_set_error>
 8009762:	e776      	b.n	8009652 <ai_platform_network_init+0x9a>
 8009764:	46be      	mov	lr, r7
 8009766:	e794      	b.n	8009692 <ai_platform_network_init+0xda>
 8009768:	2110      	movs	r1, #16
 800976a:	2213      	movs	r2, #19
 800976c:	1860      	adds	r0, r4, r1
 800976e:	f000 fb27 	bl	8009dc0 <core_set_error>
 8009772:	463e      	mov	r6, r7
 8009774:	e76d      	b.n	8009652 <ai_platform_network_init+0x9a>
 8009776:	bf00      	nop
 8009778:	a1c00100 	.word	0xa1c00100
 800977c:	e0042000 	.word	0xe0042000
 8009780:	58024000 	.word	0x58024000
 8009784:	f407a5c2 	.word	0xf407a5c2
 8009788:	b5e8b5cd 	.word	0xb5e8b5cd
 800978c:	40023000 	.word	0x40023000
 8009790:	a1facade 	.word	0xa1facade

08009794 <ai_platform_network_post_init>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	b1f0      	cbz	r0, 80097d6 <ai_platform_network_post_init+0x42>
 8009798:	4b3c      	ldr	r3, [pc, #240]	; (800988c <ai_platform_network_post_init+0xf8>)
 800979a:	6802      	ldr	r2, [r0, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	4604      	mov	r4, r0
 80097a0:	d119      	bne.n	80097d6 <ai_platform_network_post_init+0x42>
 80097a2:	f7ff fb4b 	bl	8008e3c <_ai_platform_acquire_crc>
 80097a6:	4b3a      	ldr	r3, [pc, #232]	; (8009890 <ai_platform_network_post_init+0xfc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b2:	d03b      	beq.n	800982c <ai_platform_network_post_init+0x98>
 80097b4:	4a37      	ldr	r2, [pc, #220]	; (8009894 <ai_platform_network_post_init+0x100>)
 80097b6:	2301      	movs	r3, #1
 80097b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1fb      	bne.n	80097bc <ai_platform_network_post_init+0x28>
 80097c4:	4b34      	ldr	r3, [pc, #208]	; (8009898 <ai_platform_network_post_init+0x104>)
 80097c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097ce:	4b33      	ldr	r3, [pc, #204]	; (800989c <ai_platform_network_post_init+0x108>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d037      	beq.n	8009844 <ai_platform_network_post_init+0xb0>
 80097d4:	e7fe      	b.n	80097d4 <ai_platform_network_post_init+0x40>
 80097d6:	f7ff fb31 	bl	8008e3c <_ai_platform_acquire_crc>
 80097da:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <ai_platform_network_post_init+0xfc>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e6:	d010      	beq.n	800980a <ai_platform_network_post_init+0x76>
 80097e8:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <ai_platform_network_post_init+0x100>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1fb      	bne.n	80097f0 <ai_platform_network_post_init+0x5c>
 80097f8:	4b27      	ldr	r3, [pc, #156]	; (8009898 <ai_platform_network_post_init+0x104>)
 80097fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009802:	4b26      	ldr	r3, [pc, #152]	; (800989c <ai_platform_network_post_init+0x108>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d00d      	beq.n	8009824 <ai_platform_network_post_init+0x90>
 8009808:	e7fe      	b.n	8009808 <ai_platform_network_post_init+0x74>
 800980a:	4a25      	ldr	r2, [pc, #148]	; (80098a0 <ai_platform_network_post_init+0x10c>)
 800980c:	2301      	movs	r3, #1
 800980e:	6093      	str	r3, [r2, #8]
 8009810:	6893      	ldr	r3, [r2, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1fc      	bne.n	8009810 <ai_platform_network_post_init+0x7c>
 8009816:	4b20      	ldr	r3, [pc, #128]	; (8009898 <ai_platform_network_post_init+0x104>)
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	4b1f      	ldr	r3, [pc, #124]	; (800989c <ai_platform_network_post_init+0x108>)
 800981e:	429a      	cmp	r2, r3
 8009820:	d000      	beq.n	8009824 <ai_platform_network_post_init+0x90>
 8009822:	e7fe      	b.n	8009822 <ai_platform_network_post_init+0x8e>
 8009824:	f7ff fb0c 	bl	8008e40 <_ai_platform_release_crc>
 8009828:	2000      	movs	r0, #0
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	4a1c      	ldr	r2, [pc, #112]	; (80098a0 <ai_platform_network_post_init+0x10c>)
 800982e:	2301      	movs	r3, #1
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	6893      	ldr	r3, [r2, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1fc      	bne.n	8009832 <ai_platform_network_post_init+0x9e>
 8009838:	4b17      	ldr	r3, [pc, #92]	; (8009898 <ai_platform_network_post_init+0x104>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	4b17      	ldr	r3, [pc, #92]	; (800989c <ai_platform_network_post_init+0x108>)
 8009840:	429a      	cmp	r2, r3
 8009842:	d11a      	bne.n	800987a <ai_platform_network_post_init+0xe6>
 8009844:	f7ff fafc 	bl	8008e40 <_ai_platform_release_crc>
 8009848:	68e3      	ldr	r3, [r4, #12]
 800984a:	f013 0502 	ands.w	r5, r3, #2
 800984e:	d015      	beq.n	800987c <ai_platform_network_post_init+0xe8>
 8009850:	4620      	mov	r0, r4
 8009852:	f004 ff17 	bl	800e684 <ai_layers_post_init_all>
 8009856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009858:	b16b      	cbz	r3, 8009876 <ai_platform_network_post_init+0xe2>
 800985a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800985c:	e007      	b.n	800986e <ai_platform_network_post_init+0xda>
 800985e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009862:	4798      	blx	r3
 8009864:	692b      	ldr	r3, [r5, #16]
 8009866:	42ab      	cmp	r3, r5
 8009868:	d005      	beq.n	8009876 <ai_platform_network_post_init+0xe2>
 800986a:	b123      	cbz	r3, 8009876 <ai_platform_network_post_init+0xe2>
 800986c:	461d      	mov	r5, r3
 800986e:	4629      	mov	r1, r5
 8009870:	2000      	movs	r0, #0
 8009872:	2d00      	cmp	r5, #0
 8009874:	d1f3      	bne.n	800985e <ai_platform_network_post_init+0xca>
 8009876:	2001      	movs	r0, #1
 8009878:	bd38      	pop	{r3, r4, r5, pc}
 800987a:	e7fe      	b.n	800987a <ai_platform_network_post_init+0xe6>
 800987c:	2210      	movs	r2, #16
 800987e:	2111      	movs	r1, #17
 8009880:	18a0      	adds	r0, r4, r2
 8009882:	f000 fa9d 	bl	8009dc0 <core_set_error>
 8009886:	4628      	mov	r0, r5
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	bf00      	nop
 800988c:	a1c00100 	.word	0xa1c00100
 8009890:	e0042000 	.word	0xe0042000
 8009894:	58024000 	.word	0x58024000
 8009898:	f407a5c2 	.word	0xf407a5c2
 800989c:	b5e8b5cd 	.word	0xb5e8b5cd
 80098a0:	40023000 	.word	0x40023000

080098a4 <ai_platform_network_process>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	460e      	mov	r6, r1
 80098aa:	b085      	sub	sp, #20
 80098ac:	4693      	mov	fp, r2
 80098ae:	4605      	mov	r5, r0
 80098b0:	b120      	cbz	r0, 80098bc <ai_platform_network_process+0x18>
 80098b2:	4bb8      	ldr	r3, [pc, #736]	; (8009b94 <ai_platform_network_process+0x2f0>)
 80098b4:	6802      	ldr	r2, [r0, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	bf18      	it	ne
 80098ba:	2500      	movne	r5, #0
 80098bc:	f7ff fabe 	bl	8008e3c <_ai_platform_acquire_crc>
 80098c0:	4bb5      	ldr	r3, [pc, #724]	; (8009b98 <ai_platform_network_process+0x2f4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098cc:	d010      	beq.n	80098f0 <ai_platform_network_process+0x4c>
 80098ce:	4ab3      	ldr	r2, [pc, #716]	; (8009b9c <ai_platform_network_process+0x2f8>)
 80098d0:	2301      	movs	r3, #1
 80098d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80098d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1fb      	bne.n	80098d6 <ai_platform_network_process+0x32>
 80098de:	4bb0      	ldr	r3, [pc, #704]	; (8009ba0 <ai_platform_network_process+0x2fc>)
 80098e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80098e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80098e8:	4bae      	ldr	r3, [pc, #696]	; (8009ba4 <ai_platform_network_process+0x300>)
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d00d      	beq.n	800990a <ai_platform_network_process+0x66>
 80098ee:	e7fe      	b.n	80098ee <ai_platform_network_process+0x4a>
 80098f0:	4aad      	ldr	r2, [pc, #692]	; (8009ba8 <ai_platform_network_process+0x304>)
 80098f2:	2301      	movs	r3, #1
 80098f4:	6093      	str	r3, [r2, #8]
 80098f6:	6893      	ldr	r3, [r2, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1fc      	bne.n	80098f6 <ai_platform_network_process+0x52>
 80098fc:	4ba8      	ldr	r3, [pc, #672]	; (8009ba0 <ai_platform_network_process+0x2fc>)
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	4ba8      	ldr	r3, [pc, #672]	; (8009ba4 <ai_platform_network_process+0x300>)
 8009904:	429a      	cmp	r2, r3
 8009906:	f040 812c 	bne.w	8009b62 <ai_platform_network_process+0x2be>
 800990a:	f7ff fa99 	bl	8008e40 <_ai_platform_release_crc>
 800990e:	2d00      	cmp	r5, #0
 8009910:	f000 8154 	beq.w	8009bbc <ai_platform_network_process+0x318>
 8009914:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8124 	beq.w	8009b64 <ai_platform_network_process+0x2c0>
 800991c:	68eb      	ldr	r3, [r5, #12]
 800991e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	2700      	movs	r7, #0
 8009928:	2b03      	cmp	r3, #3
 800992a:	616f      	str	r7, [r5, #20]
 800992c:	f040 813e 	bne.w	8009bac <ai_platform_network_process+0x308>
 8009930:	2e00      	cmp	r6, #0
 8009932:	f000 811d 	beq.w	8009b70 <ai_platform_network_process+0x2cc>
 8009936:	f1ba 0f00 	cmp.w	sl, #0
 800993a:	f000 8119 	beq.w	8009b70 <ai_platform_network_process+0x2cc>
 800993e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8114 	beq.w	8009b70 <ai_platform_network_process+0x2cc>
 8009948:	69b3      	ldr	r3, [r6, #24]
 800994a:	f8cd b00c 	str.w	fp, [sp, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009954:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d072      	beq.n	8009a42 <ai_platform_network_process+0x19e>
 800995c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009960:	2c00      	cmp	r4, #0
 8009962:	d06e      	beq.n	8009a42 <ai_platform_network_process+0x19e>
 8009964:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009968:	f8d3 9000 	ldr.w	r9, [r3]
 800996c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8009970:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009974:	f000 81e0 	beq.w	8009d38 <ai_platform_network_process+0x494>
 8009978:	69a3      	ldr	r3, [r4, #24]
 800997a:	2101      	movs	r1, #1
 800997c:	4630      	mov	r0, r6
 800997e:	685d      	ldr	r5, [r3, #4]
 8009980:	f7ff fa0e 	bl	8008da0 <ai_buffer_get_size>
 8009984:	4285      	cmp	r5, r0
 8009986:	f0c0 811b 	bcc.w	8009bc0 <ai_platform_network_process+0x31c>
 800998a:	68e0      	ldr	r0, [r4, #12]
 800998c:	69b1      	ldr	r1, [r6, #24]
 800998e:	68c2      	ldr	r2, [r0, #12]
 8009990:	68cb      	ldr	r3, [r1, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	f040 8114 	bne.w	8009bc0 <ai_platform_network_process+0x31c>
 8009998:	6882      	ldr	r2, [r0, #8]
 800999a:	688b      	ldr	r3, [r1, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	f040 810f 	bne.w	8009bc0 <ai_platform_network_process+0x31c>
 80099a2:	6842      	ldr	r2, [r0, #4]
 80099a4:	684b      	ldr	r3, [r1, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	f040 810a 	bne.w	8009bc0 <ai_platform_network_process+0x31c>
 80099ac:	69a3      	ldr	r3, [r4, #24]
 80099ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099b2:	f005 f89b 	bl	800eaec <ai_array_get_data_byte_size>
 80099b6:	4605      	mov	r5, r0
 80099b8:	4620      	mov	r0, r4
 80099ba:	f004 ffeb 	bl	800e994 <get_tensor_byte_size>
 80099be:	4285      	cmp	r5, r0
 80099c0:	f0c0 80fe 	bcc.w	8009bc0 <ai_platform_network_process+0x31c>
 80099c4:	69a3      	ldr	r3, [r4, #24]
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	f004 fffc 	bl	800e9c4 <ai_array_to_buffer_fmt>
 80099cc:	6833      	ldr	r3, [r6, #0]
 80099ce:	4058      	eors	r0, r3
 80099d0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80099d4:	f040 81bb 	bne.w	8009d4e <ai_platform_network_process+0x4aa>
 80099d8:	6873      	ldr	r3, [r6, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 81ae 	beq.w	8009d3c <ai_platform_network_process+0x498>
 80099e0:	69b3      	ldr	r3, [r6, #24]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 819e 	beq.w	8009d26 <ai_platform_network_process+0x482>
 80099ea:	9a01      	ldr	r2, [sp, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	bf38      	it	cc
 80099f0:	461a      	movcc	r2, r3
 80099f2:	4620      	mov	r0, r4
 80099f4:	9201      	str	r2, [sp, #4]
 80099f6:	f004 ffcd 	bl	800e994 <get_tensor_byte_size>
 80099fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fe:	69b3      	ldr	r3, [r6, #24]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	fb00 f303 	mul.w	r3, r0, r3
 8009a06:	f8c8 300c 	str.w	r3, [r8, #12]
 8009a0a:	6871      	ldr	r1, [r6, #4]
 8009a0c:	f8c8 1004 	str.w	r1, [r8, #4]
 8009a10:	440b      	add	r3, r1
 8009a12:	f849 300b 	str.w	r3, [r9, fp]
 8009a16:	69a0      	ldr	r0, [r4, #24]
 8009a18:	6803      	ldr	r3, [r0, #0]
 8009a1a:	009a      	lsls	r2, r3, #2
 8009a1c:	f107 0701 	add.w	r7, r7, #1
 8009a20:	f106 061c 	add.w	r6, r6, #28
 8009a24:	f100 80af 	bmi.w	8009b86 <ai_platform_network_process+0x2e2>
 8009a28:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	4419      	add	r1, r3
 8009a30:	6081      	str	r1, [r0, #8]
 8009a32:	69a3      	ldr	r3, [r4, #24]
 8009a34:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	f8ba 3000 	ldrh.w	r3, [sl]
 8009a3e:	42bb      	cmp	r3, r7
 8009a40:	d888      	bhi.n	8009954 <ai_platform_network_process+0xb0>
 8009a42:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8009a46:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	f000 8188 	beq.w	8009d60 <ai_platform_network_process+0x4bc>
 8009a50:	2a01      	cmp	r2, #1
 8009a52:	f240 8160 	bls.w	8009d16 <ai_platform_network_process+0x472>
 8009a56:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009a5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8159 	beq.w	8009d16 <ai_platform_network_process+0x472>
 8009a64:	465e      	mov	r6, fp
 8009a66:	2700      	movs	r7, #0
 8009a68:	462c      	mov	r4, r5
 8009a6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80b4 	beq.w	8009bdc <ai_platform_network_process+0x338>
 8009a74:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	f000 80af 	beq.w	8009bdc <ai_platform_network_process+0x338>
 8009a7e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009a82:	f8d3 8000 	ldr.w	r8, [r3]
 8009a86:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8009a8a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009a8e:	f000 8173 	beq.w	8009d78 <ai_platform_network_process+0x4d4>
 8009a92:	69ab      	ldr	r3, [r5, #24]
 8009a94:	2101      	movs	r1, #1
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff f980 	bl	8008da0 <ai_buffer_get_size>
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	4283      	cmp	r3, r0
 8009aa4:	f0c0 8136 	bcc.w	8009d14 <ai_platform_network_process+0x470>
 8009aa8:	68e8      	ldr	r0, [r5, #12]
 8009aaa:	69b1      	ldr	r1, [r6, #24]
 8009aac:	68c2      	ldr	r2, [r0, #12]
 8009aae:	68cb      	ldr	r3, [r1, #12]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	f040 812f 	bne.w	8009d14 <ai_platform_network_process+0x470>
 8009ab6:	6882      	ldr	r2, [r0, #8]
 8009ab8:	688b      	ldr	r3, [r1, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	f040 812a 	bne.w	8009d14 <ai_platform_network_process+0x470>
 8009ac0:	6842      	ldr	r2, [r0, #4]
 8009ac2:	684b      	ldr	r3, [r1, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	f040 8125 	bne.w	8009d14 <ai_platform_network_process+0x470>
 8009aca:	69ab      	ldr	r3, [r5, #24]
 8009acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ad0:	f005 f80c 	bl	800eaec <ai_array_get_data_byte_size>
 8009ad4:	9002      	str	r0, [sp, #8]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f004 ff5c 	bl	800e994 <get_tensor_byte_size>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	4283      	cmp	r3, r0
 8009ae0:	f0c0 8118 	bcc.w	8009d14 <ai_platform_network_process+0x470>
 8009ae4:	69ab      	ldr	r3, [r5, #24]
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	f004 ff6c 	bl	800e9c4 <ai_array_to_buffer_fmt>
 8009aec:	6833      	ldr	r3, [r6, #0]
 8009aee:	4058      	eors	r0, r3
 8009af0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009af4:	f040 8138 	bne.w	8009d68 <ai_platform_network_process+0x4c4>
 8009af8:	6873      	ldr	r3, [r6, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 814f 	beq.w	8009d9e <ai_platform_network_process+0x4fa>
 8009b00:	69b3      	ldr	r3, [r6, #24]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8141 	beq.w	8009d8c <ai_platform_network_process+0x4e8>
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	bf38      	it	cc
 8009b10:	461a      	movcc	r2, r3
 8009b12:	4628      	mov	r0, r5
 8009b14:	9201      	str	r2, [sp, #4]
 8009b16:	f004 ff3d 	bl	800e994 <get_tensor_byte_size>
 8009b1a:	f8ca 0008 	str.w	r0, [sl, #8]
 8009b1e:	69b3      	ldr	r3, [r6, #24]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	fb00 f303 	mul.w	r3, r0, r3
 8009b26:	f8ca 300c 	str.w	r3, [sl, #12]
 8009b2a:	6871      	ldr	r1, [r6, #4]
 8009b2c:	f8ca 1004 	str.w	r1, [sl, #4]
 8009b30:	440b      	add	r3, r1
 8009b32:	f848 300b 	str.w	r3, [r8, fp]
 8009b36:	69a8      	ldr	r0, [r5, #24]
 8009b38:	6803      	ldr	r3, [r0, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	f107 0701 	add.w	r7, r7, #1
 8009b40:	f106 061c 	add.w	r6, r6, #28
 8009b44:	d445      	bmi.n	8009bd2 <ai_platform_network_process+0x32e>
 8009b46:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	4419      	add	r1, r3
 8009b4e:	6081      	str	r1, [r0, #8]
 8009b50:	69ab      	ldr	r3, [r5, #24]
 8009b52:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009b56:	60da      	str	r2, [r3, #12]
 8009b58:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009b5c:	429f      	cmp	r7, r3
 8009b5e:	d384      	bcc.n	8009a6a <ai_platform_network_process+0x1c6>
 8009b60:	e03c      	b.n	8009bdc <ai_platform_network_process+0x338>
 8009b62:	e7fe      	b.n	8009b62 <ai_platform_network_process+0x2be>
 8009b64:	68ea      	ldr	r2, [r5, #12]
 8009b66:	616b      	str	r3, [r5, #20]
 8009b68:	f002 0203 	and.w	r2, r2, #3
 8009b6c:	2a03      	cmp	r2, #3
 8009b6e:	d11d      	bne.n	8009bac <ai_platform_network_process+0x308>
 8009b70:	2217      	movs	r2, #23
 8009b72:	2112      	movs	r1, #18
 8009b74:	f105 0010 	add.w	r0, r5, #16
 8009b78:	f000 f922 	bl	8009dc0 <core_set_error>
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	4620      	mov	r0, r4
 8009b80:	b005      	add	sp, #20
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b8a:	429f      	cmp	r7, r3
 8009b8c:	f4ff aee2 	bcc.w	8009954 <ai_platform_network_process+0xb0>
 8009b90:	e757      	b.n	8009a42 <ai_platform_network_process+0x19e>
 8009b92:	bf00      	nop
 8009b94:	a1c00100 	.word	0xa1c00100
 8009b98:	e0042000 	.word	0xe0042000
 8009b9c:	58024000 	.word	0x58024000
 8009ba0:	f407a5c2 	.word	0xf407a5c2
 8009ba4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ba8:	40023000 	.word	0x40023000
 8009bac:	2230      	movs	r2, #48	; 0x30
 8009bae:	2111      	movs	r1, #17
 8009bb0:	f105 0010 	add.w	r0, r5, #16
 8009bb4:	f000 f904 	bl	8009dc0 <core_set_error>
 8009bb8:	2400      	movs	r4, #0
 8009bba:	e7e0      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009bbc:	462c      	mov	r4, r5
 8009bbe:	e7de      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009bc0:	9d02      	ldr	r5, [sp, #8]
 8009bc2:	2218      	movs	r2, #24
 8009bc4:	2112      	movs	r1, #18
 8009bc6:	f105 0010 	add.w	r0, r5, #16
 8009bca:	f000 f8f9 	bl	8009dc0 <core_set_error>
 8009bce:	2400      	movs	r4, #0
 8009bd0:	e7d5      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009bd2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009bd6:	429f      	cmp	r7, r3
 8009bd8:	f4ff af47 	bcc.w	8009a6a <ai_platform_network_process+0x1c6>
 8009bdc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009be0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8009be2:	82a3      	strh	r3, [r4, #20]
 8009be4:	4625      	mov	r5, r4
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	f040 808e 	bne.w	8009d08 <ai_platform_network_process+0x464>
 8009bec:	4616      	mov	r6, r2
 8009bee:	4617      	mov	r7, r2
 8009bf0:	8aec      	ldrh	r4, [r5, #22]
 8009bf2:	429c      	cmp	r4, r3
 8009bf4:	bf38      	it	cc
 8009bf6:	46ab      	movcc	fp, r5
 8009bf8:	d2c1      	bcs.n	8009b7e <ai_platform_network_process+0x2da>
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d030      	beq.n	8009c60 <ai_platform_network_process+0x3bc>
 8009bfe:	f04f 0800 	mov.w	r8, #0
 8009c02:	e014      	b.n	8009c2e <ai_platform_network_process+0x38a>
 8009c04:	6882      	ldr	r2, [r0, #8]
 8009c06:	68c5      	ldr	r5, [r0, #12]
 8009c08:	6863      	ldr	r3, [r4, #4]
 8009c0a:	1b52      	subs	r2, r2, r5
 8009c0c:	4413      	add	r3, r2
 8009c0e:	6083      	str	r3, [r0, #8]
 8009c10:	698b      	ldr	r3, [r1, #24]
 8009c12:	6862      	ldr	r2, [r4, #4]
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009c1a:	f859 200a 	ldr.w	r2, [r9, sl]
 8009c1e:	440b      	add	r3, r1
 8009c20:	4293      	cmp	r3, r2
 8009c22:	bf24      	itt	cs
 8009c24:	68e3      	ldrcs	r3, [r4, #12]
 8009c26:	1ad3      	subcs	r3, r2, r3
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	f108 0801 	add.w	r8, r8, #1
 8009c2e:	8833      	ldrh	r3, [r6, #0]
 8009c30:	4543      	cmp	r3, r8
 8009c32:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009c36:	d913      	bls.n	8009c60 <ai_platform_network_process+0x3bc>
 8009c38:	6873      	ldr	r3, [r6, #4]
 8009c3a:	b18b      	cbz	r3, 8009c60 <ai_platform_network_process+0x3bc>
 8009c3c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009c40:	b171      	cbz	r1, 8009c60 <ai_platform_network_process+0x3bc>
 8009c42:	6988      	ldr	r0, [r1, #24]
 8009c44:	68b2      	ldr	r2, [r6, #8]
 8009c46:	6803      	ldr	r3, [r0, #0]
 8009c48:	f8d2 9000 	ldr.w	r9, [r2]
 8009c4c:	009d      	lsls	r5, r3, #2
 8009c4e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009c52:	d5d7      	bpl.n	8009c04 <ai_platform_network_process+0x360>
 8009c54:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009c58:	6880      	ldr	r0, [r0, #8]
 8009c5a:	f005 fa8b 	bl	800f174 <memcpy>
 8009c5e:	e7da      	b.n	8009c16 <ai_platform_network_process+0x372>
 8009c60:	4658      	mov	r0, fp
 8009c62:	f004 fd23 	bl	800e6ac <ai_layers_forward_all>
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	d03f      	beq.n	8009cea <ai_platform_network_process+0x446>
 8009c6a:	2400      	movs	r4, #0
 8009c6c:	e016      	b.n	8009c9c <ai_platform_network_process+0x3f8>
 8009c6e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009c72:	f859 100a 	ldr.w	r1, [r9, sl]
 8009c76:	4413      	add	r3, r2
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf24      	itt	cs
 8009c7c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009c80:	1acb      	subcs	r3, r1, r3
 8009c82:	f8c8 3004 	str.w	r3, [r8, #4]
 8009c86:	6981      	ldr	r1, [r0, #24]
 8009c88:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009c8c:	1b52      	subs	r2, r2, r5
 8009c8e:	4413      	add	r3, r2
 8009c90:	608b      	str	r3, [r1, #8]
 8009c92:	6983      	ldr	r3, [r0, #24]
 8009c94:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009c98:	60da      	str	r2, [r3, #12]
 8009c9a:	3401      	adds	r4, #1
 8009c9c:	883b      	ldrh	r3, [r7, #0]
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	d923      	bls.n	8009cea <ai_platform_network_process+0x446>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	b30b      	cbz	r3, 8009cea <ai_platform_network_process+0x446>
 8009ca6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009caa:	b1f0      	cbz	r0, 8009cea <ai_platform_network_process+0x446>
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	6983      	ldr	r3, [r0, #24]
 8009cb0:	f8d2 9000 	ldr.w	r9, [r2]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	0092      	lsls	r2, r2, #2
 8009cb8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009cbc:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009cc0:	d5d5      	bpl.n	8009c6e <ai_platform_network_process+0x3ca>
 8009cc2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009cc6:	6899      	ldr	r1, [r3, #8]
 8009cc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ccc:	f005 fa52 	bl	800f174 <memcpy>
 8009cd0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009cd4:	f859 200a 	ldr.w	r2, [r9, sl]
 8009cd8:	440b      	add	r3, r1
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	bf24      	itt	cs
 8009cde:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009ce2:	1ad3      	subcs	r3, r2, r3
 8009ce4:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ce8:	e7d7      	b.n	8009c9a <ai_platform_network_process+0x3f6>
 8009cea:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009cee:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009cf2:	3401      	adds	r4, #1
 8009cf4:	b2a4      	uxth	r4, r4
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009cfc:	f63f af7d 	bhi.w	8009bfa <ai_platform_network_process+0x356>
 8009d00:	4620      	mov	r0, r4
 8009d02:	b005      	add	sp, #20
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	2a01      	cmp	r2, #1
 8009d0a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009d0c:	d03c      	beq.n	8009d88 <ai_platform_network_process+0x4e4>
 8009d0e:	f106 070c 	add.w	r7, r6, #12
 8009d12:	e76d      	b.n	8009bf0 <ai_platform_network_process+0x34c>
 8009d14:	4625      	mov	r5, r4
 8009d16:	2218      	movs	r2, #24
 8009d18:	2113      	movs	r1, #19
 8009d1a:	f105 0010 	add.w	r0, r5, #16
 8009d1e:	f000 f84f 	bl	8009dc0 <core_set_error>
 8009d22:	2400      	movs	r4, #0
 8009d24:	e72b      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d26:	9d02      	ldr	r5, [sp, #8]
 8009d28:	4604      	mov	r4, r0
 8009d2a:	2221      	movs	r2, #33	; 0x21
 8009d2c:	2112      	movs	r1, #18
 8009d2e:	f105 0010 	add.w	r0, r5, #16
 8009d32:	f000 f845 	bl	8009dc0 <core_set_error>
 8009d36:	e722      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d38:	9d02      	ldr	r5, [sp, #8]
 8009d3a:	e719      	b.n	8009b70 <ai_platform_network_process+0x2cc>
 8009d3c:	9d02      	ldr	r5, [sp, #8]
 8009d3e:	4604      	mov	r4, r0
 8009d40:	2217      	movs	r2, #23
 8009d42:	2112      	movs	r1, #18
 8009d44:	f105 0010 	add.w	r0, r5, #16
 8009d48:	f000 f83a 	bl	8009dc0 <core_set_error>
 8009d4c:	e717      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d4e:	9d02      	ldr	r5, [sp, #8]
 8009d50:	2219      	movs	r2, #25
 8009d52:	2112      	movs	r1, #18
 8009d54:	f105 0010 	add.w	r0, r5, #16
 8009d58:	f000 f832 	bl	8009dc0 <core_set_error>
 8009d5c:	2400      	movs	r4, #0
 8009d5e:	e70e      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009d64:	82ab      	strh	r3, [r5, #20]
 8009d66:	e73e      	b.n	8009be6 <ai_platform_network_process+0x342>
 8009d68:	f104 0010 	add.w	r0, r4, #16
 8009d6c:	2219      	movs	r2, #25
 8009d6e:	2113      	movs	r1, #19
 8009d70:	f000 f826 	bl	8009dc0 <core_set_error>
 8009d74:	2400      	movs	r4, #0
 8009d76:	e702      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d78:	f104 0010 	add.w	r0, r4, #16
 8009d7c:	2217      	movs	r2, #23
 8009d7e:	2113      	movs	r1, #19
 8009d80:	f000 f81e 	bl	8009dc0 <core_set_error>
 8009d84:	4654      	mov	r4, sl
 8009d86:	e6fa      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d88:	2700      	movs	r7, #0
 8009d8a:	e731      	b.n	8009bf0 <ai_platform_network_process+0x34c>
 8009d8c:	4625      	mov	r5, r4
 8009d8e:	2221      	movs	r2, #33	; 0x21
 8009d90:	4604      	mov	r4, r0
 8009d92:	2113      	movs	r1, #19
 8009d94:	f105 0010 	add.w	r0, r5, #16
 8009d98:	f000 f812 	bl	8009dc0 <core_set_error>
 8009d9c:	e6ef      	b.n	8009b7e <ai_platform_network_process+0x2da>
 8009d9e:	4625      	mov	r5, r4
 8009da0:	2217      	movs	r2, #23
 8009da2:	4604      	mov	r4, r0
 8009da4:	2113      	movs	r1, #19
 8009da6:	f105 0010 	add.w	r0, r5, #16
 8009daa:	f000 f809 	bl	8009dc0 <core_set_error>
 8009dae:	e6e6      	b.n	8009b7e <ai_platform_network_process+0x2da>

08009db0 <core_init>:
 8009db0:	2001      	movs	r0, #1
 8009db2:	4770      	bx	lr

08009db4 <core_get_error>:
 8009db4:	4603      	mov	r3, r0
 8009db6:	2200      	movs	r2, #0
 8009db8:	6800      	ldr	r0, [r0, #0]
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop

08009dc0 <core_set_error>:
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	7800      	ldrb	r0, [r0, #0]
 8009dc4:	b108      	cbz	r0, 8009dca <core_set_error+0xa>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	4770      	bx	lr
 8009dca:	7019      	strb	r1, [r3, #0]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	f362 211f 	bfi	r1, r2, #8, #24
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	6019      	str	r1, [r3, #0]
 8009dd6:	4770      	bx	lr

08009dd8 <forward_dense>:
 8009dd8:	6983      	ldr	r3, [r0, #24]
 8009dda:	881a      	ldrh	r2, [r3, #0]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	f000 8181 	beq.w	800a0e4 <forward_dense+0x30c>
 8009de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de6:	ed2d 8b02 	vpush	{d8}
 8009dea:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009dee:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009df2:	b095      	sub	sp, #84	; 0x54
 8009df4:	b105      	cbz	r5, 8009df8 <forward_dense+0x20>
 8009df6:	682d      	ldr	r5, [r5, #0]
 8009df8:	2a01      	cmp	r2, #1
 8009dfa:	f000 828f 	beq.w	800a31c <forward_dense+0x544>
 8009dfe:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009e02:	b106      	cbz	r6, 8009e06 <forward_dense+0x2e>
 8009e04:	6836      	ldr	r6, [r6, #0]
 8009e06:	2a02      	cmp	r2, #2
 8009e08:	f000 816e 	beq.w	800a0e8 <forward_dense+0x310>
 8009e0c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8274 	beq.w	800a300 <forward_dense+0x528>
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8009e1e:	6809      	ldr	r1, [r1, #0]
 8009e20:	910d      	str	r1, [sp, #52]	; 0x34
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	f240 826e 	bls.w	800a304 <forward_dense+0x52c>
 8009e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e2e:	460b      	mov	r3, r1
 8009e30:	68e8      	ldr	r0, [r5, #12]
 8009e32:	68f7      	ldr	r7, [r6, #12]
 8009e34:	6840      	ldr	r0, [r0, #4]
 8009e36:	6999      	ldr	r1, [r3, #24]
 8009e38:	9013      	str	r0, [sp, #76]	; 0x4c
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	680b      	ldr	r3, [r1, #0]
 8009e3e:	9012      	str	r0, [sp, #72]	; 0x48
 8009e40:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8009e44:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009e48:	fb00 f404 	mul.w	r4, r0, r4
 8009e4c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8009e50:	fa4e f000 	asr.w	r0, lr, r0
 8009e54:	2a03      	cmp	r2, #3
 8009e56:	9010      	str	r0, [sp, #64]	; 0x40
 8009e58:	f000 825d 	beq.w	800a316 <forward_dense+0x53e>
 8009e5c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009e60:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	f000 8246 	beq.w	800a2f6 <forward_dense+0x51e>
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	f000 8242 	beq.w	800a2f6 <forward_dense+0x51e>
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009e78:	f000 822c 	beq.w	800a2d4 <forward_dense+0x4fc>
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	f000 8229 	beq.w	800a2d4 <forward_dense+0x4fc>
 8009e82:	f04f 0b00 	mov.w	fp, #0
 8009e86:	69b2      	ldr	r2, [r6, #24]
 8009e88:	69ab      	ldr	r3, [r5, #24]
 8009e8a:	6891      	ldr	r1, [r2, #8]
 8009e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	6952      	ldr	r2, [r2, #20]
 8009e92:	9106      	str	r1, [sp, #24]
 8009e94:	fb07 f404 	mul.w	r4, r7, r4
 8009e98:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e9e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009ea2:	4281      	cmp	r1, r0
 8009ea4:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8009ea8:	900e      	str	r0, [sp, #56]	; 0x38
 8009eaa:	940c      	str	r4, [sp, #48]	; 0x30
 8009eac:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8009eb0:	f080 8113 	bcs.w	800a0da <forward_dense+0x302>
 8009eb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009eb6:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800a104 <forward_dense+0x32c>
 8009eba:	f021 0201 	bic.w	r2, r1, #1
 8009ebe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009ec2:	9204      	str	r2, [sp, #16]
 8009ec4:	f001 0201 	and.w	r2, r1, #1
 8009ec8:	08c8      	lsrs	r0, r1, #3
 8009eca:	9208      	str	r2, [sp, #32]
 8009ecc:	008a      	lsls	r2, r1, #2
 8009ece:	f001 0a07 	and.w	sl, r1, #7
 8009ed2:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ed4:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8009ed8:	3320      	adds	r3, #32
 8009eda:	465c      	mov	r4, fp
 8009edc:	9007      	str	r0, [sp, #28]
 8009ede:	46cb      	mov	fp, r9
 8009ee0:	9205      	str	r2, [sp, #20]
 8009ee2:	9302      	str	r3, [sp, #8]
 8009ee4:	46c1      	mov	r9, r8
 8009ee6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	3b20      	subs	r3, #32
 8009ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef8:	b10b      	cbz	r3, 8009efe <forward_dense+0x126>
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2c00      	cmp	r4, #0
 8009f00:	f000 81da 	beq.w	800a2b8 <forward_dense+0x4e0>
 8009f04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f06:	2904      	cmp	r1, #4
 8009f08:	9906      	ldr	r1, [sp, #24]
 8009f0a:	f000 80fd 	beq.w	800a108 <forward_dense+0x330>
 8009f0e:	4549      	cmp	r1, r9
 8009f10:	f080 80d2 	bcs.w	800a0b8 <forward_dense+0x2e0>
 8009f14:	460f      	mov	r7, r1
 8009f16:	9907      	ldr	r1, [sp, #28]
 8009f18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009f1c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009f20:	1c4e      	adds	r6, r1, #1
 8009f22:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009f26:	4694      	mov	ip, r2
 8009f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f2a:	468e      	mov	lr, r1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 80de 	beq.w	800a0ee <forward_dense+0x316>
 8009f32:	ecf3 2a01 	vldmia	r3!, {s5}
 8009f36:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a104 <forward_dense+0x32c>
 8009f3a:	f1be 0f00 	cmp.w	lr, #0
 8009f3e:	f000 80de 	beq.w	800a0fe <forward_dense+0x326>
 8009f42:	f10c 0108 	add.w	r1, ip, #8
 8009f46:	4640      	mov	r0, r8
 8009f48:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009f4c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8009f50:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8009f54:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8009f58:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8009f5c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8009f60:	ed50 5a03 	vldr	s11, [r0, #-12]
 8009f64:	ed10 6a02 	vldr	s12, [r0, #-8]
 8009f68:	ed50 6a01 	vldr	s13, [r0, #-4]
 8009f6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f70:	edd5 7a00 	vldr	s15, [r5]
 8009f74:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8009f78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f7c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009f80:	ed95 3a00 	vldr	s6, [r5]
 8009f84:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8009f88:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009f8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f90:	3108      	adds	r1, #8
 8009f92:	edd5 3a00 	vldr	s7, [r5]
 8009f96:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009f9a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009f9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fa2:	3020      	adds	r0, #32
 8009fa4:	ed95 4a00 	vldr	s8, [r5]
 8009fa8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009fac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fb0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fb4:	edd5 4a00 	vldr	s9, [r5]
 8009fb8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009fbc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009fc0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fc4:	ed95 5a00 	vldr	s10, [r5]
 8009fc8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009fcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009fd0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fd4:	edd5 5a00 	vldr	s11, [r5]
 8009fd8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8009fdc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009fe0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fe4:	428e      	cmp	r6, r1
 8009fe6:	ed95 6a00 	vldr	s12, [r5]
 8009fea:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ff2:	d1a9      	bne.n	8009f48 <forward_dense+0x170>
 8009ff4:	f1a6 0108 	sub.w	r1, r6, #8
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	d04a      	beq.n	800a094 <forward_dense+0x2bc>
 8009ffe:	780d      	ldrb	r5, [r1, #0]
 800a000:	edd0 6a00 	vldr	s13, [r0]
 800a004:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a008:	edd5 7a00 	vldr	s15, [r5]
 800a00c:	2a01      	cmp	r2, #1
 800a00e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a012:	d03f      	beq.n	800a094 <forward_dense+0x2bc>
 800a014:	784d      	ldrb	r5, [r1, #1]
 800a016:	edd0 6a01 	vldr	s13, [r0, #4]
 800a01a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a01e:	edd5 7a00 	vldr	s15, [r5]
 800a022:	2a02      	cmp	r2, #2
 800a024:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a028:	d034      	beq.n	800a094 <forward_dense+0x2bc>
 800a02a:	788d      	ldrb	r5, [r1, #2]
 800a02c:	edd0 6a02 	vldr	s13, [r0, #8]
 800a030:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a034:	edd5 7a00 	vldr	s15, [r5]
 800a038:	2a03      	cmp	r2, #3
 800a03a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a03e:	d029      	beq.n	800a094 <forward_dense+0x2bc>
 800a040:	78cd      	ldrb	r5, [r1, #3]
 800a042:	edd0 6a03 	vldr	s13, [r0, #12]
 800a046:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a04a:	edd5 7a00 	vldr	s15, [r5]
 800a04e:	2a04      	cmp	r2, #4
 800a050:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a054:	d01e      	beq.n	800a094 <forward_dense+0x2bc>
 800a056:	790d      	ldrb	r5, [r1, #4]
 800a058:	edd0 6a04 	vldr	s13, [r0, #16]
 800a05c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a060:	edd5 7a00 	vldr	s15, [r5]
 800a064:	2a05      	cmp	r2, #5
 800a066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a06a:	d013      	beq.n	800a094 <forward_dense+0x2bc>
 800a06c:	794d      	ldrb	r5, [r1, #5]
 800a06e:	edd0 6a05 	vldr	s13, [r0, #20]
 800a072:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a076:	edd5 7a00 	vldr	s15, [r5]
 800a07a:	2a06      	cmp	r2, #6
 800a07c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a080:	d008      	beq.n	800a094 <forward_dense+0x2bc>
 800a082:	7989      	ldrb	r1, [r1, #6]
 800a084:	edd0 7a06 	vldr	s15, [r0, #24]
 800a088:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a08c:	edd1 6a00 	vldr	s13, [r1]
 800a090:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a094:	44dc      	add	ip, fp
 800a096:	445e      	add	r6, fp
 800a098:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a09c:	eca7 7a01 	vstmia	r7!, {s14}
 800a0a0:	454f      	cmp	r7, r9
 800a0a2:	f4ff af43 	bcc.w	8009f2c <forward_dense+0x154>
 800a0a6:	9a06      	ldr	r2, [sp, #24]
 800a0a8:	eba9 0302 	sub.w	r3, r9, r2
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	f023 0303 	bic.w	r3, r3, #3
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	18d3      	adds	r3, r2, r3
 800a0b6:	9306      	str	r3, [sp, #24]
 800a0b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ba:	9a05      	ldr	r2, [sp, #20]
 800a0bc:	4499      	add	r9, r3
 800a0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c0:	441a      	add	r2, r3
 800a0c2:	9205      	str	r2, [sp, #20]
 800a0c4:	9a02      	ldr	r2, [sp, #8]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	9202      	str	r2, [sp, #8]
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	9204      	str	r2, [sp, #16]
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	f4ff af08 	bcc.w	8009eea <forward_dense+0x112>
 800a0da:	b015      	add	sp, #84	; 0x54
 800a0dc:	ecbd 8b02 	vpop	{d8}
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	6853      	ldr	r3, [r2, #4]
 800a0e6:	deff      	udf	#255	; 0xff
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	deff      	udf	#255	; 0xff
 800a0ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a104 <forward_dense+0x32c>
 800a0f2:	eef0 2a48 	vmov.f32	s5, s16
 800a0f6:	f1be 0f00 	cmp.w	lr, #0
 800a0fa:	f47f af22 	bne.w	8009f42 <forward_dense+0x16a>
 800a0fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a100:	4661      	mov	r1, ip
 800a102:	e77a      	b.n	8009ffa <forward_dense+0x222>
 800a104:	00000000 	.word	0x00000000
 800a108:	4549      	cmp	r1, r9
 800a10a:	d2d5      	bcs.n	800a0b8 <forward_dense+0x2e0>
 800a10c:	9807      	ldr	r0, [sp, #28]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	9904      	ldr	r1, [sp, #16]
 800a112:	f100 0c01 	add.w	ip, r0, #1
 800a116:	3901      	subs	r1, #1
 800a118:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a11c:	9109      	str	r1, [sp, #36]	; 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 80b2 	beq.w	800a288 <forward_dense+0x4b0>
 800a124:	9907      	ldr	r1, [sp, #28]
 800a126:	ecf3 2a01 	vldmia	r3!, {s5}
 800a12a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800a104 <forward_dense+0x32c>
 800a12e:	2900      	cmp	r1, #0
 800a130:	f000 80b2 	beq.w	800a298 <forward_dense+0x4c0>
 800a134:	9902      	ldr	r1, [sp, #8]
 800a136:	1d10      	adds	r0, r2, #4
 800a138:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800a13c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a140:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800a144:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800a148:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a14c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800a150:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a154:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a158:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a15c:	ed51 6a01 	vldr	s13, [r1, #-4]
 800a160:	f006 070f 	and.w	r7, r6, #15
 800a164:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a168:	edd7 7a00 	vldr	s15, [r7]
 800a16c:	0936      	lsrs	r6, r6, #4
 800a16e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a172:	ed96 3a00 	vldr	s6, [r6]
 800a176:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a17a:	092e      	lsrs	r6, r5, #4
 800a17c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a180:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a184:	f005 050f 	and.w	r5, r5, #15
 800a188:	edd6 3a00 	vldr	s7, [r6]
 800a18c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800a190:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a194:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a198:	0937      	lsrs	r7, r6, #4
 800a19a:	ed95 4a00 	vldr	s8, [r5]
 800a19e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800a1a2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a1a6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a1aa:	f006 060f 	and.w	r6, r6, #15
 800a1ae:	edd7 4a00 	vldr	s9, [r7]
 800a1b2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a1b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a1ba:	3004      	adds	r0, #4
 800a1bc:	ed96 5a00 	vldr	s10, [r6]
 800a1c0:	092e      	lsrs	r6, r5, #4
 800a1c2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a1c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a1ca:	f005 050f 	and.w	r5, r5, #15
 800a1ce:	edd6 5a00 	vldr	s11, [r6]
 800a1d2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a1d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a1da:	4584      	cmp	ip, r0
 800a1dc:	ed95 6a00 	vldr	s12, [r5]
 800a1e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a1e4:	f101 0120 	add.w	r1, r1, #32
 800a1e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1ec:	d1a4      	bne.n	800a138 <forward_dense+0x360>
 800a1ee:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a1f2:	f1ac 0804 	sub.w	r8, ip, #4
 800a1f6:	9904      	ldr	r1, [sp, #16]
 800a1f8:	458e      	cmp	lr, r1
 800a1fa:	d22a      	bcs.n	800a252 <forward_dense+0x47a>
 800a1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1fe:	eba1 070e 	sub.w	r7, r1, lr
 800a202:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800a206:	f10e 0008 	add.w	r0, lr, #8
 800a20a:	f108 36ff 	add.w	r6, r8, #4294967295
 800a20e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a212:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a216:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a21a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a21e:	f001 050f 	and.w	r5, r1, #15
 800a222:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a226:	edd5 7a00 	vldr	s15, [r5]
 800a22a:	0909      	lsrs	r1, r1, #4
 800a22c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a230:	ed91 6a00 	vldr	s12, [r1]
 800a234:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a238:	42b7      	cmp	r7, r6
 800a23a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a23e:	f100 0008 	add.w	r0, r0, #8
 800a242:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a246:	d1e4      	bne.n	800a212 <forward_dense+0x43a>
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	44d0      	add	r8, sl
 800a24e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a252:	9908      	ldr	r1, [sp, #32]
 800a254:	b321      	cbz	r1, 800a2a0 <forward_dense+0x4c8>
 800a256:	f898 1000 	ldrb.w	r1, [r8]
 800a25a:	edde 7a00 	vldr	s15, [lr]
 800a25e:	0909      	lsrs	r1, r1, #4
 800a260:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a264:	edd1 6a00 	vldr	s13, [r1]
 800a268:	9903      	ldr	r1, [sp, #12]
 800a26a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a26e:	445a      	add	r2, fp
 800a270:	44dc      	add	ip, fp
 800a272:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a276:	ece1 2a01 	vstmia	r1!, {s5}
 800a27a:	4589      	cmp	r9, r1
 800a27c:	9103      	str	r1, [sp, #12]
 800a27e:	f67f af12 	bls.w	800a0a6 <forward_dense+0x2ce>
 800a282:	2b00      	cmp	r3, #0
 800a284:	f47f af4e 	bne.w	800a124 <forward_dense+0x34c>
 800a288:	9907      	ldr	r1, [sp, #28]
 800a28a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800a104 <forward_dense+0x32c>
 800a28e:	eef0 2a48 	vmov.f32	s5, s16
 800a292:	2900      	cmp	r1, #0
 800a294:	f47f af4e 	bne.w	800a134 <forward_dense+0x35c>
 800a298:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800a29c:	4690      	mov	r8, r2
 800a29e:	e7aa      	b.n	800a1f6 <forward_dense+0x41e>
 800a2a0:	9903      	ldr	r1, [sp, #12]
 800a2a2:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a2a6:	445a      	add	r2, fp
 800a2a8:	eca1 7a01 	vstmia	r1!, {s14}
 800a2ac:	4549      	cmp	r1, r9
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	44dc      	add	ip, fp
 800a2b2:	f4ff af34 	bcc.w	800a11e <forward_dense+0x346>
 800a2b6:	e6f6      	b.n	800a0a6 <forward_dense+0x2ce>
 800a2b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a2ba:	9d06      	ldr	r5, [sp, #24]
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2c0:	9100      	str	r1, [sp, #0]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2c6:	f004 fa3b 	bl	800e740 <lite_dense_if32of32wf32>
 800a2ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	4413      	add	r3, r2
 800a2d0:	9306      	str	r3, [sp, #24]
 800a2d2:	e6f1      	b.n	800a0b8 <forward_dense+0x2e0>
 800a2d4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a2d8:	f1b9 0f00 	cmp.w	r9, #0
 800a2dc:	d016      	beq.n	800a30c <forward_dense+0x534>
 800a2de:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a2e2:	f004 fbdb 	bl	800ea9c <ai_array_get_byte_size>
 800a2e6:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f004 ff40 	bl	800f174 <memcpy>
 800a2f4:	e5c7      	b.n	8009e86 <forward_dense+0xae>
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d00a      	beq.n	800a310 <forward_dense+0x538>
 800a2fa:	f04f 0900 	mov.w	r9, #0
 800a2fe:	e5bd      	b.n	8009e7c <forward_dense+0xa4>
 800a300:	930d      	str	r3, [sp, #52]	; 0x34
 800a302:	e595      	b.n	8009e30 <forward_dense+0x58>
 800a304:	2300      	movs	r3, #0
 800a306:	930b      	str	r3, [sp, #44]	; 0x2c
 800a308:	460b      	mov	r3, r1
 800a30a:	e591      	b.n	8009e30 <forward_dense+0x58>
 800a30c:	46c3      	mov	fp, r8
 800a30e:	e5ba      	b.n	8009e86 <forward_dense+0xae>
 800a310:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a314:	e5b7      	b.n	8009e86 <forward_dense+0xae>
 800a316:	2300      	movs	r3, #0
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	deff      	udf	#255	; 0xff
 800a31c:	2300      	movs	r3, #0
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	deff      	udf	#255	; 0xff
 800a322:	bf00      	nop

0800a324 <_array_handle_get_as_float>:
 800a324:	b508      	push	{r3, lr}
 800a326:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <_array_handle_get_as_float+0xd4>)
 800a328:	4299      	cmp	r1, r3
 800a32a:	d058      	beq.n	800a3de <_array_handle_get_as_float+0xba>
 800a32c:	dc22      	bgt.n	800a374 <_array_handle_get_as_float+0x50>
 800a32e:	4b33      	ldr	r3, [pc, #204]	; (800a3fc <_array_handle_get_as_float+0xd8>)
 800a330:	4299      	cmp	r1, r3
 800a332:	d05b      	beq.n	800a3ec <_array_handle_get_as_float+0xc8>
 800a334:	dd10      	ble.n	800a358 <_array_handle_get_as_float+0x34>
 800a336:	4b32      	ldr	r3, [pc, #200]	; (800a400 <_array_handle_get_as_float+0xdc>)
 800a338:	4299      	cmp	r1, r3
 800a33a:	d035      	beq.n	800a3a8 <_array_handle_get_as_float+0x84>
 800a33c:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800a340:	4299      	cmp	r1, r3
 800a342:	d12e      	bne.n	800a3a2 <_array_handle_get_as_float+0x7e>
 800a344:	7803      	ldrb	r3, [r0, #0]
 800a346:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800a404 <_array_handle_get_as_float+0xe0>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a350:	bf08      	it	eq
 800a352:	eeb0 0a67 	vmoveq.f32	s0, s15
 800a356:	bd08      	pop	{r3, pc}
 800a358:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d02a      	beq.n	800a3b6 <_array_handle_get_as_float+0x92>
 800a360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a364:	4299      	cmp	r1, r3
 800a366:	d11c      	bne.n	800a3a2 <_array_handle_get_as_float+0x7e>
 800a368:	8803      	ldrh	r3, [r0, #0]
 800a36a:	ee00 3a10 	vmov	s0, r3
 800a36e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a372:	bd08      	pop	{r3, pc}
 800a374:	4b24      	ldr	r3, [pc, #144]	; (800a408 <_array_handle_get_as_float+0xe4>)
 800a376:	4299      	cmp	r1, r3
 800a378:	d023      	beq.n	800a3c2 <_array_handle_get_as_float+0x9e>
 800a37a:	dd05      	ble.n	800a388 <_array_handle_get_as_float+0x64>
 800a37c:	4b23      	ldr	r3, [pc, #140]	; (800a40c <_array_handle_get_as_float+0xe8>)
 800a37e:	4299      	cmp	r1, r3
 800a380:	d10f      	bne.n	800a3a2 <_array_handle_get_as_float+0x7e>
 800a382:	ed90 0a00 	vldr	s0, [r0]
 800a386:	bd08      	pop	{r3, pc}
 800a388:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d01f      	beq.n	800a3d0 <_array_handle_get_as_float+0xac>
 800a390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a394:	4299      	cmp	r1, r3
 800a396:	d104      	bne.n	800a3a2 <_array_handle_get_as_float+0x7e>
 800a398:	ed90 0a00 	vldr	s0, [r0]
 800a39c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a3a0:	bd08      	pop	{r3, pc}
 800a3a2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a404 <_array_handle_get_as_float+0xe0>
 800a3a6:	bd08      	pop	{r3, pc}
 800a3a8:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a3ac:	f7f6 fcfc 	bl	8000da8 <__aeabi_ul2f>
 800a3b0:	ee00 0a10 	vmov	s0, r0
 800a3b4:	bd08      	pop	{r3, pc}
 800a3b6:	7803      	ldrb	r3, [r0, #0]
 800a3b8:	ee00 3a10 	vmov	s0, r3
 800a3bc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a3c0:	bd08      	pop	{r3, pc}
 800a3c2:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a3c6:	f7f6 fcf7 	bl	8000db8 <__aeabi_l2f>
 800a3ca:	ee00 0a10 	vmov	s0, r0
 800a3ce:	bd08      	pop	{r3, pc}
 800a3d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a3d4:	ee00 3a10 	vmov	s0, r3
 800a3d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a3dc:	bd08      	pop	{r3, pc}
 800a3de:	f990 3000 	ldrsb.w	r3, [r0]
 800a3e2:	ee00 3a10 	vmov	s0, r3
 800a3e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a3ea:	bd08      	pop	{r3, pc}
 800a3ec:	ed90 0a00 	vldr	s0, [r0]
 800a3f0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a3f4:	bd08      	pop	{r3, pc}
 800a3f6:	bf00      	nop
 800a3f8:	00840440 	.word	0x00840440
 800a3fc:	00041040 	.word	0x00041040
 800a400:	00042040 	.word	0x00042040
 800a404:	00000000 	.word	0x00000000
 800a408:	00842040 	.word	0x00842040
 800a40c:	01821040 	.word	0x01821040

0800a410 <forward_cast>:
 800a410:	6983      	ldr	r3, [r0, #24]
 800a412:	881a      	ldrh	r2, [r3, #0]
 800a414:	2a00      	cmp	r2, #0
 800a416:	f000 815c 	beq.w	800a6d2 <forward_cast+0x2c2>
 800a41a:	6859      	ldr	r1, [r3, #4]
 800a41c:	684b      	ldr	r3, [r1, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 81bb 	beq.w	800a79a <forward_cast+0x38a>
 800a424:	2a01      	cmp	r2, #1
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 8722 	beq.w	800e270 <forward_cast+0x3e60>
 800a42c:	690a      	ldr	r2, [r1, #16]
 800a42e:	2a00      	cmp	r2, #0
 800a430:	f003 8721 	beq.w	800e276 <forward_cast+0x3e66>
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	b103      	cbz	r3, 800a43a <forward_cast+0x2a>
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	f003 871b 	beq.w	800e276 <forward_cast+0x3e66>
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	ed2d 8b02 	vpush	{d8}
 800a448:	6996      	ldr	r6, [r2, #24]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	69c7      	ldr	r7, [r0, #28]
 800a44e:	6859      	ldr	r1, [r3, #4]
 800a450:	68dd      	ldr	r5, [r3, #12]
 800a452:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 800a72c <forward_cast+0x31c>
 800a456:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 800a45a:	4610      	mov	r0, r2
 800a45c:	6832      	ldr	r2, [r6, #0]
 800a45e:	b083      	sub	sp, #12
 800a460:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 800a464:	f004 fb1a 	bl	800ea9c <ai_array_get_byte_size>
 800a468:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 800a46c:	f3cb 2383 	ubfx	r3, fp, #10, #4
 800a470:	4547      	cmp	r7, r8
 800a472:	68f6      	ldr	r6, [r6, #12]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	eb05 0a00 	add.w	sl, r5, r0
 800a47a:	f3c4 2983 	ubfx	r9, r4, #10, #4
 800a47e:	f000 81e2 	beq.w	800a846 <forward_cast+0x436>
 800a482:	f300 8083 	bgt.w	800a58c <forward_cast+0x17c>
 800a486:	4ba2      	ldr	r3, [pc, #648]	; (800a710 <forward_cast+0x300>)
 800a488:	429f      	cmp	r7, r3
 800a48a:	f000 8227 	beq.w	800a8dc <forward_cast+0x4cc>
 800a48e:	dd2c      	ble.n	800a4ea <forward_cast+0xda>
 800a490:	4aa0      	ldr	r2, [pc, #640]	; (800a714 <forward_cast+0x304>)
 800a492:	4297      	cmp	r7, r2
 800a494:	d124      	bne.n	800a4e0 <forward_cast+0xd0>
 800a496:	45c3      	cmp	fp, r8
 800a498:	f001 8055 	beq.w	800b546 <forward_cast+0x1136>
 800a49c:	f300 85f4 	bgt.w	800b088 <forward_cast+0xc78>
 800a4a0:	459b      	cmp	fp, r3
 800a4a2:	f001 85aa 	beq.w	800bffa <forward_cast+0x1bea>
 800a4a6:	f300 85d5 	bgt.w	800b054 <forward_cast+0xc44>
 800a4aa:	4b9b      	ldr	r3, [pc, #620]	; (800a718 <forward_cast+0x308>)
 800a4ac:	459b      	cmp	fp, r3
 800a4ae:	f002 825c 	beq.w	800c96a <forward_cast+0x255a>
 800a4b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4b6:	459b      	cmp	fp, r3
 800a4b8:	d112      	bne.n	800a4e0 <forward_cast+0xd0>
 800a4ba:	4555      	cmp	r5, sl
 800a4bc:	d210      	bcs.n	800a4e0 <forward_cast+0xd0>
 800a4be:	9f00      	ldr	r7, [sp, #0]
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	f7ff ff2e 	bl	800a324 <_array_handle_get_as_float>
 800a4c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d0:	444d      	add	r5, r9
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	45aa      	cmp	sl, r5
 800a4da:	8033      	strh	r3, [r6, #0]
 800a4dc:	443e      	add	r6, r7
 800a4de:	d8ef      	bhi.n	800a4c0 <forward_cast+0xb0>
 800a4e0:	b003      	add	sp, #12
 800a4e2:	ecbd 8b02 	vpop	{d8}
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	4a8b      	ldr	r2, [pc, #556]	; (800a718 <forward_cast+0x308>)
 800a4ec:	4297      	cmp	r7, r2
 800a4ee:	f000 80f2 	beq.w	800a6d6 <forward_cast+0x2c6>
 800a4f2:	498a      	ldr	r1, [pc, #552]	; (800a71c <forward_cast+0x30c>)
 800a4f4:	428f      	cmp	r7, r1
 800a4f6:	d1f3      	bne.n	800a4e0 <forward_cast+0xd0>
 800a4f8:	45c3      	cmp	fp, r8
 800a4fa:	f000 8780 	beq.w	800b3fe <forward_cast+0xfee>
 800a4fe:	f300 86e7 	bgt.w	800b2d0 <forward_cast+0xec0>
 800a502:	459b      	cmp	fp, r3
 800a504:	f001 8784 	beq.w	800c410 <forward_cast+0x2000>
 800a508:	4f81      	ldr	r7, [pc, #516]	; (800a710 <forward_cast+0x300>)
 800a50a:	45bb      	cmp	fp, r7
 800a50c:	f300 8554 	bgt.w	800afb8 <forward_cast+0xba8>
 800a510:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800a718 <forward_cast+0x308>
 800a514:	45c3      	cmp	fp, r8
 800a516:	f001 872d 	beq.w	800c374 <forward_cast+0x1f64>
 800a51a:	4b80      	ldr	r3, [pc, #512]	; (800a71c <forward_cast+0x30c>)
 800a51c:	459b      	cmp	fp, r3
 800a51e:	d1df      	bne.n	800a4e0 <forward_cast+0xd0>
 800a520:	4555      	cmp	r5, sl
 800a522:	d2dd      	bcs.n	800a4e0 <forward_cast+0xd0>
 800a524:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800a734 <forward_cast+0x324>
 800a528:	4b7d      	ldr	r3, [pc, #500]	; (800a720 <forward_cast+0x310>)
 800a52a:	4a7e      	ldr	r2, [pc, #504]	; (800a724 <forward_cast+0x314>)
 800a52c:	e019      	b.n	800a562 <forward_cast+0x152>
 800a52e:	42bc      	cmp	r4, r7
 800a530:	f003 842b 	beq.w	800dd8a <forward_cast+0x397a>
 800a534:	f341 80c0 	ble.w	800b6b8 <forward_cast+0x12a8>
 800a538:	497b      	ldr	r1, [pc, #492]	; (800a728 <forward_cast+0x318>)
 800a53a:	428c      	cmp	r4, r1
 800a53c:	f003 83ef 	beq.w	800dd1e <forward_cast+0x390e>
 800a540:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a544:	428c      	cmp	r4, r1
 800a546:	f041 83a5 	bne.w	800bc94 <forward_cast+0x1884>
 800a54a:	7828      	ldrb	r0, [r5, #0]
 800a54c:	3800      	subs	r0, #0
 800a54e:	bf18      	it	ne
 800a550:	2001      	movne	r0, #1
 800a552:	f380 0010 	usat	r0, #16, r0
 800a556:	9900      	ldr	r1, [sp, #0]
 800a558:	8030      	strh	r0, [r6, #0]
 800a55a:	444d      	add	r5, r9
 800a55c:	45aa      	cmp	sl, r5
 800a55e:	440e      	add	r6, r1
 800a560:	d9be      	bls.n	800a4e0 <forward_cast+0xd0>
 800a562:	4972      	ldr	r1, [pc, #456]	; (800a72c <forward_cast+0x31c>)
 800a564:	428c      	cmp	r4, r1
 800a566:	f003 82df 	beq.w	800db28 <forward_cast+0x3718>
 800a56a:	dde0      	ble.n	800a52e <forward_cast+0x11e>
 800a56c:	4970      	ldr	r1, [pc, #448]	; (800a730 <forward_cast+0x320>)
 800a56e:	428c      	cmp	r4, r1
 800a570:	f002 87b0 	beq.w	800d4d4 <forward_cast+0x30c4>
 800a574:	f341 82c5 	ble.w	800bb02 <forward_cast+0x16f2>
 800a578:	455c      	cmp	r4, fp
 800a57a:	f041 838b 	bne.w	800bc94 <forward_cast+0x1884>
 800a57e:	edd5 7a00 	vldr	s15, [r5]
 800a582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a586:	ee17 0a90 	vmov	r0, s15
 800a58a:	e7e2      	b.n	800a552 <forward_cast+0x142>
 800a58c:	4b65      	ldr	r3, [pc, #404]	; (800a724 <forward_cast+0x314>)
 800a58e:	429f      	cmp	r7, r3
 800a590:	f000 810c 	beq.w	800a7ac <forward_cast+0x39c>
 800a594:	4a67      	ldr	r2, [pc, #412]	; (800a734 <forward_cast+0x324>)
 800a596:	4297      	cmp	r7, r2
 800a598:	d149      	bne.n	800a62e <forward_cast+0x21e>
 800a59a:	45c3      	cmp	fp, r8
 800a59c:	f000 8765 	beq.w	800b46a <forward_cast+0x105a>
 800a5a0:	f300 82cc 	bgt.w	800ab3c <forward_cast+0x72c>
 800a5a4:	4a5a      	ldr	r2, [pc, #360]	; (800a710 <forward_cast+0x300>)
 800a5a6:	4593      	cmp	fp, r2
 800a5a8:	f001 847e 	beq.w	800bea8 <forward_cast+0x1a98>
 800a5ac:	f300 82b0 	bgt.w	800ab10 <forward_cast+0x700>
 800a5b0:	4b59      	ldr	r3, [pc, #356]	; (800a718 <forward_cast+0x308>)
 800a5b2:	459b      	cmp	fp, r3
 800a5b4:	f002 8344 	beq.w	800cc40 <forward_cast+0x2830>
 800a5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5bc:	459b      	cmp	fp, r3
 800a5be:	d18f      	bne.n	800a4e0 <forward_cast+0xd0>
 800a5c0:	4555      	cmp	r5, sl
 800a5c2:	d28d      	bcs.n	800a4e0 <forward_cast+0xd0>
 800a5c4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a734 <forward_cast+0x324>
 800a5c8:	4f55      	ldr	r7, [pc, #340]	; (800a720 <forward_cast+0x310>)
 800a5ca:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a724 <forward_cast+0x314>
 800a5ce:	4b50      	ldr	r3, [pc, #320]	; (800a710 <forward_cast+0x300>)
 800a5d0:	4a55      	ldr	r2, [pc, #340]	; (800a728 <forward_cast+0x318>)
 800a5d2:	e016      	b.n	800a602 <forward_cast+0x1f2>
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	f002 8541 	beq.w	800d05c <forward_cast+0x2c4c>
 800a5da:	f341 8189 	ble.w	800b8f0 <forward_cast+0x14e0>
 800a5de:	4294      	cmp	r4, r2
 800a5e0:	f003 8254 	beq.w	800da8c <forward_cast+0x367c>
 800a5e4:	494b      	ldr	r1, [pc, #300]	; (800a714 <forward_cast+0x304>)
 800a5e6:	428c      	cmp	r4, r1
 800a5e8:	f041 836f 	bne.w	800bcca <forward_cast+0x18ba>
 800a5ec:	7829      	ldrb	r1, [r5, #0]
 800a5ee:	3900      	subs	r1, #0
 800a5f0:	bf18      	it	ne
 800a5f2:	2101      	movne	r1, #1
 800a5f4:	8031      	strh	r1, [r6, #0]
 800a5f6:	444d      	add	r5, r9
 800a5f8:	9900      	ldr	r1, [sp, #0]
 800a5fa:	45aa      	cmp	sl, r5
 800a5fc:	440e      	add	r6, r1
 800a5fe:	f67f af6f 	bls.w	800a4e0 <forward_cast+0xd0>
 800a602:	494a      	ldr	r1, [pc, #296]	; (800a72c <forward_cast+0x31c>)
 800a604:	428c      	cmp	r4, r1
 800a606:	f002 86a5 	beq.w	800d354 <forward_cast+0x2f44>
 800a60a:	dde3      	ble.n	800a5d4 <forward_cast+0x1c4>
 800a60c:	4948      	ldr	r1, [pc, #288]	; (800a730 <forward_cast+0x320>)
 800a60e:	428c      	cmp	r4, r1
 800a610:	f002 876e 	beq.w	800d4f0 <forward_cast+0x30e0>
 800a614:	f341 8104 	ble.w	800b820 <forward_cast+0x1410>
 800a618:	4544      	cmp	r4, r8
 800a61a:	f041 8356 	bne.w	800bcca <forward_cast+0x18ba>
 800a61e:	edd5 7a00 	vldr	s15, [r5]
 800a622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a626:	ee17 1a90 	vmov	r1, s15
 800a62a:	b289      	uxth	r1, r1
 800a62c:	e7e2      	b.n	800a5f4 <forward_cast+0x1e4>
 800a62e:	493c      	ldr	r1, [pc, #240]	; (800a720 <forward_cast+0x310>)
 800a630:	428f      	cmp	r7, r1
 800a632:	f47f af55 	bne.w	800a4e0 <forward_cast+0xd0>
 800a636:	45c3      	cmp	fp, r8
 800a638:	f000 874d 	beq.w	800b4d6 <forward_cast+0x10c6>
 800a63c:	f300 8546 	bgt.w	800b0cc <forward_cast+0xcbc>
 800a640:	4b33      	ldr	r3, [pc, #204]	; (800a710 <forward_cast+0x300>)
 800a642:	459b      	cmp	fp, r3
 800a644:	f001 8645 	beq.w	800c2d2 <forward_cast+0x1ec2>
 800a648:	f300 8227 	bgt.w	800aa9a <forward_cast+0x68a>
 800a64c:	4f32      	ldr	r7, [pc, #200]	; (800a718 <forward_cast+0x308>)
 800a64e:	45bb      	cmp	fp, r7
 800a650:	f001 85dd 	beq.w	800c20e <forward_cast+0x1dfe>
 800a654:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800a658:	459b      	cmp	fp, r3
 800a65a:	f47f af41 	bne.w	800a4e0 <forward_cast+0xd0>
 800a65e:	4555      	cmp	r5, sl
 800a660:	f4bf af3e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a664:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800a734 <forward_cast+0x324>
 800a668:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800a720 <forward_cast+0x310>
 800a66c:	4b2d      	ldr	r3, [pc, #180]	; (800a724 <forward_cast+0x314>)
 800a66e:	4a28      	ldr	r2, [pc, #160]	; (800a710 <forward_cast+0x300>)
 800a670:	e01a      	b.n	800a6a8 <forward_cast+0x298>
 800a672:	4294      	cmp	r4, r2
 800a674:	f002 85a7 	beq.w	800d1c6 <forward_cast+0x2db6>
 800a678:	f341 80c8 	ble.w	800b80c <forward_cast+0x13fc>
 800a67c:	492a      	ldr	r1, [pc, #168]	; (800a728 <forward_cast+0x318>)
 800a67e:	428c      	cmp	r4, r1
 800a680:	f002 8593 	beq.w	800d1aa <forward_cast+0x2d9a>
 800a684:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a688:	428c      	cmp	r4, r1
 800a68a:	f041 82cf 	bne.w	800bc2c <forward_cast+0x181c>
 800a68e:	7828      	ldrb	r0, [r5, #0]
 800a690:	3800      	subs	r0, #0
 800a692:	bf18      	it	ne
 800a694:	2001      	movne	r0, #1
 800a696:	f300 000f 	ssat	r0, #16, r0
 800a69a:	9900      	ldr	r1, [sp, #0]
 800a69c:	8030      	strh	r0, [r6, #0]
 800a69e:	444d      	add	r5, r9
 800a6a0:	45aa      	cmp	sl, r5
 800a6a2:	440e      	add	r6, r1
 800a6a4:	f67f af1c 	bls.w	800a4e0 <forward_cast+0xd0>
 800a6a8:	4920      	ldr	r1, [pc, #128]	; (800a72c <forward_cast+0x31c>)
 800a6aa:	428c      	cmp	r4, r1
 800a6ac:	f002 855d 	beq.w	800d16a <forward_cast+0x2d5a>
 800a6b0:	dddf      	ble.n	800a672 <forward_cast+0x262>
 800a6b2:	491f      	ldr	r1, [pc, #124]	; (800a730 <forward_cast+0x320>)
 800a6b4:	428c      	cmp	r4, r1
 800a6b6:	f003 84c0 	beq.w	800e03a <forward_cast+0x3c2a>
 800a6ba:	f341 8097 	ble.w	800b7ec <forward_cast+0x13dc>
 800a6be:	4544      	cmp	r4, r8
 800a6c0:	f041 82b4 	bne.w	800bc2c <forward_cast+0x181c>
 800a6c4:	edd5 7a00 	vldr	s15, [r5]
 800a6c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6cc:	ee17 0a90 	vmov	r0, s15
 800a6d0:	e7e1      	b.n	800a696 <forward_cast+0x286>
 800a6d2:	6853      	ldr	r3, [r2, #4]
 800a6d4:	deff      	udf	#255	; 0xff
 800a6d6:	45c3      	cmp	fp, r8
 800a6d8:	f001 854b 	beq.w	800c172 <forward_cast+0x1d62>
 800a6dc:	f300 8448 	bgt.w	800af70 <forward_cast+0xb60>
 800a6e0:	459b      	cmp	fp, r3
 800a6e2:	f001 84f5 	beq.w	800c0d0 <forward_cast+0x1cc0>
 800a6e6:	f300 842a 	bgt.w	800af3e <forward_cast+0xb2e>
 800a6ea:	4f0b      	ldr	r7, [pc, #44]	; (800a718 <forward_cast+0x308>)
 800a6ec:	45bb      	cmp	fp, r7
 800a6ee:	f001 84da 	beq.w	800c0a6 <forward_cast+0x1c96>
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <forward_cast+0x30c>)
 800a6f4:	459b      	cmp	fp, r3
 800a6f6:	f47f aef3 	bne.w	800a4e0 <forward_cast+0xd0>
 800a6fa:	4555      	cmp	r5, sl
 800a6fc:	f4bf aef0 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a700:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800a734 <forward_cast+0x324>
 800a704:	f8df b018 	ldr.w	fp, [pc, #24]	; 800a720 <forward_cast+0x310>
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <forward_cast+0x314>)
 800a70a:	4a01      	ldr	r2, [pc, #4]	; (800a710 <forward_cast+0x300>)
 800a70c:	e030      	b.n	800a770 <forward_cast+0x360>
 800a70e:	bf00      	nop
 800a710:	00041040 	.word	0x00041040
 800a714:	00060440 	.word	0x00060440
 800a718:	00040440 	.word	0x00040440
 800a71c:	00040840 	.word	0x00040840
 800a720:	00840840 	.word	0x00840840
 800a724:	00841040 	.word	0x00841040
 800a728:	00042040 	.word	0x00042040
 800a72c:	00840440 	.word	0x00840440
 800a730:	00842040 	.word	0x00842040
 800a734:	01821040 	.word	0x01821040
 800a738:	4294      	cmp	r4, r2
 800a73a:	f003 80bf 	beq.w	800d8bc <forward_cast+0x34ac>
 800a73e:	f340 8792 	ble.w	800b666 <forward_cast+0x1256>
 800a742:	49b2      	ldr	r1, [pc, #712]	; (800aa0c <forward_cast+0x5fc>)
 800a744:	428c      	cmp	r4, r1
 800a746:	f003 80ab 	beq.w	800d8a0 <forward_cast+0x3490>
 800a74a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a74e:	428c      	cmp	r4, r1
 800a750:	f041 8297 	bne.w	800bc82 <forward_cast+0x1872>
 800a754:	7828      	ldrb	r0, [r5, #0]
 800a756:	3800      	subs	r0, #0
 800a758:	bf18      	it	ne
 800a75a:	2001      	movne	r0, #1
 800a75c:	f380 0008 	usat	r0, #8, r0
 800a760:	9900      	ldr	r1, [sp, #0]
 800a762:	444d      	add	r5, r9
 800a764:	b2c0      	uxtb	r0, r0
 800a766:	45aa      	cmp	sl, r5
 800a768:	8030      	strh	r0, [r6, #0]
 800a76a:	440e      	add	r6, r1
 800a76c:	f67f aeb8 	bls.w	800a4e0 <forward_cast+0xd0>
 800a770:	49a7      	ldr	r1, [pc, #668]	; (800aa10 <forward_cast+0x600>)
 800a772:	428c      	cmp	r4, r1
 800a774:	f003 812a 	beq.w	800d9cc <forward_cast+0x35bc>
 800a778:	ddde      	ble.n	800a738 <forward_cast+0x328>
 800a77a:	49a6      	ldr	r1, [pc, #664]	; (800aa14 <forward_cast+0x604>)
 800a77c:	428c      	cmp	r4, r1
 800a77e:	f002 86f6 	beq.w	800d56e <forward_cast+0x315e>
 800a782:	f341 80ec 	ble.w	800b95e <forward_cast+0x154e>
 800a786:	4544      	cmp	r4, r8
 800a788:	f041 827b 	bne.w	800bc82 <forward_cast+0x1872>
 800a78c:	edd5 7a00 	vldr	s15, [r5]
 800a790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a794:	ee17 0a90 	vmov	r0, s15
 800a798:	e7e0      	b.n	800a75c <forward_cast+0x34c>
 800a79a:	2a01      	cmp	r2, #1
 800a79c:	f003 8568 	beq.w	800e270 <forward_cast+0x3e60>
 800a7a0:	690a      	ldr	r2, [r1, #16]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	f003 8567 	beq.w	800e276 <forward_cast+0x3e66>
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	e646      	b.n	800a43a <forward_cast+0x2a>
 800a7ac:	45c3      	cmp	fp, r8
 800a7ae:	f002 8298 	beq.w	800cce2 <forward_cast+0x28d2>
 800a7b2:	f300 82d0 	bgt.w	800ad56 <forward_cast+0x946>
 800a7b6:	4b98      	ldr	r3, [pc, #608]	; (800aa18 <forward_cast+0x608>)
 800a7b8:	459b      	cmp	fp, r3
 800a7ba:	f001 87e1 	beq.w	800c780 <forward_cast+0x2370>
 800a7be:	f300 81fa 	bgt.w	800abb6 <forward_cast+0x7a6>
 800a7c2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800a7c6:	459b      	cmp	fp, r3
 800a7c8:	f001 8789 	beq.w	800c6de <forward_cast+0x22ce>
 800a7cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7d0:	459b      	cmp	fp, r3
 800a7d2:	f47f ae85 	bne.w	800a4e0 <forward_cast+0xd0>
 800a7d6:	4555      	cmp	r5, sl
 800a7d8:	f4bf ae82 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a7dc:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800aa30 <forward_cast+0x620>
 800a7e0:	4f8e      	ldr	r7, [pc, #568]	; (800aa1c <forward_cast+0x60c>)
 800a7e2:	f8df b248 	ldr.w	fp, [pc, #584]	; 800aa2c <forward_cast+0x61c>
 800a7e6:	4b8c      	ldr	r3, [pc, #560]	; (800aa18 <forward_cast+0x608>)
 800a7e8:	4a88      	ldr	r2, [pc, #544]	; (800aa0c <forward_cast+0x5fc>)
 800a7ea:	e016      	b.n	800a81a <forward_cast+0x40a>
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	f003 8252 	beq.w	800dc96 <forward_cast+0x3886>
 800a7f2:	f340 8792 	ble.w	800b71a <forward_cast+0x130a>
 800a7f6:	4294      	cmp	r4, r2
 800a7f8:	f003 81fa 	beq.w	800dbf0 <forward_cast+0x37e0>
 800a7fc:	4988      	ldr	r1, [pc, #544]	; (800aa20 <forward_cast+0x610>)
 800a7fe:	428c      	cmp	r4, r1
 800a800:	f041 824e 	bne.w	800bca0 <forward_cast+0x1890>
 800a804:	7829      	ldrb	r1, [r5, #0]
 800a806:	3900      	subs	r1, #0
 800a808:	bf18      	it	ne
 800a80a:	2101      	movne	r1, #1
 800a80c:	8031      	strh	r1, [r6, #0]
 800a80e:	444d      	add	r5, r9
 800a810:	9900      	ldr	r1, [sp, #0]
 800a812:	45aa      	cmp	sl, r5
 800a814:	440e      	add	r6, r1
 800a816:	f67f ae63 	bls.w	800a4e0 <forward_cast+0xd0>
 800a81a:	497d      	ldr	r1, [pc, #500]	; (800aa10 <forward_cast+0x600>)
 800a81c:	428c      	cmp	r4, r1
 800a81e:	f002 8771 	beq.w	800d704 <forward_cast+0x32f4>
 800a822:	dde3      	ble.n	800a7ec <forward_cast+0x3dc>
 800a824:	497b      	ldr	r1, [pc, #492]	; (800aa14 <forward_cast+0x604>)
 800a826:	428c      	cmp	r4, r1
 800a828:	f003 8449 	beq.w	800e0be <forward_cast+0x3cae>
 800a82c:	f341 8158 	ble.w	800bae0 <forward_cast+0x16d0>
 800a830:	4544      	cmp	r4, r8
 800a832:	f041 8235 	bne.w	800bca0 <forward_cast+0x1890>
 800a836:	edd5 7a00 	vldr	s15, [r5]
 800a83a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a83e:	ee17 1a90 	vmov	r1, s15
 800a842:	b289      	uxth	r1, r1
 800a844:	e7e2      	b.n	800a80c <forward_cast+0x3fc>
 800a846:	45bb      	cmp	fp, r7
 800a848:	f001 82de 	beq.w	800be08 <forward_cast+0x19f8>
 800a84c:	f300 80ce 	bgt.w	800a9ec <forward_cast+0x5dc>
 800a850:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800aa18 <forward_cast+0x608>
 800a854:	45c3      	cmp	fp, r8
 800a856:	f001 868f 	beq.w	800c578 <forward_cast+0x2168>
 800a85a:	f300 808a 	bgt.w	800a972 <forward_cast+0x562>
 800a85e:	4a71      	ldr	r2, [pc, #452]	; (800aa24 <forward_cast+0x614>)
 800a860:	4593      	cmp	fp, r2
 800a862:	f001 8626 	beq.w	800c4b2 <forward_cast+0x20a2>
 800a866:	4b70      	ldr	r3, [pc, #448]	; (800aa28 <forward_cast+0x618>)
 800a868:	459b      	cmp	fp, r3
 800a86a:	f47f ae39 	bne.w	800a4e0 <forward_cast+0xd0>
 800a86e:	4555      	cmp	r5, sl
 800a870:	f4bf ae36 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a874:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800aa30 <forward_cast+0x620>
 800a878:	4b68      	ldr	r3, [pc, #416]	; (800aa1c <forward_cast+0x60c>)
 800a87a:	e01b      	b.n	800a8b4 <forward_cast+0x4a4>
 800a87c:	4544      	cmp	r4, r8
 800a87e:	f003 81fd 	beq.w	800dc7c <forward_cast+0x386c>
 800a882:	f340 8763 	ble.w	800b74c <forward_cast+0x133c>
 800a886:	4961      	ldr	r1, [pc, #388]	; (800aa0c <forward_cast+0x5fc>)
 800a888:	428c      	cmp	r4, r1
 800a88a:	f003 81e9 	beq.w	800dc60 <forward_cast+0x3850>
 800a88e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a892:	428c      	cmp	r4, r1
 800a894:	f041 8213 	bne.w	800bcbe <forward_cast+0x18ae>
 800a898:	7828      	ldrb	r0, [r5, #0]
 800a89a:	3800      	subs	r0, #0
 800a89c:	bf18      	it	ne
 800a89e:	2001      	movne	r0, #1
 800a8a0:	f300 0007 	ssat	r0, #8, r0
 800a8a4:	9900      	ldr	r1, [sp, #0]
 800a8a6:	444d      	add	r5, r9
 800a8a8:	b240      	sxtb	r0, r0
 800a8aa:	45aa      	cmp	sl, r5
 800a8ac:	8030      	strh	r0, [r6, #0]
 800a8ae:	440e      	add	r6, r1
 800a8b0:	f67f ae16 	bls.w	800a4e0 <forward_cast+0xd0>
 800a8b4:	42bc      	cmp	r4, r7
 800a8b6:	f002 875c 	beq.w	800d772 <forward_cast+0x3362>
 800a8ba:	dddf      	ble.n	800a87c <forward_cast+0x46c>
 800a8bc:	4955      	ldr	r1, [pc, #340]	; (800aa14 <forward_cast+0x604>)
 800a8be:	428c      	cmp	r4, r1
 800a8c0:	f003 82e0 	beq.w	800de84 <forward_cast+0x3a74>
 800a8c4:	f341 8171 	ble.w	800bbaa <forward_cast+0x179a>
 800a8c8:	455c      	cmp	r4, fp
 800a8ca:	f041 81f8 	bne.w	800bcbe <forward_cast+0x18ae>
 800a8ce:	edd5 7a00 	vldr	s15, [r5]
 800a8d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8d6:	ee17 0a90 	vmov	r0, s15
 800a8da:	e7e1      	b.n	800a8a0 <forward_cast+0x490>
 800a8dc:	45c3      	cmp	fp, r8
 800a8de:	f001 832b 	beq.w	800bf38 <forward_cast+0x1b28>
 800a8e2:	f300 81e6 	bgt.w	800acb2 <forward_cast+0x8a2>
 800a8e6:	45bb      	cmp	fp, r7
 800a8e8:	f001 86ae 	beq.w	800c648 <forward_cast+0x2238>
 800a8ec:	f300 81a2 	bgt.w	800ac34 <forward_cast+0x824>
 800a8f0:	4b4c      	ldr	r3, [pc, #304]	; (800aa24 <forward_cast+0x614>)
 800a8f2:	459b      	cmp	fp, r3
 800a8f4:	f001 8657 	beq.w	800c5a6 <forward_cast+0x2196>
 800a8f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8fc:	459b      	cmp	fp, r3
 800a8fe:	f47f adef 	bne.w	800a4e0 <forward_cast+0xd0>
 800a902:	4555      	cmp	r5, sl
 800a904:	f4bf adec 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a908:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800aa30 <forward_cast+0x620>
 800a90c:	4f43      	ldr	r7, [pc, #268]	; (800aa1c <forward_cast+0x60c>)
 800a90e:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800aa2c <forward_cast+0x61c>
 800a912:	4b41      	ldr	r3, [pc, #260]	; (800aa18 <forward_cast+0x608>)
 800a914:	4a3d      	ldr	r2, [pc, #244]	; (800aa0c <forward_cast+0x5fc>)
 800a916:	e016      	b.n	800a946 <forward_cast+0x536>
 800a918:	429c      	cmp	r4, r3
 800a91a:	f002 84fa 	beq.w	800d312 <forward_cast+0x2f02>
 800a91e:	f341 8046 	ble.w	800b9ae <forward_cast+0x159e>
 800a922:	4294      	cmp	r4, r2
 800a924:	f002 83c3 	beq.w	800d0ae <forward_cast+0x2c9e>
 800a928:	493d      	ldr	r1, [pc, #244]	; (800aa20 <forward_cast+0x610>)
 800a92a:	428c      	cmp	r4, r1
 800a92c:	f041 8181 	bne.w	800bc32 <forward_cast+0x1822>
 800a930:	7829      	ldrb	r1, [r5, #0]
 800a932:	3900      	subs	r1, #0
 800a934:	bf18      	it	ne
 800a936:	2101      	movne	r1, #1
 800a938:	8031      	strh	r1, [r6, #0]
 800a93a:	444d      	add	r5, r9
 800a93c:	9900      	ldr	r1, [sp, #0]
 800a93e:	45aa      	cmp	sl, r5
 800a940:	440e      	add	r6, r1
 800a942:	f67f adcd 	bls.w	800a4e0 <forward_cast+0xd0>
 800a946:	4932      	ldr	r1, [pc, #200]	; (800aa10 <forward_cast+0x600>)
 800a948:	428c      	cmp	r4, r1
 800a94a:	f002 8607 	beq.w	800d55c <forward_cast+0x314c>
 800a94e:	dde3      	ble.n	800a918 <forward_cast+0x508>
 800a950:	4930      	ldr	r1, [pc, #192]	; (800aa14 <forward_cast+0x604>)
 800a952:	428c      	cmp	r4, r1
 800a954:	f003 82a4 	beq.w	800dea0 <forward_cast+0x3a90>
 800a958:	f340 87ba 	ble.w	800b8d0 <forward_cast+0x14c0>
 800a95c:	4544      	cmp	r4, r8
 800a95e:	f041 8168 	bne.w	800bc32 <forward_cast+0x1822>
 800a962:	edd5 7a00 	vldr	s15, [r5]
 800a966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a96a:	ee17 1a90 	vmov	r1, s15
 800a96e:	b289      	uxth	r1, r1
 800a970:	e7e2      	b.n	800a938 <forward_cast+0x528>
 800a972:	4b2b      	ldr	r3, [pc, #172]	; (800aa20 <forward_cast+0x610>)
 800a974:	459b      	cmp	fp, r3
 800a976:	f47f adb3 	bne.w	800a4e0 <forward_cast+0xd0>
 800a97a:	4555      	cmp	r5, sl
 800a97c:	f4bf adb0 	bcs.w	800a4e0 <forward_cast+0xd0>
 800a980:	2300      	movs	r3, #0
 800a982:	4619      	mov	r1, r3
 800a984:	4a29      	ldr	r2, [pc, #164]	; (800aa2c <forward_cast+0x61c>)
 800a986:	464b      	mov	r3, r9
 800a988:	46b9      	mov	r9, r7
 800a98a:	4637      	mov	r7, r6
 800a98c:	460e      	mov	r6, r1
 800a98e:	e018      	b.n	800a9c2 <forward_cast+0x5b2>
 800a990:	4544      	cmp	r4, r8
 800a992:	f002 83aa 	beq.w	800d0ea <forward_cast+0x2cda>
 800a996:	f340 878f 	ble.w	800b8b8 <forward_cast+0x14a8>
 800a99a:	491c      	ldr	r1, [pc, #112]	; (800aa0c <forward_cast+0x5fc>)
 800a99c:	428c      	cmp	r4, r1
 800a99e:	f002 8395 	beq.w	800d0cc <forward_cast+0x2cbc>
 800a9a2:	455c      	cmp	r4, fp
 800a9a4:	f041 8148 	bne.w	800bc38 <forward_cast+0x1828>
 800a9a8:	7828      	ldrb	r0, [r5, #0]
 800a9aa:	3800      	subs	r0, #0
 800a9ac:	bf18      	it	ne
 800a9ae:	2001      	movne	r0, #1
 800a9b0:	f300 0007 	ssat	r0, #8, r0
 800a9b4:	9900      	ldr	r1, [sp, #0]
 800a9b6:	55b8      	strb	r0, [r7, r6]
 800a9b8:	441d      	add	r5, r3
 800a9ba:	45aa      	cmp	sl, r5
 800a9bc:	440e      	add	r6, r1
 800a9be:	f67f ad8f 	bls.w	800a4e0 <forward_cast+0xd0>
 800a9c2:	454c      	cmp	r4, r9
 800a9c4:	f002 85cf 	beq.w	800d566 <forward_cast+0x3156>
 800a9c8:	dde2      	ble.n	800a990 <forward_cast+0x580>
 800a9ca:	4912      	ldr	r1, [pc, #72]	; (800aa14 <forward_cast+0x604>)
 800a9cc:	428c      	cmp	r4, r1
 800a9ce:	f002 85b6 	beq.w	800d53e <forward_cast+0x312e>
 800a9d2:	f340 8735 	ble.w	800b840 <forward_cast+0x1430>
 800a9d6:	4916      	ldr	r1, [pc, #88]	; (800aa30 <forward_cast+0x620>)
 800a9d8:	428c      	cmp	r4, r1
 800a9da:	f041 812d 	bne.w	800bc38 <forward_cast+0x1828>
 800a9de:	edd5 7a00 	vldr	s15, [r5]
 800a9e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9e6:	ee17 0a90 	vmov	r0, s15
 800a9ea:	e7e1      	b.n	800a9b0 <forward_cast+0x5a0>
 800a9ec:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800aa2c <forward_cast+0x61c>
 800a9f0:	45c3      	cmp	fp, r8
 800a9f2:	f001 876b 	beq.w	800c8cc <forward_cast+0x24bc>
 800a9f6:	4a0e      	ldr	r2, [pc, #56]	; (800aa30 <forward_cast+0x620>)
 800a9f8:	4593      	cmp	fp, r2
 800a9fa:	f040 83ac 	bne.w	800b156 <forward_cast+0xd46>
 800a9fe:	4555      	cmp	r5, sl
 800aa00:	f4bf ad6e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800aa04:	4b01      	ldr	r3, [pc, #4]	; (800aa0c <forward_cast+0x5fc>)
 800aa06:	4a06      	ldr	r2, [pc, #24]	; (800aa20 <forward_cast+0x610>)
 800aa08:	e033      	b.n	800aa72 <forward_cast+0x662>
 800aa0a:	bf00      	nop
 800aa0c:	00042040 	.word	0x00042040
 800aa10:	00840440 	.word	0x00840440
 800aa14:	00842040 	.word	0x00842040
 800aa18:	00041040 	.word	0x00041040
 800aa1c:	00840840 	.word	0x00840840
 800aa20:	00060440 	.word	0x00060440
 800aa24:	00040440 	.word	0x00040440
 800aa28:	00040840 	.word	0x00040840
 800aa2c:	00841040 	.word	0x00841040
 800aa30:	01821040 	.word	0x01821040
 800aa34:	49a6      	ldr	r1, [pc, #664]	; (800acd0 <forward_cast+0x8c0>)
 800aa36:	428c      	cmp	r4, r1
 800aa38:	f002 84c7 	beq.w	800d3ca <forward_cast+0x2fba>
 800aa3c:	f340 85ee 	ble.w	800b61c <forward_cast+0x120c>
 800aa40:	429c      	cmp	r4, r3
 800aa42:	f002 84b4 	beq.w	800d3ae <forward_cast+0x2f9e>
 800aa46:	4294      	cmp	r4, r2
 800aa48:	f041 8109 	bne.w	800bc5e <forward_cast+0x184e>
 800aa4c:	7828      	ldrb	r0, [r5, #0]
 800aa4e:	3800      	subs	r0, #0
 800aa50:	bf18      	it	ne
 800aa52:	2001      	movne	r0, #1
 800aa54:	f300 0007 	ssat	r0, #8, r0
 800aa58:	b240      	sxtb	r0, r0
 800aa5a:	ee07 0a90 	vmov	s15, r0
 800aa5e:	9900      	ldr	r1, [sp, #0]
 800aa60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa64:	444d      	add	r5, r9
 800aa66:	45aa      	cmp	sl, r5
 800aa68:	edc6 7a00 	vstr	s15, [r6]
 800aa6c:	440e      	add	r6, r1
 800aa6e:	f67f ad37 	bls.w	800a4e0 <forward_cast+0xd0>
 800aa72:	42bc      	cmp	r4, r7
 800aa74:	f002 8411 	beq.w	800d29a <forward_cast+0x2e8a>
 800aa78:	dddc      	ble.n	800aa34 <forward_cast+0x624>
 800aa7a:	4996      	ldr	r1, [pc, #600]	; (800acd4 <forward_cast+0x8c4>)
 800aa7c:	428c      	cmp	r4, r1
 800aa7e:	f002 83f6 	beq.w	800d26e <forward_cast+0x2e5e>
 800aa82:	f340 87fb 	ble.w	800ba7c <forward_cast+0x166c>
 800aa86:	455c      	cmp	r4, fp
 800aa88:	f041 80e9 	bne.w	800bc5e <forward_cast+0x184e>
 800aa8c:	edd5 7a00 	vldr	s15, [r5]
 800aa90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa94:	ee17 0a90 	vmov	r0, s15
 800aa98:	e7dc      	b.n	800aa54 <forward_cast+0x644>
 800aa9a:	4b8f      	ldr	r3, [pc, #572]	; (800acd8 <forward_cast+0x8c8>)
 800aa9c:	459b      	cmp	fp, r3
 800aa9e:	f47f ad1f 	bne.w	800a4e0 <forward_cast+0xd0>
 800aaa2:	4555      	cmp	r5, sl
 800aaa4:	f4bf ad1c 	bcs.w	800a4e0 <forward_cast+0xd0>
 800aaa8:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800acd4 <forward_cast+0x8c4>
 800aaac:	4b8b      	ldr	r3, [pc, #556]	; (800acdc <forward_cast+0x8cc>)
 800aaae:	4a88      	ldr	r2, [pc, #544]	; (800acd0 <forward_cast+0x8c0>)
 800aab0:	2700      	movs	r7, #0
 800aab2:	e018      	b.n	800aae6 <forward_cast+0x6d6>
 800aab4:	4294      	cmp	r4, r2
 800aab6:	f003 815b 	beq.w	800dd70 <forward_cast+0x3960>
 800aaba:	f340 8607 	ble.w	800b6cc <forward_cast+0x12bc>
 800aabe:	4988      	ldr	r1, [pc, #544]	; (800ace0 <forward_cast+0x8d0>)
 800aac0:	428c      	cmp	r4, r1
 800aac2:	f003 8103 	beq.w	800dccc <forward_cast+0x38bc>
 800aac6:	455c      	cmp	r4, fp
 800aac8:	f041 80de 	bne.w	800bc88 <forward_cast+0x1878>
 800aacc:	7828      	ldrb	r0, [r5, #0]
 800aace:	3800      	subs	r0, #0
 800aad0:	bf18      	it	ne
 800aad2:	2001      	movne	r0, #1
 800aad4:	f300 000f 	ssat	r0, #16, r0
 800aad8:	9900      	ldr	r1, [sp, #0]
 800aada:	55f0      	strb	r0, [r6, r7]
 800aadc:	444d      	add	r5, r9
 800aade:	45aa      	cmp	sl, r5
 800aae0:	440f      	add	r7, r1
 800aae2:	f67f acfd 	bls.w	800a4e0 <forward_cast+0xd0>
 800aae6:	497f      	ldr	r1, [pc, #508]	; (800ace4 <forward_cast+0x8d4>)
 800aae8:	428c      	cmp	r4, r1
 800aaea:	f002 876b 	beq.w	800d9c4 <forward_cast+0x35b4>
 800aaee:	dde1      	ble.n	800aab4 <forward_cast+0x6a4>
 800aaf0:	4544      	cmp	r4, r8
 800aaf2:	f002 83a6 	beq.w	800d242 <forward_cast+0x2e32>
 800aaf6:	f340 87b0 	ble.w	800ba5a <forward_cast+0x164a>
 800aafa:	497b      	ldr	r1, [pc, #492]	; (800ace8 <forward_cast+0x8d8>)
 800aafc:	428c      	cmp	r4, r1
 800aafe:	f041 80c3 	bne.w	800bc88 <forward_cast+0x1878>
 800ab02:	edd5 7a00 	vldr	s15, [r5]
 800ab06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab0a:	ee17 0a90 	vmov	r0, s15
 800ab0e:	e7e1      	b.n	800aad4 <forward_cast+0x6c4>
 800ab10:	4b71      	ldr	r3, [pc, #452]	; (800acd8 <forward_cast+0x8c8>)
 800ab12:	459b      	cmp	fp, r3
 800ab14:	f47f ace4 	bne.w	800a4e0 <forward_cast+0xd0>
 800ab18:	4555      	cmp	r5, sl
 800ab1a:	f4bf ace1 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ab1e:	9f00      	ldr	r7, [sp, #0]
 800ab20:	4628      	mov	r0, r5
 800ab22:	4621      	mov	r1, r4
 800ab24:	f7ff fbfe 	bl	800a324 <_array_handle_get_as_float>
 800ab28:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ab2c:	444d      	add	r5, r9
 800ab2e:	ee17 3a90 	vmov	r3, s15
 800ab32:	45aa      	cmp	sl, r5
 800ab34:	7033      	strb	r3, [r6, #0]
 800ab36:	443e      	add	r6, r7
 800ab38:	d8f2      	bhi.n	800ab20 <forward_cast+0x710>
 800ab3a:	e4d1      	b.n	800a4e0 <forward_cast+0xd0>
 800ab3c:	459b      	cmp	fp, r3
 800ab3e:	f001 87e4 	beq.w	800cb0a <forward_cast+0x26fa>
 800ab42:	45bb      	cmp	fp, r7
 800ab44:	f040 8147 	bne.w	800add6 <forward_cast+0x9c6>
 800ab48:	4555      	cmp	r5, sl
 800ab4a:	f4bf acc9 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ab4e:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800acec <forward_cast+0x8dc>
 800ab52:	4a64      	ldr	r2, [pc, #400]	; (800ace4 <forward_cast+0x8d4>)
 800ab54:	4b5f      	ldr	r3, [pc, #380]	; (800acd4 <forward_cast+0x8c4>)
 800ab56:	f8df b190 	ldr.w	fp, [pc, #400]	; 800ace8 <forward_cast+0x8d8>
 800ab5a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800acd0 <forward_cast+0x8c0>
 800ab5e:	4f60      	ldr	r7, [pc, #384]	; (800ace0 <forward_cast+0x8d0>)
 800ab60:	e01a      	b.n	800ab98 <forward_cast+0x788>
 800ab62:	4544      	cmp	r4, r8
 800ab64:	f002 847d 	beq.w	800d462 <forward_cast+0x3052>
 800ab68:	f340 8513 	ble.w	800b592 <forward_cast+0x1182>
 800ab6c:	42bc      	cmp	r4, r7
 800ab6e:	f002 8414 	beq.w	800d39a <forward_cast+0x2f8a>
 800ab72:	4959      	ldr	r1, [pc, #356]	; (800acd8 <forward_cast+0x8c8>)
 800ab74:	428c      	cmp	r4, r1
 800ab76:	f041 806e 	bne.w	800bc56 <forward_cast+0x1846>
 800ab7a:	7829      	ldrb	r1, [r5, #0]
 800ab7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ab80:	2900      	cmp	r1, #0
 800ab82:	bf08      	it	eq
 800ab84:	eef0 7a48 	vmoveq.f32	s15, s16
 800ab88:	9900      	ldr	r1, [sp, #0]
 800ab8a:	edc6 7a00 	vstr	s15, [r6]
 800ab8e:	444d      	add	r5, r9
 800ab90:	45aa      	cmp	sl, r5
 800ab92:	440e      	add	r6, r1
 800ab94:	f67f aca4 	bls.w	800a4e0 <forward_cast+0xd0>
 800ab98:	4294      	cmp	r4, r2
 800ab9a:	f002 819f 	beq.w	800cedc <forward_cast+0x2acc>
 800ab9e:	dde0      	ble.n	800ab62 <forward_cast+0x752>
 800aba0:	429c      	cmp	r4, r3
 800aba2:	f002 848d 	beq.w	800d4c0 <forward_cast+0x30b0>
 800aba6:	f340 8749 	ble.w	800ba3c <forward_cast+0x162c>
 800abaa:	455c      	cmp	r4, fp
 800abac:	f041 8053 	bne.w	800bc56 <forward_cast+0x1846>
 800abb0:	edd5 7a00 	vldr	s15, [r5]
 800abb4:	e7e8      	b.n	800ab88 <forward_cast+0x778>
 800abb6:	4b48      	ldr	r3, [pc, #288]	; (800acd8 <forward_cast+0x8c8>)
 800abb8:	459b      	cmp	fp, r3
 800abba:	f47f ac91 	bne.w	800a4e0 <forward_cast+0xd0>
 800abbe:	4555      	cmp	r5, sl
 800abc0:	f4bf ac8e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800abc4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800ace8 <forward_cast+0x8d8>
 800abc8:	f8df b124 	ldr.w	fp, [pc, #292]	; 800acf0 <forward_cast+0x8e0>
 800abcc:	4b43      	ldr	r3, [pc, #268]	; (800acdc <forward_cast+0x8cc>)
 800abce:	4a40      	ldr	r2, [pc, #256]	; (800acd0 <forward_cast+0x8c0>)
 800abd0:	2700      	movs	r7, #0
 800abd2:	e018      	b.n	800ac06 <forward_cast+0x7f6>
 800abd4:	4294      	cmp	r4, r2
 800abd6:	f002 8324 	beq.w	800d222 <forward_cast+0x2e12>
 800abda:	f340 86d0 	ble.w	800b97e <forward_cast+0x156e>
 800abde:	4940      	ldr	r1, [pc, #256]	; (800ace0 <forward_cast+0x8d0>)
 800abe0:	428c      	cmp	r4, r1
 800abe2:	f002 830e 	beq.w	800d202 <forward_cast+0x2df2>
 800abe6:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800abea:	428c      	cmp	r4, r1
 800abec:	f041 8019 	bne.w	800bc22 <forward_cast+0x1812>
 800abf0:	7829      	ldrb	r1, [r5, #0]
 800abf2:	3900      	subs	r1, #0
 800abf4:	bf18      	it	ne
 800abf6:	2101      	movne	r1, #1
 800abf8:	55f1      	strb	r1, [r6, r7]
 800abfa:	444d      	add	r5, r9
 800abfc:	9900      	ldr	r1, [sp, #0]
 800abfe:	45aa      	cmp	sl, r5
 800ac00:	440f      	add	r7, r1
 800ac02:	f67f ac6d 	bls.w	800a4e0 <forward_cast+0xd0>
 800ac06:	4937      	ldr	r1, [pc, #220]	; (800ace4 <forward_cast+0x8d4>)
 800ac08:	428c      	cmp	r4, r1
 800ac0a:	f000 86c1 	beq.w	800b990 <forward_cast+0x1580>
 800ac0e:	dde1      	ble.n	800abd4 <forward_cast+0x7c4>
 800ac10:	4930      	ldr	r1, [pc, #192]	; (800acd4 <forward_cast+0x8c4>)
 800ac12:	428c      	cmp	r4, r1
 800ac14:	f002 855c 	beq.w	800d6d0 <forward_cast+0x32c0>
 800ac18:	f340 86ff 	ble.w	800ba1a <forward_cast+0x160a>
 800ac1c:	4544      	cmp	r4, r8
 800ac1e:	f041 8000 	bne.w	800bc22 <forward_cast+0x1812>
 800ac22:	edd5 7a00 	vldr	s15, [r5]
 800ac26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac2a:	edcd 7a01 	vstr	s15, [sp, #4]
 800ac2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ac32:	e7e1      	b.n	800abf8 <forward_cast+0x7e8>
 800ac34:	4b28      	ldr	r3, [pc, #160]	; (800acd8 <forward_cast+0x8c8>)
 800ac36:	459b      	cmp	fp, r3
 800ac38:	f47f ac52 	bne.w	800a4e0 <forward_cast+0xd0>
 800ac3c:	4555      	cmp	r5, sl
 800ac3e:	f4bf ac4f 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ac42:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ace8 <forward_cast+0x8d8>
 800ac46:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800acf0 <forward_cast+0x8e0>
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <forward_cast+0x8cc>)
 800ac4c:	4a20      	ldr	r2, [pc, #128]	; (800acd0 <forward_cast+0x8c0>)
 800ac4e:	2700      	movs	r7, #0
 800ac50:	e018      	b.n	800ac84 <forward_cast+0x874>
 800ac52:	4294      	cmp	r4, r2
 800ac54:	f002 80ce 	beq.w	800cdf4 <forward_cast+0x29e4>
 800ac58:	f340 869d 	ble.w	800b996 <forward_cast+0x1586>
 800ac5c:	4920      	ldr	r1, [pc, #128]	; (800ace0 <forward_cast+0x8d0>)
 800ac5e:	428c      	cmp	r4, r1
 800ac60:	f002 82bf 	beq.w	800d1e2 <forward_cast+0x2dd2>
 800ac64:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ac68:	428c      	cmp	r4, r1
 800ac6a:	f040 87d7 	bne.w	800bc1c <forward_cast+0x180c>
 800ac6e:	7829      	ldrb	r1, [r5, #0]
 800ac70:	3900      	subs	r1, #0
 800ac72:	bf18      	it	ne
 800ac74:	2101      	movne	r1, #1
 800ac76:	55f1      	strb	r1, [r6, r7]
 800ac78:	444d      	add	r5, r9
 800ac7a:	9900      	ldr	r1, [sp, #0]
 800ac7c:	45aa      	cmp	sl, r5
 800ac7e:	440f      	add	r7, r1
 800ac80:	f67f ac2e 	bls.w	800a4e0 <forward_cast+0xd0>
 800ac84:	4917      	ldr	r1, [pc, #92]	; (800ace4 <forward_cast+0x8d4>)
 800ac86:	428c      	cmp	r4, r1
 800ac88:	f000 868e 	beq.w	800b9a8 <forward_cast+0x1598>
 800ac8c:	dde1      	ble.n	800ac52 <forward_cast+0x842>
 800ac8e:	4911      	ldr	r1, [pc, #68]	; (800acd4 <forward_cast+0x8c4>)
 800ac90:	428c      	cmp	r4, r1
 800ac92:	f002 81ee 	beq.w	800d072 <forward_cast+0x2c62>
 800ac96:	f340 8641 	ble.w	800b91c <forward_cast+0x150c>
 800ac9a:	4544      	cmp	r4, r8
 800ac9c:	f040 87be 	bne.w	800bc1c <forward_cast+0x180c>
 800aca0:	edd5 7a00 	vldr	s15, [r5]
 800aca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aca8:	edcd 7a01 	vstr	s15, [sp, #4]
 800acac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800acb0:	e7e1      	b.n	800ac76 <forward_cast+0x866>
 800acb2:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <forward_cast+0x8cc>)
 800acb4:	4593      	cmp	fp, r2
 800acb6:	f001 85c0 	beq.w	800c83a <forward_cast+0x242a>
 800acba:	4b0b      	ldr	r3, [pc, #44]	; (800ace8 <forward_cast+0x8d8>)
 800acbc:	459b      	cmp	fp, r3
 800acbe:	f040 80c6 	bne.w	800ae4e <forward_cast+0xa3e>
 800acc2:	4555      	cmp	r5, sl
 800acc4:	f4bf ac0c 	bcs.w	800a4e0 <forward_cast+0xd0>
 800acc8:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800acec <forward_cast+0x8dc>
 800accc:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <forward_cast+0x8e0>)
 800acce:	e02e      	b.n	800ad2e <forward_cast+0x91e>
 800acd0:	00041040 	.word	0x00041040
 800acd4:	00842040 	.word	0x00842040
 800acd8:	00060440 	.word	0x00060440
 800acdc:	00841040 	.word	0x00841040
 800ace0:	00042040 	.word	0x00042040
 800ace4:	00840440 	.word	0x00840440
 800ace8:	01821040 	.word	0x01821040
 800acec:	00000000 	.word	0x00000000
 800acf0:	00840840 	.word	0x00840840
 800acf4:	42bc      	cmp	r4, r7
 800acf6:	f002 812c 	beq.w	800cf52 <forward_cast+0x2b42>
 800acfa:	f340 843a 	ble.w	800b572 <forward_cast+0x1162>
 800acfe:	49b4      	ldr	r1, [pc, #720]	; (800afd0 <forward_cast+0xbc0>)
 800ad00:	428c      	cmp	r4, r1
 800ad02:	f002 813e 	beq.w	800cf82 <forward_cast+0x2b72>
 800ad06:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ad0a:	428c      	cmp	r4, r1
 800ad0c:	f040 879f 	bne.w	800bc4e <forward_cast+0x183e>
 800ad10:	7829      	ldrb	r1, [r5, #0]
 800ad12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad16:	2900      	cmp	r1, #0
 800ad18:	bf08      	it	eq
 800ad1a:	eef0 7a48 	vmoveq.f32	s15, s16
 800ad1e:	9900      	ldr	r1, [sp, #0]
 800ad20:	edc6 7a00 	vstr	s15, [r6]
 800ad24:	444d      	add	r5, r9
 800ad26:	45aa      	cmp	sl, r5
 800ad28:	440e      	add	r6, r1
 800ad2a:	f67f abd9 	bls.w	800a4e0 <forward_cast+0xd0>
 800ad2e:	4544      	cmp	r4, r8
 800ad30:	f002 80e5 	beq.w	800cefe <forward_cast+0x2aee>
 800ad34:	ddde      	ble.n	800acf4 <forward_cast+0x8e4>
 800ad36:	49a7      	ldr	r1, [pc, #668]	; (800afd4 <forward_cast+0xbc4>)
 800ad38:	428c      	cmp	r4, r1
 800ad3a:	f002 8604 	beq.w	800d946 <forward_cast+0x3536>
 800ad3e:	f340 8746 	ble.w	800bbce <forward_cast+0x17be>
 800ad42:	455c      	cmp	r4, fp
 800ad44:	f040 8783 	bne.w	800bc4e <forward_cast+0x183e>
 800ad48:	edd5 7a00 	vldr	s15, [r5]
 800ad4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad54:	e7e3      	b.n	800ad1e <forward_cast+0x90e>
 800ad56:	45bb      	cmp	fp, r7
 800ad58:	f000 87ba 	beq.w	800bcd0 <forward_cast+0x18c0>
 800ad5c:	4b9e      	ldr	r3, [pc, #632]	; (800afd8 <forward_cast+0xbc8>)
 800ad5e:	459b      	cmp	fp, r3
 800ad60:	f040 80b1 	bne.w	800aec6 <forward_cast+0xab6>
 800ad64:	4555      	cmp	r5, sl
 800ad66:	f4bf abbb 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ad6a:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 800afdc <forward_cast+0xbcc>
 800ad6e:	4a99      	ldr	r2, [pc, #612]	; (800afd4 <forward_cast+0xbc4>)
 800ad70:	4b9b      	ldr	r3, [pc, #620]	; (800afe0 <forward_cast+0xbd0>)
 800ad72:	e01d      	b.n	800adb0 <forward_cast+0x9a0>
 800ad74:	499b      	ldr	r1, [pc, #620]	; (800afe4 <forward_cast+0xbd4>)
 800ad76:	428c      	cmp	r4, r1
 800ad78:	f002 8757 	beq.w	800dc2a <forward_cast+0x381a>
 800ad7c:	f340 847d 	ble.w	800b67a <forward_cast+0x126a>
 800ad80:	4993      	ldr	r1, [pc, #588]	; (800afd0 <forward_cast+0xbc0>)
 800ad82:	428c      	cmp	r4, r1
 800ad84:	f002 8743 	beq.w	800dc0e <forward_cast+0x37fe>
 800ad88:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ad8c:	428c      	cmp	r4, r1
 800ad8e:	f040 878a 	bne.w	800bca6 <forward_cast+0x1896>
 800ad92:	7829      	ldrb	r1, [r5, #0]
 800ad94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	bf08      	it	eq
 800ad9c:	eef0 7a48 	vmoveq.f32	s15, s16
 800ada0:	9900      	ldr	r1, [sp, #0]
 800ada2:	edc6 7a00 	vstr	s15, [r6]
 800ada6:	444d      	add	r5, r9
 800ada8:	45aa      	cmp	sl, r5
 800adaa:	440e      	add	r6, r1
 800adac:	f67f ab98 	bls.w	800a4e0 <forward_cast+0xd0>
 800adb0:	4544      	cmp	r4, r8
 800adb2:	f002 8706 	beq.w	800dbc2 <forward_cast+0x37b2>
 800adb6:	dddd      	ble.n	800ad74 <forward_cast+0x964>
 800adb8:	4294      	cmp	r4, r2
 800adba:	f002 85b2 	beq.w	800d922 <forward_cast+0x3512>
 800adbe:	f340 866f 	ble.w	800baa0 <forward_cast+0x1690>
 800adc2:	455c      	cmp	r4, fp
 800adc4:	f040 876f 	bne.w	800bca6 <forward_cast+0x1896>
 800adc8:	edd5 7a00 	vldr	s15, [r5]
 800adcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800add0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add4:	e7e4      	b.n	800ada0 <forward_cast+0x990>
 800add6:	4b82      	ldr	r3, [pc, #520]	; (800afe0 <forward_cast+0xbd0>)
 800add8:	459b      	cmp	fp, r3
 800adda:	f47f ab81 	bne.w	800a4e0 <forward_cast+0xd0>
 800adde:	4555      	cmp	r5, sl
 800ade0:	f4bf ab7e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ade4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800afd8 <forward_cast+0xbc8>
 800ade8:	4f7d      	ldr	r7, [pc, #500]	; (800afe0 <forward_cast+0xbd0>)
 800adea:	f8df b204 	ldr.w	fp, [pc, #516]	; 800aff0 <forward_cast+0xbe0>
 800adee:	4b7d      	ldr	r3, [pc, #500]	; (800afe4 <forward_cast+0xbd4>)
 800adf0:	4a77      	ldr	r2, [pc, #476]	; (800afd0 <forward_cast+0xbc0>)
 800adf2:	e016      	b.n	800ae22 <forward_cast+0xa12>
 800adf4:	429c      	cmp	r4, r3
 800adf6:	f002 861c 	beq.w	800da32 <forward_cast+0x3622>
 800adfa:	f340 8480 	ble.w	800b6fe <forward_cast+0x12ee>
 800adfe:	4294      	cmp	r4, r2
 800ae00:	f002 8608 	beq.w	800da14 <forward_cast+0x3604>
 800ae04:	4978      	ldr	r1, [pc, #480]	; (800afe8 <forward_cast+0xbd8>)
 800ae06:	428c      	cmp	r4, r1
 800ae08:	f040 8735 	bne.w	800bc76 <forward_cast+0x1866>
 800ae0c:	7829      	ldrb	r1, [r5, #0]
 800ae0e:	3900      	subs	r1, #0
 800ae10:	bf18      	it	ne
 800ae12:	2101      	movne	r1, #1
 800ae14:	8031      	strh	r1, [r6, #0]
 800ae16:	444d      	add	r5, r9
 800ae18:	9900      	ldr	r1, [sp, #0]
 800ae1a:	45aa      	cmp	sl, r5
 800ae1c:	440e      	add	r6, r1
 800ae1e:	f67f ab5f 	bls.w	800a4e0 <forward_cast+0xd0>
 800ae22:	4972      	ldr	r1, [pc, #456]	; (800afec <forward_cast+0xbdc>)
 800ae24:	428c      	cmp	r4, r1
 800ae26:	f002 8616 	beq.w	800da56 <forward_cast+0x3646>
 800ae2a:	dde3      	ble.n	800adf4 <forward_cast+0x9e4>
 800ae2c:	4969      	ldr	r1, [pc, #420]	; (800afd4 <forward_cast+0xbc4>)
 800ae2e:	428c      	cmp	r4, r1
 800ae30:	f002 8564 	beq.w	800d8fc <forward_cast+0x34ec>
 800ae34:	f340 8685 	ble.w	800bb42 <forward_cast+0x1732>
 800ae38:	4544      	cmp	r4, r8
 800ae3a:	f040 871c 	bne.w	800bc76 <forward_cast+0x1866>
 800ae3e:	edd5 7a00 	vldr	s15, [r5]
 800ae42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae46:	ee17 1a90 	vmov	r1, s15
 800ae4a:	b209      	sxth	r1, r1
 800ae4c:	e7e2      	b.n	800ae14 <forward_cast+0xa04>
 800ae4e:	4b64      	ldr	r3, [pc, #400]	; (800afe0 <forward_cast+0xbd0>)
 800ae50:	459b      	cmp	fp, r3
 800ae52:	f47f ab45 	bne.w	800a4e0 <forward_cast+0xd0>
 800ae56:	4555      	cmp	r5, sl
 800ae58:	f4bf ab42 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ae5c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800afd8 <forward_cast+0xbc8>
 800ae60:	4f5f      	ldr	r7, [pc, #380]	; (800afe0 <forward_cast+0xbd0>)
 800ae62:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800aff0 <forward_cast+0xbe0>
 800ae66:	4b5f      	ldr	r3, [pc, #380]	; (800afe4 <forward_cast+0xbd4>)
 800ae68:	4a59      	ldr	r2, [pc, #356]	; (800afd0 <forward_cast+0xbc0>)
 800ae6a:	e016      	b.n	800ae9a <forward_cast+0xa8a>
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	f002 8597 	beq.w	800d9a0 <forward_cast+0x3590>
 800ae72:	f340 8413 	ble.w	800b69c <forward_cast+0x128c>
 800ae76:	4294      	cmp	r4, r2
 800ae78:	f002 8503 	beq.w	800d882 <forward_cast+0x3472>
 800ae7c:	495a      	ldr	r1, [pc, #360]	; (800afe8 <forward_cast+0xbd8>)
 800ae7e:	428c      	cmp	r4, r1
 800ae80:	f040 86fc 	bne.w	800bc7c <forward_cast+0x186c>
 800ae84:	7829      	ldrb	r1, [r5, #0]
 800ae86:	3900      	subs	r1, #0
 800ae88:	bf18      	it	ne
 800ae8a:	2101      	movne	r1, #1
 800ae8c:	8031      	strh	r1, [r6, #0]
 800ae8e:	444d      	add	r5, r9
 800ae90:	9900      	ldr	r1, [sp, #0]
 800ae92:	45aa      	cmp	sl, r5
 800ae94:	440e      	add	r6, r1
 800ae96:	f67f ab23 	bls.w	800a4e0 <forward_cast+0xd0>
 800ae9a:	4954      	ldr	r1, [pc, #336]	; (800afec <forward_cast+0xbdc>)
 800ae9c:	428c      	cmp	r4, r1
 800ae9e:	f002 85de 	beq.w	800da5e <forward_cast+0x364e>
 800aea2:	dde3      	ble.n	800ae6c <forward_cast+0xa5c>
 800aea4:	494b      	ldr	r1, [pc, #300]	; (800afd4 <forward_cast+0xbc4>)
 800aea6:	428c      	cmp	r4, r1
 800aea8:	f002 8594 	beq.w	800d9d4 <forward_cast+0x35c4>
 800aeac:	f340 8458 	ble.w	800b760 <forward_cast+0x1350>
 800aeb0:	4544      	cmp	r4, r8
 800aeb2:	f040 86e3 	bne.w	800bc7c <forward_cast+0x186c>
 800aeb6:	edd5 7a00 	vldr	s15, [r5]
 800aeba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aebe:	ee17 1a90 	vmov	r1, s15
 800aec2:	b209      	sxth	r1, r1
 800aec4:	e7e2      	b.n	800ae8c <forward_cast+0xa7c>
 800aec6:	4b46      	ldr	r3, [pc, #280]	; (800afe0 <forward_cast+0xbd0>)
 800aec8:	459b      	cmp	fp, r3
 800aeca:	f47f ab09 	bne.w	800a4e0 <forward_cast+0xd0>
 800aece:	4555      	cmp	r5, sl
 800aed0:	f4bf ab06 	bcs.w	800a4e0 <forward_cast+0xd0>
 800aed4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800afd8 <forward_cast+0xbc8>
 800aed8:	4f41      	ldr	r7, [pc, #260]	; (800afe0 <forward_cast+0xbd0>)
 800aeda:	f8df b114 	ldr.w	fp, [pc, #276]	; 800aff0 <forward_cast+0xbe0>
 800aede:	4b41      	ldr	r3, [pc, #260]	; (800afe4 <forward_cast+0xbd4>)
 800aee0:	4a3b      	ldr	r2, [pc, #236]	; (800afd0 <forward_cast+0xbc0>)
 800aee2:	e016      	b.n	800af12 <forward_cast+0xb02>
 800aee4:	429c      	cmp	r4, r3
 800aee6:	f002 8674 	beq.w	800dbd2 <forward_cast+0x37c2>
 800aeea:	f340 8588 	ble.w	800b9fe <forward_cast+0x15ee>
 800aeee:	4294      	cmp	r4, r2
 800aef0:	f002 85bd 	beq.w	800da6e <forward_cast+0x365e>
 800aef4:	493c      	ldr	r1, [pc, #240]	; (800afe8 <forward_cast+0xbd8>)
 800aef6:	428c      	cmp	r4, r1
 800aef8:	f040 86e4 	bne.w	800bcc4 <forward_cast+0x18b4>
 800aefc:	7829      	ldrb	r1, [r5, #0]
 800aefe:	3900      	subs	r1, #0
 800af00:	bf18      	it	ne
 800af02:	2101      	movne	r1, #1
 800af04:	8031      	strh	r1, [r6, #0]
 800af06:	444d      	add	r5, r9
 800af08:	9900      	ldr	r1, [sp, #0]
 800af0a:	45aa      	cmp	sl, r5
 800af0c:	440e      	add	r6, r1
 800af0e:	f67f aae7 	bls.w	800a4e0 <forward_cast+0xd0>
 800af12:	4936      	ldr	r1, [pc, #216]	; (800afec <forward_cast+0xbdc>)
 800af14:	428c      	cmp	r4, r1
 800af16:	f002 8219 	beq.w	800d34c <forward_cast+0x2f3c>
 800af1a:	dde3      	ble.n	800aee4 <forward_cast+0xad4>
 800af1c:	492d      	ldr	r1, [pc, #180]	; (800afd4 <forward_cast+0xbc4>)
 800af1e:	428c      	cmp	r4, r1
 800af20:	f002 84d9 	beq.w	800d8d6 <forward_cast+0x34c6>
 800af24:	f340 849e 	ble.w	800b864 <forward_cast+0x1454>
 800af28:	4544      	cmp	r4, r8
 800af2a:	f040 86cb 	bne.w	800bcc4 <forward_cast+0x18b4>
 800af2e:	edd5 7a00 	vldr	s15, [r5]
 800af32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af36:	ee17 1a90 	vmov	r1, s15
 800af3a:	b209      	sxth	r1, r1
 800af3c:	e7e2      	b.n	800af04 <forward_cast+0xaf4>
 800af3e:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <forward_cast+0xbd8>)
 800af40:	459b      	cmp	fp, r3
 800af42:	f47f aacd 	bne.w	800a4e0 <forward_cast+0xd0>
 800af46:	4555      	cmp	r5, sl
 800af48:	f4bf aaca 	bcs.w	800a4e0 <forward_cast+0xd0>
 800af4c:	9f00      	ldr	r7, [sp, #0]
 800af4e:	4621      	mov	r1, r4
 800af50:	4628      	mov	r0, r5
 800af52:	f7ff f9e7 	bl	800a324 <_array_handle_get_as_float>
 800af56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800af5a:	ee17 3a90 	vmov	r3, s15
 800af5e:	f383 0308 	usat	r3, #8, r3
 800af62:	444d      	add	r5, r9
 800af64:	45aa      	cmp	sl, r5
 800af66:	7033      	strb	r3, [r6, #0]
 800af68:	443e      	add	r6, r7
 800af6a:	d8f0      	bhi.n	800af4e <forward_cast+0xb3e>
 800af6c:	f7ff bab8 	b.w	800a4e0 <forward_cast+0xd0>
 800af70:	4b1f      	ldr	r3, [pc, #124]	; (800aff0 <forward_cast+0xbe0>)
 800af72:	459b      	cmp	fp, r3
 800af74:	f001 850f 	beq.w	800c996 <forward_cast+0x2586>
 800af78:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800af7c:	459b      	cmp	fp, r3
 800af7e:	f040 81ea 	bne.w	800b356 <forward_cast+0xf46>
 800af82:	4555      	cmp	r5, sl
 800af84:	f4bf aaac 	bcs.w	800a4e0 <forward_cast+0xd0>
 800af88:	9f00      	ldr	r7, [sp, #0]
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff f9c9 	bl	800a324 <_array_handle_get_as_float>
 800af92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800af96:	ee17 3a90 	vmov	r3, s15
 800af9a:	f383 0308 	usat	r3, #8, r3
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	444d      	add	r5, r9
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	45aa      	cmp	sl, r5
 800afac:	edc6 7a00 	vstr	s15, [r6]
 800afb0:	443e      	add	r6, r7
 800afb2:	d8ea      	bhi.n	800af8a <forward_cast+0xb7a>
 800afb4:	f7ff ba94 	b.w	800a4e0 <forward_cast+0xd0>
 800afb8:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <forward_cast+0xbd8>)
 800afba:	459b      	cmp	fp, r3
 800afbc:	f47f aa90 	bne.w	800a4e0 <forward_cast+0xd0>
 800afc0:	4555      	cmp	r5, sl
 800afc2:	f4bf aa8d 	bcs.w	800a4e0 <forward_cast+0xd0>
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <forward_cast+0xbd0>)
 800afc8:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <forward_cast+0xbe0>)
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	e02b      	b.n	800b028 <forward_cast+0xc18>
 800afd0:	00042040 	.word	0x00042040
 800afd4:	00842040 	.word	0x00842040
 800afd8:	01821040 	.word	0x01821040
 800afdc:	00000000 	.word	0x00000000
 800afe0:	00840840 	.word	0x00840840
 800afe4:	00041040 	.word	0x00041040
 800afe8:	00060440 	.word	0x00060440
 800afec:	00840440 	.word	0x00840440
 800aff0:	00841040 	.word	0x00841040
 800aff4:	42bc      	cmp	r4, r7
 800aff6:	f002 8685 	beq.w	800dd04 <forward_cast+0x38f4>
 800affa:	f340 839b 	ble.w	800b734 <forward_cast+0x1324>
 800affe:	49ac      	ldr	r1, [pc, #688]	; (800b2b0 <forward_cast+0xea0>)
 800b000:	428c      	cmp	r4, r1
 800b002:	f002 8671 	beq.w	800dce8 <forward_cast+0x38d8>
 800b006:	455c      	cmp	r4, fp
 800b008:	f040 8641 	bne.w	800bc8e <forward_cast+0x187e>
 800b00c:	7828      	ldrb	r0, [r5, #0]
 800b00e:	3800      	subs	r0, #0
 800b010:	bf18      	it	ne
 800b012:	2001      	movne	r0, #1
 800b014:	f380 0010 	usat	r0, #16, r0
 800b018:	9900      	ldr	r1, [sp, #0]
 800b01a:	f806 0008 	strb.w	r0, [r6, r8]
 800b01e:	444d      	add	r5, r9
 800b020:	45aa      	cmp	sl, r5
 800b022:	4488      	add	r8, r1
 800b024:	f67f aa5c 	bls.w	800a4e0 <forward_cast+0xd0>
 800b028:	49a2      	ldr	r1, [pc, #648]	; (800b2b4 <forward_cast+0xea4>)
 800b02a:	428c      	cmp	r4, r1
 800b02c:	f002 851b 	beq.w	800da66 <forward_cast+0x3656>
 800b030:	dde0      	ble.n	800aff4 <forward_cast+0xbe4>
 800b032:	49a1      	ldr	r1, [pc, #644]	; (800b2b8 <forward_cast+0xea8>)
 800b034:	428c      	cmp	r4, r1
 800b036:	f002 826d 	beq.w	800d514 <forward_cast+0x3104>
 800b03a:	f340 8572 	ble.w	800bb22 <forward_cast+0x1712>
 800b03e:	499f      	ldr	r1, [pc, #636]	; (800b2bc <forward_cast+0xeac>)
 800b040:	428c      	cmp	r4, r1
 800b042:	f040 8624 	bne.w	800bc8e <forward_cast+0x187e>
 800b046:	edd5 7a00 	vldr	s15, [r5]
 800b04a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b04e:	ee17 0a90 	vmov	r0, s15
 800b052:	e7df      	b.n	800b014 <forward_cast+0xc04>
 800b054:	4b9a      	ldr	r3, [pc, #616]	; (800b2c0 <forward_cast+0xeb0>)
 800b056:	459b      	cmp	fp, r3
 800b058:	f47f aa42 	bne.w	800a4e0 <forward_cast+0xd0>
 800b05c:	4555      	cmp	r5, sl
 800b05e:	f4bf aa3f 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b062:	9f00      	ldr	r7, [sp, #0]
 800b064:	4628      	mov	r0, r5
 800b066:	4621      	mov	r1, r4
 800b068:	f7ff f95c 	bl	800a324 <_array_handle_get_as_float>
 800b06c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b074:	444d      	add	r5, r9
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	45aa      	cmp	sl, r5
 800b07e:	7033      	strb	r3, [r6, #0]
 800b080:	443e      	add	r6, r7
 800b082:	d8ef      	bhi.n	800b064 <forward_cast+0xc54>
 800b084:	f7ff ba2c 	b.w	800a4e0 <forward_cast+0xd0>
 800b088:	4b8e      	ldr	r3, [pc, #568]	; (800b2c4 <forward_cast+0xeb4>)
 800b08a:	459b      	cmp	fp, r3
 800b08c:	f001 84d4 	beq.w	800ca38 <forward_cast+0x2628>
 800b090:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800b094:	459b      	cmp	fp, r3
 800b096:	f040 8096 	bne.w	800b1c6 <forward_cast+0xdb6>
 800b09a:	4555      	cmp	r5, sl
 800b09c:	f4bf aa20 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b0a0:	f04f 0800 	mov.w	r8, #0
 800b0a4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	f7ff f93a 	bl	800a324 <_array_handle_get_as_float>
 800b0b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b8:	444d      	add	r5, r9
 800b0ba:	f000 85a6 	beq.w	800bc0a <forward_cast+0x17fa>
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	6037      	str	r7, [r6, #0]
 800b0c2:	45aa      	cmp	sl, r5
 800b0c4:	441e      	add	r6, r3
 800b0c6:	d8ef      	bhi.n	800b0a8 <forward_cast+0xc98>
 800b0c8:	f7ff ba0a 	b.w	800a4e0 <forward_cast+0xd0>
 800b0cc:	459b      	cmp	fp, r3
 800b0ce:	f001 8566 	beq.w	800cb9e <forward_cast+0x278e>
 800b0d2:	4593      	cmp	fp, r2
 800b0d4:	f040 80b2 	bne.w	800b23c <forward_cast+0xe2c>
 800b0d8:	4555      	cmp	r5, sl
 800b0da:	f4bf aa01 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b0de:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800b2bc <forward_cast+0xeac>
 800b0e2:	4f79      	ldr	r7, [pc, #484]	; (800b2c8 <forward_cast+0xeb8>)
 800b0e4:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800b2c4 <forward_cast+0xeb4>
 800b0e8:	4b78      	ldr	r3, [pc, #480]	; (800b2cc <forward_cast+0xebc>)
 800b0ea:	4a71      	ldr	r2, [pc, #452]	; (800b2b0 <forward_cast+0xea0>)
 800b0ec:	e01e      	b.n	800b12c <forward_cast+0xd1c>
 800b0ee:	429c      	cmp	r4, r3
 800b0f0:	f002 8631 	beq.w	800dd56 <forward_cast+0x3946>
 800b0f4:	f340 82ab 	ble.w	800b64e <forward_cast+0x123e>
 800b0f8:	4294      	cmp	r4, r2
 800b0fa:	f002 861e 	beq.w	800dd3a <forward_cast+0x392a>
 800b0fe:	4970      	ldr	r1, [pc, #448]	; (800b2c0 <forward_cast+0xeb0>)
 800b100:	428c      	cmp	r4, r1
 800b102:	f040 85ca 	bne.w	800bc9a <forward_cast+0x188a>
 800b106:	7828      	ldrb	r0, [r5, #0]
 800b108:	3800      	subs	r0, #0
 800b10a:	bf18      	it	ne
 800b10c:	2001      	movne	r0, #1
 800b10e:	f300 000f 	ssat	r0, #16, r0
 800b112:	b200      	sxth	r0, r0
 800b114:	ee07 0a90 	vmov	s15, r0
 800b118:	9900      	ldr	r1, [sp, #0]
 800b11a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b11e:	444d      	add	r5, r9
 800b120:	45aa      	cmp	sl, r5
 800b122:	edc6 7a00 	vstr	s15, [r6]
 800b126:	440e      	add	r6, r1
 800b128:	f67f a9da 	bls.w	800a4e0 <forward_cast+0xd0>
 800b12c:	4961      	ldr	r1, [pc, #388]	; (800b2b4 <forward_cast+0xea4>)
 800b12e:	428c      	cmp	r4, r1
 800b130:	f002 82f1 	beq.w	800d716 <forward_cast+0x3306>
 800b134:	dddb      	ble.n	800b0ee <forward_cast+0xcde>
 800b136:	4960      	ldr	r1, [pc, #384]	; (800b2b8 <forward_cast+0xea8>)
 800b138:	428c      	cmp	r4, r1
 800b13a:	f003 8018 	beq.w	800e16e <forward_cast+0x3d5e>
 800b13e:	f340 84bf 	ble.w	800bac0 <forward_cast+0x16b0>
 800b142:	4544      	cmp	r4, r8
 800b144:	f040 85a9 	bne.w	800bc9a <forward_cast+0x188a>
 800b148:	edd5 7a00 	vldr	s15, [r5]
 800b14c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b150:	ee17 0a90 	vmov	r0, s15
 800b154:	e7db      	b.n	800b10e <forward_cast+0xcfe>
 800b156:	4b5c      	ldr	r3, [pc, #368]	; (800b2c8 <forward_cast+0xeb8>)
 800b158:	459b      	cmp	fp, r3
 800b15a:	f47f a9c1 	bne.w	800a4e0 <forward_cast+0xd0>
 800b15e:	4555      	cmp	r5, sl
 800b160:	f4bf a9be 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b164:	4b52      	ldr	r3, [pc, #328]	; (800b2b0 <forward_cast+0xea0>)
 800b166:	e01a      	b.n	800b19e <forward_cast+0xd8e>
 800b168:	4958      	ldr	r1, [pc, #352]	; (800b2cc <forward_cast+0xebc>)
 800b16a:	428c      	cmp	r4, r1
 800b16c:	f002 816c 	beq.w	800d448 <forward_cast+0x3038>
 800b170:	f340 8261 	ble.w	800b636 <forward_cast+0x1226>
 800b174:	429c      	cmp	r4, r3
 800b176:	f002 8159 	beq.w	800d42c <forward_cast+0x301c>
 800b17a:	4951      	ldr	r1, [pc, #324]	; (800b2c0 <forward_cast+0xeb0>)
 800b17c:	428c      	cmp	r4, r1
 800b17e:	f040 8574 	bne.w	800bc6a <forward_cast+0x185a>
 800b182:	7828      	ldrb	r0, [r5, #0]
 800b184:	3800      	subs	r0, #0
 800b186:	bf18      	it	ne
 800b188:	2001      	movne	r0, #1
 800b18a:	f300 0007 	ssat	r0, #8, r0
 800b18e:	9900      	ldr	r1, [sp, #0]
 800b190:	444d      	add	r5, r9
 800b192:	b240      	sxtb	r0, r0
 800b194:	45aa      	cmp	sl, r5
 800b196:	8030      	strh	r0, [r6, #0]
 800b198:	440e      	add	r6, r1
 800b19a:	f67f a9a1 	bls.w	800a4e0 <forward_cast+0xd0>
 800b19e:	42bc      	cmp	r4, r7
 800b1a0:	f002 807f 	beq.w	800d2a2 <forward_cast+0x2e92>
 800b1a4:	dde0      	ble.n	800b168 <forward_cast+0xd58>
 800b1a6:	4944      	ldr	r1, [pc, #272]	; (800b2b8 <forward_cast+0xea8>)
 800b1a8:	428c      	cmp	r4, r1
 800b1aa:	f002 81f2 	beq.w	800d592 <forward_cast+0x3182>
 800b1ae:	f340 851d 	ble.w	800bbec <forward_cast+0x17dc>
 800b1b2:	4294      	cmp	r4, r2
 800b1b4:	f040 8559 	bne.w	800bc6a <forward_cast+0x185a>
 800b1b8:	edd5 7a00 	vldr	s15, [r5]
 800b1bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1c0:	ee17 0a90 	vmov	r0, s15
 800b1c4:	e7e1      	b.n	800b18a <forward_cast+0xd7a>
 800b1c6:	4b40      	ldr	r3, [pc, #256]	; (800b2c8 <forward_cast+0xeb8>)
 800b1c8:	459b      	cmp	fp, r3
 800b1ca:	f47f a989 	bne.w	800a4e0 <forward_cast+0xd0>
 800b1ce:	4555      	cmp	r5, sl
 800b1d0:	f4bf a986 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b1d4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800b2b8 <forward_cast+0xea8>
 800b1d8:	4f38      	ldr	r7, [pc, #224]	; (800b2bc <forward_cast+0xeac>)
 800b1da:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <forward_cast+0xea0>)
 800b1dc:	4a38      	ldr	r2, [pc, #224]	; (800b2c0 <forward_cast+0xeb0>)
 800b1de:	e016      	b.n	800b20e <forward_cast+0xdfe>
 800b1e0:	493a      	ldr	r1, [pc, #232]	; (800b2cc <forward_cast+0xebc>)
 800b1e2:	428c      	cmp	r4, r1
 800b1e4:	f002 814a 	beq.w	800d47c <forward_cast+0x306c>
 800b1e8:	f340 81f6 	ble.w	800b5d8 <forward_cast+0x11c8>
 800b1ec:	429c      	cmp	r4, r3
 800b1ee:	f002 80fd 	beq.w	800d3ec <forward_cast+0x2fdc>
 800b1f2:	4294      	cmp	r4, r2
 800b1f4:	f040 8536 	bne.w	800bc64 <forward_cast+0x1854>
 800b1f8:	7829      	ldrb	r1, [r5, #0]
 800b1fa:	3900      	subs	r1, #0
 800b1fc:	bf18      	it	ne
 800b1fe:	2101      	movne	r1, #1
 800b200:	8031      	strh	r1, [r6, #0]
 800b202:	444d      	add	r5, r9
 800b204:	9900      	ldr	r1, [sp, #0]
 800b206:	45aa      	cmp	sl, r5
 800b208:	440e      	add	r6, r1
 800b20a:	f67f a969 	bls.w	800a4e0 <forward_cast+0xd0>
 800b20e:	4929      	ldr	r1, [pc, #164]	; (800b2b4 <forward_cast+0xea4>)
 800b210:	428c      	cmp	r4, r1
 800b212:	f002 804a 	beq.w	800d2aa <forward_cast+0x2e9a>
 800b216:	dde3      	ble.n	800b1e0 <forward_cast+0xdd0>
 800b218:	4544      	cmp	r4, r8
 800b21a:	f002 83a6 	beq.w	800d96a <forward_cast+0x355a>
 800b21e:	f340 81ea 	ble.w	800b5f6 <forward_cast+0x11e6>
 800b222:	42bc      	cmp	r4, r7
 800b224:	f040 851e 	bne.w	800bc64 <forward_cast+0x1854>
 800b228:	edd5 7a00 	vldr	s15, [r5]
 800b22c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	bf14      	ite	ne
 800b236:	2101      	movne	r1, #1
 800b238:	2100      	moveq	r1, #0
 800b23a:	e7e1      	b.n	800b200 <forward_cast+0xdf0>
 800b23c:	4b22      	ldr	r3, [pc, #136]	; (800b2c8 <forward_cast+0xeb8>)
 800b23e:	459b      	cmp	fp, r3
 800b240:	f47f a94e 	bne.w	800a4e0 <forward_cast+0xd0>
 800b244:	4555      	cmp	r5, sl
 800b246:	f4bf a94b 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b24a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b2b8 <forward_cast+0xea8>
 800b24e:	4f1b      	ldr	r7, [pc, #108]	; (800b2bc <forward_cast+0xeac>)
 800b250:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <forward_cast+0xea0>)
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <forward_cast+0xeb0>)
 800b254:	e018      	b.n	800b288 <forward_cast+0xe78>
 800b256:	491d      	ldr	r1, [pc, #116]	; (800b2cc <forward_cast+0xebc>)
 800b258:	428c      	cmp	r4, r1
 800b25a:	f002 852a 	beq.w	800dcb2 <forward_cast+0x38a2>
 800b25e:	f340 8242 	ble.w	800b6e6 <forward_cast+0x12d6>
 800b262:	429c      	cmp	r4, r3
 800b264:	f002 84ee 	beq.w	800dc44 <forward_cast+0x3834>
 800b268:	4294      	cmp	r4, r2
 800b26a:	f040 8525 	bne.w	800bcb8 <forward_cast+0x18a8>
 800b26e:	7828      	ldrb	r0, [r5, #0]
 800b270:	3800      	subs	r0, #0
 800b272:	bf18      	it	ne
 800b274:	2001      	movne	r0, #1
 800b276:	f300 000f 	ssat	r0, #16, r0
 800b27a:	9900      	ldr	r1, [sp, #0]
 800b27c:	8030      	strh	r0, [r6, #0]
 800b27e:	444d      	add	r5, r9
 800b280:	45aa      	cmp	sl, r5
 800b282:	440e      	add	r6, r1
 800b284:	f67f a92c 	bls.w	800a4e0 <forward_cast+0xd0>
 800b288:	490a      	ldr	r1, [pc, #40]	; (800b2b4 <forward_cast+0xea4>)
 800b28a:	428c      	cmp	r4, r1
 800b28c:	f002 82f5 	beq.w	800d87a <forward_cast+0x346a>
 800b290:	dde1      	ble.n	800b256 <forward_cast+0xe46>
 800b292:	4544      	cmp	r4, r8
 800b294:	f002 85e8 	beq.w	800de68 <forward_cast+0x3a58>
 800b298:	f340 8464 	ble.w	800bb64 <forward_cast+0x1754>
 800b29c:	42bc      	cmp	r4, r7
 800b29e:	f040 850b 	bne.w	800bcb8 <forward_cast+0x18a8>
 800b2a2:	edd5 7a00 	vldr	s15, [r5]
 800b2a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2aa:	ee17 0a90 	vmov	r0, s15
 800b2ae:	e7e2      	b.n	800b276 <forward_cast+0xe66>
 800b2b0:	00042040 	.word	0x00042040
 800b2b4:	00840440 	.word	0x00840440
 800b2b8:	00842040 	.word	0x00842040
 800b2bc:	01821040 	.word	0x01821040
 800b2c0:	00060440 	.word	0x00060440
 800b2c4:	00841040 	.word	0x00841040
 800b2c8:	00840840 	.word	0x00840840
 800b2cc:	00041040 	.word	0x00041040
 800b2d0:	4bb8      	ldr	r3, [pc, #736]	; (800b5b4 <forward_cast+0x11a4>)
 800b2d2:	459b      	cmp	fp, r3
 800b2d4:	f000 8547 	beq.w	800bd66 <forward_cast+0x1956>
 800b2d8:	4fb7      	ldr	r7, [pc, #732]	; (800b5b8 <forward_cast+0x11a8>)
 800b2da:	45bb      	cmp	fp, r7
 800b2dc:	d155      	bne.n	800b38a <forward_cast+0xf7a>
 800b2de:	4555      	cmp	r5, sl
 800b2e0:	f4bf a8fe 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b2e4:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800b5d0 <forward_cast+0x11c0>
 800b2e8:	4fb4      	ldr	r7, [pc, #720]	; (800b5bc <forward_cast+0x11ac>)
 800b2ea:	4bb5      	ldr	r3, [pc, #724]	; (800b5c0 <forward_cast+0x11b0>)
 800b2ec:	4ab5      	ldr	r2, [pc, #724]	; (800b5c4 <forward_cast+0x11b4>)
 800b2ee:	e01e      	b.n	800b32e <forward_cast+0xf1e>
 800b2f0:	49b5      	ldr	r1, [pc, #724]	; (800b5c8 <forward_cast+0x11b8>)
 800b2f2:	428c      	cmp	r4, r1
 800b2f4:	f002 834a 	beq.w	800d98c <forward_cast+0x357c>
 800b2f8:	f340 8242 	ble.w	800b780 <forward_cast+0x1370>
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	f002 837b 	beq.w	800d9f8 <forward_cast+0x35e8>
 800b302:	4294      	cmp	r4, r2
 800b304:	f040 84b4 	bne.w	800bc70 <forward_cast+0x1860>
 800b308:	7828      	ldrb	r0, [r5, #0]
 800b30a:	3800      	subs	r0, #0
 800b30c:	bf18      	it	ne
 800b30e:	2001      	movne	r0, #1
 800b310:	f380 0010 	usat	r0, #16, r0
 800b314:	b280      	uxth	r0, r0
 800b316:	ee07 0a90 	vmov	s15, r0
 800b31a:	9900      	ldr	r1, [sp, #0]
 800b31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b320:	444d      	add	r5, r9
 800b322:	45aa      	cmp	sl, r5
 800b324:	edc6 7a00 	vstr	s15, [r6]
 800b328:	440e      	add	r6, r1
 800b32a:	f67f a8d9 	bls.w	800a4e0 <forward_cast+0xd0>
 800b32e:	49a7      	ldr	r1, [pc, #668]	; (800b5cc <forward_cast+0x11bc>)
 800b330:	428c      	cmp	r4, r1
 800b332:	f002 838c 	beq.w	800da4e <forward_cast+0x363e>
 800b336:	dddb      	ble.n	800b2f0 <forward_cast+0xee0>
 800b338:	4544      	cmp	r4, r8
 800b33a:	f001 86aa 	beq.w	800d092 <forward_cast+0x2c82>
 800b33e:	f340 82fe 	ble.w	800b93e <forward_cast+0x152e>
 800b342:	455c      	cmp	r4, fp
 800b344:	f040 8494 	bne.w	800bc70 <forward_cast+0x1860>
 800b348:	edd5 7a00 	vldr	s15, [r5]
 800b34c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b350:	ee17 0a90 	vmov	r0, s15
 800b354:	e7dc      	b.n	800b310 <forward_cast+0xf00>
 800b356:	4b99      	ldr	r3, [pc, #612]	; (800b5bc <forward_cast+0x11ac>)
 800b358:	459b      	cmp	fp, r3
 800b35a:	f47f a8c1 	bne.w	800a4e0 <forward_cast+0xd0>
 800b35e:	4555      	cmp	r5, sl
 800b360:	f4bf a8be 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b364:	9f00      	ldr	r7, [sp, #0]
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f7fe ffdb 	bl	800a324 <_array_handle_get_as_float>
 800b36e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b372:	ee17 3a90 	vmov	r3, s15
 800b376:	f383 0308 	usat	r3, #8, r3
 800b37a:	444d      	add	r5, r9
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	45aa      	cmp	sl, r5
 800b380:	8033      	strh	r3, [r6, #0]
 800b382:	443e      	add	r6, r7
 800b384:	d8ef      	bhi.n	800b366 <forward_cast+0xf56>
 800b386:	f7ff b8ab 	b.w	800a4e0 <forward_cast+0xd0>
 800b38a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800b38e:	459b      	cmp	fp, r3
 800b390:	f47f a8a6 	bne.w	800a4e0 <forward_cast+0xd0>
 800b394:	4555      	cmp	r5, sl
 800b396:	f4bf a8a3 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b39a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800b5d0 <forward_cast+0x11c0>
 800b39e:	4b88      	ldr	r3, [pc, #544]	; (800b5c0 <forward_cast+0x11b0>)
 800b3a0:	4a88      	ldr	r2, [pc, #544]	; (800b5c4 <forward_cast+0x11b4>)
 800b3a2:	e018      	b.n	800b3d6 <forward_cast+0xfc6>
 800b3a4:	4988      	ldr	r1, [pc, #544]	; (800b5c8 <forward_cast+0x11b8>)
 800b3a6:	428c      	cmp	r4, r1
 800b3a8:	f001 87be 	beq.w	800d328 <forward_cast+0x2f18>
 800b3ac:	f340 8212 	ble.w	800b7d4 <forward_cast+0x13c4>
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	f001 86a8 	beq.w	800d106 <forward_cast+0x2cf6>
 800b3b6:	4294      	cmp	r4, r2
 800b3b8:	f040 8441 	bne.w	800bc3e <forward_cast+0x182e>
 800b3bc:	7828      	ldrb	r0, [r5, #0]
 800b3be:	3800      	subs	r0, #0
 800b3c0:	bf18      	it	ne
 800b3c2:	2001      	movne	r0, #1
 800b3c4:	f380 0010 	usat	r0, #16, r0
 800b3c8:	9900      	ldr	r1, [sp, #0]
 800b3ca:	8030      	strh	r0, [r6, #0]
 800b3cc:	444d      	add	r5, r9
 800b3ce:	45aa      	cmp	sl, r5
 800b3d0:	440e      	add	r6, r1
 800b3d2:	f67f a885 	bls.w	800a4e0 <forward_cast+0xd0>
 800b3d6:	497d      	ldr	r1, [pc, #500]	; (800b5cc <forward_cast+0x11bc>)
 800b3d8:	428c      	cmp	r4, r1
 800b3da:	f001 87b3 	beq.w	800d344 <forward_cast+0x2f34>
 800b3de:	dde1      	ble.n	800b3a4 <forward_cast+0xf94>
 800b3e0:	4544      	cmp	r4, r8
 800b3e2:	f002 8153 	beq.w	800d68c <forward_cast+0x327c>
 800b3e6:	f340 8257 	ble.w	800b898 <forward_cast+0x1488>
 800b3ea:	42bc      	cmp	r4, r7
 800b3ec:	f040 8427 	bne.w	800bc3e <forward_cast+0x182e>
 800b3f0:	edd5 7a00 	vldr	s15, [r5]
 800b3f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3f8:	ee17 0a90 	vmov	r0, s15
 800b3fc:	e7e2      	b.n	800b3c4 <forward_cast+0xfb4>
 800b3fe:	4555      	cmp	r5, sl
 800b400:	f4bf a86e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b404:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800b5d0 <forward_cast+0x11c0>
 800b408:	2700      	movs	r7, #0
 800b40a:	e01a      	b.n	800b442 <forward_cast+0x1032>
 800b40c:	429c      	cmp	r4, r3
 800b40e:	f002 835a 	beq.w	800dac6 <forward_cast+0x36b6>
 800b412:	f340 8238 	ble.w	800b886 <forward_cast+0x1476>
 800b416:	496a      	ldr	r1, [pc, #424]	; (800b5c0 <forward_cast+0x11b0>)
 800b418:	428c      	cmp	r4, r1
 800b41a:	f001 85a4 	beq.w	800cf66 <forward_cast+0x2b56>
 800b41e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800b422:	428c      	cmp	r4, r1
 800b424:	f040 8410 	bne.w	800bc48 <forward_cast+0x1838>
 800b428:	7828      	ldrb	r0, [r5, #0]
 800b42a:	3800      	subs	r0, #0
 800b42c:	bf18      	it	ne
 800b42e:	2001      	movne	r0, #1
 800b430:	f380 0010 	usat	r0, #16, r0
 800b434:	9900      	ldr	r1, [sp, #0]
 800b436:	55f0      	strb	r0, [r6, r7]
 800b438:	444d      	add	r5, r9
 800b43a:	45aa      	cmp	sl, r5
 800b43c:	440f      	add	r7, r1
 800b43e:	f67f a84f 	bls.w	800a4e0 <forward_cast+0xd0>
 800b442:	455c      	cmp	r4, fp
 800b444:	f001 85f2 	beq.w	800d02c <forward_cast+0x2c1c>
 800b448:	dde0      	ble.n	800b40c <forward_cast+0xffc>
 800b44a:	4544      	cmp	r4, r8
 800b44c:	f002 86a5 	beq.w	800e19a <forward_cast+0x3d8a>
 800b450:	f340 81ae 	ble.w	800b7b0 <forward_cast+0x13a0>
 800b454:	4958      	ldr	r1, [pc, #352]	; (800b5b8 <forward_cast+0x11a8>)
 800b456:	428c      	cmp	r4, r1
 800b458:	f040 83f6 	bne.w	800bc48 <forward_cast+0x1838>
 800b45c:	edd5 7a00 	vldr	s15, [r5]
 800b460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b464:	ee17 0a90 	vmov	r0, s15
 800b468:	e7e2      	b.n	800b430 <forward_cast+0x1020>
 800b46a:	4555      	cmp	r5, sl
 800b46c:	f4bf a838 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b470:	4a53      	ldr	r2, [pc, #332]	; (800b5c0 <forward_cast+0x11b0>)
 800b472:	f04f 0800 	mov.w	r8, #0
 800b476:	e018      	b.n	800b4aa <forward_cast+0x109a>
 800b478:	4953      	ldr	r1, [pc, #332]	; (800b5c8 <forward_cast+0x11b8>)
 800b47a:	428c      	cmp	r4, r1
 800b47c:	f001 85c6 	beq.w	800d00c <forward_cast+0x2bfc>
 800b480:	f340 82a2 	ble.w	800b9c8 <forward_cast+0x15b8>
 800b484:	4294      	cmp	r4, r2
 800b486:	f001 8680 	beq.w	800d18a <forward_cast+0x2d7a>
 800b48a:	494e      	ldr	r1, [pc, #312]	; (800b5c4 <forward_cast+0x11b4>)
 800b48c:	428c      	cmp	r4, r1
 800b48e:	f040 83cb 	bne.w	800bc28 <forward_cast+0x1818>
 800b492:	7829      	ldrb	r1, [r5, #0]
 800b494:	3900      	subs	r1, #0
 800b496:	bf18      	it	ne
 800b498:	2101      	movne	r1, #1
 800b49a:	f806 1008 	strb.w	r1, [r6, r8]
 800b49e:	444d      	add	r5, r9
 800b4a0:	9900      	ldr	r1, [sp, #0]
 800b4a2:	45aa      	cmp	sl, r5
 800b4a4:	4488      	add	r8, r1
 800b4a6:	f67f a81b 	bls.w	800a4e0 <forward_cast+0xd0>
 800b4aa:	455c      	cmp	r4, fp
 800b4ac:	f000 8295 	beq.w	800b9da <forward_cast+0x15ca>
 800b4b0:	dde2      	ble.n	800b478 <forward_cast+0x1068>
 800b4b2:	4947      	ldr	r1, [pc, #284]	; (800b5d0 <forward_cast+0x11c0>)
 800b4b4:	428c      	cmp	r4, r1
 800b4b6:	f002 8681 	beq.w	800e1bc <forward_cast+0x3dac>
 800b4ba:	f340 8364 	ble.w	800bb86 <forward_cast+0x1776>
 800b4be:	42bc      	cmp	r4, r7
 800b4c0:	f040 83b2 	bne.w	800bc28 <forward_cast+0x1818>
 800b4c4:	edd5 7a00 	vldr	s15, [r5]
 800b4c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4cc:	edcd 7a01 	vstr	s15, [sp, #4]
 800b4d0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800b4d4:	e7e1      	b.n	800b49a <forward_cast+0x108a>
 800b4d6:	4555      	cmp	r5, sl
 800b4d8:	bf38      	it	cc
 800b4da:	f04f 0800 	movcc.w	r8, #0
 800b4de:	d31e      	bcc.n	800b51e <forward_cast+0x110e>
 800b4e0:	f7fe bffe 	b.w	800a4e0 <forward_cast+0xd0>
 800b4e4:	4938      	ldr	r1, [pc, #224]	; (800b5c8 <forward_cast+0x11b8>)
 800b4e6:	428c      	cmp	r4, r1
 800b4e8:	f001 8629 	beq.w	800d13e <forward_cast+0x2d2e>
 800b4ec:	f340 8154 	ble.w	800b798 <forward_cast+0x1388>
 800b4f0:	4933      	ldr	r1, [pc, #204]	; (800b5c0 <forward_cast+0x11b0>)
 800b4f2:	428c      	cmp	r4, r1
 800b4f4:	f001 8615 	beq.w	800d122 <forward_cast+0x2d12>
 800b4f8:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800b4fc:	428c      	cmp	r4, r1
 800b4fe:	f040 83a1 	bne.w	800bc44 <forward_cast+0x1834>
 800b502:	7828      	ldrb	r0, [r5, #0]
 800b504:	3800      	subs	r0, #0
 800b506:	bf18      	it	ne
 800b508:	2001      	movne	r0, #1
 800b50a:	f300 000f 	ssat	r0, #16, r0
 800b50e:	9900      	ldr	r1, [sp, #0]
 800b510:	f806 0008 	strb.w	r0, [r6, r8]
 800b514:	444d      	add	r5, r9
 800b516:	45aa      	cmp	sl, r5
 800b518:	4488      	add	r8, r1
 800b51a:	f67e afe1 	bls.w	800a4e0 <forward_cast+0xd0>
 800b51e:	455c      	cmp	r4, fp
 800b520:	f001 8580 	beq.w	800d024 <forward_cast+0x2c14>
 800b524:	ddde      	ble.n	800b4e4 <forward_cast+0x10d4>
 800b526:	492a      	ldr	r1, [pc, #168]	; (800b5d0 <forward_cast+0x11c0>)
 800b528:	428c      	cmp	r4, r1
 800b52a:	f002 82be 	beq.w	800daaa <forward_cast+0x369a>
 800b52e:	f340 8257 	ble.w	800b9e0 <forward_cast+0x15d0>
 800b532:	4294      	cmp	r4, r2
 800b534:	f040 8386 	bne.w	800bc44 <forward_cast+0x1834>
 800b538:	edd5 7a00 	vldr	s15, [r5]
 800b53c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b540:	ee17 0a90 	vmov	r0, s15
 800b544:	e7e1      	b.n	800b50a <forward_cast+0x10fa>
 800b546:	4555      	cmp	r5, sl
 800b548:	f4be afca 	bcs.w	800a4e0 <forward_cast+0xd0>
 800b54c:	9f00      	ldr	r7, [sp, #0]
 800b54e:	4628      	mov	r0, r5
 800b550:	4621      	mov	r1, r4
 800b552:	f7fe fee7 	bl	800a324 <_array_handle_get_as_float>
 800b556:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55e:	444d      	add	r5, r9
 800b560:	bf14      	ite	ne
 800b562:	2301      	movne	r3, #1
 800b564:	2300      	moveq	r3, #0
 800b566:	45aa      	cmp	sl, r5
 800b568:	7033      	strb	r3, [r6, #0]
 800b56a:	443e      	add	r6, r7
 800b56c:	d8ef      	bhi.n	800b54e <forward_cast+0x113e>
 800b56e:	f7fe bfb7 	b.w	800a4e0 <forward_cast+0xd0>
 800b572:	4918      	ldr	r1, [pc, #96]	; (800b5d4 <forward_cast+0x11c4>)
 800b574:	428c      	cmp	r4, r1
 800b576:	f001 877a 	beq.w	800d46e <forward_cast+0x305e>
 800b57a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b57e:	428c      	cmp	r4, r1
 800b580:	f040 8365 	bne.w	800bc4e <forward_cast+0x183e>
 800b584:	8829      	ldrh	r1, [r5, #0]
 800b586:	ee07 1a90 	vmov	s15, r1
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	f7ff bbc6 	b.w	800ad1e <forward_cast+0x90e>
 800b592:	4910      	ldr	r1, [pc, #64]	; (800b5d4 <forward_cast+0x11c4>)
 800b594:	428c      	cmp	r4, r1
 800b596:	f001 877e 	beq.w	800d496 <forward_cast+0x3086>
 800b59a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b59e:	428c      	cmp	r4, r1
 800b5a0:	f040 8359 	bne.w	800bc56 <forward_cast+0x1846>
 800b5a4:	8829      	ldrh	r1, [r5, #0]
 800b5a6:	ee07 1a90 	vmov	s15, r1
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	f7ff baeb 	b.w	800ab88 <forward_cast+0x778>
 800b5b2:	bf00      	nop
 800b5b4:	00841040 	.word	0x00841040
 800b5b8:	01821040 	.word	0x01821040
 800b5bc:	00840840 	.word	0x00840840
 800b5c0:	00042040 	.word	0x00042040
 800b5c4:	00060440 	.word	0x00060440
 800b5c8:	00041040 	.word	0x00041040
 800b5cc:	00840440 	.word	0x00840440
 800b5d0:	00842040 	.word	0x00842040
 800b5d4:	00040440 	.word	0x00040440
 800b5d8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b5dc:	428c      	cmp	r4, r1
 800b5de:	f43f ae0b 	beq.w	800b1f8 <forward_cast+0xde8>
 800b5e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b5e6:	428c      	cmp	r4, r1
 800b5e8:	f040 833c 	bne.w	800bc64 <forward_cast+0x1854>
 800b5ec:	8829      	ldrh	r1, [r5, #0]
 800b5ee:	3900      	subs	r1, #0
 800b5f0:	bf18      	it	ne
 800b5f2:	2101      	movne	r1, #1
 800b5f4:	e604      	b.n	800b200 <forward_cast+0xdf0>
 800b5f6:	455c      	cmp	r4, fp
 800b5f8:	f001 86f1 	beq.w	800d3de <forward_cast+0x2fce>
 800b5fc:	49c3      	ldr	r1, [pc, #780]	; (800b90c <forward_cast+0x14fc>)
 800b5fe:	428c      	cmp	r4, r1
 800b600:	f040 8330 	bne.w	800bc64 <forward_cast+0x1854>
 800b604:	edd5 7a00 	vldr	s15, [r5]
 800b608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b60c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b614:	bf14      	ite	ne
 800b616:	2101      	movne	r1, #1
 800b618:	2100      	moveq	r1, #0
 800b61a:	e5f1      	b.n	800b200 <forward_cast+0xdf0>
 800b61c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b620:	428c      	cmp	r4, r1
 800b622:	f001 871b 	beq.w	800d45c <forward_cast+0x304c>
 800b626:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b62a:	428c      	cmp	r4, r1
 800b62c:	f040 8317 	bne.w	800bc5e <forward_cast+0x184e>
 800b630:	8828      	ldrh	r0, [r5, #0]
 800b632:	f7ff ba0f 	b.w	800aa54 <forward_cast+0x644>
 800b636:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b63a:	428c      	cmp	r4, r1
 800b63c:	f002 8395 	beq.w	800dd6a <forward_cast+0x395a>
 800b640:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b644:	428c      	cmp	r4, r1
 800b646:	f040 8310 	bne.w	800bc6a <forward_cast+0x185a>
 800b64a:	8828      	ldrh	r0, [r5, #0]
 800b64c:	e59d      	b.n	800b18a <forward_cast+0xd7a>
 800b64e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b652:	428c      	cmp	r4, r1
 800b654:	f002 813c 	beq.w	800d8d0 <forward_cast+0x34c0>
 800b658:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b65c:	428c      	cmp	r4, r1
 800b65e:	f040 831c 	bne.w	800bc9a <forward_cast+0x188a>
 800b662:	8828      	ldrh	r0, [r5, #0]
 800b664:	e553      	b.n	800b10e <forward_cast+0xcfe>
 800b666:	42bc      	cmp	r4, r7
 800b668:	f002 82e9 	beq.w	800dc3e <forward_cast+0x382e>
 800b66c:	49a8      	ldr	r1, [pc, #672]	; (800b910 <forward_cast+0x1500>)
 800b66e:	428c      	cmp	r4, r1
 800b670:	f040 8307 	bne.w	800bc82 <forward_cast+0x1872>
 800b674:	8828      	ldrh	r0, [r5, #0]
 800b676:	f7ff b871 	b.w	800a75c <forward_cast+0x34c>
 800b67a:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b67e:	428c      	cmp	r4, r1
 800b680:	f002 8199 	beq.w	800d9b6 <forward_cast+0x35a6>
 800b684:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b688:	428c      	cmp	r4, r1
 800b68a:	f040 830c 	bne.w	800bca6 <forward_cast+0x1896>
 800b68e:	8829      	ldrh	r1, [r5, #0]
 800b690:	ee07 1a90 	vmov	s15, r1
 800b694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b698:	f7ff bb82 	b.w	800ada0 <forward_cast+0x990>
 800b69c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b6a0:	428c      	cmp	r4, r1
 800b6a2:	f002 837c 	beq.w	800dd9e <forward_cast+0x398e>
 800b6a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6aa:	428c      	cmp	r4, r1
 800b6ac:	f040 82e6 	bne.w	800bc7c <forward_cast+0x186c>
 800b6b0:	f9b5 1000 	ldrsh.w	r1, [r5]
 800b6b4:	f7ff bbea 	b.w	800ae8c <forward_cast+0xa7c>
 800b6b8:	4544      	cmp	r4, r8
 800b6ba:	f002 8363 	beq.w	800dd84 <forward_cast+0x3974>
 800b6be:	4994      	ldr	r1, [pc, #592]	; (800b910 <forward_cast+0x1500>)
 800b6c0:	428c      	cmp	r4, r1
 800b6c2:	f040 82e7 	bne.w	800bc94 <forward_cast+0x1884>
 800b6c6:	8828      	ldrh	r0, [r5, #0]
 800b6c8:	f7fe bf43 	b.w	800a552 <forward_cast+0x142>
 800b6cc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b6d0:	428c      	cmp	r4, r1
 800b6d2:	f002 82f8 	beq.w	800dcc6 <forward_cast+0x38b6>
 800b6d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6da:	428c      	cmp	r4, r1
 800b6dc:	f040 82d4 	bne.w	800bc88 <forward_cast+0x1878>
 800b6e0:	8828      	ldrh	r0, [r5, #0]
 800b6e2:	f7ff b9f7 	b.w	800aad4 <forward_cast+0x6c4>
 800b6e6:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b6ea:	428c      	cmp	r4, r1
 800b6ec:	f002 81ac 	beq.w	800da48 <forward_cast+0x3638>
 800b6f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6f4:	428c      	cmp	r4, r1
 800b6f6:	f040 82df 	bne.w	800bcb8 <forward_cast+0x18a8>
 800b6fa:	8828      	ldrh	r0, [r5, #0]
 800b6fc:	e5bb      	b.n	800b276 <forward_cast+0xe66>
 800b6fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b702:	428c      	cmp	r4, r1
 800b704:	f002 82d2 	beq.w	800dcac <forward_cast+0x389c>
 800b708:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b70c:	428c      	cmp	r4, r1
 800b70e:	f040 82b2 	bne.w	800bc76 <forward_cast+0x1866>
 800b712:	f9b5 1000 	ldrsh.w	r1, [r5]
 800b716:	f7ff bb7d 	b.w	800ae14 <forward_cast+0xa04>
 800b71a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b71e:	428c      	cmp	r4, r1
 800b720:	f002 82fa 	beq.w	800dd18 <forward_cast+0x3908>
 800b724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b728:	428c      	cmp	r4, r1
 800b72a:	f040 82b9 	bne.w	800bca0 <forward_cast+0x1890>
 800b72e:	8829      	ldrh	r1, [r5, #0]
 800b730:	f7ff b86c 	b.w	800a80c <forward_cast+0x3fc>
 800b734:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b738:	428c      	cmp	r4, r1
 800b73a:	f002 82a9 	beq.w	800dc90 <forward_cast+0x3880>
 800b73e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b742:	428c      	cmp	r4, r1
 800b744:	f040 82a3 	bne.w	800bc8e <forward_cast+0x187e>
 800b748:	8828      	ldrh	r0, [r5, #0]
 800b74a:	e463      	b.n	800b014 <forward_cast+0xc04>
 800b74c:	4294      	cmp	r4, r2
 800b74e:	f002 8150 	beq.w	800d9f2 <forward_cast+0x35e2>
 800b752:	496f      	ldr	r1, [pc, #444]	; (800b910 <forward_cast+0x1500>)
 800b754:	428c      	cmp	r4, r1
 800b756:	f040 82b2 	bne.w	800bcbe <forward_cast+0x18ae>
 800b75a:	8828      	ldrh	r0, [r5, #0]
 800b75c:	f7ff b8a0 	b.w	800a8a0 <forward_cast+0x490>
 800b760:	42bc      	cmp	r4, r7
 800b762:	d0a5      	beq.n	800b6b0 <forward_cast+0x12a0>
 800b764:	455c      	cmp	r4, fp
 800b766:	f040 8289 	bne.w	800bc7c <forward_cast+0x186c>
 800b76a:	edd5 7a00 	vldr	s15, [r5]
 800b76e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b776:	ee17 1a90 	vmov	r1, s15
 800b77a:	b209      	sxth	r1, r1
 800b77c:	f7ff bb86 	b.w	800ae8c <forward_cast+0xa7c>
 800b780:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b784:	428c      	cmp	r4, r1
 800b786:	f001 84e4 	beq.w	800d152 <forward_cast+0x2d42>
 800b78a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b78e:	428c      	cmp	r4, r1
 800b790:	f040 826e 	bne.w	800bc70 <forward_cast+0x1860>
 800b794:	8828      	ldrh	r0, [r5, #0]
 800b796:	e5bb      	b.n	800b310 <forward_cast+0xf00>
 800b798:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b79c:	428c      	cmp	r4, r1
 800b79e:	f002 850a 	beq.w	800e1b6 <forward_cast+0x3da6>
 800b7a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7a6:	428c      	cmp	r4, r1
 800b7a8:	f040 824c 	bne.w	800bc44 <forward_cast+0x1834>
 800b7ac:	8828      	ldrh	r0, [r5, #0]
 800b7ae:	e6ac      	b.n	800b50a <forward_cast+0x10fa>
 800b7b0:	4958      	ldr	r1, [pc, #352]	; (800b914 <forward_cast+0x1504>)
 800b7b2:	428c      	cmp	r4, r1
 800b7b4:	f001 85c2 	beq.w	800d33c <forward_cast+0x2f2c>
 800b7b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7bc:	428c      	cmp	r4, r1
 800b7be:	f040 8243 	bne.w	800bc48 <forward_cast+0x1838>
 800b7c2:	edd5 7a00 	vldr	s15, [r5]
 800b7c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7ce:	ee17 0a90 	vmov	r0, s15
 800b7d2:	e62d      	b.n	800b430 <forward_cast+0x1020>
 800b7d4:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b7d8:	428c      	cmp	r4, r1
 800b7da:	f002 843c 	beq.w	800e056 <forward_cast+0x3c46>
 800b7de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7e2:	428c      	cmp	r4, r1
 800b7e4:	f040 822b 	bne.w	800bc3e <forward_cast+0x182e>
 800b7e8:	8828      	ldrh	r0, [r5, #0]
 800b7ea:	e5eb      	b.n	800b3c4 <forward_cast+0xfb4>
 800b7ec:	455c      	cmp	r4, fp
 800b7ee:	f001 84f4 	beq.w	800d1da <forward_cast+0x2dca>
 800b7f2:	429c      	cmp	r4, r3
 800b7f4:	f040 821a 	bne.w	800bc2c <forward_cast+0x181c>
 800b7f8:	edd5 7a00 	vldr	s15, [r5]
 800b7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b804:	ee17 0a90 	vmov	r0, s15
 800b808:	f7fe bf45 	b.w	800a696 <forward_cast+0x286>
 800b80c:	42bc      	cmp	r4, r7
 800b80e:	f001 867e 	beq.w	800d50e <forward_cast+0x30fe>
 800b812:	493f      	ldr	r1, [pc, #252]	; (800b910 <forward_cast+0x1500>)
 800b814:	428c      	cmp	r4, r1
 800b816:	f040 8209 	bne.w	800bc2c <forward_cast+0x181c>
 800b81a:	8828      	ldrh	r0, [r5, #0]
 800b81c:	f7fe bf3b 	b.w	800a696 <forward_cast+0x286>
 800b820:	42bc      	cmp	r4, r7
 800b822:	d06f      	beq.n	800b904 <forward_cast+0x14f4>
 800b824:	455c      	cmp	r4, fp
 800b826:	f040 8250 	bne.w	800bcca <forward_cast+0x18ba>
 800b82a:	edd5 7a00 	vldr	s15, [r5]
 800b82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	ee17 1a90 	vmov	r1, s15
 800b83a:	b289      	uxth	r1, r1
 800b83c:	f7fe beda 	b.w	800a5f4 <forward_cast+0x1e4>
 800b840:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800b844:	428c      	cmp	r4, r1
 800b846:	f002 8055 	beq.w	800d8f4 <forward_cast+0x34e4>
 800b84a:	4294      	cmp	r4, r2
 800b84c:	f040 81f4 	bne.w	800bc38 <forward_cast+0x1828>
 800b850:	edd5 7a00 	vldr	s15, [r5]
 800b854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b85c:	ee17 0a90 	vmov	r0, s15
 800b860:	f7ff b8a6 	b.w	800a9b0 <forward_cast+0x5a0>
 800b864:	42bc      	cmp	r4, r7
 800b866:	f000 80d4 	beq.w	800ba12 <forward_cast+0x1602>
 800b86a:	455c      	cmp	r4, fp
 800b86c:	f040 822a 	bne.w	800bcc4 <forward_cast+0x18b4>
 800b870:	edd5 7a00 	vldr	s15, [r5]
 800b874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b87c:	ee17 1a90 	vmov	r1, s15
 800b880:	b209      	sxth	r1, r1
 800b882:	f7ff bb3f 	b.w	800af04 <forward_cast+0xaf4>
 800b886:	4294      	cmp	r4, r2
 800b888:	f001 870e 	beq.w	800d6a8 <forward_cast+0x3298>
 800b88c:	4920      	ldr	r1, [pc, #128]	; (800b910 <forward_cast+0x1500>)
 800b88e:	428c      	cmp	r4, r1
 800b890:	f040 81da 	bne.w	800bc48 <forward_cast+0x1838>
 800b894:	8828      	ldrh	r0, [r5, #0]
 800b896:	e5cb      	b.n	800b430 <forward_cast+0x1020>
 800b898:	455c      	cmp	r4, fp
 800b89a:	f001 8430 	beq.w	800d0fe <forward_cast+0x2cee>
 800b89e:	491b      	ldr	r1, [pc, #108]	; (800b90c <forward_cast+0x14fc>)
 800b8a0:	428c      	cmp	r4, r1
 800b8a2:	f040 81cc 	bne.w	800bc3e <forward_cast+0x182e>
 800b8a6:	edd5 7a00 	vldr	s15, [r5]
 800b8aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8b2:	ee17 0a90 	vmov	r0, s15
 800b8b6:	e585      	b.n	800b3c4 <forward_cast+0xfb4>
 800b8b8:	4917      	ldr	r1, [pc, #92]	; (800b918 <forward_cast+0x1508>)
 800b8ba:	428c      	cmp	r4, r1
 800b8bc:	f002 82ff 	beq.w	800debe <forward_cast+0x3aae>
 800b8c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8c4:	428c      	cmp	r4, r1
 800b8c6:	f040 81b7 	bne.w	800bc38 <forward_cast+0x1828>
 800b8ca:	8828      	ldrh	r0, [r5, #0]
 800b8cc:	f7ff b870 	b.w	800a9b0 <forward_cast+0x5a0>
 800b8d0:	42bc      	cmp	r4, r7
 800b8d2:	d076      	beq.n	800b9c2 <forward_cast+0x15b2>
 800b8d4:	455c      	cmp	r4, fp
 800b8d6:	f040 81ac 	bne.w	800bc32 <forward_cast+0x1822>
 800b8da:	edd5 7a00 	vldr	s15, [r5]
 800b8de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8e6:	ee17 1a90 	vmov	r1, s15
 800b8ea:	b289      	uxth	r1, r1
 800b8ec:	f7ff b824 	b.w	800a938 <forward_cast+0x528>
 800b8f0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b8f4:	428c      	cmp	r4, r1
 800b8f6:	f001 861f 	beq.w	800d538 <forward_cast+0x3128>
 800b8fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8fe:	428c      	cmp	r4, r1
 800b900:	f040 81e3 	bne.w	800bcca <forward_cast+0x18ba>
 800b904:	8829      	ldrh	r1, [r5, #0]
 800b906:	f7fe be75 	b.w	800a5f4 <forward_cast+0x1e4>
 800b90a:	bf00      	nop
 800b90c:	00841040 	.word	0x00841040
 800b910:	00040840 	.word	0x00040840
 800b914:	00840840 	.word	0x00840840
 800b918:	00040440 	.word	0x00040440
 800b91c:	455c      	cmp	r4, fp
 800b91e:	d043      	beq.n	800b9a8 <forward_cast+0x1598>
 800b920:	429c      	cmp	r4, r3
 800b922:	f040 817b 	bne.w	800bc1c <forward_cast+0x180c>
 800b926:	edd5 7a00 	vldr	s15, [r5]
 800b92a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b932:	edcd 7a01 	vstr	s15, [sp, #4]
 800b936:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b93a:	f7ff b99c 	b.w	800ac76 <forward_cast+0x866>
 800b93e:	42bc      	cmp	r4, r7
 800b940:	f001 8623 	beq.w	800d58a <forward_cast+0x317a>
 800b944:	49da      	ldr	r1, [pc, #872]	; (800bcb0 <forward_cast+0x18a0>)
 800b946:	428c      	cmp	r4, r1
 800b948:	f040 8192 	bne.w	800bc70 <forward_cast+0x1860>
 800b94c:	edd5 7a00 	vldr	s15, [r5]
 800b950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b958:	ee17 0a90 	vmov	r0, s15
 800b95c:	e4d8      	b.n	800b310 <forward_cast+0xf00>
 800b95e:	455c      	cmp	r4, fp
 800b960:	f001 846b 	beq.w	800d23a <forward_cast+0x2e2a>
 800b964:	429c      	cmp	r4, r3
 800b966:	f040 818c 	bne.w	800bc82 <forward_cast+0x1872>
 800b96a:	edd5 7a00 	vldr	s15, [r5]
 800b96e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b976:	ee17 0a90 	vmov	r0, s15
 800b97a:	f7fe beef 	b.w	800a75c <forward_cast+0x34c>
 800b97e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b982:	428c      	cmp	r4, r1
 800b984:	d004      	beq.n	800b990 <forward_cast+0x1580>
 800b986:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b98a:	428c      	cmp	r4, r1
 800b98c:	f040 8149 	bne.w	800bc22 <forward_cast+0x1812>
 800b990:	7829      	ldrb	r1, [r5, #0]
 800b992:	f7ff b931 	b.w	800abf8 <forward_cast+0x7e8>
 800b996:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b99a:	428c      	cmp	r4, r1
 800b99c:	d004      	beq.n	800b9a8 <forward_cast+0x1598>
 800b99e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9a2:	428c      	cmp	r4, r1
 800b9a4:	f040 813a 	bne.w	800bc1c <forward_cast+0x180c>
 800b9a8:	7829      	ldrb	r1, [r5, #0]
 800b9aa:	f7ff b964 	b.w	800ac76 <forward_cast+0x866>
 800b9ae:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b9b2:	428c      	cmp	r4, r1
 800b9b4:	f001 833e 	beq.w	800d034 <forward_cast+0x2c24>
 800b9b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9bc:	428c      	cmp	r4, r1
 800b9be:	f040 8138 	bne.w	800bc32 <forward_cast+0x1822>
 800b9c2:	8829      	ldrh	r1, [r5, #0]
 800b9c4:	f7fe bfb8 	b.w	800a938 <forward_cast+0x528>
 800b9c8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b9cc:	428c      	cmp	r4, r1
 800b9ce:	d004      	beq.n	800b9da <forward_cast+0x15ca>
 800b9d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9d4:	428c      	cmp	r4, r1
 800b9d6:	f040 8127 	bne.w	800bc28 <forward_cast+0x1818>
 800b9da:	f995 1000 	ldrsb.w	r1, [r5]
 800b9de:	e55c      	b.n	800b49a <forward_cast+0x108a>
 800b9e0:	42bc      	cmp	r4, r7
 800b9e2:	f002 8101 	beq.w	800dbe8 <forward_cast+0x37d8>
 800b9e6:	429c      	cmp	r4, r3
 800b9e8:	f040 812c 	bne.w	800bc44 <forward_cast+0x1834>
 800b9ec:	edd5 7a00 	vldr	s15, [r5]
 800b9f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9f8:	ee17 0a90 	vmov	r0, s15
 800b9fc:	e585      	b.n	800b50a <forward_cast+0x10fa>
 800b9fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ba02:	428c      	cmp	r4, r1
 800ba04:	f001 8661 	beq.w	800d6ca <forward_cast+0x32ba>
 800ba08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba0c:	428c      	cmp	r4, r1
 800ba0e:	f040 8159 	bne.w	800bcc4 <forward_cast+0x18b4>
 800ba12:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ba16:	f7ff ba75 	b.w	800af04 <forward_cast+0xaf4>
 800ba1a:	455c      	cmp	r4, fp
 800ba1c:	d0b8      	beq.n	800b990 <forward_cast+0x1580>
 800ba1e:	429c      	cmp	r4, r3
 800ba20:	f040 80ff 	bne.w	800bc22 <forward_cast+0x1812>
 800ba24:	edd5 7a00 	vldr	s15, [r5]
 800ba28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba30:	edcd 7a01 	vstr	s15, [sp, #4]
 800ba34:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ba38:	f7ff b8de 	b.w	800abf8 <forward_cast+0x7e8>
 800ba3c:	499d      	ldr	r1, [pc, #628]	; (800bcb4 <forward_cast+0x18a4>)
 800ba3e:	428c      	cmp	r4, r1
 800ba40:	f001 840d 	beq.w	800d25e <forward_cast+0x2e4e>
 800ba44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba48:	428c      	cmp	r4, r1
 800ba4a:	f040 8104 	bne.w	800bc56 <forward_cast+0x1846>
 800ba4e:	edd5 7a00 	vldr	s15, [r5]
 800ba52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba56:	f7ff b897 	b.w	800ab88 <forward_cast+0x778>
 800ba5a:	4996      	ldr	r1, [pc, #600]	; (800bcb4 <forward_cast+0x18a4>)
 800ba5c:	428c      	cmp	r4, r1
 800ba5e:	f001 8414 	beq.w	800d28a <forward_cast+0x2e7a>
 800ba62:	429c      	cmp	r4, r3
 800ba64:	f040 8110 	bne.w	800bc88 <forward_cast+0x1878>
 800ba68:	edd5 7a00 	vldr	s15, [r5]
 800ba6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba74:	ee17 0a90 	vmov	r0, s15
 800ba78:	f7ff b82c 	b.w	800aad4 <forward_cast+0x6c4>
 800ba7c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ba80:	428c      	cmp	r4, r1
 800ba82:	f001 875c 	beq.w	800d93e <forward_cast+0x352e>
 800ba86:	4544      	cmp	r4, r8
 800ba88:	f040 80e9 	bne.w	800bc5e <forward_cast+0x184e>
 800ba8c:	edd5 7a00 	vldr	s15, [r5]
 800ba90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba98:	ee17 0a90 	vmov	r0, s15
 800ba9c:	f7fe bfda 	b.w	800aa54 <forward_cast+0x644>
 800baa0:	429c      	cmp	r4, r3
 800baa2:	f002 8372 	beq.w	800e18a <forward_cast+0x3d7a>
 800baa6:	42bc      	cmp	r4, r7
 800baa8:	f040 80fd 	bne.w	800bca6 <forward_cast+0x1896>
 800baac:	edd5 7a00 	vldr	s15, [r5]
 800bab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800babc:	f7ff b970 	b.w	800ada0 <forward_cast+0x990>
 800bac0:	42bc      	cmp	r4, r7
 800bac2:	f002 830b 	beq.w	800e0dc <forward_cast+0x3ccc>
 800bac6:	455c      	cmp	r4, fp
 800bac8:	f040 80e7 	bne.w	800bc9a <forward_cast+0x188a>
 800bacc:	edd5 7a00 	vldr	s15, [r5]
 800bad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bad8:	ee17 0a90 	vmov	r0, s15
 800badc:	f7ff bb17 	b.w	800b10e <forward_cast+0xcfe>
 800bae0:	42bc      	cmp	r4, r7
 800bae2:	f43f ae24 	beq.w	800b72e <forward_cast+0x131e>
 800bae6:	455c      	cmp	r4, fp
 800bae8:	f040 80da 	bne.w	800bca0 <forward_cast+0x1890>
 800baec:	edd5 7a00 	vldr	s15, [r5]
 800baf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baf8:	ee17 1a90 	vmov	r1, s15
 800bafc:	b289      	uxth	r1, r1
 800bafe:	f7fe be85 	b.w	800a80c <forward_cast+0x3fc>
 800bb02:	429c      	cmp	r4, r3
 800bb04:	f001 8514 	beq.w	800d530 <forward_cast+0x3120>
 800bb08:	4294      	cmp	r4, r2
 800bb0a:	f040 80c3 	bne.w	800bc94 <forward_cast+0x1884>
 800bb0e:	edd5 7a00 	vldr	s15, [r5]
 800bb12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb1a:	ee17 0a90 	vmov	r0, s15
 800bb1e:	f7fe bd18 	b.w	800a552 <forward_cast+0x142>
 800bb22:	429c      	cmp	r4, r3
 800bb24:	f001 86f9 	beq.w	800d91a <forward_cast+0x350a>
 800bb28:	4294      	cmp	r4, r2
 800bb2a:	f040 80b0 	bne.w	800bc8e <forward_cast+0x187e>
 800bb2e:	edd5 7a00 	vldr	s15, [r5]
 800bb32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb3a:	ee17 0a90 	vmov	r0, s15
 800bb3e:	f7ff ba69 	b.w	800b014 <forward_cast+0xc04>
 800bb42:	42bc      	cmp	r4, r7
 800bb44:	f43f ade5 	beq.w	800b712 <forward_cast+0x1302>
 800bb48:	455c      	cmp	r4, fp
 800bb4a:	f040 8094 	bne.w	800bc76 <forward_cast+0x1866>
 800bb4e:	edd5 7a00 	vldr	s15, [r5]
 800bb52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb5a:	ee17 1a90 	vmov	r1, s15
 800bb5e:	b209      	sxth	r1, r1
 800bb60:	f7ff b958 	b.w	800ae14 <forward_cast+0xa04>
 800bb64:	455c      	cmp	r4, fp
 800bb66:	f002 8339 	beq.w	800e1dc <forward_cast+0x3dcc>
 800bb6a:	4951      	ldr	r1, [pc, #324]	; (800bcb0 <forward_cast+0x18a0>)
 800bb6c:	428c      	cmp	r4, r1
 800bb6e:	f040 80a3 	bne.w	800bcb8 <forward_cast+0x18a8>
 800bb72:	edd5 7a00 	vldr	s15, [r5]
 800bb76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb7e:	ee17 0a90 	vmov	r0, s15
 800bb82:	f7ff bb78 	b.w	800b276 <forward_cast+0xe66>
 800bb86:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bb8a:	428c      	cmp	r4, r1
 800bb8c:	f43f af25 	beq.w	800b9da <forward_cast+0x15ca>
 800bb90:	429c      	cmp	r4, r3
 800bb92:	d149      	bne.n	800bc28 <forward_cast+0x1818>
 800bb94:	edd5 7a00 	vldr	s15, [r5]
 800bb98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bba0:	edcd 7a01 	vstr	s15, [sp, #4]
 800bba4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800bba8:	e477      	b.n	800b49a <forward_cast+0x108a>
 800bbaa:	429c      	cmp	r4, r3
 800bbac:	f001 86d9 	beq.w	800d962 <forward_cast+0x3552>
 800bbb0:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 800bbb4:	428c      	cmp	r4, r1
 800bbb6:	f040 8082 	bne.w	800bcbe <forward_cast+0x18ae>
 800bbba:	edd5 7a00 	vldr	s15, [r5]
 800bbbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbc6:	ee17 0a90 	vmov	r0, s15
 800bbca:	f7fe be69 	b.w	800a8a0 <forward_cast+0x490>
 800bbce:	429c      	cmp	r4, r3
 800bbd0:	f001 84ed 	beq.w	800d5ae <forward_cast+0x319e>
 800bbd4:	4294      	cmp	r4, r2
 800bbd6:	d13a      	bne.n	800bc4e <forward_cast+0x183e>
 800bbd8:	edd5 7a00 	vldr	s15, [r5]
 800bbdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe8:	f7ff b899 	b.w	800ad1e <forward_cast+0x90e>
 800bbec:	455c      	cmp	r4, fp
 800bbee:	f001 8463 	beq.w	800d4b8 <forward_cast+0x30a8>
 800bbf2:	4544      	cmp	r4, r8
 800bbf4:	d139      	bne.n	800bc6a <forward_cast+0x185a>
 800bbf6:	edd5 7a00 	vldr	s15, [r5]
 800bbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc02:	ee17 0a90 	vmov	r0, s15
 800bc06:	f7ff bac0 	b.w	800b18a <forward_cast+0xd7a>
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	f8c6 8000 	str.w	r8, [r6]
 800bc10:	45aa      	cmp	sl, r5
 800bc12:	441e      	add	r6, r3
 800bc14:	f63f aa48 	bhi.w	800b0a8 <forward_cast+0xc98>
 800bc18:	f7fe bc62 	b.w	800a4e0 <forward_cast+0xd0>
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	f7ff b82a 	b.w	800ac76 <forward_cast+0x866>
 800bc22:	2100      	movs	r1, #0
 800bc24:	f7fe bfe8 	b.w	800abf8 <forward_cast+0x7e8>
 800bc28:	2100      	movs	r1, #0
 800bc2a:	e436      	b.n	800b49a <forward_cast+0x108a>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f7fe bd32 	b.w	800a696 <forward_cast+0x286>
 800bc32:	2100      	movs	r1, #0
 800bc34:	f7fe be80 	b.w	800a938 <forward_cast+0x528>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f7fe beb9 	b.w	800a9b0 <forward_cast+0x5a0>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f7ff bbc0 	b.w	800b3c4 <forward_cast+0xfb4>
 800bc44:	2000      	movs	r0, #0
 800bc46:	e460      	b.n	800b50a <forward_cast+0x10fa>
 800bc48:	2000      	movs	r0, #0
 800bc4a:	f7ff bbf1 	b.w	800b430 <forward_cast+0x1020>
 800bc4e:	eef0 7a48 	vmov.f32	s15, s16
 800bc52:	f7ff b864 	b.w	800ad1e <forward_cast+0x90e>
 800bc56:	eef0 7a48 	vmov.f32	s15, s16
 800bc5a:	f7fe bf95 	b.w	800ab88 <forward_cast+0x778>
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f7fe bef8 	b.w	800aa54 <forward_cast+0x644>
 800bc64:	2100      	movs	r1, #0
 800bc66:	f7ff bacb 	b.w	800b200 <forward_cast+0xdf0>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	f7ff ba8d 	b.w	800b18a <forward_cast+0xd7a>
 800bc70:	2000      	movs	r0, #0
 800bc72:	f7ff bb4d 	b.w	800b310 <forward_cast+0xf00>
 800bc76:	2100      	movs	r1, #0
 800bc78:	f7ff b8cc 	b.w	800ae14 <forward_cast+0xa04>
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	f7ff b905 	b.w	800ae8c <forward_cast+0xa7c>
 800bc82:	2000      	movs	r0, #0
 800bc84:	f7fe bd6a 	b.w	800a75c <forward_cast+0x34c>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f7fe bf23 	b.w	800aad4 <forward_cast+0x6c4>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f7ff b9c0 	b.w	800b014 <forward_cast+0xc04>
 800bc94:	2000      	movs	r0, #0
 800bc96:	f7fe bc5c 	b.w	800a552 <forward_cast+0x142>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7ff ba37 	b.w	800b10e <forward_cast+0xcfe>
 800bca0:	2100      	movs	r1, #0
 800bca2:	f7fe bdb3 	b.w	800a80c <forward_cast+0x3fc>
 800bca6:	eef0 7a48 	vmov.f32	s15, s16
 800bcaa:	f7ff b879 	b.w	800ada0 <forward_cast+0x990>
 800bcae:	bf00      	nop
 800bcb0:	00841040 	.word	0x00841040
 800bcb4:	00840840 	.word	0x00840840
 800bcb8:	2000      	movs	r0, #0
 800bcba:	f7ff badc 	b.w	800b276 <forward_cast+0xe66>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f7fe bdee 	b.w	800a8a0 <forward_cast+0x490>
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f7ff b91d 	b.w	800af04 <forward_cast+0xaf4>
 800bcca:	2100      	movs	r1, #0
 800bccc:	f7fe bc92 	b.w	800a5f4 <forward_cast+0x1e4>
 800bcd0:	4555      	cmp	r5, sl
 800bcd2:	f4be ac05 	bcs.w	800a4e0 <forward_cast+0xd0>
 800bcd6:	4f9c      	ldr	r7, [pc, #624]	; (800bf48 <forward_cast+0x1b38>)
 800bcd8:	4b9c      	ldr	r3, [pc, #624]	; (800bf4c <forward_cast+0x1b3c>)
 800bcda:	4a9d      	ldr	r2, [pc, #628]	; (800bf50 <forward_cast+0x1b40>)
 800bcdc:	e014      	b.n	800bd08 <forward_cast+0x18f8>
 800bcde:	499d      	ldr	r1, [pc, #628]	; (800bf54 <forward_cast+0x1b44>)
 800bce0:	428c      	cmp	r4, r1
 800bce2:	f001 8764 	beq.w	800dbae <forward_cast+0x379e>
 800bce6:	dd21      	ble.n	800bd2c <forward_cast+0x191c>
 800bce8:	429c      	cmp	r4, r3
 800bcea:	f001 8707 	beq.w	800dafc <forward_cast+0x36ec>
 800bcee:	4294      	cmp	r4, r2
 800bcf0:	d137      	bne.n	800bd62 <forward_cast+0x1952>
 800bcf2:	7828      	ldrb	r0, [r5, #0]
 800bcf4:	3800      	subs	r0, #0
 800bcf6:	bf18      	it	ne
 800bcf8:	2001      	movne	r0, #1
 800bcfa:	9900      	ldr	r1, [sp, #0]
 800bcfc:	6030      	str	r0, [r6, #0]
 800bcfe:	444d      	add	r5, r9
 800bd00:	45aa      	cmp	sl, r5
 800bd02:	440e      	add	r6, r1
 800bd04:	f67e abec 	bls.w	800a4e0 <forward_cast+0xd0>
 800bd08:	4544      	cmp	r4, r8
 800bd0a:	f001 8709 	beq.w	800db20 <forward_cast+0x3710>
 800bd0e:	dde6      	ble.n	800bcde <forward_cast+0x18ce>
 800bd10:	4991      	ldr	r1, [pc, #580]	; (800bf58 <forward_cast+0x1b48>)
 800bd12:	428c      	cmp	r4, r1
 800bd14:	f001 86e1 	beq.w	800dada <forward_cast+0x36ca>
 800bd18:	dd13      	ble.n	800bd42 <forward_cast+0x1932>
 800bd1a:	42bc      	cmp	r4, r7
 800bd1c:	d121      	bne.n	800bd62 <forward_cast+0x1952>
 800bd1e:	edd5 7a00 	vldr	s15, [r5]
 800bd22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd26:	ee17 0a90 	vmov	r0, s15
 800bd2a:	e7e6      	b.n	800bcfa <forward_cast+0x18ea>
 800bd2c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800bd30:	428c      	cmp	r4, r1
 800bd32:	f001 86e0 	beq.w	800daf6 <forward_cast+0x36e6>
 800bd36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bd3a:	428c      	cmp	r4, r1
 800bd3c:	d111      	bne.n	800bd62 <forward_cast+0x1952>
 800bd3e:	8828      	ldrh	r0, [r5, #0]
 800bd40:	e7db      	b.n	800bcfa <forward_cast+0x18ea>
 800bd42:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bd46:	428c      	cmp	r4, r1
 800bd48:	f001 86e6 	beq.w	800db18 <forward_cast+0x3708>
 800bd4c:	455c      	cmp	r4, fp
 800bd4e:	d108      	bne.n	800bd62 <forward_cast+0x1952>
 800bd50:	edd5 7a00 	vldr	s15, [r5]
 800bd54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd5c:	ee17 0a90 	vmov	r0, s15
 800bd60:	e7cb      	b.n	800bcfa <forward_cast+0x18ea>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e7c9      	b.n	800bcfa <forward_cast+0x18ea>
 800bd66:	4555      	cmp	r5, sl
 800bd68:	f4be abba 	bcs.w	800a4e0 <forward_cast+0xd0>
 800bd6c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800bf48 <forward_cast+0x1b38>
 800bd70:	4f7a      	ldr	r7, [pc, #488]	; (800bf5c <forward_cast+0x1b4c>)
 800bd72:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 800bf68 <forward_cast+0x1b58>
 800bd76:	4b77      	ldr	r3, [pc, #476]	; (800bf54 <forward_cast+0x1b44>)
 800bd78:	4a74      	ldr	r2, [pc, #464]	; (800bf4c <forward_cast+0x1b3c>)
 800bd7a:	e017      	b.n	800bdac <forward_cast+0x199c>
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	f001 86db 	beq.w	800db38 <forward_cast+0x3728>
 800bd82:	dd26      	ble.n	800bdd2 <forward_cast+0x19c2>
 800bd84:	4294      	cmp	r4, r2
 800bd86:	f001 8700 	beq.w	800db8a <forward_cast+0x377a>
 800bd8a:	4971      	ldr	r1, [pc, #452]	; (800bf50 <forward_cast+0x1b40>)
 800bd8c:	428c      	cmp	r4, r1
 800bd8e:	d139      	bne.n	800be04 <forward_cast+0x19f4>
 800bd90:	7828      	ldrb	r0, [r5, #0]
 800bd92:	3800      	subs	r0, #0
 800bd94:	bf18      	it	ne
 800bd96:	2001      	movne	r0, #1
 800bd98:	f380 0010 	usat	r0, #16, r0
 800bd9c:	9900      	ldr	r1, [sp, #0]
 800bd9e:	444d      	add	r5, r9
 800bda0:	b280      	uxth	r0, r0
 800bda2:	45aa      	cmp	sl, r5
 800bda4:	6030      	str	r0, [r6, #0]
 800bda6:	440e      	add	r6, r1
 800bda8:	f67e ab9a 	bls.w	800a4e0 <forward_cast+0xd0>
 800bdac:	496c      	ldr	r1, [pc, #432]	; (800bf60 <forward_cast+0x1b50>)
 800bdae:	428c      	cmp	r4, r1
 800bdb0:	f001 86be 	beq.w	800db30 <forward_cast+0x3720>
 800bdb4:	dde2      	ble.n	800bd7c <forward_cast+0x196c>
 800bdb6:	4968      	ldr	r1, [pc, #416]	; (800bf58 <forward_cast+0x1b48>)
 800bdb8:	428c      	cmp	r4, r1
 800bdba:	f001 86d5 	beq.w	800db68 <forward_cast+0x3758>
 800bdbe:	dd13      	ble.n	800bde8 <forward_cast+0x19d8>
 800bdc0:	4544      	cmp	r4, r8
 800bdc2:	d11f      	bne.n	800be04 <forward_cast+0x19f4>
 800bdc4:	edd5 7a00 	vldr	s15, [r5]
 800bdc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdcc:	ee17 0a90 	vmov	r0, s15
 800bdd0:	e7e2      	b.n	800bd98 <forward_cast+0x1988>
 800bdd2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bdd6:	428c      	cmp	r4, r1
 800bdd8:	f001 86d4 	beq.w	800db84 <forward_cast+0x3774>
 800bddc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bde0:	428c      	cmp	r4, r1
 800bde2:	d10f      	bne.n	800be04 <forward_cast+0x19f4>
 800bde4:	8828      	ldrh	r0, [r5, #0]
 800bde6:	e7d7      	b.n	800bd98 <forward_cast+0x1988>
 800bde8:	42bc      	cmp	r4, r7
 800bdea:	f001 86dc 	beq.w	800dba6 <forward_cast+0x3796>
 800bdee:	455c      	cmp	r4, fp
 800bdf0:	d108      	bne.n	800be04 <forward_cast+0x19f4>
 800bdf2:	edd5 7a00 	vldr	s15, [r5]
 800bdf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdfe:	ee17 0a90 	vmov	r0, s15
 800be02:	e7c9      	b.n	800bd98 <forward_cast+0x1988>
 800be04:	2000      	movs	r0, #0
 800be06:	e7c7      	b.n	800bd98 <forward_cast+0x1988>
 800be08:	4555      	cmp	r5, sl
 800be0a:	f4be ab69 	bcs.w	800a4e0 <forward_cast+0xd0>
 800be0e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800bf48 <forward_cast+0x1b38>
 800be12:	4b50      	ldr	r3, [pc, #320]	; (800bf54 <forward_cast+0x1b44>)
 800be14:	4a4d      	ldr	r2, [pc, #308]	; (800bf4c <forward_cast+0x1b3c>)
 800be16:	2700      	movs	r7, #0
 800be18:	e016      	b.n	800be48 <forward_cast+0x1a38>
 800be1a:	429c      	cmp	r4, r3
 800be1c:	f001 8468 	beq.w	800d6f0 <forward_cast+0x32e0>
 800be20:	dd24      	ble.n	800be6c <forward_cast+0x1a5c>
 800be22:	4294      	cmp	r4, r2
 800be24:	f001 87cf 	beq.w	800ddc6 <forward_cast+0x39b6>
 800be28:	4949      	ldr	r1, [pc, #292]	; (800bf50 <forward_cast+0x1b40>)
 800be2a:	428c      	cmp	r4, r1
 800be2c:	d13a      	bne.n	800bea4 <forward_cast+0x1a94>
 800be2e:	7828      	ldrb	r0, [r5, #0]
 800be30:	3800      	subs	r0, #0
 800be32:	bf18      	it	ne
 800be34:	2001      	movne	r0, #1
 800be36:	f300 0007 	ssat	r0, #8, r0
 800be3a:	9900      	ldr	r1, [sp, #0]
 800be3c:	55f0      	strb	r0, [r6, r7]
 800be3e:	444d      	add	r5, r9
 800be40:	45aa      	cmp	sl, r5
 800be42:	440f      	add	r7, r1
 800be44:	f67e ab4c 	bls.w	800a4e0 <forward_cast+0xd0>
 800be48:	455c      	cmp	r4, fp
 800be4a:	f001 8460 	beq.w	800d70e <forward_cast+0x32fe>
 800be4e:	dde4      	ble.n	800be1a <forward_cast+0x1a0a>
 800be50:	4941      	ldr	r1, [pc, #260]	; (800bf58 <forward_cast+0x1b48>)
 800be52:	428c      	cmp	r4, r1
 800be54:	f001 87a6 	beq.w	800dda4 <forward_cast+0x3994>
 800be58:	dd12      	ble.n	800be80 <forward_cast+0x1a70>
 800be5a:	4544      	cmp	r4, r8
 800be5c:	d122      	bne.n	800bea4 <forward_cast+0x1a94>
 800be5e:	edd5 7a00 	vldr	s15, [r5]
 800be62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be66:	ee17 0a90 	vmov	r0, s15
 800be6a:	e7e4      	b.n	800be36 <forward_cast+0x1a26>
 800be6c:	493d      	ldr	r1, [pc, #244]	; (800bf64 <forward_cast+0x1b54>)
 800be6e:	428c      	cmp	r4, r1
 800be70:	f001 87a6 	beq.w	800ddc0 <forward_cast+0x39b0>
 800be74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800be78:	428c      	cmp	r4, r1
 800be7a:	d113      	bne.n	800bea4 <forward_cast+0x1a94>
 800be7c:	8828      	ldrh	r0, [r5, #0]
 800be7e:	e7da      	b.n	800be36 <forward_cast+0x1a26>
 800be80:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800be84:	428c      	cmp	r4, r1
 800be86:	f001 87ac 	beq.w	800dde2 <forward_cast+0x39d2>
 800be8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be8e:	428c      	cmp	r4, r1
 800be90:	d108      	bne.n	800bea4 <forward_cast+0x1a94>
 800be92:	edd5 7a00 	vldr	s15, [r5]
 800be96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be9e:	ee17 0a90 	vmov	r0, s15
 800bea2:	e7c8      	b.n	800be36 <forward_cast+0x1a26>
 800bea4:	2000      	movs	r0, #0
 800bea6:	e7c6      	b.n	800be36 <forward_cast+0x1a26>
 800bea8:	4555      	cmp	r5, sl
 800beaa:	f4be ab19 	bcs.w	800a4e0 <forward_cast+0xd0>
 800beae:	4a28      	ldr	r2, [pc, #160]	; (800bf50 <forward_cast+0x1b40>)
 800beb0:	e014      	b.n	800bedc <forward_cast+0x1acc>
 800beb2:	455c      	cmp	r4, fp
 800beb4:	f001 8465 	beq.w	800d782 <forward_cast+0x3372>
 800beb8:	dd22      	ble.n	800bf00 <forward_cast+0x1af0>
 800beba:	4924      	ldr	r1, [pc, #144]	; (800bf4c <forward_cast+0x1b3c>)
 800bebc:	428c      	cmp	r4, r1
 800bebe:	f001 843f 	beq.w	800d740 <forward_cast+0x3330>
 800bec2:	4294      	cmp	r4, r2
 800bec4:	d136      	bne.n	800bf34 <forward_cast+0x1b24>
 800bec6:	7828      	ldrb	r0, [r5, #0]
 800bec8:	3800      	subs	r0, #0
 800beca:	bf18      	it	ne
 800becc:	2001      	movne	r0, #1
 800bece:	9900      	ldr	r1, [sp, #0]
 800bed0:	6030      	str	r0, [r6, #0]
 800bed2:	444d      	add	r5, r9
 800bed4:	45aa      	cmp	sl, r5
 800bed6:	440e      	add	r6, r1
 800bed8:	f67e ab02 	bls.w	800a4e0 <forward_cast+0xd0>
 800bedc:	4544      	cmp	r4, r8
 800bede:	f001 844c 	beq.w	800d77a <forward_cast+0x336a>
 800bee2:	dde6      	ble.n	800beb2 <forward_cast+0x1aa2>
 800bee4:	491c      	ldr	r1, [pc, #112]	; (800bf58 <forward_cast+0x1b48>)
 800bee6:	428c      	cmp	r4, r1
 800bee8:	f001 8419 	beq.w	800d71e <forward_cast+0x330e>
 800beec:	dd12      	ble.n	800bf14 <forward_cast+0x1b04>
 800beee:	42bc      	cmp	r4, r7
 800bef0:	d120      	bne.n	800bf34 <forward_cast+0x1b24>
 800bef2:	edd5 7a00 	vldr	s15, [r5]
 800bef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800befa:	ee17 0a90 	vmov	r0, s15
 800befe:	e7e6      	b.n	800bece <forward_cast+0x1abe>
 800bf00:	4918      	ldr	r1, [pc, #96]	; (800bf64 <forward_cast+0x1b54>)
 800bf02:	428c      	cmp	r4, r1
 800bf04:	f001 8419 	beq.w	800d73a <forward_cast+0x332a>
 800bf08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf0c:	428c      	cmp	r4, r1
 800bf0e:	d111      	bne.n	800bf34 <forward_cast+0x1b24>
 800bf10:	8828      	ldrh	r0, [r5, #0]
 800bf12:	e7dc      	b.n	800bece <forward_cast+0x1abe>
 800bf14:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bf18:	428c      	cmp	r4, r1
 800bf1a:	f001 841f 	beq.w	800d75c <forward_cast+0x334c>
 800bf1e:	429c      	cmp	r4, r3
 800bf20:	d108      	bne.n	800bf34 <forward_cast+0x1b24>
 800bf22:	edd5 7a00 	vldr	s15, [r5]
 800bf26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf2e:	ee17 0a90 	vmov	r0, s15
 800bf32:	e7cc      	b.n	800bece <forward_cast+0x1abe>
 800bf34:	2000      	movs	r0, #0
 800bf36:	e7ca      	b.n	800bece <forward_cast+0x1abe>
 800bf38:	4555      	cmp	r5, sl
 800bf3a:	f4be aad1 	bcs.w	800a4e0 <forward_cast+0xd0>
 800bf3e:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <forward_cast+0x1b58>)
 800bf40:	4a02      	ldr	r2, [pc, #8]	; (800bf4c <forward_cast+0x1b3c>)
 800bf42:	f04f 0800 	mov.w	r8, #0
 800bf46:	e027      	b.n	800bf98 <forward_cast+0x1b88>
 800bf48:	01821040 	.word	0x01821040
 800bf4c:	00042040 	.word	0x00042040
 800bf50:	00060440 	.word	0x00060440
 800bf54:	00041040 	.word	0x00041040
 800bf58:	00842040 	.word	0x00842040
 800bf5c:	00840840 	.word	0x00840840
 800bf60:	00840440 	.word	0x00840440
 800bf64:	00040440 	.word	0x00040440
 800bf68:	00841040 	.word	0x00841040
 800bf6c:	42bc      	cmp	r4, r7
 800bf6e:	f001 8478 	beq.w	800d862 <forward_cast+0x3452>
 800bf72:	dd25      	ble.n	800bfc0 <forward_cast+0x1bb0>
 800bf74:	4294      	cmp	r4, r2
 800bf76:	f001 8464 	beq.w	800d842 <forward_cast+0x3432>
 800bf7a:	49a9      	ldr	r1, [pc, #676]	; (800c220 <forward_cast+0x1e10>)
 800bf7c:	428c      	cmp	r4, r1
 800bf7e:	d13a      	bne.n	800bff6 <forward_cast+0x1be6>
 800bf80:	7829      	ldrb	r1, [r5, #0]
 800bf82:	3900      	subs	r1, #0
 800bf84:	bf18      	it	ne
 800bf86:	2101      	movne	r1, #1
 800bf88:	f806 1008 	strb.w	r1, [r6, r8]
 800bf8c:	444d      	add	r5, r9
 800bf8e:	9900      	ldr	r1, [sp, #0]
 800bf90:	45aa      	cmp	sl, r5
 800bf92:	4488      	add	r8, r1
 800bf94:	f67e aaa4 	bls.w	800a4e0 <forward_cast+0xd0>
 800bf98:	455c      	cmp	r4, fp
 800bf9a:	d018      	beq.n	800bfce <forward_cast+0x1bbe>
 800bf9c:	dde6      	ble.n	800bf6c <forward_cast+0x1b5c>
 800bf9e:	49a1      	ldr	r1, [pc, #644]	; (800c224 <forward_cast+0x1e14>)
 800bfa0:	428c      	cmp	r4, r1
 800bfa2:	f001 843e 	beq.w	800d822 <forward_cast+0x3412>
 800bfa6:	dd15      	ble.n	800bfd4 <forward_cast+0x1bc4>
 800bfa8:	499f      	ldr	r1, [pc, #636]	; (800c228 <forward_cast+0x1e18>)
 800bfaa:	428c      	cmp	r4, r1
 800bfac:	d123      	bne.n	800bff6 <forward_cast+0x1be6>
 800bfae:	edd5 7a00 	vldr	s15, [r5]
 800bfb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfb6:	edcd 7a01 	vstr	s15, [sp, #4]
 800bfba:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800bfbe:	e7e3      	b.n	800bf88 <forward_cast+0x1b78>
 800bfc0:	499a      	ldr	r1, [pc, #616]	; (800c22c <forward_cast+0x1e1c>)
 800bfc2:	428c      	cmp	r4, r1
 800bfc4:	d003      	beq.n	800bfce <forward_cast+0x1bbe>
 800bfc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bfca:	428c      	cmp	r4, r1
 800bfcc:	d113      	bne.n	800bff6 <forward_cast+0x1be6>
 800bfce:	f995 1000 	ldrsb.w	r1, [r5]
 800bfd2:	e7d9      	b.n	800bf88 <forward_cast+0x1b78>
 800bfd4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bfd8:	428c      	cmp	r4, r1
 800bfda:	d0f8      	beq.n	800bfce <forward_cast+0x1bbe>
 800bfdc:	429c      	cmp	r4, r3
 800bfde:	d10a      	bne.n	800bff6 <forward_cast+0x1be6>
 800bfe0:	edd5 7a00 	vldr	s15, [r5]
 800bfe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfec:	edcd 7a01 	vstr	s15, [sp, #4]
 800bff0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800bff4:	e7c8      	b.n	800bf88 <forward_cast+0x1b78>
 800bff6:	2100      	movs	r1, #0
 800bff8:	e7c6      	b.n	800bf88 <forward_cast+0x1b78>
 800bffa:	4555      	cmp	r5, sl
 800bffc:	f4be aa70 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c000:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800c228 <forward_cast+0x1e18>
 800c004:	4f8a      	ldr	r7, [pc, #552]	; (800c230 <forward_cast+0x1e20>)
 800c006:	f8df b238 	ldr.w	fp, [pc, #568]	; 800c240 <forward_cast+0x1e30>
 800c00a:	4b8a      	ldr	r3, [pc, #552]	; (800c234 <forward_cast+0x1e24>)
 800c00c:	4a8a      	ldr	r2, [pc, #552]	; (800c238 <forward_cast+0x1e28>)
 800c00e:	e014      	b.n	800c03a <forward_cast+0x1c2a>
 800c010:	429c      	cmp	r4, r3
 800c012:	f001 83c0 	beq.w	800d796 <forward_cast+0x3386>
 800c016:	dd26      	ble.n	800c066 <forward_cast+0x1c56>
 800c018:	4294      	cmp	r4, r2
 800c01a:	f001 83ea 	beq.w	800d7f2 <forward_cast+0x33e2>
 800c01e:	4980      	ldr	r1, [pc, #512]	; (800c220 <forward_cast+0x1e10>)
 800c020:	428c      	cmp	r4, r1
 800c022:	d13e      	bne.n	800c0a2 <forward_cast+0x1c92>
 800c024:	7829      	ldrb	r1, [r5, #0]
 800c026:	3900      	subs	r1, #0
 800c028:	bf18      	it	ne
 800c02a:	2101      	movne	r1, #1
 800c02c:	6031      	str	r1, [r6, #0]
 800c02e:	444d      	add	r5, r9
 800c030:	9900      	ldr	r1, [sp, #0]
 800c032:	45aa      	cmp	sl, r5
 800c034:	440e      	add	r6, r1
 800c036:	f67e aa53 	bls.w	800a4e0 <forward_cast+0xd0>
 800c03a:	4980      	ldr	r1, [pc, #512]	; (800c23c <forward_cast+0x1e2c>)
 800c03c:	428c      	cmp	r4, r1
 800c03e:	f001 8391 	beq.w	800d764 <forward_cast+0x3354>
 800c042:	dde5      	ble.n	800c010 <forward_cast+0x1c00>
 800c044:	4977      	ldr	r1, [pc, #476]	; (800c224 <forward_cast+0x1e14>)
 800c046:	428c      	cmp	r4, r1
 800c048:	f001 83c2 	beq.w	800d7d0 <forward_cast+0x33c0>
 800c04c:	dd18      	ble.n	800c080 <forward_cast+0x1c70>
 800c04e:	4544      	cmp	r4, r8
 800c050:	d127      	bne.n	800c0a2 <forward_cast+0x1c92>
 800c052:	edd5 7a00 	vldr	s15, [r5]
 800c056:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	bf14      	ite	ne
 800c060:	2101      	movne	r1, #1
 800c062:	2100      	moveq	r1, #0
 800c064:	e7e2      	b.n	800c02c <forward_cast+0x1c1c>
 800c066:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c06a:	428c      	cmp	r4, r1
 800c06c:	d0da      	beq.n	800c024 <forward_cast+0x1c14>
 800c06e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c072:	428c      	cmp	r4, r1
 800c074:	d115      	bne.n	800c0a2 <forward_cast+0x1c92>
 800c076:	8829      	ldrh	r1, [r5, #0]
 800c078:	3900      	subs	r1, #0
 800c07a:	bf18      	it	ne
 800c07c:	2101      	movne	r1, #1
 800c07e:	e7d5      	b.n	800c02c <forward_cast+0x1c1c>
 800c080:	42bc      	cmp	r4, r7
 800c082:	f001 83c7 	beq.w	800d814 <forward_cast+0x3404>
 800c086:	455c      	cmp	r4, fp
 800c088:	d10b      	bne.n	800c0a2 <forward_cast+0x1c92>
 800c08a:	edd5 7a00 	vldr	s15, [r5]
 800c08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c092:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09a:	bf14      	ite	ne
 800c09c:	2101      	movne	r1, #1
 800c09e:	2100      	moveq	r1, #0
 800c0a0:	e7c4      	b.n	800c02c <forward_cast+0x1c1c>
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	e7c2      	b.n	800c02c <forward_cast+0x1c1c>
 800c0a6:	4555      	cmp	r5, sl
 800c0a8:	f4be aa1a 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c0ac:	9f00      	ldr	r7, [sp, #0]
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f7fe f937 	bl	800a324 <_array_handle_get_as_float>
 800c0b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c0ba:	ee17 3a90 	vmov	r3, s15
 800c0be:	f383 0308 	usat	r3, #8, r3
 800c0c2:	444d      	add	r5, r9
 800c0c4:	45aa      	cmp	sl, r5
 800c0c6:	7033      	strb	r3, [r6, #0]
 800c0c8:	443e      	add	r6, r7
 800c0ca:	d8f0      	bhi.n	800c0ae <forward_cast+0x1c9e>
 800c0cc:	f7fe ba08 	b.w	800a4e0 <forward_cast+0xd0>
 800c0d0:	4555      	cmp	r5, sl
 800c0d2:	f4be aa05 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c0d6:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800c228 <forward_cast+0x1e18>
 800c0da:	4f55      	ldr	r7, [pc, #340]	; (800c230 <forward_cast+0x1e20>)
 800c0dc:	f8df b160 	ldr.w	fp, [pc, #352]	; 800c240 <forward_cast+0x1e30>
 800c0e0:	4b54      	ldr	r3, [pc, #336]	; (800c234 <forward_cast+0x1e24>)
 800c0e2:	4a55      	ldr	r2, [pc, #340]	; (800c238 <forward_cast+0x1e28>)
 800c0e4:	e017      	b.n	800c116 <forward_cast+0x1d06>
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	f001 8726 	beq.w	800df38 <forward_cast+0x3b28>
 800c0ec:	dd26      	ble.n	800c13c <forward_cast+0x1d2c>
 800c0ee:	4294      	cmp	r4, r2
 800c0f0:	f001 86f9 	beq.w	800dee6 <forward_cast+0x3ad6>
 800c0f4:	494a      	ldr	r1, [pc, #296]	; (800c220 <forward_cast+0x1e10>)
 800c0f6:	428c      	cmp	r4, r1
 800c0f8:	d139      	bne.n	800c16e <forward_cast+0x1d5e>
 800c0fa:	7828      	ldrb	r0, [r5, #0]
 800c0fc:	3800      	subs	r0, #0
 800c0fe:	bf18      	it	ne
 800c100:	2001      	movne	r0, #1
 800c102:	f380 0008 	usat	r0, #8, r0
 800c106:	9900      	ldr	r1, [sp, #0]
 800c108:	444d      	add	r5, r9
 800c10a:	b2c0      	uxtb	r0, r0
 800c10c:	45aa      	cmp	sl, r5
 800c10e:	6030      	str	r0, [r6, #0]
 800c110:	440e      	add	r6, r1
 800c112:	f67e a9e5 	bls.w	800a4e0 <forward_cast+0xd0>
 800c116:	4949      	ldr	r1, [pc, #292]	; (800c23c <forward_cast+0x1e2c>)
 800c118:	428c      	cmp	r4, r1
 800c11a:	f001 8709 	beq.w	800df30 <forward_cast+0x3b20>
 800c11e:	dde2      	ble.n	800c0e6 <forward_cast+0x1cd6>
 800c120:	4940      	ldr	r1, [pc, #256]	; (800c224 <forward_cast+0x1e14>)
 800c122:	428c      	cmp	r4, r1
 800c124:	f001 86ce 	beq.w	800dec4 <forward_cast+0x3ab4>
 800c128:	dd13      	ble.n	800c152 <forward_cast+0x1d42>
 800c12a:	4544      	cmp	r4, r8
 800c12c:	d11f      	bne.n	800c16e <forward_cast+0x1d5e>
 800c12e:	edd5 7a00 	vldr	s15, [r5]
 800c132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c136:	ee17 0a90 	vmov	r0, s15
 800c13a:	e7e2      	b.n	800c102 <forward_cast+0x1cf2>
 800c13c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c140:	428c      	cmp	r4, r1
 800c142:	f001 86cd 	beq.w	800dee0 <forward_cast+0x3ad0>
 800c146:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c14a:	428c      	cmp	r4, r1
 800c14c:	d10f      	bne.n	800c16e <forward_cast+0x1d5e>
 800c14e:	8828      	ldrh	r0, [r5, #0]
 800c150:	e7d7      	b.n	800c102 <forward_cast+0x1cf2>
 800c152:	42bc      	cmp	r4, r7
 800c154:	f001 86e4 	beq.w	800df20 <forward_cast+0x3b10>
 800c158:	455c      	cmp	r4, fp
 800c15a:	d108      	bne.n	800c16e <forward_cast+0x1d5e>
 800c15c:	edd5 7a00 	vldr	s15, [r5]
 800c160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c168:	ee17 0a90 	vmov	r0, s15
 800c16c:	e7c9      	b.n	800c102 <forward_cast+0x1cf2>
 800c16e:	2000      	movs	r0, #0
 800c170:	e7c7      	b.n	800c102 <forward_cast+0x1cf2>
 800c172:	4555      	cmp	r5, sl
 800c174:	f4be a9b4 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c178:	4a31      	ldr	r2, [pc, #196]	; (800c240 <forward_cast+0x1e30>)
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	e019      	b.n	800c1b4 <forward_cast+0x1da4>
 800c180:	429c      	cmp	r4, r3
 800c182:	f001 8636 	beq.w	800ddf2 <forward_cast+0x39e2>
 800c186:	dd28      	ble.n	800c1da <forward_cast+0x1dca>
 800c188:	492b      	ldr	r1, [pc, #172]	; (800c238 <forward_cast+0x1e28>)
 800c18a:	428c      	cmp	r4, r1
 800c18c:	f001 86ef 	beq.w	800df6e <forward_cast+0x3b5e>
 800c190:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c194:	428c      	cmp	r4, r1
 800c196:	d138      	bne.n	800c20a <forward_cast+0x1dfa>
 800c198:	7828      	ldrb	r0, [r5, #0]
 800c19a:	3800      	subs	r0, #0
 800c19c:	bf18      	it	ne
 800c19e:	2001      	movne	r0, #1
 800c1a0:	f380 0008 	usat	r0, #8, r0
 800c1a4:	9900      	ldr	r1, [sp, #0]
 800c1a6:	f806 0008 	strb.w	r0, [r6, r8]
 800c1aa:	444d      	add	r5, r9
 800c1ac:	45aa      	cmp	sl, r5
 800c1ae:	4488      	add	r8, r1
 800c1b0:	f67e a996 	bls.w	800a4e0 <forward_cast+0xd0>
 800c1b4:	455c      	cmp	r4, fp
 800c1b6:	f001 86b7 	beq.w	800df28 <forward_cast+0x3b18>
 800c1ba:	dde1      	ble.n	800c180 <forward_cast+0x1d70>
 800c1bc:	4919      	ldr	r1, [pc, #100]	; (800c224 <forward_cast+0x1e14>)
 800c1be:	428c      	cmp	r4, r1
 800c1c0:	f001 86c4 	beq.w	800df4c <forward_cast+0x3b3c>
 800c1c4:	dd11      	ble.n	800c1ea <forward_cast+0x1dda>
 800c1c6:	4918      	ldr	r1, [pc, #96]	; (800c228 <forward_cast+0x1e18>)
 800c1c8:	428c      	cmp	r4, r1
 800c1ca:	d11e      	bne.n	800c20a <forward_cast+0x1dfa>
 800c1cc:	edd5 7a00 	vldr	s15, [r5]
 800c1d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1d4:	ee17 0a90 	vmov	r0, s15
 800c1d8:	e7e2      	b.n	800c1a0 <forward_cast+0x1d90>
 800c1da:	42bc      	cmp	r4, r7
 800c1dc:	f001 86c4 	beq.w	800df68 <forward_cast+0x3b58>
 800c1e0:	4918      	ldr	r1, [pc, #96]	; (800c244 <forward_cast+0x1e34>)
 800c1e2:	428c      	cmp	r4, r1
 800c1e4:	d111      	bne.n	800c20a <forward_cast+0x1dfa>
 800c1e6:	8828      	ldrh	r0, [r5, #0]
 800c1e8:	e7da      	b.n	800c1a0 <forward_cast+0x1d90>
 800c1ea:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c1ee:	428c      	cmp	r4, r1
 800c1f0:	f001 86cb 	beq.w	800df8a <forward_cast+0x3b7a>
 800c1f4:	4294      	cmp	r4, r2
 800c1f6:	d108      	bne.n	800c20a <forward_cast+0x1dfa>
 800c1f8:	edd5 7a00 	vldr	s15, [r5]
 800c1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c204:	ee17 0a90 	vmov	r0, s15
 800c208:	e7ca      	b.n	800c1a0 <forward_cast+0x1d90>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e7c8      	b.n	800c1a0 <forward_cast+0x1d90>
 800c20e:	4555      	cmp	r5, sl
 800c210:	f4be a966 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c214:	f8df 800c 	ldr.w	r8, [pc, #12]	; 800c224 <forward_cast+0x1e14>
 800c218:	4b09      	ldr	r3, [pc, #36]	; (800c240 <forward_cast+0x1e30>)
 800c21a:	4a06      	ldr	r2, [pc, #24]	; (800c234 <forward_cast+0x1e24>)
 800c21c:	2700      	movs	r7, #0
 800c21e:	e02c      	b.n	800c27a <forward_cast+0x1e6a>
 800c220:	00060440 	.word	0x00060440
 800c224:	00842040 	.word	0x00842040
 800c228:	01821040 	.word	0x01821040
 800c22c:	00040440 	.word	0x00040440
 800c230:	00840840 	.word	0x00840840
 800c234:	00041040 	.word	0x00041040
 800c238:	00042040 	.word	0x00042040
 800c23c:	00840440 	.word	0x00840440
 800c240:	00841040 	.word	0x00841040
 800c244:	00040840 	.word	0x00040840
 800c248:	4294      	cmp	r4, r2
 800c24a:	f001 86ec 	beq.w	800e026 <forward_cast+0x3c16>
 800c24e:	dd27      	ble.n	800c2a0 <forward_cast+0x1e90>
 800c250:	499d      	ldr	r1, [pc, #628]	; (800c4c8 <forward_cast+0x20b8>)
 800c252:	428c      	cmp	r4, r1
 800c254:	f001 86ae 	beq.w	800dfb4 <forward_cast+0x3ba4>
 800c258:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c25c:	428c      	cmp	r4, r1
 800c25e:	d136      	bne.n	800c2ce <forward_cast+0x1ebe>
 800c260:	7828      	ldrb	r0, [r5, #0]
 800c262:	3800      	subs	r0, #0
 800c264:	bf18      	it	ne
 800c266:	2001      	movne	r0, #1
 800c268:	f300 000f 	ssat	r0, #16, r0
 800c26c:	9900      	ldr	r1, [sp, #0]
 800c26e:	55f0      	strb	r0, [r6, r7]
 800c270:	444d      	add	r5, r9
 800c272:	45aa      	cmp	sl, r5
 800c274:	440f      	add	r7, r1
 800c276:	f67e a933 	bls.w	800a4e0 <forward_cast+0xd0>
 800c27a:	4994      	ldr	r1, [pc, #592]	; (800c4cc <forward_cast+0x20bc>)
 800c27c:	428c      	cmp	r4, r1
 800c27e:	f001 86ce 	beq.w	800e01e <forward_cast+0x3c0e>
 800c282:	dde1      	ble.n	800c248 <forward_cast+0x1e38>
 800c284:	4544      	cmp	r4, r8
 800c286:	f001 8684 	beq.w	800df92 <forward_cast+0x3b82>
 800c28a:	dd11      	ble.n	800c2b0 <forward_cast+0x1ea0>
 800c28c:	4990      	ldr	r1, [pc, #576]	; (800c4d0 <forward_cast+0x20c0>)
 800c28e:	428c      	cmp	r4, r1
 800c290:	d11d      	bne.n	800c2ce <forward_cast+0x1ebe>
 800c292:	edd5 7a00 	vldr	s15, [r5]
 800c296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c29a:	ee17 0a90 	vmov	r0, s15
 800c29e:	e7e3      	b.n	800c268 <forward_cast+0x1e58>
 800c2a0:	455c      	cmp	r4, fp
 800c2a2:	f001 8684 	beq.w	800dfae <forward_cast+0x3b9e>
 800c2a6:	498b      	ldr	r1, [pc, #556]	; (800c4d4 <forward_cast+0x20c4>)
 800c2a8:	428c      	cmp	r4, r1
 800c2aa:	d110      	bne.n	800c2ce <forward_cast+0x1ebe>
 800c2ac:	8828      	ldrh	r0, [r5, #0]
 800c2ae:	e7db      	b.n	800c268 <forward_cast+0x1e58>
 800c2b0:	4989      	ldr	r1, [pc, #548]	; (800c4d8 <forward_cast+0x20c8>)
 800c2b2:	428c      	cmp	r4, r1
 800c2b4:	f001 868c 	beq.w	800dfd0 <forward_cast+0x3bc0>
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d108      	bne.n	800c2ce <forward_cast+0x1ebe>
 800c2bc:	edd5 7a00 	vldr	s15, [r5]
 800c2c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2c8:	ee17 0a90 	vmov	r0, s15
 800c2cc:	e7cc      	b.n	800c268 <forward_cast+0x1e58>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e7ca      	b.n	800c268 <forward_cast+0x1e58>
 800c2d2:	4555      	cmp	r5, sl
 800c2d4:	f4be a904 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c2d8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800c4d0 <forward_cast+0x20c0>
 800c2dc:	4f7e      	ldr	r7, [pc, #504]	; (800c4d8 <forward_cast+0x20c8>)
 800c2de:	f8df b208 	ldr.w	fp, [pc, #520]	; 800c4e8 <forward_cast+0x20d8>
 800c2e2:	4b7e      	ldr	r3, [pc, #504]	; (800c4dc <forward_cast+0x20cc>)
 800c2e4:	4a78      	ldr	r2, [pc, #480]	; (800c4c8 <forward_cast+0x20b8>)
 800c2e6:	e017      	b.n	800c318 <forward_cast+0x1f08>
 800c2e8:	429c      	cmp	r4, r3
 800c2ea:	f001 86de 	beq.w	800e0aa <forward_cast+0x3c9a>
 800c2ee:	dd26      	ble.n	800c33e <forward_cast+0x1f2e>
 800c2f0:	4294      	cmp	r4, r2
 800c2f2:	f001 8682 	beq.w	800dffa <forward_cast+0x3bea>
 800c2f6:	497a      	ldr	r1, [pc, #488]	; (800c4e0 <forward_cast+0x20d0>)
 800c2f8:	428c      	cmp	r4, r1
 800c2fa:	d139      	bne.n	800c370 <forward_cast+0x1f60>
 800c2fc:	7828      	ldrb	r0, [r5, #0]
 800c2fe:	3800      	subs	r0, #0
 800c300:	bf18      	it	ne
 800c302:	2001      	movne	r0, #1
 800c304:	f300 000f 	ssat	r0, #16, r0
 800c308:	9900      	ldr	r1, [sp, #0]
 800c30a:	444d      	add	r5, r9
 800c30c:	b200      	sxth	r0, r0
 800c30e:	45aa      	cmp	sl, r5
 800c310:	6030      	str	r0, [r6, #0]
 800c312:	440e      	add	r6, r1
 800c314:	f67e a8e4 	bls.w	800a4e0 <forward_cast+0xd0>
 800c318:	496c      	ldr	r1, [pc, #432]	; (800c4cc <forward_cast+0x20bc>)
 800c31a:	428c      	cmp	r4, r1
 800c31c:	f001 8565 	beq.w	800ddea <forward_cast+0x39da>
 800c320:	dde2      	ble.n	800c2e8 <forward_cast+0x1ed8>
 800c322:	4970      	ldr	r1, [pc, #448]	; (800c4e4 <forward_cast+0x20d4>)
 800c324:	428c      	cmp	r4, r1
 800c326:	f001 8657 	beq.w	800dfd8 <forward_cast+0x3bc8>
 800c32a:	dd13      	ble.n	800c354 <forward_cast+0x1f44>
 800c32c:	4544      	cmp	r4, r8
 800c32e:	d11f      	bne.n	800c370 <forward_cast+0x1f60>
 800c330:	edd5 7a00 	vldr	s15, [r5]
 800c334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c338:	ee17 0a90 	vmov	r0, s15
 800c33c:	e7e2      	b.n	800c304 <forward_cast+0x1ef4>
 800c33e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c342:	428c      	cmp	r4, r1
 800c344:	f001 8656 	beq.w	800dff4 <forward_cast+0x3be4>
 800c348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c34c:	428c      	cmp	r4, r1
 800c34e:	d10f      	bne.n	800c370 <forward_cast+0x1f60>
 800c350:	8828      	ldrh	r0, [r5, #0]
 800c352:	e7d7      	b.n	800c304 <forward_cast+0x1ef4>
 800c354:	42bc      	cmp	r4, r7
 800c356:	f001 865e 	beq.w	800e016 <forward_cast+0x3c06>
 800c35a:	455c      	cmp	r4, fp
 800c35c:	d108      	bne.n	800c370 <forward_cast+0x1f60>
 800c35e:	edd5 7a00 	vldr	s15, [r5]
 800c362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c36a:	ee17 0a90 	vmov	r0, s15
 800c36e:	e7c9      	b.n	800c304 <forward_cast+0x1ef4>
 800c370:	2000      	movs	r0, #0
 800c372:	e7c7      	b.n	800c304 <forward_cast+0x1ef4>
 800c374:	4555      	cmp	r5, sl
 800c376:	f4be a8b3 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c37a:	4b57      	ldr	r3, [pc, #348]	; (800c4d8 <forward_cast+0x20c8>)
 800c37c:	4a5a      	ldr	r2, [pc, #360]	; (800c4e8 <forward_cast+0x20d8>)
 800c37e:	f04f 0800 	mov.w	r8, #0
 800c382:	e019      	b.n	800c3b8 <forward_cast+0x1fa8>
 800c384:	42bc      	cmp	r4, r7
 800c386:	f001 8542 	beq.w	800de0e <forward_cast+0x39fe>
 800c38a:	dd29      	ble.n	800c3e0 <forward_cast+0x1fd0>
 800c38c:	494e      	ldr	r1, [pc, #312]	; (800c4c8 <forward_cast+0x20b8>)
 800c38e:	428c      	cmp	r4, r1
 800c390:	f001 8558 	beq.w	800de44 <forward_cast+0x3a34>
 800c394:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c398:	428c      	cmp	r4, r1
 800c39a:	d137      	bne.n	800c40c <forward_cast+0x1ffc>
 800c39c:	7828      	ldrb	r0, [r5, #0]
 800c39e:	3800      	subs	r0, #0
 800c3a0:	bf18      	it	ne
 800c3a2:	2001      	movne	r0, #1
 800c3a4:	f380 0010 	usat	r0, #16, r0
 800c3a8:	9900      	ldr	r1, [sp, #0]
 800c3aa:	f806 0008 	strb.w	r0, [r6, r8]
 800c3ae:	444d      	add	r5, r9
 800c3b0:	45aa      	cmp	sl, r5
 800c3b2:	4488      	add	r8, r1
 800c3b4:	f67e a894 	bls.w	800a4e0 <forward_cast+0xd0>
 800c3b8:	4944      	ldr	r1, [pc, #272]	; (800c4cc <forward_cast+0x20bc>)
 800c3ba:	428c      	cmp	r4, r1
 800c3bc:	f001 8523 	beq.w	800de06 <forward_cast+0x39f6>
 800c3c0:	dde0      	ble.n	800c384 <forward_cast+0x1f74>
 800c3c2:	4948      	ldr	r1, [pc, #288]	; (800c4e4 <forward_cast+0x20d4>)
 800c3c4:	428c      	cmp	r4, r1
 800c3c6:	f001 852c 	beq.w	800de22 <forward_cast+0x3a12>
 800c3ca:	dd11      	ble.n	800c3f0 <forward_cast+0x1fe0>
 800c3cc:	4940      	ldr	r1, [pc, #256]	; (800c4d0 <forward_cast+0x20c0>)
 800c3ce:	428c      	cmp	r4, r1
 800c3d0:	d11c      	bne.n	800c40c <forward_cast+0x1ffc>
 800c3d2:	edd5 7a00 	vldr	s15, [r5]
 800c3d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3da:	ee17 0a90 	vmov	r0, s15
 800c3de:	e7e1      	b.n	800c3a4 <forward_cast+0x1f94>
 800c3e0:	455c      	cmp	r4, fp
 800c3e2:	f001 852c 	beq.w	800de3e <forward_cast+0x3a2e>
 800c3e6:	493b      	ldr	r1, [pc, #236]	; (800c4d4 <forward_cast+0x20c4>)
 800c3e8:	428c      	cmp	r4, r1
 800c3ea:	d10f      	bne.n	800c40c <forward_cast+0x1ffc>
 800c3ec:	8828      	ldrh	r0, [r5, #0]
 800c3ee:	e7d9      	b.n	800c3a4 <forward_cast+0x1f94>
 800c3f0:	429c      	cmp	r4, r3
 800c3f2:	f001 8535 	beq.w	800de60 <forward_cast+0x3a50>
 800c3f6:	4294      	cmp	r4, r2
 800c3f8:	d108      	bne.n	800c40c <forward_cast+0x1ffc>
 800c3fa:	edd5 7a00 	vldr	s15, [r5]
 800c3fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c406:	ee17 0a90 	vmov	r0, s15
 800c40a:	e7cb      	b.n	800c3a4 <forward_cast+0x1f94>
 800c40c:	2000      	movs	r0, #0
 800c40e:	e7c9      	b.n	800c3a4 <forward_cast+0x1f94>
 800c410:	4555      	cmp	r5, sl
 800c412:	f4be a865 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c416:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c4d0 <forward_cast+0x20c0>
 800c41a:	4f2f      	ldr	r7, [pc, #188]	; (800c4d8 <forward_cast+0x20c8>)
 800c41c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800c4e8 <forward_cast+0x20d8>
 800c420:	4b2e      	ldr	r3, [pc, #184]	; (800c4dc <forward_cast+0x20cc>)
 800c422:	4a29      	ldr	r2, [pc, #164]	; (800c4c8 <forward_cast+0x20b8>)
 800c424:	e017      	b.n	800c456 <forward_cast+0x2046>
 800c426:	429c      	cmp	r4, r3
 800c428:	f001 8126 	beq.w	800d678 <forward_cast+0x3268>
 800c42c:	dd26      	ble.n	800c47c <forward_cast+0x206c>
 800c42e:	4294      	cmp	r4, r2
 800c430:	f001 8625 	beq.w	800e07e <forward_cast+0x3c6e>
 800c434:	492a      	ldr	r1, [pc, #168]	; (800c4e0 <forward_cast+0x20d0>)
 800c436:	428c      	cmp	r4, r1
 800c438:	d139      	bne.n	800c4ae <forward_cast+0x209e>
 800c43a:	7828      	ldrb	r0, [r5, #0]
 800c43c:	3800      	subs	r0, #0
 800c43e:	bf18      	it	ne
 800c440:	2001      	movne	r0, #1
 800c442:	f380 0010 	usat	r0, #16, r0
 800c446:	9900      	ldr	r1, [sp, #0]
 800c448:	444d      	add	r5, r9
 800c44a:	b280      	uxth	r0, r0
 800c44c:	45aa      	cmp	sl, r5
 800c44e:	6030      	str	r0, [r6, #0]
 800c450:	440e      	add	r6, r1
 800c452:	f67e a845 	bls.w	800a4e0 <forward_cast+0xd0>
 800c456:	491d      	ldr	r1, [pc, #116]	; (800c4cc <forward_cast+0x20bc>)
 800c458:	428c      	cmp	r4, r1
 800c45a:	f001 8622 	beq.w	800e0a2 <forward_cast+0x3c92>
 800c45e:	dde2      	ble.n	800c426 <forward_cast+0x2016>
 800c460:	4920      	ldr	r1, [pc, #128]	; (800c4e4 <forward_cast+0x20d4>)
 800c462:	428c      	cmp	r4, r1
 800c464:	f001 85fa 	beq.w	800e05c <forward_cast+0x3c4c>
 800c468:	dd13      	ble.n	800c492 <forward_cast+0x2082>
 800c46a:	4544      	cmp	r4, r8
 800c46c:	d11f      	bne.n	800c4ae <forward_cast+0x209e>
 800c46e:	edd5 7a00 	vldr	s15, [r5]
 800c472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c476:	ee17 0a90 	vmov	r0, s15
 800c47a:	e7e2      	b.n	800c442 <forward_cast+0x2032>
 800c47c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c480:	428c      	cmp	r4, r1
 800c482:	f001 85f9 	beq.w	800e078 <forward_cast+0x3c68>
 800c486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c48a:	428c      	cmp	r4, r1
 800c48c:	d10f      	bne.n	800c4ae <forward_cast+0x209e>
 800c48e:	8828      	ldrh	r0, [r5, #0]
 800c490:	e7d7      	b.n	800c442 <forward_cast+0x2032>
 800c492:	42bc      	cmp	r4, r7
 800c494:	f001 8601 	beq.w	800e09a <forward_cast+0x3c8a>
 800c498:	455c      	cmp	r4, fp
 800c49a:	d108      	bne.n	800c4ae <forward_cast+0x209e>
 800c49c:	edd5 7a00 	vldr	s15, [r5]
 800c4a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4a8:	ee17 0a90 	vmov	r0, s15
 800c4ac:	e7c9      	b.n	800c442 <forward_cast+0x2032>
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	e7c7      	b.n	800c442 <forward_cast+0x2032>
 800c4b2:	4555      	cmp	r5, sl
 800c4b4:	f4be a814 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4a0a      	ldr	r2, [pc, #40]	; (800c4e8 <forward_cast+0x20d8>)
 800c4be:	464b      	mov	r3, r9
 800c4c0:	46b9      	mov	r9, r7
 800c4c2:	4637      	mov	r7, r6
 800c4c4:	460e      	mov	r6, r1
 800c4c6:	e02a      	b.n	800c51e <forward_cast+0x210e>
 800c4c8:	00042040 	.word	0x00042040
 800c4cc:	00840440 	.word	0x00840440
 800c4d0:	01821040 	.word	0x01821040
 800c4d4:	00040840 	.word	0x00040840
 800c4d8:	00840840 	.word	0x00840840
 800c4dc:	00041040 	.word	0x00041040
 800c4e0:	00060440 	.word	0x00060440
 800c4e4:	00842040 	.word	0x00842040
 800c4e8:	00841040 	.word	0x00841040
 800c4ec:	4544      	cmp	r4, r8
 800c4ee:	f001 80e2 	beq.w	800d6b6 <forward_cast+0x32a6>
 800c4f2:	dd27      	ble.n	800c544 <forward_cast+0x2134>
 800c4f4:	49a5      	ldr	r1, [pc, #660]	; (800c78c <forward_cast+0x237c>)
 800c4f6:	428c      	cmp	r4, r1
 800c4f8:	f001 8606 	beq.w	800e108 <forward_cast+0x3cf8>
 800c4fc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c500:	428c      	cmp	r4, r1
 800c502:	d137      	bne.n	800c574 <forward_cast+0x2164>
 800c504:	7828      	ldrb	r0, [r5, #0]
 800c506:	3800      	subs	r0, #0
 800c508:	bf18      	it	ne
 800c50a:	2001      	movne	r0, #1
 800c50c:	f300 0007 	ssat	r0, #8, r0
 800c510:	9900      	ldr	r1, [sp, #0]
 800c512:	55b8      	strb	r0, [r7, r6]
 800c514:	441d      	add	r5, r3
 800c516:	45aa      	cmp	sl, r5
 800c518:	440e      	add	r6, r1
 800c51a:	f67d afe1 	bls.w	800a4e0 <forward_cast+0xd0>
 800c51e:	454c      	cmp	r4, r9
 800c520:	f001 80c5 	beq.w	800d6ae <forward_cast+0x329e>
 800c524:	dde2      	ble.n	800c4ec <forward_cast+0x20dc>
 800c526:	499a      	ldr	r1, [pc, #616]	; (800c790 <forward_cast+0x2380>)
 800c528:	428c      	cmp	r4, r1
 800c52a:	f001 85db 	beq.w	800e0e4 <forward_cast+0x3cd4>
 800c52e:	dd11      	ble.n	800c554 <forward_cast+0x2144>
 800c530:	4998      	ldr	r1, [pc, #608]	; (800c794 <forward_cast+0x2384>)
 800c532:	428c      	cmp	r4, r1
 800c534:	d11e      	bne.n	800c574 <forward_cast+0x2164>
 800c536:	edd5 7a00 	vldr	s15, [r5]
 800c53a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c53e:	ee17 0a90 	vmov	r0, s15
 800c542:	e7e3      	b.n	800c50c <forward_cast+0x20fc>
 800c544:	455c      	cmp	r4, fp
 800c546:	f001 85dc 	beq.w	800e102 <forward_cast+0x3cf2>
 800c54a:	4993      	ldr	r1, [pc, #588]	; (800c798 <forward_cast+0x2388>)
 800c54c:	428c      	cmp	r4, r1
 800c54e:	d111      	bne.n	800c574 <forward_cast+0x2164>
 800c550:	8828      	ldrh	r0, [r5, #0]
 800c552:	e7db      	b.n	800c50c <forward_cast+0x20fc>
 800c554:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c558:	428c      	cmp	r4, r1
 800c55a:	f001 85e4 	beq.w	800e126 <forward_cast+0x3d16>
 800c55e:	4294      	cmp	r4, r2
 800c560:	d108      	bne.n	800c574 <forward_cast+0x2164>
 800c562:	edd5 7a00 	vldr	s15, [r5]
 800c566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c56a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c56e:	ee17 0a90 	vmov	r0, s15
 800c572:	e7cb      	b.n	800c50c <forward_cast+0x20fc>
 800c574:	2000      	movs	r0, #0
 800c576:	e7c9      	b.n	800c50c <forward_cast+0x20fc>
 800c578:	4555      	cmp	r5, sl
 800c57a:	bf38      	it	cc
 800c57c:	461f      	movcc	r7, r3
 800c57e:	f4bd afaf 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c582:	4621      	mov	r1, r4
 800c584:	4628      	mov	r0, r5
 800c586:	f7fd fecd 	bl	800a324 <_array_handle_get_as_float>
 800c58a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c58e:	ee17 3a90 	vmov	r3, s15
 800c592:	f303 0307 	ssat	r3, #8, r3
 800c596:	444d      	add	r5, r9
 800c598:	b25b      	sxtb	r3, r3
 800c59a:	45aa      	cmp	sl, r5
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	443e      	add	r6, r7
 800c5a0:	d8ef      	bhi.n	800c582 <forward_cast+0x2172>
 800c5a2:	f7fd bf9d 	b.w	800a4e0 <forward_cast+0xd0>
 800c5a6:	4555      	cmp	r5, sl
 800c5a8:	f4bd af9a 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c5ac:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800c794 <forward_cast+0x2384>
 800c5b0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c7b0 <forward_cast+0x23a0>
 800c5b4:	4b79      	ldr	r3, [pc, #484]	; (800c79c <forward_cast+0x238c>)
 800c5b6:	4a7a      	ldr	r2, [pc, #488]	; (800c7a0 <forward_cast+0x2390>)
 800c5b8:	2700      	movs	r7, #0
 800c5ba:	e016      	b.n	800c5ea <forward_cast+0x21da>
 800c5bc:	4294      	cmp	r4, r2
 800c5be:	f000 87fe 	beq.w	800d5be <forward_cast+0x31ae>
 800c5c2:	dd26      	ble.n	800c612 <forward_cast+0x2202>
 800c5c4:	4971      	ldr	r1, [pc, #452]	; (800c78c <forward_cast+0x237c>)
 800c5c6:	428c      	cmp	r4, r1
 800c5c8:	f001 8046 	beq.w	800d658 <forward_cast+0x3248>
 800c5cc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c5d0:	428c      	cmp	r4, r1
 800c5d2:	d137      	bne.n	800c644 <forward_cast+0x2234>
 800c5d4:	7829      	ldrb	r1, [r5, #0]
 800c5d6:	3900      	subs	r1, #0
 800c5d8:	bf18      	it	ne
 800c5da:	2101      	movne	r1, #1
 800c5dc:	55f1      	strb	r1, [r6, r7]
 800c5de:	444d      	add	r5, r9
 800c5e0:	9900      	ldr	r1, [sp, #0]
 800c5e2:	45aa      	cmp	sl, r5
 800c5e4:	440f      	add	r7, r1
 800c5e6:	f67d af7b 	bls.w	800a4e0 <forward_cast+0xd0>
 800c5ea:	496e      	ldr	r1, [pc, #440]	; (800c7a4 <forward_cast+0x2394>)
 800c5ec:	428c      	cmp	r4, r1
 800c5ee:	d018      	beq.n	800c622 <forward_cast+0x2212>
 800c5f0:	dde4      	ble.n	800c5bc <forward_cast+0x21ac>
 800c5f2:	4967      	ldr	r1, [pc, #412]	; (800c790 <forward_cast+0x2380>)
 800c5f4:	428c      	cmp	r4, r1
 800c5f6:	f000 87ee 	beq.w	800d5d6 <forward_cast+0x31c6>
 800c5fa:	dd14      	ble.n	800c626 <forward_cast+0x2216>
 800c5fc:	4544      	cmp	r4, r8
 800c5fe:	d121      	bne.n	800c644 <forward_cast+0x2234>
 800c600:	edd5 7a00 	vldr	s15, [r5]
 800c604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c608:	edcd 7a01 	vstr	s15, [sp, #4]
 800c60c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c610:	e7e4      	b.n	800c5dc <forward_cast+0x21cc>
 800c612:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c616:	428c      	cmp	r4, r1
 800c618:	d003      	beq.n	800c622 <forward_cast+0x2212>
 800c61a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c61e:	428c      	cmp	r4, r1
 800c620:	d110      	bne.n	800c644 <forward_cast+0x2234>
 800c622:	7829      	ldrb	r1, [r5, #0]
 800c624:	e7da      	b.n	800c5dc <forward_cast+0x21cc>
 800c626:	455c      	cmp	r4, fp
 800c628:	d0fb      	beq.n	800c622 <forward_cast+0x2212>
 800c62a:	429c      	cmp	r4, r3
 800c62c:	d10a      	bne.n	800c644 <forward_cast+0x2234>
 800c62e:	edd5 7a00 	vldr	s15, [r5]
 800c632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c63a:	edcd 7a01 	vstr	s15, [sp, #4]
 800c63e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c642:	e7cb      	b.n	800c5dc <forward_cast+0x21cc>
 800c644:	2100      	movs	r1, #0
 800c646:	e7c9      	b.n	800c5dc <forward_cast+0x21cc>
 800c648:	4555      	cmp	r5, sl
 800c64a:	f4bd af49 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c64e:	4f51      	ldr	r7, [pc, #324]	; (800c794 <forward_cast+0x2384>)
 800c650:	4b4e      	ldr	r3, [pc, #312]	; (800c78c <forward_cast+0x237c>)
 800c652:	4a55      	ldr	r2, [pc, #340]	; (800c7a8 <forward_cast+0x2398>)
 800c654:	e013      	b.n	800c67e <forward_cast+0x226e>
 800c656:	455c      	cmp	r4, fp
 800c658:	f000 87d1 	beq.w	800d5fe <forward_cast+0x31ee>
 800c65c:	dd21      	ble.n	800c6a2 <forward_cast+0x2292>
 800c65e:	429c      	cmp	r4, r3
 800c660:	f000 87e8 	beq.w	800d634 <forward_cast+0x3224>
 800c664:	4294      	cmp	r4, r2
 800c666:	d138      	bne.n	800c6da <forward_cast+0x22ca>
 800c668:	7828      	ldrb	r0, [r5, #0]
 800c66a:	3800      	subs	r0, #0
 800c66c:	bf18      	it	ne
 800c66e:	2001      	movne	r0, #1
 800c670:	9900      	ldr	r1, [sp, #0]
 800c672:	6030      	str	r0, [r6, #0]
 800c674:	444d      	add	r5, r9
 800c676:	45aa      	cmp	sl, r5
 800c678:	440e      	add	r6, r1
 800c67a:	f67d af31 	bls.w	800a4e0 <forward_cast+0xd0>
 800c67e:	4544      	cmp	r4, r8
 800c680:	f000 87b9 	beq.w	800d5f6 <forward_cast+0x31e6>
 800c684:	dde7      	ble.n	800c656 <forward_cast+0x2246>
 800c686:	4942      	ldr	r1, [pc, #264]	; (800c790 <forward_cast+0x2380>)
 800c688:	428c      	cmp	r4, r1
 800c68a:	f000 87c2 	beq.w	800d612 <forward_cast+0x3202>
 800c68e:	dd12      	ble.n	800c6b6 <forward_cast+0x22a6>
 800c690:	42bc      	cmp	r4, r7
 800c692:	d122      	bne.n	800c6da <forward_cast+0x22ca>
 800c694:	edd5 7a00 	vldr	s15, [r5]
 800c698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c69c:	ee17 0a90 	vmov	r0, s15
 800c6a0:	e7e6      	b.n	800c670 <forward_cast+0x2260>
 800c6a2:	4942      	ldr	r1, [pc, #264]	; (800c7ac <forward_cast+0x239c>)
 800c6a4:	428c      	cmp	r4, r1
 800c6a6:	f000 87c2 	beq.w	800d62e <forward_cast+0x321e>
 800c6aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c6ae:	428c      	cmp	r4, r1
 800c6b0:	d113      	bne.n	800c6da <forward_cast+0x22ca>
 800c6b2:	8828      	ldrh	r0, [r5, #0]
 800c6b4:	e7dc      	b.n	800c670 <forward_cast+0x2260>
 800c6b6:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c6ba:	428c      	cmp	r4, r1
 800c6bc:	f000 87c8 	beq.w	800d650 <forward_cast+0x3240>
 800c6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6c4:	428c      	cmp	r4, r1
 800c6c6:	d108      	bne.n	800c6da <forward_cast+0x22ca>
 800c6c8:	edd5 7a00 	vldr	s15, [r5]
 800c6cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6d4:	ee17 0a90 	vmov	r0, s15
 800c6d8:	e7ca      	b.n	800c670 <forward_cast+0x2260>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e7c8      	b.n	800c670 <forward_cast+0x2260>
 800c6de:	4555      	cmp	r5, sl
 800c6e0:	f4bd aefe 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c6e4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c794 <forward_cast+0x2384>
 800c6e8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800c7b0 <forward_cast+0x23a0>
 800c6ec:	4b2b      	ldr	r3, [pc, #172]	; (800c79c <forward_cast+0x238c>)
 800c6ee:	4a2c      	ldr	r2, [pc, #176]	; (800c7a0 <forward_cast+0x2390>)
 800c6f0:	2700      	movs	r7, #0
 800c6f2:	e016      	b.n	800c722 <forward_cast+0x2312>
 800c6f4:	4294      	cmp	r4, r2
 800c6f6:	f000 8636 	beq.w	800d366 <forward_cast+0x2f56>
 800c6fa:	dd26      	ble.n	800c74a <forward_cast+0x233a>
 800c6fc:	4923      	ldr	r1, [pc, #140]	; (800c78c <forward_cast+0x237c>)
 800c6fe:	428c      	cmp	r4, r1
 800c700:	f001 8525 	beq.w	800e14e <forward_cast+0x3d3e>
 800c704:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c708:	428c      	cmp	r4, r1
 800c70a:	d137      	bne.n	800c77c <forward_cast+0x236c>
 800c70c:	7829      	ldrb	r1, [r5, #0]
 800c70e:	3900      	subs	r1, #0
 800c710:	bf18      	it	ne
 800c712:	2101      	movne	r1, #1
 800c714:	55f1      	strb	r1, [r6, r7]
 800c716:	444d      	add	r5, r9
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	45aa      	cmp	sl, r5
 800c71c:	440f      	add	r7, r1
 800c71e:	f67d aedf 	bls.w	800a4e0 <forward_cast+0xd0>
 800c722:	4920      	ldr	r1, [pc, #128]	; (800c7a4 <forward_cast+0x2394>)
 800c724:	428c      	cmp	r4, r1
 800c726:	d018      	beq.n	800c75a <forward_cast+0x234a>
 800c728:	dde4      	ble.n	800c6f4 <forward_cast+0x22e4>
 800c72a:	4919      	ldr	r1, [pc, #100]	; (800c790 <forward_cast+0x2380>)
 800c72c:	428c      	cmp	r4, r1
 800c72e:	f001 84fe 	beq.w	800e12e <forward_cast+0x3d1e>
 800c732:	dd14      	ble.n	800c75e <forward_cast+0x234e>
 800c734:	4544      	cmp	r4, r8
 800c736:	d121      	bne.n	800c77c <forward_cast+0x236c>
 800c738:	edd5 7a00 	vldr	s15, [r5]
 800c73c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c740:	edcd 7a01 	vstr	s15, [sp, #4]
 800c744:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c748:	e7e4      	b.n	800c714 <forward_cast+0x2304>
 800c74a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c74e:	428c      	cmp	r4, r1
 800c750:	d003      	beq.n	800c75a <forward_cast+0x234a>
 800c752:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c756:	428c      	cmp	r4, r1
 800c758:	d110      	bne.n	800c77c <forward_cast+0x236c>
 800c75a:	7829      	ldrb	r1, [r5, #0]
 800c75c:	e7da      	b.n	800c714 <forward_cast+0x2304>
 800c75e:	455c      	cmp	r4, fp
 800c760:	d0fb      	beq.n	800c75a <forward_cast+0x234a>
 800c762:	429c      	cmp	r4, r3
 800c764:	d10a      	bne.n	800c77c <forward_cast+0x236c>
 800c766:	edd5 7a00 	vldr	s15, [r5]
 800c76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c76e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c772:	edcd 7a01 	vstr	s15, [sp, #4]
 800c776:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c77a:	e7cb      	b.n	800c714 <forward_cast+0x2304>
 800c77c:	2100      	movs	r1, #0
 800c77e:	e7c9      	b.n	800c714 <forward_cast+0x2304>
 800c780:	4555      	cmp	r5, sl
 800c782:	f4bd aead 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c786:	4b01      	ldr	r3, [pc, #4]	; (800c78c <forward_cast+0x237c>)
 800c788:	4a07      	ldr	r2, [pc, #28]	; (800c7a8 <forward_cast+0x2398>)
 800c78a:	e027      	b.n	800c7dc <forward_cast+0x23cc>
 800c78c:	00042040 	.word	0x00042040
 800c790:	00842040 	.word	0x00842040
 800c794:	01821040 	.word	0x01821040
 800c798:	00040840 	.word	0x00040840
 800c79c:	00841040 	.word	0x00841040
 800c7a0:	00041040 	.word	0x00041040
 800c7a4:	00840440 	.word	0x00840440
 800c7a8:	00060440 	.word	0x00060440
 800c7ac:	00040440 	.word	0x00040440
 800c7b0:	00840840 	.word	0x00840840
 800c7b4:	455c      	cmp	r4, fp
 800c7b6:	f000 8675 	beq.w	800d4a4 <forward_cast+0x3094>
 800c7ba:	dd22      	ble.n	800c802 <forward_cast+0x23f2>
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	f001 8522 	beq.w	800e206 <forward_cast+0x3df6>
 800c7c2:	4294      	cmp	r4, r2
 800c7c4:	d137      	bne.n	800c836 <forward_cast+0x2426>
 800c7c6:	7828      	ldrb	r0, [r5, #0]
 800c7c8:	3800      	subs	r0, #0
 800c7ca:	bf18      	it	ne
 800c7cc:	2001      	movne	r0, #1
 800c7ce:	9900      	ldr	r1, [sp, #0]
 800c7d0:	6030      	str	r0, [r6, #0]
 800c7d2:	444d      	add	r5, r9
 800c7d4:	45aa      	cmp	sl, r5
 800c7d6:	440e      	add	r6, r1
 800c7d8:	f67d ae82 	bls.w	800a4e0 <forward_cast+0xd0>
 800c7dc:	4544      	cmp	r4, r8
 800c7de:	f000 85be 	beq.w	800d35e <forward_cast+0x2f4e>
 800c7e2:	dde7      	ble.n	800c7b4 <forward_cast+0x23a4>
 800c7e4:	499a      	ldr	r1, [pc, #616]	; (800ca50 <forward_cast+0x2640>)
 800c7e6:	428c      	cmp	r4, r1
 800c7e8:	f001 84fc 	beq.w	800e1e4 <forward_cast+0x3dd4>
 800c7ec:	dd13      	ble.n	800c816 <forward_cast+0x2406>
 800c7ee:	4999      	ldr	r1, [pc, #612]	; (800ca54 <forward_cast+0x2644>)
 800c7f0:	428c      	cmp	r4, r1
 800c7f2:	d120      	bne.n	800c836 <forward_cast+0x2426>
 800c7f4:	edd5 7a00 	vldr	s15, [r5]
 800c7f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7fc:	ee17 0a90 	vmov	r0, s15
 800c800:	e7e5      	b.n	800c7ce <forward_cast+0x23be>
 800c802:	4995      	ldr	r1, [pc, #596]	; (800ca58 <forward_cast+0x2648>)
 800c804:	428c      	cmp	r4, r1
 800c806:	f001 84fb 	beq.w	800e200 <forward_cast+0x3df0>
 800c80a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c80e:	428c      	cmp	r4, r1
 800c810:	d111      	bne.n	800c836 <forward_cast+0x2426>
 800c812:	8828      	ldrh	r0, [r5, #0]
 800c814:	e7db      	b.n	800c7ce <forward_cast+0x23be>
 800c816:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c81a:	428c      	cmp	r4, r1
 800c81c:	f001 8501 	beq.w	800e222 <forward_cast+0x3e12>
 800c820:	42bc      	cmp	r4, r7
 800c822:	d108      	bne.n	800c836 <forward_cast+0x2426>
 800c824:	edd5 7a00 	vldr	s15, [r5]
 800c828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c82c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c830:	ee17 0a90 	vmov	r0, s15
 800c834:	e7cb      	b.n	800c7ce <forward_cast+0x23be>
 800c836:	2000      	movs	r0, #0
 800c838:	e7c9      	b.n	800c7ce <forward_cast+0x23be>
 800c83a:	4555      	cmp	r5, sl
 800c83c:	f4bd ae50 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c840:	4b86      	ldr	r3, [pc, #536]	; (800ca5c <forward_cast+0x264c>)
 800c842:	4a87      	ldr	r2, [pc, #540]	; (800ca60 <forward_cast+0x2650>)
 800c844:	e013      	b.n	800c86e <forward_cast+0x245e>
 800c846:	42bc      	cmp	r4, r7
 800c848:	f000 859d 	beq.w	800d386 <forward_cast+0x2f76>
 800c84c:	dd22      	ble.n	800c894 <forward_cast+0x2484>
 800c84e:	429c      	cmp	r4, r3
 800c850:	f001 84fc 	beq.w	800e24c <forward_cast+0x3e3c>
 800c854:	4294      	cmp	r4, r2
 800c856:	d137      	bne.n	800c8c8 <forward_cast+0x24b8>
 800c858:	7828      	ldrb	r0, [r5, #0]
 800c85a:	3800      	subs	r0, #0
 800c85c:	bf18      	it	ne
 800c85e:	2001      	movne	r0, #1
 800c860:	9900      	ldr	r1, [sp, #0]
 800c862:	6030      	str	r0, [r6, #0]
 800c864:	444d      	add	r5, r9
 800c866:	45aa      	cmp	sl, r5
 800c868:	440e      	add	r6, r1
 800c86a:	f67d ae39 	bls.w	800a4e0 <forward_cast+0xd0>
 800c86e:	4544      	cmp	r4, r8
 800c870:	f000 8585 	beq.w	800d37e <forward_cast+0x2f6e>
 800c874:	dde7      	ble.n	800c846 <forward_cast+0x2436>
 800c876:	4976      	ldr	r1, [pc, #472]	; (800ca50 <forward_cast+0x2640>)
 800c878:	428c      	cmp	r4, r1
 800c87a:	f001 84d6 	beq.w	800e22a <forward_cast+0x3e1a>
 800c87e:	dd13      	ble.n	800c8a8 <forward_cast+0x2498>
 800c880:	4974      	ldr	r1, [pc, #464]	; (800ca54 <forward_cast+0x2644>)
 800c882:	428c      	cmp	r4, r1
 800c884:	d120      	bne.n	800c8c8 <forward_cast+0x24b8>
 800c886:	edd5 7a00 	vldr	s15, [r5]
 800c88a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c88e:	ee17 0a90 	vmov	r0, s15
 800c892:	e7e5      	b.n	800c860 <forward_cast+0x2450>
 800c894:	4970      	ldr	r1, [pc, #448]	; (800ca58 <forward_cast+0x2648>)
 800c896:	428c      	cmp	r4, r1
 800c898:	f001 84d5 	beq.w	800e246 <forward_cast+0x3e36>
 800c89c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c8a0:	428c      	cmp	r4, r1
 800c8a2:	d111      	bne.n	800c8c8 <forward_cast+0x24b8>
 800c8a4:	8828      	ldrh	r0, [r5, #0]
 800c8a6:	e7db      	b.n	800c860 <forward_cast+0x2450>
 800c8a8:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c8ac:	428c      	cmp	r4, r1
 800c8ae:	f001 84db 	beq.w	800e268 <forward_cast+0x3e58>
 800c8b2:	455c      	cmp	r4, fp
 800c8b4:	d108      	bne.n	800c8c8 <forward_cast+0x24b8>
 800c8b6:	edd5 7a00 	vldr	s15, [r5]
 800c8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8c2:	ee17 0a90 	vmov	r0, s15
 800c8c6:	e7cb      	b.n	800c860 <forward_cast+0x2450>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e7c9      	b.n	800c860 <forward_cast+0x2450>
 800c8cc:	4555      	cmp	r5, sl
 800c8ce:	f4bd ae07 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c8d2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800ca54 <forward_cast+0x2644>
 800c8d6:	4b61      	ldr	r3, [pc, #388]	; (800ca5c <forward_cast+0x264c>)
 800c8d8:	4a61      	ldr	r2, [pc, #388]	; (800ca60 <forward_cast+0x2650>)
 800c8da:	e017      	b.n	800c90c <forward_cast+0x24fc>
 800c8dc:	4961      	ldr	r1, [pc, #388]	; (800ca64 <forward_cast+0x2654>)
 800c8de:	428c      	cmp	r4, r1
 800c8e0:	f000 850d 	beq.w	800d2fe <forward_cast+0x2eee>
 800c8e4:	dd24      	ble.n	800c930 <forward_cast+0x2520>
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	f000 84f7 	beq.w	800d2da <forward_cast+0x2eca>
 800c8ec:	4294      	cmp	r4, r2
 800c8ee:	d13a      	bne.n	800c966 <forward_cast+0x2556>
 800c8f0:	7828      	ldrb	r0, [r5, #0]
 800c8f2:	3800      	subs	r0, #0
 800c8f4:	bf18      	it	ne
 800c8f6:	2001      	movne	r0, #1
 800c8f8:	f300 0007 	ssat	r0, #8, r0
 800c8fc:	9900      	ldr	r1, [sp, #0]
 800c8fe:	444d      	add	r5, r9
 800c900:	b240      	sxtb	r0, r0
 800c902:	45aa      	cmp	sl, r5
 800c904:	6030      	str	r0, [r6, #0]
 800c906:	440e      	add	r6, r1
 800c908:	f67d adea 	bls.w	800a4e0 <forward_cast+0xd0>
 800c90c:	42bc      	cmp	r4, r7
 800c90e:	f000 84c0 	beq.w	800d292 <forward_cast+0x2e82>
 800c912:	dde3      	ble.n	800c8dc <forward_cast+0x24cc>
 800c914:	494e      	ldr	r1, [pc, #312]	; (800ca50 <forward_cast+0x2640>)
 800c916:	428c      	cmp	r4, r1
 800c918:	f000 84ce 	beq.w	800d2b8 <forward_cast+0x2ea8>
 800c91c:	dd13      	ble.n	800c946 <forward_cast+0x2536>
 800c91e:	4544      	cmp	r4, r8
 800c920:	d121      	bne.n	800c966 <forward_cast+0x2556>
 800c922:	edd5 7a00 	vldr	s15, [r5]
 800c926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c92a:	ee17 0a90 	vmov	r0, s15
 800c92e:	e7e3      	b.n	800c8f8 <forward_cast+0x24e8>
 800c930:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800c934:	428c      	cmp	r4, r1
 800c936:	f000 84cd 	beq.w	800d2d4 <forward_cast+0x2ec4>
 800c93a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c93e:	428c      	cmp	r4, r1
 800c940:	d111      	bne.n	800c966 <forward_cast+0x2556>
 800c942:	8828      	ldrh	r0, [r5, #0]
 800c944:	e7d8      	b.n	800c8f8 <forward_cast+0x24e8>
 800c946:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c94a:	428c      	cmp	r4, r1
 800c94c:	f000 84d3 	beq.w	800d2f6 <forward_cast+0x2ee6>
 800c950:	455c      	cmp	r4, fp
 800c952:	d108      	bne.n	800c966 <forward_cast+0x2556>
 800c954:	edd5 7a00 	vldr	s15, [r5]
 800c958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c960:	ee17 0a90 	vmov	r0, s15
 800c964:	e7c8      	b.n	800c8f8 <forward_cast+0x24e8>
 800c966:	2000      	movs	r0, #0
 800c968:	e7c6      	b.n	800c8f8 <forward_cast+0x24e8>
 800c96a:	4555      	cmp	r5, sl
 800c96c:	f4bd adb8 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c970:	9f00      	ldr	r7, [sp, #0]
 800c972:	4628      	mov	r0, r5
 800c974:	4621      	mov	r1, r4
 800c976:	f7fd fcd5 	bl	800a324 <_array_handle_get_as_float>
 800c97a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c982:	444d      	add	r5, r9
 800c984:	bf14      	ite	ne
 800c986:	2301      	movne	r3, #1
 800c988:	2300      	moveq	r3, #0
 800c98a:	45aa      	cmp	sl, r5
 800c98c:	7033      	strb	r3, [r6, #0]
 800c98e:	443e      	add	r6, r7
 800c990:	d8ef      	bhi.n	800c972 <forward_cast+0x2562>
 800c992:	f7fd bda5 	b.w	800a4e0 <forward_cast+0xd0>
 800c996:	4555      	cmp	r5, sl
 800c998:	f4bd ada2 	bcs.w	800a4e0 <forward_cast+0xd0>
 800c99c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800ca54 <forward_cast+0x2644>
 800c9a0:	4f31      	ldr	r7, [pc, #196]	; (800ca68 <forward_cast+0x2658>)
 800c9a2:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800ca70 <forward_cast+0x2660>
 800c9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ca64 <forward_cast+0x2654>)
 800c9a8:	4a2c      	ldr	r2, [pc, #176]	; (800ca5c <forward_cast+0x264c>)
 800c9aa:	e017      	b.n	800c9dc <forward_cast+0x25cc>
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	f000 829d 	beq.w	800ceec <forward_cast+0x2adc>
 800c9b2:	dd26      	ble.n	800ca02 <forward_cast+0x25f2>
 800c9b4:	4294      	cmp	r4, r2
 800c9b6:	f000 82b9 	beq.w	800cf2c <forward_cast+0x2b1c>
 800c9ba:	4929      	ldr	r1, [pc, #164]	; (800ca60 <forward_cast+0x2650>)
 800c9bc:	428c      	cmp	r4, r1
 800c9be:	d139      	bne.n	800ca34 <forward_cast+0x2624>
 800c9c0:	7828      	ldrb	r0, [r5, #0]
 800c9c2:	3800      	subs	r0, #0
 800c9c4:	bf18      	it	ne
 800c9c6:	2001      	movne	r0, #1
 800c9c8:	f380 0008 	usat	r0, #8, r0
 800c9cc:	9900      	ldr	r1, [sp, #0]
 800c9ce:	444d      	add	r5, r9
 800c9d0:	b2c0      	uxtb	r0, r0
 800c9d2:	45aa      	cmp	sl, r5
 800c9d4:	6030      	str	r0, [r6, #0]
 800c9d6:	440e      	add	r6, r1
 800c9d8:	f67d ad82 	bls.w	800a4e0 <forward_cast+0xd0>
 800c9dc:	4923      	ldr	r1, [pc, #140]	; (800ca6c <forward_cast+0x265c>)
 800c9de:	428c      	cmp	r4, r1
 800c9e0:	f000 82b4 	beq.w	800cf4c <forward_cast+0x2b3c>
 800c9e4:	dde2      	ble.n	800c9ac <forward_cast+0x259c>
 800c9e6:	491a      	ldr	r1, [pc, #104]	; (800ca50 <forward_cast+0x2640>)
 800c9e8:	428c      	cmp	r4, r1
 800c9ea:	f000 8290 	beq.w	800cf0e <forward_cast+0x2afe>
 800c9ee:	dd13      	ble.n	800ca18 <forward_cast+0x2608>
 800c9f0:	4544      	cmp	r4, r8
 800c9f2:	d11f      	bne.n	800ca34 <forward_cast+0x2624>
 800c9f4:	edd5 7a00 	vldr	s15, [r5]
 800c9f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9fc:	ee17 0a90 	vmov	r0, s15
 800ca00:	e7e2      	b.n	800c9c8 <forward_cast+0x25b8>
 800ca02:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ca06:	428c      	cmp	r4, r1
 800ca08:	f000 828e 	beq.w	800cf28 <forward_cast+0x2b18>
 800ca0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ca10:	428c      	cmp	r4, r1
 800ca12:	d10f      	bne.n	800ca34 <forward_cast+0x2624>
 800ca14:	8828      	ldrh	r0, [r5, #0]
 800ca16:	e7d7      	b.n	800c9c8 <forward_cast+0x25b8>
 800ca18:	42bc      	cmp	r4, r7
 800ca1a:	f000 8294 	beq.w	800cf46 <forward_cast+0x2b36>
 800ca1e:	455c      	cmp	r4, fp
 800ca20:	d108      	bne.n	800ca34 <forward_cast+0x2624>
 800ca22:	edd5 7a00 	vldr	s15, [r5]
 800ca26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca2e:	ee17 0a90 	vmov	r0, s15
 800ca32:	e7c9      	b.n	800c9c8 <forward_cast+0x25b8>
 800ca34:	2000      	movs	r0, #0
 800ca36:	e7c7      	b.n	800c9c8 <forward_cast+0x25b8>
 800ca38:	4555      	cmp	r5, sl
 800ca3a:	f4bd ad51 	bcs.w	800a4e0 <forward_cast+0xd0>
 800ca3e:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800ca54 <forward_cast+0x2644>
 800ca42:	4f09      	ldr	r7, [pc, #36]	; (800ca68 <forward_cast+0x2658>)
 800ca44:	f8df b028 	ldr.w	fp, [pc, #40]	; 800ca70 <forward_cast+0x2660>
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <forward_cast+0x2654>)
 800ca4a:	4a04      	ldr	r2, [pc, #16]	; (800ca5c <forward_cast+0x264c>)
 800ca4c:	e027      	b.n	800ca9e <forward_cast+0x268e>
 800ca4e:	bf00      	nop
 800ca50:	00842040 	.word	0x00842040
 800ca54:	01821040 	.word	0x01821040
 800ca58:	00040440 	.word	0x00040440
 800ca5c:	00042040 	.word	0x00042040
 800ca60:	00060440 	.word	0x00060440
 800ca64:	00041040 	.word	0x00041040
 800ca68:	00840840 	.word	0x00840840
 800ca6c:	00840440 	.word	0x00840440
 800ca70:	00841040 	.word	0x00841040
 800ca74:	429c      	cmp	r4, r3
 800ca76:	f000 8298 	beq.w	800cfaa <forward_cast+0x2b9a>
 800ca7a:	dd26      	ble.n	800caca <forward_cast+0x26ba>
 800ca7c:	4294      	cmp	r4, r2
 800ca7e:	f000 82a0 	beq.w	800cfc2 <forward_cast+0x2bb2>
 800ca82:	499c      	ldr	r1, [pc, #624]	; (800ccf4 <forward_cast+0x28e4>)
 800ca84:	428c      	cmp	r4, r1
 800ca86:	d13e      	bne.n	800cb06 <forward_cast+0x26f6>
 800ca88:	7829      	ldrb	r1, [r5, #0]
 800ca8a:	3900      	subs	r1, #0
 800ca8c:	bf18      	it	ne
 800ca8e:	2101      	movne	r1, #1
 800ca90:	6031      	str	r1, [r6, #0]
 800ca92:	444d      	add	r5, r9
 800ca94:	9900      	ldr	r1, [sp, #0]
 800ca96:	45aa      	cmp	sl, r5
 800ca98:	440e      	add	r6, r1
 800ca9a:	f67d ad21 	bls.w	800a4e0 <forward_cast+0xd0>
 800ca9e:	4996      	ldr	r1, [pc, #600]	; (800ccf8 <forward_cast+0x28e8>)
 800caa0:	428c      	cmp	r4, r1
 800caa2:	f000 827c 	beq.w	800cf9e <forward_cast+0x2b8e>
 800caa6:	dde5      	ble.n	800ca74 <forward_cast+0x2664>
 800caa8:	4994      	ldr	r1, [pc, #592]	; (800ccfc <forward_cast+0x28ec>)
 800caaa:	428c      	cmp	r4, r1
 800caac:	f000 8206 	beq.w	800cebc <forward_cast+0x2aac>
 800cab0:	dd18      	ble.n	800cae4 <forward_cast+0x26d4>
 800cab2:	4544      	cmp	r4, r8
 800cab4:	d127      	bne.n	800cb06 <forward_cast+0x26f6>
 800cab6:	edd5 7a00 	vldr	s15, [r5]
 800caba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac2:	bf14      	ite	ne
 800cac4:	2101      	movne	r1, #1
 800cac6:	2100      	moveq	r1, #0
 800cac8:	e7e2      	b.n	800ca90 <forward_cast+0x2680>
 800caca:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cace:	428c      	cmp	r4, r1
 800cad0:	d0da      	beq.n	800ca88 <forward_cast+0x2678>
 800cad2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cad6:	428c      	cmp	r4, r1
 800cad8:	d115      	bne.n	800cb06 <forward_cast+0x26f6>
 800cada:	8829      	ldrh	r1, [r5, #0]
 800cadc:	3900      	subs	r1, #0
 800cade:	bf18      	it	ne
 800cae0:	2101      	movne	r1, #1
 800cae2:	e7d5      	b.n	800ca90 <forward_cast+0x2680>
 800cae4:	42bc      	cmp	r4, r7
 800cae6:	f000 827c 	beq.w	800cfe2 <forward_cast+0x2bd2>
 800caea:	455c      	cmp	r4, fp
 800caec:	d10b      	bne.n	800cb06 <forward_cast+0x26f6>
 800caee:	edd5 7a00 	vldr	s15, [r5]
 800caf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafe:	bf14      	ite	ne
 800cb00:	2101      	movne	r1, #1
 800cb02:	2100      	moveq	r1, #0
 800cb04:	e7c4      	b.n	800ca90 <forward_cast+0x2680>
 800cb06:	2100      	movs	r1, #0
 800cb08:	e7c2      	b.n	800ca90 <forward_cast+0x2680>
 800cb0a:	4555      	cmp	r5, sl
 800cb0c:	f4bd ace8 	bcs.w	800a4e0 <forward_cast+0xd0>
 800cb10:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <forward_cast+0x28f0>)
 800cb12:	4a78      	ldr	r2, [pc, #480]	; (800ccf4 <forward_cast+0x28e4>)
 800cb14:	e014      	b.n	800cb40 <forward_cast+0x2730>
 800cb16:	497b      	ldr	r1, [pc, #492]	; (800cd04 <forward_cast+0x28f4>)
 800cb18:	428c      	cmp	r4, r1
 800cb1a:	f000 832d 	beq.w	800d178 <forward_cast+0x2d68>
 800cb1e:	dd21      	ble.n	800cb64 <forward_cast+0x2754>
 800cb20:	429c      	cmp	r4, r3
 800cb22:	f000 819c 	beq.w	800ce5e <forward_cast+0x2a4e>
 800cb26:	4294      	cmp	r4, r2
 800cb28:	d137      	bne.n	800cb9a <forward_cast+0x278a>
 800cb2a:	7828      	ldrb	r0, [r5, #0]
 800cb2c:	3800      	subs	r0, #0
 800cb2e:	bf18      	it	ne
 800cb30:	2001      	movne	r0, #1
 800cb32:	9900      	ldr	r1, [sp, #0]
 800cb34:	6030      	str	r0, [r6, #0]
 800cb36:	444d      	add	r5, r9
 800cb38:	45aa      	cmp	sl, r5
 800cb3a:	440e      	add	r6, r1
 800cb3c:	f67d acd0 	bls.w	800a4e0 <forward_cast+0xd0>
 800cb40:	4544      	cmp	r4, r8
 800cb42:	f000 8316 	beq.w	800d172 <forward_cast+0x2d62>
 800cb46:	dde6      	ble.n	800cb16 <forward_cast+0x2706>
 800cb48:	496c      	ldr	r1, [pc, #432]	; (800ccfc <forward_cast+0x28ec>)
 800cb4a:	428c      	cmp	r4, r1
 800cb4c:	f000 8178 	beq.w	800ce40 <forward_cast+0x2a30>
 800cb50:	dd13      	ble.n	800cb7a <forward_cast+0x276a>
 800cb52:	42bc      	cmp	r4, r7
 800cb54:	d121      	bne.n	800cb9a <forward_cast+0x278a>
 800cb56:	edd5 7a00 	vldr	s15, [r5]
 800cb5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb5e:	ee17 0a90 	vmov	r0, s15
 800cb62:	e7e6      	b.n	800cb32 <forward_cast+0x2722>
 800cb64:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800cb68:	428c      	cmp	r4, r1
 800cb6a:	f000 8176 	beq.w	800ce5a <forward_cast+0x2a4a>
 800cb6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cb72:	428c      	cmp	r4, r1
 800cb74:	d111      	bne.n	800cb9a <forward_cast+0x278a>
 800cb76:	8828      	ldrh	r0, [r5, #0]
 800cb78:	e7db      	b.n	800cb32 <forward_cast+0x2722>
 800cb7a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800cb7e:	428c      	cmp	r4, r1
 800cb80:	f000 817a 	beq.w	800ce78 <forward_cast+0x2a68>
 800cb84:	455c      	cmp	r4, fp
 800cb86:	d108      	bne.n	800cb9a <forward_cast+0x278a>
 800cb88:	edd5 7a00 	vldr	s15, [r5]
 800cb8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb94:	ee17 0a90 	vmov	r0, s15
 800cb98:	e7cb      	b.n	800cb32 <forward_cast+0x2722>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e7c9      	b.n	800cb32 <forward_cast+0x2722>
 800cb9e:	4555      	cmp	r5, sl
 800cba0:	f4bd ac9e 	bcs.w	800a4e0 <forward_cast+0xd0>
 800cba4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800cd10 <forward_cast+0x2900>
 800cba8:	4f57      	ldr	r7, [pc, #348]	; (800cd08 <forward_cast+0x28f8>)
 800cbaa:	f8df b160 	ldr.w	fp, [pc, #352]	; 800cd0c <forward_cast+0x28fc>
 800cbae:	4b55      	ldr	r3, [pc, #340]	; (800cd04 <forward_cast+0x28f4>)
 800cbb0:	4a53      	ldr	r2, [pc, #332]	; (800cd00 <forward_cast+0x28f0>)
 800cbb2:	e017      	b.n	800cbe4 <forward_cast+0x27d4>
 800cbb4:	429c      	cmp	r4, r3
 800cbb6:	f000 82cf 	beq.w	800d158 <forward_cast+0x2d48>
 800cbba:	dd26      	ble.n	800cc0a <forward_cast+0x27fa>
 800cbbc:	4294      	cmp	r4, r2
 800cbbe:	f000 816d 	beq.w	800ce9c <forward_cast+0x2a8c>
 800cbc2:	494c      	ldr	r1, [pc, #304]	; (800ccf4 <forward_cast+0x28e4>)
 800cbc4:	428c      	cmp	r4, r1
 800cbc6:	d139      	bne.n	800cc3c <forward_cast+0x282c>
 800cbc8:	7828      	ldrb	r0, [r5, #0]
 800cbca:	3800      	subs	r0, #0
 800cbcc:	bf18      	it	ne
 800cbce:	2001      	movne	r0, #1
 800cbd0:	f300 000f 	ssat	r0, #16, r0
 800cbd4:	9900      	ldr	r1, [sp, #0]
 800cbd6:	444d      	add	r5, r9
 800cbd8:	b200      	sxth	r0, r0
 800cbda:	45aa      	cmp	sl, r5
 800cbdc:	6030      	str	r0, [r6, #0]
 800cbde:	440e      	add	r6, r1
 800cbe0:	f67d ac7e 	bls.w	800a4e0 <forward_cast+0xd0>
 800cbe4:	4944      	ldr	r1, [pc, #272]	; (800ccf8 <forward_cast+0x28e8>)
 800cbe6:	428c      	cmp	r4, r1
 800cbe8:	f000 8101 	beq.w	800cdee <forward_cast+0x29de>
 800cbec:	dde2      	ble.n	800cbb4 <forward_cast+0x27a4>
 800cbee:	4943      	ldr	r1, [pc, #268]	; (800ccfc <forward_cast+0x28ec>)
 800cbf0:	428c      	cmp	r4, r1
 800cbf2:	f000 8144 	beq.w	800ce7e <forward_cast+0x2a6e>
 800cbf6:	dd13      	ble.n	800cc20 <forward_cast+0x2810>
 800cbf8:	4544      	cmp	r4, r8
 800cbfa:	d11f      	bne.n	800cc3c <forward_cast+0x282c>
 800cbfc:	edd5 7a00 	vldr	s15, [r5]
 800cc00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc04:	ee17 0a90 	vmov	r0, s15
 800cc08:	e7e2      	b.n	800cbd0 <forward_cast+0x27c0>
 800cc0a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cc0e:	428c      	cmp	r4, r1
 800cc10:	f000 8142 	beq.w	800ce98 <forward_cast+0x2a88>
 800cc14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cc18:	428c      	cmp	r4, r1
 800cc1a:	d10f      	bne.n	800cc3c <forward_cast+0x282c>
 800cc1c:	8828      	ldrh	r0, [r5, #0]
 800cc1e:	e7d7      	b.n	800cbd0 <forward_cast+0x27c0>
 800cc20:	42bc      	cmp	r4, r7
 800cc22:	f000 8148 	beq.w	800ceb6 <forward_cast+0x2aa6>
 800cc26:	455c      	cmp	r4, fp
 800cc28:	d108      	bne.n	800cc3c <forward_cast+0x282c>
 800cc2a:	edd5 7a00 	vldr	s15, [r5]
 800cc2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc36:	ee17 0a90 	vmov	r0, s15
 800cc3a:	e7c9      	b.n	800cbd0 <forward_cast+0x27c0>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	e7c7      	b.n	800cbd0 <forward_cast+0x27c0>
 800cc40:	4555      	cmp	r5, sl
 800cc42:	f4bd ac4d 	bcs.w	800a4e0 <forward_cast+0xd0>
 800cc46:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800cd10 <forward_cast+0x2900>
 800cc4a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800cd08 <forward_cast+0x28f8>
 800cc4e:	4b2f      	ldr	r3, [pc, #188]	; (800cd0c <forward_cast+0x28fc>)
 800cc50:	4a2c      	ldr	r2, [pc, #176]	; (800cd04 <forward_cast+0x28f4>)
 800cc52:	2700      	movs	r7, #0
 800cc54:	e016      	b.n	800cc84 <forward_cast+0x2874>
 800cc56:	4294      	cmp	r4, r2
 800cc58:	f000 80d8 	beq.w	800ce0c <forward_cast+0x29fc>
 800cc5c:	dd26      	ble.n	800ccac <forward_cast+0x289c>
 800cc5e:	4928      	ldr	r1, [pc, #160]	; (800cd00 <forward_cast+0x28f0>)
 800cc60:	428c      	cmp	r4, r1
 800cc62:	f000 81c4 	beq.w	800cfee <forward_cast+0x2bde>
 800cc66:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800cc6a:	428c      	cmp	r4, r1
 800cc6c:	d137      	bne.n	800ccde <forward_cast+0x28ce>
 800cc6e:	7829      	ldrb	r1, [r5, #0]
 800cc70:	3900      	subs	r1, #0
 800cc72:	bf18      	it	ne
 800cc74:	2101      	movne	r1, #1
 800cc76:	55f1      	strb	r1, [r6, r7]
 800cc78:	444d      	add	r5, r9
 800cc7a:	9900      	ldr	r1, [sp, #0]
 800cc7c:	45aa      	cmp	sl, r5
 800cc7e:	440f      	add	r7, r1
 800cc80:	f67d ac2e 	bls.w	800a4e0 <forward_cast+0xd0>
 800cc84:	491c      	ldr	r1, [pc, #112]	; (800ccf8 <forward_cast+0x28e8>)
 800cc86:	428c      	cmp	r4, r1
 800cc88:	d018      	beq.n	800ccbc <forward_cast+0x28ac>
 800cc8a:	dde4      	ble.n	800cc56 <forward_cast+0x2846>
 800cc8c:	491b      	ldr	r1, [pc, #108]	; (800ccfc <forward_cast+0x28ec>)
 800cc8e:	428c      	cmp	r4, r1
 800cc90:	f000 80c7 	beq.w	800ce22 <forward_cast+0x2a12>
 800cc94:	dd14      	ble.n	800ccc0 <forward_cast+0x28b0>
 800cc96:	4544      	cmp	r4, r8
 800cc98:	d121      	bne.n	800ccde <forward_cast+0x28ce>
 800cc9a:	edd5 7a00 	vldr	s15, [r5]
 800cc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca2:	edcd 7a01 	vstr	s15, [sp, #4]
 800cca6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ccaa:	e7e4      	b.n	800cc76 <forward_cast+0x2866>
 800ccac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ccb0:	428c      	cmp	r4, r1
 800ccb2:	d003      	beq.n	800ccbc <forward_cast+0x28ac>
 800ccb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccb8:	428c      	cmp	r4, r1
 800ccba:	d110      	bne.n	800ccde <forward_cast+0x28ce>
 800ccbc:	7829      	ldrb	r1, [r5, #0]
 800ccbe:	e7da      	b.n	800cc76 <forward_cast+0x2866>
 800ccc0:	455c      	cmp	r4, fp
 800ccc2:	d0fb      	beq.n	800ccbc <forward_cast+0x28ac>
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	d10a      	bne.n	800ccde <forward_cast+0x28ce>
 800ccc8:	edd5 7a00 	vldr	s15, [r5]
 800cccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd4:	edcd 7a01 	vstr	s15, [sp, #4]
 800ccd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ccdc:	e7cb      	b.n	800cc76 <forward_cast+0x2866>
 800ccde:	2100      	movs	r1, #0
 800cce0:	e7c9      	b.n	800cc76 <forward_cast+0x2866>
 800cce2:	4555      	cmp	r5, sl
 800cce4:	f4bd abfc 	bcs.w	800a4e0 <forward_cast+0xd0>
 800cce8:	4b06      	ldr	r3, [pc, #24]	; (800cd04 <forward_cast+0x28f4>)
 800ccea:	4a05      	ldr	r2, [pc, #20]	; (800cd00 <forward_cast+0x28f0>)
 800ccec:	f04f 0800 	mov.w	r8, #0
 800ccf0:	e024      	b.n	800cd3c <forward_cast+0x292c>
 800ccf2:	bf00      	nop
 800ccf4:	00060440 	.word	0x00060440
 800ccf8:	00840440 	.word	0x00840440
 800ccfc:	00842040 	.word	0x00842040
 800cd00:	00042040 	.word	0x00042040
 800cd04:	00041040 	.word	0x00041040
 800cd08:	00840840 	.word	0x00840840
 800cd0c:	00841040 	.word	0x00841040
 800cd10:	01821040 	.word	0x01821040
 800cd14:	429c      	cmp	r4, r3
 800cd16:	d050      	beq.n	800cdba <forward_cast+0x29aa>
 800cd18:	dd23      	ble.n	800cd62 <forward_cast+0x2952>
 800cd1a:	4294      	cmp	r4, r2
 800cd1c:	d03e      	beq.n	800cd9c <forward_cast+0x298c>
 800cd1e:	49c7      	ldr	r1, [pc, #796]	; (800d03c <forward_cast+0x2c2c>)
 800cd20:	428c      	cmp	r4, r1
 800cd22:	d139      	bne.n	800cd98 <forward_cast+0x2988>
 800cd24:	7829      	ldrb	r1, [r5, #0]
 800cd26:	3900      	subs	r1, #0
 800cd28:	bf18      	it	ne
 800cd2a:	2101      	movne	r1, #1
 800cd2c:	f806 1008 	strb.w	r1, [r6, r8]
 800cd30:	444d      	add	r5, r9
 800cd32:	9900      	ldr	r1, [sp, #0]
 800cd34:	45aa      	cmp	sl, r5
 800cd36:	4488      	add	r8, r1
 800cd38:	f67d abd2 	bls.w	800a4e0 <forward_cast+0xd0>
 800cd3c:	455c      	cmp	r4, fp
 800cd3e:	d017      	beq.n	800cd70 <forward_cast+0x2960>
 800cd40:	dde8      	ble.n	800cd14 <forward_cast+0x2904>
 800cd42:	49bf      	ldr	r1, [pc, #764]	; (800d040 <forward_cast+0x2c30>)
 800cd44:	428c      	cmp	r4, r1
 800cd46:	d043      	beq.n	800cdd0 <forward_cast+0x29c0>
 800cd48:	dd15      	ble.n	800cd76 <forward_cast+0x2966>
 800cd4a:	49be      	ldr	r1, [pc, #760]	; (800d044 <forward_cast+0x2c34>)
 800cd4c:	428c      	cmp	r4, r1
 800cd4e:	d123      	bne.n	800cd98 <forward_cast+0x2988>
 800cd50:	edd5 7a00 	vldr	s15, [r5]
 800cd54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd58:	edcd 7a01 	vstr	s15, [sp, #4]
 800cd5c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cd60:	e7e4      	b.n	800cd2c <forward_cast+0x291c>
 800cd62:	49b9      	ldr	r1, [pc, #740]	; (800d048 <forward_cast+0x2c38>)
 800cd64:	428c      	cmp	r4, r1
 800cd66:	d003      	beq.n	800cd70 <forward_cast+0x2960>
 800cd68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cd6c:	428c      	cmp	r4, r1
 800cd6e:	d113      	bne.n	800cd98 <forward_cast+0x2988>
 800cd70:	f995 1000 	ldrsb.w	r1, [r5]
 800cd74:	e7da      	b.n	800cd2c <forward_cast+0x291c>
 800cd76:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800cd7a:	428c      	cmp	r4, r1
 800cd7c:	d0f8      	beq.n	800cd70 <forward_cast+0x2960>
 800cd7e:	42bc      	cmp	r4, r7
 800cd80:	d10a      	bne.n	800cd98 <forward_cast+0x2988>
 800cd82:	edd5 7a00 	vldr	s15, [r5]
 800cd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd8e:	edcd 7a01 	vstr	s15, [sp, #4]
 800cd92:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cd96:	e7c9      	b.n	800cd2c <forward_cast+0x291c>
 800cd98:	2100      	movs	r1, #0
 800cd9a:	e7c7      	b.n	800cd2c <forward_cast+0x291c>
 800cd9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cda0:	f7f4 f802 	bl	8000da8 <__aeabi_ul2f>
 800cda4:	ee07 0a90 	vmov	s15, r0
 800cda8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdac:	4aa7      	ldr	r2, [pc, #668]	; (800d04c <forward_cast+0x2c3c>)
 800cdae:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdb2:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cdb6:	4ba6      	ldr	r3, [pc, #664]	; (800d050 <forward_cast+0x2c40>)
 800cdb8:	e7b8      	b.n	800cd2c <forward_cast+0x291c>
 800cdba:	edd5 7a00 	vldr	s15, [r5]
 800cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdc6:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdca:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cdce:	e7ad      	b.n	800cd2c <forward_cast+0x291c>
 800cdd0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cdd4:	f7f3 fff0 	bl	8000db8 <__aeabi_l2f>
 800cdd8:	ee07 0a90 	vmov	s15, r0
 800cddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cde0:	4b9b      	ldr	r3, [pc, #620]	; (800d050 <forward_cast+0x2c40>)
 800cde2:	edcd 7a01 	vstr	s15, [sp, #4]
 800cde6:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cdea:	4a98      	ldr	r2, [pc, #608]	; (800d04c <forward_cast+0x2c3c>)
 800cdec:	e79e      	b.n	800cd2c <forward_cast+0x291c>
 800cdee:	f995 0000 	ldrsb.w	r0, [r5]
 800cdf2:	e6ed      	b.n	800cbd0 <forward_cast+0x27c0>
 800cdf4:	edd5 7a00 	vldr	s15, [r5]
 800cdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce00:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce08:	f7fd bf35 	b.w	800ac76 <forward_cast+0x866>
 800ce0c:	edd5 7a00 	vldr	s15, [r5]
 800ce10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce18:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce20:	e729      	b.n	800cc76 <forward_cast+0x2866>
 800ce22:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce26:	f7f3 ffc7 	bl	8000db8 <__aeabi_l2f>
 800ce2a:	ee07 0a90 	vmov	s15, r0
 800ce2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce32:	4b88      	ldr	r3, [pc, #544]	; (800d054 <forward_cast+0x2c44>)
 800ce34:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce3c:	4a84      	ldr	r2, [pc, #528]	; (800d050 <forward_cast+0x2c40>)
 800ce3e:	e71a      	b.n	800cc76 <forward_cast+0x2866>
 800ce40:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce44:	f7f3 ffb8 	bl	8000db8 <__aeabi_l2f>
 800ce48:	ee07 0a90 	vmov	s15, r0
 800ce4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce50:	4b7e      	ldr	r3, [pc, #504]	; (800d04c <forward_cast+0x2c3c>)
 800ce52:	4a7a      	ldr	r2, [pc, #488]	; (800d03c <forward_cast+0x2c2c>)
 800ce54:	ee17 0a90 	vmov	r0, s15
 800ce58:	e66b      	b.n	800cb32 <forward_cast+0x2722>
 800ce5a:	7828      	ldrb	r0, [r5, #0]
 800ce5c:	e669      	b.n	800cb32 <forward_cast+0x2722>
 800ce5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce62:	f7f3 ffa1 	bl	8000da8 <__aeabi_ul2f>
 800ce66:	ee07 0a90 	vmov	s15, r0
 800ce6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce6e:	4a73      	ldr	r2, [pc, #460]	; (800d03c <forward_cast+0x2c2c>)
 800ce70:	4b76      	ldr	r3, [pc, #472]	; (800d04c <forward_cast+0x2c3c>)
 800ce72:	ee17 0a90 	vmov	r0, s15
 800ce76:	e65c      	b.n	800cb32 <forward_cast+0x2722>
 800ce78:	f9b5 0000 	ldrsh.w	r0, [r5]
 800ce7c:	e659      	b.n	800cb32 <forward_cast+0x2722>
 800ce7e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce82:	f7f3 ff99 	bl	8000db8 <__aeabi_l2f>
 800ce86:	ee07 0a90 	vmov	s15, r0
 800ce8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8e:	4b70      	ldr	r3, [pc, #448]	; (800d050 <forward_cast+0x2c40>)
 800ce90:	4a6e      	ldr	r2, [pc, #440]	; (800d04c <forward_cast+0x2c3c>)
 800ce92:	ee17 0a90 	vmov	r0, s15
 800ce96:	e69b      	b.n	800cbd0 <forward_cast+0x27c0>
 800ce98:	7828      	ldrb	r0, [r5, #0]
 800ce9a:	e699      	b.n	800cbd0 <forward_cast+0x27c0>
 800ce9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cea0:	f7f3 ff82 	bl	8000da8 <__aeabi_ul2f>
 800cea4:	ee07 0a90 	vmov	s15, r0
 800cea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceac:	4a67      	ldr	r2, [pc, #412]	; (800d04c <forward_cast+0x2c3c>)
 800ceae:	4b68      	ldr	r3, [pc, #416]	; (800d050 <forward_cast+0x2c40>)
 800ceb0:	ee17 0a90 	vmov	r0, s15
 800ceb4:	e68c      	b.n	800cbd0 <forward_cast+0x27c0>
 800ceb6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800ceba:	e689      	b.n	800cbd0 <forward_cast+0x27c0>
 800cebc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cec0:	f7f3 ff7a 	bl	8000db8 <__aeabi_l2f>
 800cec4:	ee07 0a90 	vmov	s15, r0
 800cec8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced0:	4b5f      	ldr	r3, [pc, #380]	; (800d050 <forward_cast+0x2c40>)
 800ced2:	4a5e      	ldr	r2, [pc, #376]	; (800d04c <forward_cast+0x2c3c>)
 800ced4:	bf14      	ite	ne
 800ced6:	2101      	movne	r1, #1
 800ced8:	2100      	moveq	r1, #0
 800ceda:	e5d9      	b.n	800ca90 <forward_cast+0x2680>
 800cedc:	f995 1000 	ldrsb.w	r1, [r5]
 800cee0:	ee07 1a90 	vmov	s15, r1
 800cee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cee8:	f7fd be4e 	b.w	800ab88 <forward_cast+0x778>
 800ceec:	edd5 7a00 	vldr	s15, [r5]
 800cef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cef8:	ee17 0a90 	vmov	r0, s15
 800cefc:	e564      	b.n	800c9c8 <forward_cast+0x25b8>
 800cefe:	f995 1000 	ldrsb.w	r1, [r5]
 800cf02:	ee07 1a90 	vmov	s15, r1
 800cf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0a:	f7fd bf08 	b.w	800ad1e <forward_cast+0x90e>
 800cf0e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf12:	f7f3 ff51 	bl	8000db8 <__aeabi_l2f>
 800cf16:	ee07 0a90 	vmov	s15, r0
 800cf1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf1e:	4b4c      	ldr	r3, [pc, #304]	; (800d050 <forward_cast+0x2c40>)
 800cf20:	4a4a      	ldr	r2, [pc, #296]	; (800d04c <forward_cast+0x2c3c>)
 800cf22:	ee17 0a90 	vmov	r0, s15
 800cf26:	e54f      	b.n	800c9c8 <forward_cast+0x25b8>
 800cf28:	7828      	ldrb	r0, [r5, #0]
 800cf2a:	e54d      	b.n	800c9c8 <forward_cast+0x25b8>
 800cf2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf30:	f7f3 ff3a 	bl	8000da8 <__aeabi_ul2f>
 800cf34:	ee07 0a90 	vmov	s15, r0
 800cf38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf3c:	4a43      	ldr	r2, [pc, #268]	; (800d04c <forward_cast+0x2c3c>)
 800cf3e:	4b44      	ldr	r3, [pc, #272]	; (800d050 <forward_cast+0x2c40>)
 800cf40:	ee17 0a90 	vmov	r0, s15
 800cf44:	e540      	b.n	800c9c8 <forward_cast+0x25b8>
 800cf46:	f9b5 0000 	ldrsh.w	r0, [r5]
 800cf4a:	e53d      	b.n	800c9c8 <forward_cast+0x25b8>
 800cf4c:	f995 0000 	ldrsb.w	r0, [r5]
 800cf50:	e53a      	b.n	800c9c8 <forward_cast+0x25b8>
 800cf52:	edd5 7a00 	vldr	s15, [r5]
 800cf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf62:	f7fd bedc 	b.w	800ad1e <forward_cast+0x90e>
 800cf66:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf6a:	f7f3 ff1d 	bl	8000da8 <__aeabi_ul2f>
 800cf6e:	ee07 0a90 	vmov	s15, r0
 800cf72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf76:	4a34      	ldr	r2, [pc, #208]	; (800d048 <forward_cast+0x2c38>)
 800cf78:	4b35      	ldr	r3, [pc, #212]	; (800d050 <forward_cast+0x2c40>)
 800cf7a:	ee17 0a90 	vmov	r0, s15
 800cf7e:	f7fe ba57 	b.w	800b430 <forward_cast+0x1020>
 800cf82:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf86:	f7f3 ff0f 	bl	8000da8 <__aeabi_ul2f>
 800cf8a:	ee07 0a90 	vmov	s15, r0
 800cf8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf92:	4b31      	ldr	r3, [pc, #196]	; (800d058 <forward_cast+0x2c48>)
 800cf94:	4a2f      	ldr	r2, [pc, #188]	; (800d054 <forward_cast+0x2c44>)
 800cf96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf9a:	f7fd bec0 	b.w	800ad1e <forward_cast+0x90e>
 800cf9e:	f995 1000 	ldrsb.w	r1, [r5]
 800cfa2:	3900      	subs	r1, #0
 800cfa4:	bf18      	it	ne
 800cfa6:	2101      	movne	r1, #1
 800cfa8:	e572      	b.n	800ca90 <forward_cast+0x2680>
 800cfaa:	edd5 7a00 	vldr	s15, [r5]
 800cfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfba:	bf14      	ite	ne
 800cfbc:	2101      	movne	r1, #1
 800cfbe:	2100      	moveq	r1, #0
 800cfc0:	e566      	b.n	800ca90 <forward_cast+0x2680>
 800cfc2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cfc6:	f7f3 feef 	bl	8000da8 <__aeabi_ul2f>
 800cfca:	ee07 0a90 	vmov	s15, r0
 800cfce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd6:	4a1d      	ldr	r2, [pc, #116]	; (800d04c <forward_cast+0x2c3c>)
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <forward_cast+0x2c40>)
 800cfda:	bf14      	ite	ne
 800cfdc:	2101      	movne	r1, #1
 800cfde:	2100      	moveq	r1, #0
 800cfe0:	e556      	b.n	800ca90 <forward_cast+0x2680>
 800cfe2:	f9b5 1000 	ldrsh.w	r1, [r5]
 800cfe6:	3900      	subs	r1, #0
 800cfe8:	bf18      	it	ne
 800cfea:	2101      	movne	r1, #1
 800cfec:	e550      	b.n	800ca90 <forward_cast+0x2680>
 800cfee:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cff2:	f7f3 fed9 	bl	8000da8 <__aeabi_ul2f>
 800cff6:	ee07 0a90 	vmov	s15, r0
 800cffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cffe:	4a14      	ldr	r2, [pc, #80]	; (800d050 <forward_cast+0x2c40>)
 800d000:	edcd 7a01 	vstr	s15, [sp, #4]
 800d004:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d008:	4b12      	ldr	r3, [pc, #72]	; (800d054 <forward_cast+0x2c44>)
 800d00a:	e634      	b.n	800cc76 <forward_cast+0x2866>
 800d00c:	edd5 7a00 	vldr	s15, [r5]
 800d010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d018:	edcd 7a01 	vstr	s15, [sp, #4]
 800d01c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d020:	f7fe ba3b 	b.w	800b49a <forward_cast+0x108a>
 800d024:	f995 0000 	ldrsb.w	r0, [r5]
 800d028:	f7fe ba6f 	b.w	800b50a <forward_cast+0x10fa>
 800d02c:	f995 0000 	ldrsb.w	r0, [r5]
 800d030:	f7fe b9fe 	b.w	800b430 <forward_cast+0x1020>
 800d034:	7829      	ldrb	r1, [r5, #0]
 800d036:	f7fd bc7f 	b.w	800a938 <forward_cast+0x528>
 800d03a:	bf00      	nop
 800d03c:	00060440 	.word	0x00060440
 800d040:	00842040 	.word	0x00842040
 800d044:	01821040 	.word	0x01821040
 800d048:	00040440 	.word	0x00040440
 800d04c:	00042040 	.word	0x00042040
 800d050:	00041040 	.word	0x00041040
 800d054:	00841040 	.word	0x00841040
 800d058:	00840840 	.word	0x00840840
 800d05c:	edd5 7a00 	vldr	s15, [r5]
 800d060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d068:	ee17 1a90 	vmov	r1, s15
 800d06c:	b289      	uxth	r1, r1
 800d06e:	f7fd bac1 	b.w	800a5f4 <forward_cast+0x1e4>
 800d072:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d076:	f7f3 fe9f 	bl	8000db8 <__aeabi_l2f>
 800d07a:	ee07 0a90 	vmov	s15, r0
 800d07e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d082:	4be3      	ldr	r3, [pc, #908]	; (800d410 <forward_cast+0x3000>)
 800d084:	edcd 7a01 	vstr	s15, [sp, #4]
 800d088:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d08c:	4ae1      	ldr	r2, [pc, #900]	; (800d414 <forward_cast+0x3004>)
 800d08e:	f7fd bdf2 	b.w	800ac76 <forward_cast+0x866>
 800d092:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d096:	f7f3 fe8f 	bl	8000db8 <__aeabi_l2f>
 800d09a:	ee07 0a90 	vmov	s15, r0
 800d09e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0a2:	4bdd      	ldr	r3, [pc, #884]	; (800d418 <forward_cast+0x3008>)
 800d0a4:	4add      	ldr	r2, [pc, #884]	; (800d41c <forward_cast+0x300c>)
 800d0a6:	ee17 0a90 	vmov	r0, s15
 800d0aa:	f7fe b931 	b.w	800b310 <forward_cast+0xf00>
 800d0ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0b2:	f7f3 fe79 	bl	8000da8 <__aeabi_ul2f>
 800d0b6:	ee07 0a90 	vmov	s15, r0
 800d0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0be:	4ad6      	ldr	r2, [pc, #856]	; (800d418 <forward_cast+0x3008>)
 800d0c0:	ee17 3a90 	vmov	r3, s15
 800d0c4:	b299      	uxth	r1, r3
 800d0c6:	4bd3      	ldr	r3, [pc, #844]	; (800d414 <forward_cast+0x3004>)
 800d0c8:	f7fd bc36 	b.w	800a938 <forward_cast+0x528>
 800d0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	f7f3 fe69 	bl	8000da8 <__aeabi_ul2f>
 800d0d6:	ee07 0a90 	vmov	s15, r0
 800d0da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	4acb      	ldr	r2, [pc, #812]	; (800d410 <forward_cast+0x3000>)
 800d0e2:	ee17 0a90 	vmov	r0, s15
 800d0e6:	f7fd bc63 	b.w	800a9b0 <forward_cast+0x5a0>
 800d0ea:	edd5 7a00 	vldr	s15, [r5]
 800d0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0f6:	ee17 0a90 	vmov	r0, s15
 800d0fa:	f7fd bc59 	b.w	800a9b0 <forward_cast+0x5a0>
 800d0fe:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d102:	f7fe b95f 	b.w	800b3c4 <forward_cast+0xfb4>
 800d106:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d10a:	f7f3 fe4d 	bl	8000da8 <__aeabi_ul2f>
 800d10e:	ee07 0a90 	vmov	s15, r0
 800d112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d116:	4ac1      	ldr	r2, [pc, #772]	; (800d41c <forward_cast+0x300c>)
 800d118:	4bbf      	ldr	r3, [pc, #764]	; (800d418 <forward_cast+0x3008>)
 800d11a:	ee17 0a90 	vmov	r0, s15
 800d11e:	f7fe b951 	b.w	800b3c4 <forward_cast+0xfb4>
 800d122:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d126:	f7f3 fe3f 	bl	8000da8 <__aeabi_ul2f>
 800d12a:	ee07 0a90 	vmov	s15, r0
 800d12e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d132:	4abb      	ldr	r2, [pc, #748]	; (800d420 <forward_cast+0x3010>)
 800d134:	4bb6      	ldr	r3, [pc, #728]	; (800d410 <forward_cast+0x3000>)
 800d136:	ee17 0a90 	vmov	r0, s15
 800d13a:	f7fe b9e6 	b.w	800b50a <forward_cast+0x10fa>
 800d13e:	edd5 7a00 	vldr	s15, [r5]
 800d142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d14a:	ee17 0a90 	vmov	r0, s15
 800d14e:	f7fe b9dc 	b.w	800b50a <forward_cast+0x10fa>
 800d152:	7828      	ldrb	r0, [r5, #0]
 800d154:	f7fe b8dc 	b.w	800b310 <forward_cast+0xf00>
 800d158:	edd5 7a00 	vldr	s15, [r5]
 800d15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d164:	ee17 0a90 	vmov	r0, s15
 800d168:	e532      	b.n	800cbd0 <forward_cast+0x27c0>
 800d16a:	f995 0000 	ldrsb.w	r0, [r5]
 800d16e:	f7fd ba92 	b.w	800a696 <forward_cast+0x286>
 800d172:	f995 0000 	ldrsb.w	r0, [r5]
 800d176:	e4dc      	b.n	800cb32 <forward_cast+0x2722>
 800d178:	edd5 7a00 	vldr	s15, [r5]
 800d17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d184:	ee17 0a90 	vmov	r0, s15
 800d188:	e4d3      	b.n	800cb32 <forward_cast+0x2722>
 800d18a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d18e:	f7f3 fe0b 	bl	8000da8 <__aeabi_ul2f>
 800d192:	ee07 0a90 	vmov	s15, r0
 800d196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d19a:	4a9f      	ldr	r2, [pc, #636]	; (800d418 <forward_cast+0x3008>)
 800d19c:	edcd 7a01 	vstr	s15, [sp, #4]
 800d1a0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d1a4:	4b9a      	ldr	r3, [pc, #616]	; (800d410 <forward_cast+0x3000>)
 800d1a6:	f7fe b978 	b.w	800b49a <forward_cast+0x108a>
 800d1aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1ae:	f7f3 fdfb 	bl	8000da8 <__aeabi_ul2f>
 800d1b2:	ee07 0a90 	vmov	s15, r0
 800d1b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1ba:	4a96      	ldr	r2, [pc, #600]	; (800d414 <forward_cast+0x3004>)
 800d1bc:	4b94      	ldr	r3, [pc, #592]	; (800d410 <forward_cast+0x3000>)
 800d1be:	ee17 0a90 	vmov	r0, s15
 800d1c2:	f7fd ba68 	b.w	800a696 <forward_cast+0x286>
 800d1c6:	edd5 7a00 	vldr	s15, [r5]
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1d2:	ee17 0a90 	vmov	r0, s15
 800d1d6:	f7fd ba5e 	b.w	800a696 <forward_cast+0x286>
 800d1da:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d1de:	f7fd ba5a 	b.w	800a696 <forward_cast+0x286>
 800d1e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1e6:	f7f3 fddf 	bl	8000da8 <__aeabi_ul2f>
 800d1ea:	ee07 0a90 	vmov	s15, r0
 800d1ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1f2:	4a88      	ldr	r2, [pc, #544]	; (800d414 <forward_cast+0x3004>)
 800d1f4:	edcd 7a01 	vstr	s15, [sp, #4]
 800d1f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d1fc:	4b84      	ldr	r3, [pc, #528]	; (800d410 <forward_cast+0x3000>)
 800d1fe:	f7fd bd3a 	b.w	800ac76 <forward_cast+0x866>
 800d202:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d206:	f7f3 fdcf 	bl	8000da8 <__aeabi_ul2f>
 800d20a:	ee07 0a90 	vmov	s15, r0
 800d20e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d212:	4a80      	ldr	r2, [pc, #512]	; (800d414 <forward_cast+0x3004>)
 800d214:	edcd 7a01 	vstr	s15, [sp, #4]
 800d218:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d21c:	4b7c      	ldr	r3, [pc, #496]	; (800d410 <forward_cast+0x3000>)
 800d21e:	f7fd bceb 	b.w	800abf8 <forward_cast+0x7e8>
 800d222:	edd5 7a00 	vldr	s15, [r5]
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d22e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d232:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d236:	f7fd bcdf 	b.w	800abf8 <forward_cast+0x7e8>
 800d23a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d23e:	f7fd ba8d 	b.w	800a75c <forward_cast+0x34c>
 800d242:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d246:	f7f3 fdb7 	bl	8000db8 <__aeabi_l2f>
 800d24a:	ee07 0a90 	vmov	s15, r0
 800d24e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d252:	4b6f      	ldr	r3, [pc, #444]	; (800d410 <forward_cast+0x3000>)
 800d254:	4a6f      	ldr	r2, [pc, #444]	; (800d414 <forward_cast+0x3004>)
 800d256:	ee17 0a90 	vmov	r0, s15
 800d25a:	f7fd bc3b 	b.w	800aad4 <forward_cast+0x6c4>
 800d25e:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d262:	ee07 1a90 	vmov	s15, r1
 800d266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d26a:	f7fd bc8d 	b.w	800ab88 <forward_cast+0x778>
 800d26e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d272:	f7f3 fda1 	bl	8000db8 <__aeabi_l2f>
 800d276:	ee07 0a90 	vmov	s15, r0
 800d27a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d27e:	4b66      	ldr	r3, [pc, #408]	; (800d418 <forward_cast+0x3008>)
 800d280:	4a66      	ldr	r2, [pc, #408]	; (800d41c <forward_cast+0x300c>)
 800d282:	ee17 0a90 	vmov	r0, s15
 800d286:	f7fd bbe5 	b.w	800aa54 <forward_cast+0x644>
 800d28a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d28e:	f7fd bc21 	b.w	800aad4 <forward_cast+0x6c4>
 800d292:	f995 0000 	ldrsb.w	r0, [r5]
 800d296:	f7ff bb2f 	b.w	800c8f8 <forward_cast+0x24e8>
 800d29a:	f995 0000 	ldrsb.w	r0, [r5]
 800d29e:	f7fd bbd9 	b.w	800aa54 <forward_cast+0x644>
 800d2a2:	f995 0000 	ldrsb.w	r0, [r5]
 800d2a6:	f7fd bf70 	b.w	800b18a <forward_cast+0xd7a>
 800d2aa:	f995 1000 	ldrsb.w	r1, [r5]
 800d2ae:	3900      	subs	r1, #0
 800d2b0:	bf18      	it	ne
 800d2b2:	2101      	movne	r1, #1
 800d2b4:	f7fd bfa4 	b.w	800b200 <forward_cast+0xdf0>
 800d2b8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2bc:	f7f3 fd7c 	bl	8000db8 <__aeabi_l2f>
 800d2c0:	ee07 0a90 	vmov	s15, r0
 800d2c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2c8:	4b53      	ldr	r3, [pc, #332]	; (800d418 <forward_cast+0x3008>)
 800d2ca:	4a54      	ldr	r2, [pc, #336]	; (800d41c <forward_cast+0x300c>)
 800d2cc:	ee17 0a90 	vmov	r0, s15
 800d2d0:	f7ff bb12 	b.w	800c8f8 <forward_cast+0x24e8>
 800d2d4:	7828      	ldrb	r0, [r5, #0]
 800d2d6:	f7ff bb0f 	b.w	800c8f8 <forward_cast+0x24e8>
 800d2da:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2de:	f7f3 fd63 	bl	8000da8 <__aeabi_ul2f>
 800d2e2:	ee07 0a90 	vmov	s15, r0
 800d2e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2ea:	4a4c      	ldr	r2, [pc, #304]	; (800d41c <forward_cast+0x300c>)
 800d2ec:	4b4a      	ldr	r3, [pc, #296]	; (800d418 <forward_cast+0x3008>)
 800d2ee:	ee17 0a90 	vmov	r0, s15
 800d2f2:	f7ff bb01 	b.w	800c8f8 <forward_cast+0x24e8>
 800d2f6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d2fa:	f7ff bafd 	b.w	800c8f8 <forward_cast+0x24e8>
 800d2fe:	edd5 7a00 	vldr	s15, [r5]
 800d302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d30a:	ee17 0a90 	vmov	r0, s15
 800d30e:	f7ff baf3 	b.w	800c8f8 <forward_cast+0x24e8>
 800d312:	edd5 7a00 	vldr	s15, [r5]
 800d316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d31e:	ee17 1a90 	vmov	r1, s15
 800d322:	b289      	uxth	r1, r1
 800d324:	f7fd bb08 	b.w	800a938 <forward_cast+0x528>
 800d328:	edd5 7a00 	vldr	s15, [r5]
 800d32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d334:	ee17 0a90 	vmov	r0, s15
 800d338:	f7fe b844 	b.w	800b3c4 <forward_cast+0xfb4>
 800d33c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d340:	f7fe b876 	b.w	800b430 <forward_cast+0x1020>
 800d344:	f995 0000 	ldrsb.w	r0, [r5]
 800d348:	f7fe b83c 	b.w	800b3c4 <forward_cast+0xfb4>
 800d34c:	f995 1000 	ldrsb.w	r1, [r5]
 800d350:	f7fd bdd8 	b.w	800af04 <forward_cast+0xaf4>
 800d354:	f995 1000 	ldrsb.w	r1, [r5]
 800d358:	b289      	uxth	r1, r1
 800d35a:	f7fd b94b 	b.w	800a5f4 <forward_cast+0x1e4>
 800d35e:	f995 0000 	ldrsb.w	r0, [r5]
 800d362:	f7ff ba34 	b.w	800c7ce <forward_cast+0x23be>
 800d366:	edd5 7a00 	vldr	s15, [r5]
 800d36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d372:	edcd 7a01 	vstr	s15, [sp, #4]
 800d376:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d37a:	f7ff b9cb 	b.w	800c714 <forward_cast+0x2304>
 800d37e:	f995 0000 	ldrsb.w	r0, [r5]
 800d382:	f7ff ba6d 	b.w	800c860 <forward_cast+0x2450>
 800d386:	edd5 7a00 	vldr	s15, [r5]
 800d38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d392:	ee17 0a90 	vmov	r0, s15
 800d396:	f7ff ba63 	b.w	800c860 <forward_cast+0x2450>
 800d39a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d39e:	f7f3 fd03 	bl	8000da8 <__aeabi_ul2f>
 800d3a2:	4b20      	ldr	r3, [pc, #128]	; (800d424 <forward_cast+0x3014>)
 800d3a4:	4a20      	ldr	r2, [pc, #128]	; (800d428 <forward_cast+0x3018>)
 800d3a6:	ee07 0a90 	vmov	s15, r0
 800d3aa:	f7fd bbed 	b.w	800ab88 <forward_cast+0x778>
 800d3ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d3b2:	f7f3 fcf9 	bl	8000da8 <__aeabi_ul2f>
 800d3b6:	ee07 0a90 	vmov	s15, r0
 800d3ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3be:	4a17      	ldr	r2, [pc, #92]	; (800d41c <forward_cast+0x300c>)
 800d3c0:	4b15      	ldr	r3, [pc, #84]	; (800d418 <forward_cast+0x3008>)
 800d3c2:	ee17 0a90 	vmov	r0, s15
 800d3c6:	f7fd bb45 	b.w	800aa54 <forward_cast+0x644>
 800d3ca:	edd5 7a00 	vldr	s15, [r5]
 800d3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3d6:	ee17 0a90 	vmov	r0, s15
 800d3da:	f7fd bb3b 	b.w	800aa54 <forward_cast+0x644>
 800d3de:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d3e2:	3900      	subs	r1, #0
 800d3e4:	bf18      	it	ne
 800d3e6:	2101      	movne	r1, #1
 800d3e8:	f7fd bf0a 	b.w	800b200 <forward_cast+0xdf0>
 800d3ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d3f0:	f7f3 fcda 	bl	8000da8 <__aeabi_ul2f>
 800d3f4:	ee07 0a90 	vmov	s15, r0
 800d3f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	4a06      	ldr	r2, [pc, #24]	; (800d41c <forward_cast+0x300c>)
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <forward_cast+0x3008>)
 800d404:	bf14      	ite	ne
 800d406:	2101      	movne	r1, #1
 800d408:	2100      	moveq	r1, #0
 800d40a:	f7fd bef9 	b.w	800b200 <forward_cast+0xdf0>
 800d40e:	bf00      	nop
 800d410:	00841040 	.word	0x00841040
 800d414:	00041040 	.word	0x00041040
 800d418:	00042040 	.word	0x00042040
 800d41c:	00060440 	.word	0x00060440
 800d420:	01821040 	.word	0x01821040
 800d424:	00842040 	.word	0x00842040
 800d428:	00840440 	.word	0x00840440
 800d42c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d430:	f7f3 fcba 	bl	8000da8 <__aeabi_ul2f>
 800d434:	ee07 0a90 	vmov	s15, r0
 800d438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d43c:	4bdc      	ldr	r3, [pc, #880]	; (800d7b0 <forward_cast+0x33a0>)
 800d43e:	4add      	ldr	r2, [pc, #884]	; (800d7b4 <forward_cast+0x33a4>)
 800d440:	ee17 0a90 	vmov	r0, s15
 800d444:	f7fd bea1 	b.w	800b18a <forward_cast+0xd7a>
 800d448:	edd5 7a00 	vldr	s15, [r5]
 800d44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d454:	ee17 0a90 	vmov	r0, s15
 800d458:	f7fd be97 	b.w	800b18a <forward_cast+0xd7a>
 800d45c:	7828      	ldrb	r0, [r5, #0]
 800d45e:	f7fd baf9 	b.w	800aa54 <forward_cast+0x644>
 800d462:	edd5 7a00 	vldr	s15, [r5]
 800d466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46a:	f7fd bb8d 	b.w	800ab88 <forward_cast+0x778>
 800d46e:	7829      	ldrb	r1, [r5, #0]
 800d470:	ee07 1a90 	vmov	s15, r1
 800d474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d478:	f7fd bc51 	b.w	800ad1e <forward_cast+0x90e>
 800d47c:	edd5 7a00 	vldr	s15, [r5]
 800d480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d484:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48c:	bf14      	ite	ne
 800d48e:	2101      	movne	r1, #1
 800d490:	2100      	moveq	r1, #0
 800d492:	f7fd beb5 	b.w	800b200 <forward_cast+0xdf0>
 800d496:	7829      	ldrb	r1, [r5, #0]
 800d498:	ee07 1a90 	vmov	s15, r1
 800d49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a0:	f7fd bb72 	b.w	800ab88 <forward_cast+0x778>
 800d4a4:	edd5 7a00 	vldr	s15, [r5]
 800d4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4b0:	ee17 0a90 	vmov	r0, s15
 800d4b4:	f7ff b98b 	b.w	800c7ce <forward_cast+0x23be>
 800d4b8:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d4bc:	f7fd be65 	b.w	800b18a <forward_cast+0xd7a>
 800d4c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d4c4:	f7f3 fc78 	bl	8000db8 <__aeabi_l2f>
 800d4c8:	4abb      	ldr	r2, [pc, #748]	; (800d7b8 <forward_cast+0x33a8>)
 800d4ca:	4bbc      	ldr	r3, [pc, #752]	; (800d7bc <forward_cast+0x33ac>)
 800d4cc:	ee07 0a90 	vmov	s15, r0
 800d4d0:	f7fd bb5a 	b.w	800ab88 <forward_cast+0x778>
 800d4d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d4d8:	f7f3 fc6e 	bl	8000db8 <__aeabi_l2f>
 800d4dc:	ee07 0a90 	vmov	s15, r0
 800d4e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4e4:	4bb6      	ldr	r3, [pc, #728]	; (800d7c0 <forward_cast+0x33b0>)
 800d4e6:	4ab7      	ldr	r2, [pc, #732]	; (800d7c4 <forward_cast+0x33b4>)
 800d4e8:	ee17 0a90 	vmov	r0, s15
 800d4ec:	f7fd b831 	b.w	800a552 <forward_cast+0x142>
 800d4f0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d4f4:	f7f3 fc60 	bl	8000db8 <__aeabi_l2f>
 800d4f8:	ee07 0a90 	vmov	s15, r0
 800d4fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d500:	4aab      	ldr	r2, [pc, #684]	; (800d7b0 <forward_cast+0x33a0>)
 800d502:	ee17 3a90 	vmov	r3, s15
 800d506:	b299      	uxth	r1, r3
 800d508:	4baf      	ldr	r3, [pc, #700]	; (800d7c8 <forward_cast+0x33b8>)
 800d50a:	f7fd b873 	b.w	800a5f4 <forward_cast+0x1e4>
 800d50e:	7828      	ldrb	r0, [r5, #0]
 800d510:	f7fd b8c1 	b.w	800a696 <forward_cast+0x286>
 800d514:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d518:	f7f3 fc4e 	bl	8000db8 <__aeabi_l2f>
 800d51c:	ee07 0a90 	vmov	s15, r0
 800d520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d524:	4ba6      	ldr	r3, [pc, #664]	; (800d7c0 <forward_cast+0x33b0>)
 800d526:	4aa7      	ldr	r2, [pc, #668]	; (800d7c4 <forward_cast+0x33b4>)
 800d528:	ee17 0a90 	vmov	r0, s15
 800d52c:	f7fd bd72 	b.w	800b014 <forward_cast+0xc04>
 800d530:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d534:	f7fd b80d 	b.w	800a552 <forward_cast+0x142>
 800d538:	7829      	ldrb	r1, [r5, #0]
 800d53a:	f7fd b85b 	b.w	800a5f4 <forward_cast+0x1e4>
 800d53e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	f7f3 fc38 	bl	8000db8 <__aeabi_l2f>
 800d548:	ee07 0a90 	vmov	s15, r0
 800d54c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d550:	4a9c      	ldr	r2, [pc, #624]	; (800d7c4 <forward_cast+0x33b4>)
 800d552:	9b01      	ldr	r3, [sp, #4]
 800d554:	ee17 0a90 	vmov	r0, s15
 800d558:	f7fd ba2a 	b.w	800a9b0 <forward_cast+0x5a0>
 800d55c:	f995 1000 	ldrsb.w	r1, [r5]
 800d560:	b289      	uxth	r1, r1
 800d562:	f7fd b9e9 	b.w	800a938 <forward_cast+0x528>
 800d566:	f995 0000 	ldrsb.w	r0, [r5]
 800d56a:	f7fd ba21 	b.w	800a9b0 <forward_cast+0x5a0>
 800d56e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d572:	f7f3 fc21 	bl	8000db8 <__aeabi_l2f>
 800d576:	ee07 0a90 	vmov	s15, r0
 800d57a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d57e:	4b91      	ldr	r3, [pc, #580]	; (800d7c4 <forward_cast+0x33b4>)
 800d580:	4a91      	ldr	r2, [pc, #580]	; (800d7c8 <forward_cast+0x33b8>)
 800d582:	ee17 0a90 	vmov	r0, s15
 800d586:	f7fd b8e9 	b.w	800a75c <forward_cast+0x34c>
 800d58a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d58e:	f7fd bebf 	b.w	800b310 <forward_cast+0xf00>
 800d592:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d596:	f7f3 fc0f 	bl	8000db8 <__aeabi_l2f>
 800d59a:	ee07 0a90 	vmov	s15, r0
 800d59e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5a2:	4a84      	ldr	r2, [pc, #528]	; (800d7b4 <forward_cast+0x33a4>)
 800d5a4:	4b82      	ldr	r3, [pc, #520]	; (800d7b0 <forward_cast+0x33a0>)
 800d5a6:	ee17 0a90 	vmov	r0, s15
 800d5aa:	f7fd bdee 	b.w	800b18a <forward_cast+0xd7a>
 800d5ae:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d5b2:	ee07 1a90 	vmov	s15, r1
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	f7fd bbb0 	b.w	800ad1e <forward_cast+0x90e>
 800d5be:	edd5 7a00 	vldr	s15, [r5]
 800d5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5ca:	edcd 7a01 	vstr	s15, [sp, #4]
 800d5ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d5d2:	f7ff b803 	b.w	800c5dc <forward_cast+0x21cc>
 800d5d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d5da:	f7f3 fbed 	bl	8000db8 <__aeabi_l2f>
 800d5de:	ee07 0a90 	vmov	s15, r0
 800d5e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5e6:	4b77      	ldr	r3, [pc, #476]	; (800d7c4 <forward_cast+0x33b4>)
 800d5e8:	edcd 7a01 	vstr	s15, [sp, #4]
 800d5ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d5f0:	4a75      	ldr	r2, [pc, #468]	; (800d7c8 <forward_cast+0x33b8>)
 800d5f2:	f7fe bff3 	b.w	800c5dc <forward_cast+0x21cc>
 800d5f6:	f995 0000 	ldrsb.w	r0, [r5]
 800d5fa:	f7ff b839 	b.w	800c670 <forward_cast+0x2260>
 800d5fe:	edd5 7a00 	vldr	s15, [r5]
 800d602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d60a:	ee17 0a90 	vmov	r0, s15
 800d60e:	f7ff b82f 	b.w	800c670 <forward_cast+0x2260>
 800d612:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d616:	f7f3 fbcf 	bl	8000db8 <__aeabi_l2f>
 800d61a:	ee07 0a90 	vmov	s15, r0
 800d61e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d622:	4b63      	ldr	r3, [pc, #396]	; (800d7b0 <forward_cast+0x33a0>)
 800d624:	4a69      	ldr	r2, [pc, #420]	; (800d7cc <forward_cast+0x33bc>)
 800d626:	ee17 0a90 	vmov	r0, s15
 800d62a:	f7ff b821 	b.w	800c670 <forward_cast+0x2260>
 800d62e:	7828      	ldrb	r0, [r5, #0]
 800d630:	f7ff b81e 	b.w	800c670 <forward_cast+0x2260>
 800d634:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d638:	f7f3 fbb6 	bl	8000da8 <__aeabi_ul2f>
 800d63c:	ee07 0a90 	vmov	s15, r0
 800d640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d644:	4a61      	ldr	r2, [pc, #388]	; (800d7cc <forward_cast+0x33bc>)
 800d646:	4b5a      	ldr	r3, [pc, #360]	; (800d7b0 <forward_cast+0x33a0>)
 800d648:	ee17 0a90 	vmov	r0, s15
 800d64c:	f7ff b810 	b.w	800c670 <forward_cast+0x2260>
 800d650:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d654:	f7ff b80c 	b.w	800c670 <forward_cast+0x2260>
 800d658:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d65c:	f7f3 fba4 	bl	8000da8 <__aeabi_ul2f>
 800d660:	ee07 0a90 	vmov	s15, r0
 800d664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d668:	4a57      	ldr	r2, [pc, #348]	; (800d7c8 <forward_cast+0x33b8>)
 800d66a:	edcd 7a01 	vstr	s15, [sp, #4]
 800d66e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d672:	4b54      	ldr	r3, [pc, #336]	; (800d7c4 <forward_cast+0x33b4>)
 800d674:	f7fe bfb2 	b.w	800c5dc <forward_cast+0x21cc>
 800d678:	edd5 7a00 	vldr	s15, [r5]
 800d67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d684:	ee17 0a90 	vmov	r0, s15
 800d688:	f7fe bedb 	b.w	800c442 <forward_cast+0x2032>
 800d68c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d690:	f7f3 fb92 	bl	8000db8 <__aeabi_l2f>
 800d694:	ee07 0a90 	vmov	s15, r0
 800d698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d69c:	4b44      	ldr	r3, [pc, #272]	; (800d7b0 <forward_cast+0x33a0>)
 800d69e:	4a4b      	ldr	r2, [pc, #300]	; (800d7cc <forward_cast+0x33bc>)
 800d6a0:	ee17 0a90 	vmov	r0, s15
 800d6a4:	f7fd be8e 	b.w	800b3c4 <forward_cast+0xfb4>
 800d6a8:	7828      	ldrb	r0, [r5, #0]
 800d6aa:	f7fd bec1 	b.w	800b430 <forward_cast+0x1020>
 800d6ae:	f995 0000 	ldrsb.w	r0, [r5]
 800d6b2:	f7fe bf2b 	b.w	800c50c <forward_cast+0x20fc>
 800d6b6:	edd5 7a00 	vldr	s15, [r5]
 800d6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6c2:	ee17 0a90 	vmov	r0, s15
 800d6c6:	f7fe bf21 	b.w	800c50c <forward_cast+0x20fc>
 800d6ca:	7829      	ldrb	r1, [r5, #0]
 800d6cc:	f7fd bc1a 	b.w	800af04 <forward_cast+0xaf4>
 800d6d0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d6d4:	f7f3 fb70 	bl	8000db8 <__aeabi_l2f>
 800d6d8:	ee07 0a90 	vmov	s15, r0
 800d6dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6e0:	4b38      	ldr	r3, [pc, #224]	; (800d7c4 <forward_cast+0x33b4>)
 800d6e2:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d6ea:	4a37      	ldr	r2, [pc, #220]	; (800d7c8 <forward_cast+0x33b8>)
 800d6ec:	f7fd ba84 	b.w	800abf8 <forward_cast+0x7e8>
 800d6f0:	edd5 7a00 	vldr	s15, [r5]
 800d6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6fc:	ee17 0a90 	vmov	r0, s15
 800d700:	f7fe bb99 	b.w	800be36 <forward_cast+0x1a26>
 800d704:	f995 1000 	ldrsb.w	r1, [r5]
 800d708:	b289      	uxth	r1, r1
 800d70a:	f7fd b87f 	b.w	800a80c <forward_cast+0x3fc>
 800d70e:	f995 0000 	ldrsb.w	r0, [r5]
 800d712:	f7fe bb90 	b.w	800be36 <forward_cast+0x1a26>
 800d716:	f995 0000 	ldrsb.w	r0, [r5]
 800d71a:	f7fd bcf8 	b.w	800b10e <forward_cast+0xcfe>
 800d71e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d722:	f7f3 fb49 	bl	8000db8 <__aeabi_l2f>
 800d726:	ee07 0a90 	vmov	s15, r0
 800d72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d72e:	4b25      	ldr	r3, [pc, #148]	; (800d7c4 <forward_cast+0x33b4>)
 800d730:	4a26      	ldr	r2, [pc, #152]	; (800d7cc <forward_cast+0x33bc>)
 800d732:	ee17 0a90 	vmov	r0, s15
 800d736:	f7fe bbca 	b.w	800bece <forward_cast+0x1abe>
 800d73a:	7828      	ldrb	r0, [r5, #0]
 800d73c:	f7fe bbc7 	b.w	800bece <forward_cast+0x1abe>
 800d740:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d744:	f7f3 fb30 	bl	8000da8 <__aeabi_ul2f>
 800d748:	ee07 0a90 	vmov	s15, r0
 800d74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d750:	4a1e      	ldr	r2, [pc, #120]	; (800d7cc <forward_cast+0x33bc>)
 800d752:	4b1c      	ldr	r3, [pc, #112]	; (800d7c4 <forward_cast+0x33b4>)
 800d754:	ee17 0a90 	vmov	r0, s15
 800d758:	f7fe bbb9 	b.w	800bece <forward_cast+0x1abe>
 800d75c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d760:	f7fe bbb5 	b.w	800bece <forward_cast+0x1abe>
 800d764:	f995 1000 	ldrsb.w	r1, [r5]
 800d768:	3900      	subs	r1, #0
 800d76a:	bf18      	it	ne
 800d76c:	2101      	movne	r1, #1
 800d76e:	f7fe bc5d 	b.w	800c02c <forward_cast+0x1c1c>
 800d772:	f995 0000 	ldrsb.w	r0, [r5]
 800d776:	f7fd b893 	b.w	800a8a0 <forward_cast+0x490>
 800d77a:	f995 0000 	ldrsb.w	r0, [r5]
 800d77e:	f7fe bba6 	b.w	800bece <forward_cast+0x1abe>
 800d782:	edd5 7a00 	vldr	s15, [r5]
 800d786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d78e:	ee17 0a90 	vmov	r0, s15
 800d792:	f7fe bb9c 	b.w	800bece <forward_cast+0x1abe>
 800d796:	edd5 7a00 	vldr	s15, [r5]
 800d79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d79e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a6:	bf14      	ite	ne
 800d7a8:	2101      	movne	r1, #1
 800d7aa:	2100      	moveq	r1, #0
 800d7ac:	f7fe bc3e 	b.w	800c02c <forward_cast+0x1c1c>
 800d7b0:	00042040 	.word	0x00042040
 800d7b4:	01821040 	.word	0x01821040
 800d7b8:	00840440 	.word	0x00840440
 800d7bc:	00842040 	.word	0x00842040
 800d7c0:	00840840 	.word	0x00840840
 800d7c4:	00841040 	.word	0x00841040
 800d7c8:	00041040 	.word	0x00041040
 800d7cc:	00060440 	.word	0x00060440
 800d7d0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d7d4:	f7f3 faf0 	bl	8000db8 <__aeabi_l2f>
 800d7d8:	ee07 0a90 	vmov	s15, r0
 800d7dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e4:	4bd9      	ldr	r3, [pc, #868]	; (800db4c <forward_cast+0x373c>)
 800d7e6:	4ada      	ldr	r2, [pc, #872]	; (800db50 <forward_cast+0x3740>)
 800d7e8:	bf14      	ite	ne
 800d7ea:	2101      	movne	r1, #1
 800d7ec:	2100      	moveq	r1, #0
 800d7ee:	f7fe bc1d 	b.w	800c02c <forward_cast+0x1c1c>
 800d7f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d7f6:	f7f3 fad7 	bl	8000da8 <__aeabi_ul2f>
 800d7fa:	ee07 0a90 	vmov	s15, r0
 800d7fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	4ad2      	ldr	r2, [pc, #840]	; (800db50 <forward_cast+0x3740>)
 800d808:	4bd0      	ldr	r3, [pc, #832]	; (800db4c <forward_cast+0x373c>)
 800d80a:	bf14      	ite	ne
 800d80c:	2101      	movne	r1, #1
 800d80e:	2100      	moveq	r1, #0
 800d810:	f7fe bc0c 	b.w	800c02c <forward_cast+0x1c1c>
 800d814:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d818:	3900      	subs	r1, #0
 800d81a:	bf18      	it	ne
 800d81c:	2101      	movne	r1, #1
 800d81e:	f7fe bc05 	b.w	800c02c <forward_cast+0x1c1c>
 800d822:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d826:	f7f3 fac7 	bl	8000db8 <__aeabi_l2f>
 800d82a:	ee07 0a90 	vmov	s15, r0
 800d82e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d832:	4bc8      	ldr	r3, [pc, #800]	; (800db54 <forward_cast+0x3744>)
 800d834:	edcd 7a01 	vstr	s15, [sp, #4]
 800d838:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d83c:	4ac4      	ldr	r2, [pc, #784]	; (800db50 <forward_cast+0x3740>)
 800d83e:	f7fe bba3 	b.w	800bf88 <forward_cast+0x1b78>
 800d842:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d846:	f7f3 faaf 	bl	8000da8 <__aeabi_ul2f>
 800d84a:	ee07 0a90 	vmov	s15, r0
 800d84e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d852:	4abf      	ldr	r2, [pc, #764]	; (800db50 <forward_cast+0x3740>)
 800d854:	edcd 7a01 	vstr	s15, [sp, #4]
 800d858:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d85c:	4bbd      	ldr	r3, [pc, #756]	; (800db54 <forward_cast+0x3744>)
 800d85e:	f7fe bb93 	b.w	800bf88 <forward_cast+0x1b78>
 800d862:	edd5 7a00 	vldr	s15, [r5]
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d86e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d872:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d876:	f7fe bb87 	b.w	800bf88 <forward_cast+0x1b78>
 800d87a:	f995 0000 	ldrsb.w	r0, [r5]
 800d87e:	f7fd bcfa 	b.w	800b276 <forward_cast+0xe66>
 800d882:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d886:	f7f3 fa8f 	bl	8000da8 <__aeabi_ul2f>
 800d88a:	ee07 0a90 	vmov	s15, r0
 800d88e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d892:	4aaf      	ldr	r2, [pc, #700]	; (800db50 <forward_cast+0x3740>)
 800d894:	ee17 3a90 	vmov	r3, s15
 800d898:	b219      	sxth	r1, r3
 800d89a:	4bac      	ldr	r3, [pc, #688]	; (800db4c <forward_cast+0x373c>)
 800d89c:	f7fd baf6 	b.w	800ae8c <forward_cast+0xa7c>
 800d8a0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d8a4:	f7f3 fa80 	bl	8000da8 <__aeabi_ul2f>
 800d8a8:	ee07 0a90 	vmov	s15, r0
 800d8ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8b0:	4aa6      	ldr	r2, [pc, #664]	; (800db4c <forward_cast+0x373c>)
 800d8b2:	4ba8      	ldr	r3, [pc, #672]	; (800db54 <forward_cast+0x3744>)
 800d8b4:	ee17 0a90 	vmov	r0, s15
 800d8b8:	f7fc bf50 	b.w	800a75c <forward_cast+0x34c>
 800d8bc:	edd5 7a00 	vldr	s15, [r5]
 800d8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8c8:	ee17 0a90 	vmov	r0, s15
 800d8cc:	f7fc bf46 	b.w	800a75c <forward_cast+0x34c>
 800d8d0:	7828      	ldrb	r0, [r5, #0]
 800d8d2:	f7fd bc1c 	b.w	800b10e <forward_cast+0xcfe>
 800d8d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d8da:	f7f3 fa6d 	bl	8000db8 <__aeabi_l2f>
 800d8de:	ee07 0a90 	vmov	s15, r0
 800d8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8e6:	4a9a      	ldr	r2, [pc, #616]	; (800db50 <forward_cast+0x3740>)
 800d8e8:	ee17 3a90 	vmov	r3, s15
 800d8ec:	b219      	sxth	r1, r3
 800d8ee:	4b97      	ldr	r3, [pc, #604]	; (800db4c <forward_cast+0x373c>)
 800d8f0:	f7fd bb08 	b.w	800af04 <forward_cast+0xaf4>
 800d8f4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d8f8:	f7fd b85a 	b.w	800a9b0 <forward_cast+0x5a0>
 800d8fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d900:	f7f3 fa5a 	bl	8000db8 <__aeabi_l2f>
 800d904:	ee07 0a90 	vmov	s15, r0
 800d908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d90c:	4a90      	ldr	r2, [pc, #576]	; (800db50 <forward_cast+0x3740>)
 800d90e:	ee17 3a90 	vmov	r3, s15
 800d912:	b219      	sxth	r1, r3
 800d914:	4b8d      	ldr	r3, [pc, #564]	; (800db4c <forward_cast+0x373c>)
 800d916:	f7fd ba7d 	b.w	800ae14 <forward_cast+0xa04>
 800d91a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d91e:	f7fd bb79 	b.w	800b014 <forward_cast+0xc04>
 800d922:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d926:	f7f3 fa47 	bl	8000db8 <__aeabi_l2f>
 800d92a:	ee07 0a90 	vmov	s15, r0
 800d92e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d932:	4a89      	ldr	r2, [pc, #548]	; (800db58 <forward_cast+0x3748>)
 800d934:	4b89      	ldr	r3, [pc, #548]	; (800db5c <forward_cast+0x374c>)
 800d936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d93a:	f7fd ba31 	b.w	800ada0 <forward_cast+0x990>
 800d93e:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d942:	f7fd b887 	b.w	800aa54 <forward_cast+0x644>
 800d946:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d94a:	f7f3 fa35 	bl	8000db8 <__aeabi_l2f>
 800d94e:	ee07 0a90 	vmov	s15, r0
 800d952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d956:	4a7f      	ldr	r2, [pc, #508]	; (800db54 <forward_cast+0x3744>)
 800d958:	4b80      	ldr	r3, [pc, #512]	; (800db5c <forward_cast+0x374c>)
 800d95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d95e:	f7fd b9de 	b.w	800ad1e <forward_cast+0x90e>
 800d962:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d966:	f7fc bf9b 	b.w	800a8a0 <forward_cast+0x490>
 800d96a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d96e:	f7f3 fa23 	bl	8000db8 <__aeabi_l2f>
 800d972:	ee07 0a90 	vmov	s15, r0
 800d976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	4b74      	ldr	r3, [pc, #464]	; (800db50 <forward_cast+0x3740>)
 800d980:	4a77      	ldr	r2, [pc, #476]	; (800db60 <forward_cast+0x3750>)
 800d982:	bf14      	ite	ne
 800d984:	2101      	movne	r1, #1
 800d986:	2100      	moveq	r1, #0
 800d988:	f7fd bc3a 	b.w	800b200 <forward_cast+0xdf0>
 800d98c:	edd5 7a00 	vldr	s15, [r5]
 800d990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d998:	ee17 0a90 	vmov	r0, s15
 800d99c:	f7fd bcb8 	b.w	800b310 <forward_cast+0xf00>
 800d9a0:	edd5 7a00 	vldr	s15, [r5]
 800d9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ac:	ee17 1a90 	vmov	r1, s15
 800d9b0:	b209      	sxth	r1, r1
 800d9b2:	f7fd ba6b 	b.w	800ae8c <forward_cast+0xa7c>
 800d9b6:	7829      	ldrb	r1, [r5, #0]
 800d9b8:	ee07 1a90 	vmov	s15, r1
 800d9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9c0:	f7fd b9ee 	b.w	800ada0 <forward_cast+0x990>
 800d9c4:	f995 0000 	ldrsb.w	r0, [r5]
 800d9c8:	f7fd b884 	b.w	800aad4 <forward_cast+0x6c4>
 800d9cc:	f995 0000 	ldrsb.w	r0, [r5]
 800d9d0:	f7fc bec4 	b.w	800a75c <forward_cast+0x34c>
 800d9d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9d8:	f7f3 f9ee 	bl	8000db8 <__aeabi_l2f>
 800d9dc:	ee07 0a90 	vmov	s15, r0
 800d9e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9e4:	4a5a      	ldr	r2, [pc, #360]	; (800db50 <forward_cast+0x3740>)
 800d9e6:	ee17 3a90 	vmov	r3, s15
 800d9ea:	b219      	sxth	r1, r3
 800d9ec:	4b57      	ldr	r3, [pc, #348]	; (800db4c <forward_cast+0x373c>)
 800d9ee:	f7fd ba4d 	b.w	800ae8c <forward_cast+0xa7c>
 800d9f2:	7828      	ldrb	r0, [r5, #0]
 800d9f4:	f7fc bf54 	b.w	800a8a0 <forward_cast+0x490>
 800d9f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9fc:	f7f3 f9d4 	bl	8000da8 <__aeabi_ul2f>
 800da00:	ee07 0a90 	vmov	s15, r0
 800da04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da08:	4a55      	ldr	r2, [pc, #340]	; (800db60 <forward_cast+0x3750>)
 800da0a:	4b51      	ldr	r3, [pc, #324]	; (800db50 <forward_cast+0x3740>)
 800da0c:	ee17 0a90 	vmov	r0, s15
 800da10:	f7fd bc7e 	b.w	800b310 <forward_cast+0xf00>
 800da14:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da18:	f7f3 f9c6 	bl	8000da8 <__aeabi_ul2f>
 800da1c:	ee07 0a90 	vmov	s15, r0
 800da20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da24:	4a4a      	ldr	r2, [pc, #296]	; (800db50 <forward_cast+0x3740>)
 800da26:	ee17 3a90 	vmov	r3, s15
 800da2a:	b219      	sxth	r1, r3
 800da2c:	4b47      	ldr	r3, [pc, #284]	; (800db4c <forward_cast+0x373c>)
 800da2e:	f7fd b9f1 	b.w	800ae14 <forward_cast+0xa04>
 800da32:	edd5 7a00 	vldr	s15, [r5]
 800da36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da3e:	ee17 1a90 	vmov	r1, s15
 800da42:	b209      	sxth	r1, r1
 800da44:	f7fd b9e6 	b.w	800ae14 <forward_cast+0xa04>
 800da48:	7828      	ldrb	r0, [r5, #0]
 800da4a:	f7fd bc14 	b.w	800b276 <forward_cast+0xe66>
 800da4e:	f995 0000 	ldrsb.w	r0, [r5]
 800da52:	f7fd bc5d 	b.w	800b310 <forward_cast+0xf00>
 800da56:	f995 1000 	ldrsb.w	r1, [r5]
 800da5a:	f7fd b9db 	b.w	800ae14 <forward_cast+0xa04>
 800da5e:	f995 1000 	ldrsb.w	r1, [r5]
 800da62:	f7fd ba13 	b.w	800ae8c <forward_cast+0xa7c>
 800da66:	f995 0000 	ldrsb.w	r0, [r5]
 800da6a:	f7fd bad3 	b.w	800b014 <forward_cast+0xc04>
 800da6e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da72:	f7f3 f999 	bl	8000da8 <__aeabi_ul2f>
 800da76:	ee07 0a90 	vmov	s15, r0
 800da7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da7e:	4a34      	ldr	r2, [pc, #208]	; (800db50 <forward_cast+0x3740>)
 800da80:	ee17 3a90 	vmov	r3, s15
 800da84:	b219      	sxth	r1, r3
 800da86:	4b31      	ldr	r3, [pc, #196]	; (800db4c <forward_cast+0x373c>)
 800da88:	f7fd ba3c 	b.w	800af04 <forward_cast+0xaf4>
 800da8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da90:	f7f3 f98a 	bl	8000da8 <__aeabi_ul2f>
 800da94:	ee07 0a90 	vmov	s15, r0
 800da98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da9c:	4a2c      	ldr	r2, [pc, #176]	; (800db50 <forward_cast+0x3740>)
 800da9e:	ee17 3a90 	vmov	r3, s15
 800daa2:	b299      	uxth	r1, r3
 800daa4:	4b29      	ldr	r3, [pc, #164]	; (800db4c <forward_cast+0x373c>)
 800daa6:	f7fc bda5 	b.w	800a5f4 <forward_cast+0x1e4>
 800daaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800daae:	f7f3 f983 	bl	8000db8 <__aeabi_l2f>
 800dab2:	ee07 0a90 	vmov	s15, r0
 800dab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daba:	4b26      	ldr	r3, [pc, #152]	; (800db54 <forward_cast+0x3744>)
 800dabc:	4a29      	ldr	r2, [pc, #164]	; (800db64 <forward_cast+0x3754>)
 800dabe:	ee17 0a90 	vmov	r0, s15
 800dac2:	f7fd bd22 	b.w	800b50a <forward_cast+0x10fa>
 800dac6:	edd5 7a00 	vldr	s15, [r5]
 800daca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dad2:	ee17 0a90 	vmov	r0, s15
 800dad6:	f7fd bcab 	b.w	800b430 <forward_cast+0x1020>
 800dada:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dade:	f7f3 f96b 	bl	8000db8 <__aeabi_l2f>
 800dae2:	ee07 0a90 	vmov	s15, r0
 800dae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daea:	4b19      	ldr	r3, [pc, #100]	; (800db50 <forward_cast+0x3740>)
 800daec:	4a1c      	ldr	r2, [pc, #112]	; (800db60 <forward_cast+0x3750>)
 800daee:	ee17 0a90 	vmov	r0, s15
 800daf2:	f7fe b902 	b.w	800bcfa <forward_cast+0x18ea>
 800daf6:	7828      	ldrb	r0, [r5, #0]
 800daf8:	f7fe b8ff 	b.w	800bcfa <forward_cast+0x18ea>
 800dafc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db00:	f7f3 f952 	bl	8000da8 <__aeabi_ul2f>
 800db04:	ee07 0a90 	vmov	s15, r0
 800db08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db0c:	4a14      	ldr	r2, [pc, #80]	; (800db60 <forward_cast+0x3750>)
 800db0e:	4b10      	ldr	r3, [pc, #64]	; (800db50 <forward_cast+0x3740>)
 800db10:	ee17 0a90 	vmov	r0, s15
 800db14:	f7fe b8f1 	b.w	800bcfa <forward_cast+0x18ea>
 800db18:	f9b5 0000 	ldrsh.w	r0, [r5]
 800db1c:	f7fe b8ed 	b.w	800bcfa <forward_cast+0x18ea>
 800db20:	f995 0000 	ldrsb.w	r0, [r5]
 800db24:	f7fe b8e9 	b.w	800bcfa <forward_cast+0x18ea>
 800db28:	f995 0000 	ldrsb.w	r0, [r5]
 800db2c:	f7fc bd11 	b.w	800a552 <forward_cast+0x142>
 800db30:	f995 0000 	ldrsb.w	r0, [r5]
 800db34:	f7fe b930 	b.w	800bd98 <forward_cast+0x1988>
 800db38:	edd5 7a00 	vldr	s15, [r5]
 800db3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db44:	ee17 0a90 	vmov	r0, s15
 800db48:	f7fe b926 	b.w	800bd98 <forward_cast+0x1988>
 800db4c:	00041040 	.word	0x00041040
 800db50:	00042040 	.word	0x00042040
 800db54:	00841040 	.word	0x00841040
 800db58:	00842040 	.word	0x00842040
 800db5c:	00840840 	.word	0x00840840
 800db60:	00060440 	.word	0x00060440
 800db64:	01821040 	.word	0x01821040
 800db68:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db6c:	f7f3 f924 	bl	8000db8 <__aeabi_l2f>
 800db70:	ee07 0a90 	vmov	s15, r0
 800db74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db78:	4be2      	ldr	r3, [pc, #904]	; (800df04 <forward_cast+0x3af4>)
 800db7a:	4ae3      	ldr	r2, [pc, #908]	; (800df08 <forward_cast+0x3af8>)
 800db7c:	ee17 0a90 	vmov	r0, s15
 800db80:	f7fe b90a 	b.w	800bd98 <forward_cast+0x1988>
 800db84:	7828      	ldrb	r0, [r5, #0]
 800db86:	f7fe b907 	b.w	800bd98 <forward_cast+0x1988>
 800db8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db8e:	f7f3 f90b 	bl	8000da8 <__aeabi_ul2f>
 800db92:	ee07 0a90 	vmov	s15, r0
 800db96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db9a:	4adb      	ldr	r2, [pc, #876]	; (800df08 <forward_cast+0x3af8>)
 800db9c:	4bd9      	ldr	r3, [pc, #868]	; (800df04 <forward_cast+0x3af4>)
 800db9e:	ee17 0a90 	vmov	r0, s15
 800dba2:	f7fe b8f9 	b.w	800bd98 <forward_cast+0x1988>
 800dba6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dbaa:	f7fe b8f5 	b.w	800bd98 <forward_cast+0x1988>
 800dbae:	edd5 7a00 	vldr	s15, [r5]
 800dbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbba:	ee17 0a90 	vmov	r0, s15
 800dbbe:	f7fe b89c 	b.w	800bcfa <forward_cast+0x18ea>
 800dbc2:	f995 1000 	ldrsb.w	r1, [r5]
 800dbc6:	ee07 1a90 	vmov	s15, r1
 800dbca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbce:	f7fd b8e7 	b.w	800ada0 <forward_cast+0x990>
 800dbd2:	edd5 7a00 	vldr	s15, [r5]
 800dbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbde:	ee17 1a90 	vmov	r1, s15
 800dbe2:	b209      	sxth	r1, r1
 800dbe4:	f7fd b98e 	b.w	800af04 <forward_cast+0xaf4>
 800dbe8:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dbec:	f7fd bc8d 	b.w	800b50a <forward_cast+0x10fa>
 800dbf0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dbf4:	f7f3 f8d8 	bl	8000da8 <__aeabi_ul2f>
 800dbf8:	ee07 0a90 	vmov	s15, r0
 800dbfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc00:	4ac1      	ldr	r2, [pc, #772]	; (800df08 <forward_cast+0x3af8>)
 800dc02:	ee17 3a90 	vmov	r3, s15
 800dc06:	b299      	uxth	r1, r3
 800dc08:	4bbe      	ldr	r3, [pc, #760]	; (800df04 <forward_cast+0x3af4>)
 800dc0a:	f7fc bdff 	b.w	800a80c <forward_cast+0x3fc>
 800dc0e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc12:	f7f3 f8c9 	bl	8000da8 <__aeabi_ul2f>
 800dc16:	ee07 0a90 	vmov	s15, r0
 800dc1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc1e:	4bbb      	ldr	r3, [pc, #748]	; (800df0c <forward_cast+0x3afc>)
 800dc20:	4abb      	ldr	r2, [pc, #748]	; (800df10 <forward_cast+0x3b00>)
 800dc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc26:	f7fd b8bb 	b.w	800ada0 <forward_cast+0x990>
 800dc2a:	edd5 7a00 	vldr	s15, [r5]
 800dc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc3a:	f7fd b8b1 	b.w	800ada0 <forward_cast+0x990>
 800dc3e:	7828      	ldrb	r0, [r5, #0]
 800dc40:	f7fc bd8c 	b.w	800a75c <forward_cast+0x34c>
 800dc44:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc48:	f7f3 f8ae 	bl	8000da8 <__aeabi_ul2f>
 800dc4c:	ee07 0a90 	vmov	s15, r0
 800dc50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc54:	4aaf      	ldr	r2, [pc, #700]	; (800df14 <forward_cast+0x3b04>)
 800dc56:	4bac      	ldr	r3, [pc, #688]	; (800df08 <forward_cast+0x3af8>)
 800dc58:	ee17 0a90 	vmov	r0, s15
 800dc5c:	f7fd bb0b 	b.w	800b276 <forward_cast+0xe66>
 800dc60:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc64:	f7f3 f8a0 	bl	8000da8 <__aeabi_ul2f>
 800dc68:	ee07 0a90 	vmov	s15, r0
 800dc6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc70:	4ba6      	ldr	r3, [pc, #664]	; (800df0c <forward_cast+0x3afc>)
 800dc72:	4aa9      	ldr	r2, [pc, #676]	; (800df18 <forward_cast+0x3b08>)
 800dc74:	ee17 0a90 	vmov	r0, s15
 800dc78:	f7fc be12 	b.w	800a8a0 <forward_cast+0x490>
 800dc7c:	edd5 7a00 	vldr	s15, [r5]
 800dc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc88:	ee17 0a90 	vmov	r0, s15
 800dc8c:	f7fc be08 	b.w	800a8a0 <forward_cast+0x490>
 800dc90:	7828      	ldrb	r0, [r5, #0]
 800dc92:	f7fd b9bf 	b.w	800b014 <forward_cast+0xc04>
 800dc96:	edd5 7a00 	vldr	s15, [r5]
 800dc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dca2:	ee17 1a90 	vmov	r1, s15
 800dca6:	b289      	uxth	r1, r1
 800dca8:	f7fc bdb0 	b.w	800a80c <forward_cast+0x3fc>
 800dcac:	7829      	ldrb	r1, [r5, #0]
 800dcae:	f7fd b8b1 	b.w	800ae14 <forward_cast+0xa04>
 800dcb2:	edd5 7a00 	vldr	s15, [r5]
 800dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcbe:	ee17 0a90 	vmov	r0, s15
 800dcc2:	f7fd bad8 	b.w	800b276 <forward_cast+0xe66>
 800dcc6:	7828      	ldrb	r0, [r5, #0]
 800dcc8:	f7fc bf04 	b.w	800aad4 <forward_cast+0x6c4>
 800dccc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dcd0:	f7f3 f86a 	bl	8000da8 <__aeabi_ul2f>
 800dcd4:	ee07 0a90 	vmov	s15, r0
 800dcd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcdc:	4a89      	ldr	r2, [pc, #548]	; (800df04 <forward_cast+0x3af4>)
 800dcde:	4b8f      	ldr	r3, [pc, #572]	; (800df1c <forward_cast+0x3b0c>)
 800dce0:	ee17 0a90 	vmov	r0, s15
 800dce4:	f7fc bef6 	b.w	800aad4 <forward_cast+0x6c4>
 800dce8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dcec:	f7f3 f85c 	bl	8000da8 <__aeabi_ul2f>
 800dcf0:	ee07 0a90 	vmov	s15, r0
 800dcf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcf8:	4a88      	ldr	r2, [pc, #544]	; (800df1c <forward_cast+0x3b0c>)
 800dcfa:	4b84      	ldr	r3, [pc, #528]	; (800df0c <forward_cast+0x3afc>)
 800dcfc:	ee17 0a90 	vmov	r0, s15
 800dd00:	f7fd b988 	b.w	800b014 <forward_cast+0xc04>
 800dd04:	edd5 7a00 	vldr	s15, [r5]
 800dd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd10:	ee17 0a90 	vmov	r0, s15
 800dd14:	f7fd b97e 	b.w	800b014 <forward_cast+0xc04>
 800dd18:	7829      	ldrb	r1, [r5, #0]
 800dd1a:	f7fc bd77 	b.w	800a80c <forward_cast+0x3fc>
 800dd1e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd22:	f7f3 f841 	bl	8000da8 <__aeabi_ul2f>
 800dd26:	ee07 0a90 	vmov	s15, r0
 800dd2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd2e:	4a7b      	ldr	r2, [pc, #492]	; (800df1c <forward_cast+0x3b0c>)
 800dd30:	4b76      	ldr	r3, [pc, #472]	; (800df0c <forward_cast+0x3afc>)
 800dd32:	ee17 0a90 	vmov	r0, s15
 800dd36:	f7fc bc0c 	b.w	800a552 <forward_cast+0x142>
 800dd3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd3e:	f7f3 f833 	bl	8000da8 <__aeabi_ul2f>
 800dd42:	ee07 0a90 	vmov	s15, r0
 800dd46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd4a:	4a6f      	ldr	r2, [pc, #444]	; (800df08 <forward_cast+0x3af8>)
 800dd4c:	4b6d      	ldr	r3, [pc, #436]	; (800df04 <forward_cast+0x3af4>)
 800dd4e:	ee17 0a90 	vmov	r0, s15
 800dd52:	f7fd b9dc 	b.w	800b10e <forward_cast+0xcfe>
 800dd56:	edd5 7a00 	vldr	s15, [r5]
 800dd5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd62:	ee17 0a90 	vmov	r0, s15
 800dd66:	f7fd b9d2 	b.w	800b10e <forward_cast+0xcfe>
 800dd6a:	7828      	ldrb	r0, [r5, #0]
 800dd6c:	f7fd ba0d 	b.w	800b18a <forward_cast+0xd7a>
 800dd70:	edd5 7a00 	vldr	s15, [r5]
 800dd74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd7c:	ee17 0a90 	vmov	r0, s15
 800dd80:	f7fc bea8 	b.w	800aad4 <forward_cast+0x6c4>
 800dd84:	7828      	ldrb	r0, [r5, #0]
 800dd86:	f7fc bbe4 	b.w	800a552 <forward_cast+0x142>
 800dd8a:	edd5 7a00 	vldr	s15, [r5]
 800dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd96:	ee17 0a90 	vmov	r0, s15
 800dd9a:	f7fc bbda 	b.w	800a552 <forward_cast+0x142>
 800dd9e:	7829      	ldrb	r1, [r5, #0]
 800dda0:	f7fd b874 	b.w	800ae8c <forward_cast+0xa7c>
 800dda4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dda8:	f7f3 f806 	bl	8000db8 <__aeabi_l2f>
 800ddac:	ee07 0a90 	vmov	s15, r0
 800ddb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddb4:	4b53      	ldr	r3, [pc, #332]	; (800df04 <forward_cast+0x3af4>)
 800ddb6:	4a54      	ldr	r2, [pc, #336]	; (800df08 <forward_cast+0x3af8>)
 800ddb8:	ee17 0a90 	vmov	r0, s15
 800ddbc:	f7fe b83b 	b.w	800be36 <forward_cast+0x1a26>
 800ddc0:	7828      	ldrb	r0, [r5, #0]
 800ddc2:	f7fe b838 	b.w	800be36 <forward_cast+0x1a26>
 800ddc6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ddca:	f7f2 ffed 	bl	8000da8 <__aeabi_ul2f>
 800ddce:	ee07 0a90 	vmov	s15, r0
 800ddd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddd6:	4a4c      	ldr	r2, [pc, #304]	; (800df08 <forward_cast+0x3af8>)
 800ddd8:	4b4a      	ldr	r3, [pc, #296]	; (800df04 <forward_cast+0x3af4>)
 800ddda:	ee17 0a90 	vmov	r0, s15
 800ddde:	f7fe b82a 	b.w	800be36 <forward_cast+0x1a26>
 800dde2:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dde6:	f7fe b826 	b.w	800be36 <forward_cast+0x1a26>
 800ddea:	f995 0000 	ldrsb.w	r0, [r5]
 800ddee:	f7fe ba89 	b.w	800c304 <forward_cast+0x1ef4>
 800ddf2:	edd5 7a00 	vldr	s15, [r5]
 800ddf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddfe:	ee17 0a90 	vmov	r0, s15
 800de02:	f7fe b9cd 	b.w	800c1a0 <forward_cast+0x1d90>
 800de06:	f995 0000 	ldrsb.w	r0, [r5]
 800de0a:	f7fe bacb 	b.w	800c3a4 <forward_cast+0x1f94>
 800de0e:	edd5 7a00 	vldr	s15, [r5]
 800de12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de1a:	ee17 0a90 	vmov	r0, s15
 800de1e:	f7fe bac1 	b.w	800c3a4 <forward_cast+0x1f94>
 800de22:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de26:	f7f2 ffc7 	bl	8000db8 <__aeabi_l2f>
 800de2a:	ee07 0a90 	vmov	s15, r0
 800de2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de32:	4b36      	ldr	r3, [pc, #216]	; (800df0c <forward_cast+0x3afc>)
 800de34:	4a39      	ldr	r2, [pc, #228]	; (800df1c <forward_cast+0x3b0c>)
 800de36:	ee17 0a90 	vmov	r0, s15
 800de3a:	f7fe bab3 	b.w	800c3a4 <forward_cast+0x1f94>
 800de3e:	7828      	ldrb	r0, [r5, #0]
 800de40:	f7fe bab0 	b.w	800c3a4 <forward_cast+0x1f94>
 800de44:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de48:	f7f2 ffae 	bl	8000da8 <__aeabi_ul2f>
 800de4c:	ee07 0a90 	vmov	s15, r0
 800de50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de54:	4a31      	ldr	r2, [pc, #196]	; (800df1c <forward_cast+0x3b0c>)
 800de56:	4b2d      	ldr	r3, [pc, #180]	; (800df0c <forward_cast+0x3afc>)
 800de58:	ee17 0a90 	vmov	r0, s15
 800de5c:	f7fe baa2 	b.w	800c3a4 <forward_cast+0x1f94>
 800de60:	f9b5 0000 	ldrsh.w	r0, [r5]
 800de64:	f7fe ba9e 	b.w	800c3a4 <forward_cast+0x1f94>
 800de68:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de6c:	f7f2 ffa4 	bl	8000db8 <__aeabi_l2f>
 800de70:	ee07 0a90 	vmov	s15, r0
 800de74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de78:	4b23      	ldr	r3, [pc, #140]	; (800df08 <forward_cast+0x3af8>)
 800de7a:	4a26      	ldr	r2, [pc, #152]	; (800df14 <forward_cast+0x3b04>)
 800de7c:	ee17 0a90 	vmov	r0, s15
 800de80:	f7fd b9f9 	b.w	800b276 <forward_cast+0xe66>
 800de84:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de88:	f7f2 ff96 	bl	8000db8 <__aeabi_l2f>
 800de8c:	ee07 0a90 	vmov	s15, r0
 800de90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de94:	4a20      	ldr	r2, [pc, #128]	; (800df18 <forward_cast+0x3b08>)
 800de96:	4b1d      	ldr	r3, [pc, #116]	; (800df0c <forward_cast+0x3afc>)
 800de98:	ee17 0a90 	vmov	r0, s15
 800de9c:	f7fc bd00 	b.w	800a8a0 <forward_cast+0x490>
 800dea0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dea4:	f7f2 ff88 	bl	8000db8 <__aeabi_l2f>
 800dea8:	ee07 0a90 	vmov	s15, r0
 800deac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800deb0:	4a15      	ldr	r2, [pc, #84]	; (800df08 <forward_cast+0x3af8>)
 800deb2:	ee17 3a90 	vmov	r3, s15
 800deb6:	b299      	uxth	r1, r3
 800deb8:	4b12      	ldr	r3, [pc, #72]	; (800df04 <forward_cast+0x3af4>)
 800deba:	f7fc bd3d 	b.w	800a938 <forward_cast+0x528>
 800debe:	7828      	ldrb	r0, [r5, #0]
 800dec0:	f7fc bd76 	b.w	800a9b0 <forward_cast+0x5a0>
 800dec4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dec8:	f7f2 ff76 	bl	8000db8 <__aeabi_l2f>
 800decc:	ee07 0a90 	vmov	s15, r0
 800ded0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <forward_cast+0x3af4>)
 800ded6:	4a0c      	ldr	r2, [pc, #48]	; (800df08 <forward_cast+0x3af8>)
 800ded8:	ee17 0a90 	vmov	r0, s15
 800dedc:	f7fe b911 	b.w	800c102 <forward_cast+0x1cf2>
 800dee0:	7828      	ldrb	r0, [r5, #0]
 800dee2:	f7fe b90e 	b.w	800c102 <forward_cast+0x1cf2>
 800dee6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800deea:	f7f2 ff5d 	bl	8000da8 <__aeabi_ul2f>
 800deee:	ee07 0a90 	vmov	s15, r0
 800def2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800def6:	4a04      	ldr	r2, [pc, #16]	; (800df08 <forward_cast+0x3af8>)
 800def8:	4b02      	ldr	r3, [pc, #8]	; (800df04 <forward_cast+0x3af4>)
 800defa:	ee17 0a90 	vmov	r0, s15
 800defe:	f7fe b900 	b.w	800c102 <forward_cast+0x1cf2>
 800df02:	bf00      	nop
 800df04:	00041040 	.word	0x00041040
 800df08:	00042040 	.word	0x00042040
 800df0c:	00840840 	.word	0x00840840
 800df10:	00842040 	.word	0x00842040
 800df14:	00060440 	.word	0x00060440
 800df18:	00040440 	.word	0x00040440
 800df1c:	00841040 	.word	0x00841040
 800df20:	f9b5 0000 	ldrsh.w	r0, [r5]
 800df24:	f7fe b8ed 	b.w	800c102 <forward_cast+0x1cf2>
 800df28:	f995 0000 	ldrsb.w	r0, [r5]
 800df2c:	f7fe b938 	b.w	800c1a0 <forward_cast+0x1d90>
 800df30:	f995 0000 	ldrsb.w	r0, [r5]
 800df34:	f7fe b8e5 	b.w	800c102 <forward_cast+0x1cf2>
 800df38:	edd5 7a00 	vldr	s15, [r5]
 800df3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df44:	ee17 0a90 	vmov	r0, s15
 800df48:	f7fe b8db 	b.w	800c102 <forward_cast+0x1cf2>
 800df4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df50:	f7f2 ff32 	bl	8000db8 <__aeabi_l2f>
 800df54:	ee07 0a90 	vmov	s15, r0
 800df58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df5c:	4bc7      	ldr	r3, [pc, #796]	; (800e27c <forward_cast+0x3e6c>)
 800df5e:	4ac8      	ldr	r2, [pc, #800]	; (800e280 <forward_cast+0x3e70>)
 800df60:	ee17 0a90 	vmov	r0, s15
 800df64:	f7fe b91c 	b.w	800c1a0 <forward_cast+0x1d90>
 800df68:	7828      	ldrb	r0, [r5, #0]
 800df6a:	f7fe b919 	b.w	800c1a0 <forward_cast+0x1d90>
 800df6e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df72:	f7f2 ff19 	bl	8000da8 <__aeabi_ul2f>
 800df76:	ee07 0a90 	vmov	s15, r0
 800df7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df7e:	4ac0      	ldr	r2, [pc, #768]	; (800e280 <forward_cast+0x3e70>)
 800df80:	4bbe      	ldr	r3, [pc, #760]	; (800e27c <forward_cast+0x3e6c>)
 800df82:	ee17 0a90 	vmov	r0, s15
 800df86:	f7fe b90b 	b.w	800c1a0 <forward_cast+0x1d90>
 800df8a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800df8e:	f7fe b907 	b.w	800c1a0 <forward_cast+0x1d90>
 800df92:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df96:	f7f2 ff0f 	bl	8000db8 <__aeabi_l2f>
 800df9a:	ee07 0a90 	vmov	s15, r0
 800df9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfa2:	4bb7      	ldr	r3, [pc, #732]	; (800e280 <forward_cast+0x3e70>)
 800dfa4:	4ab5      	ldr	r2, [pc, #724]	; (800e27c <forward_cast+0x3e6c>)
 800dfa6:	ee17 0a90 	vmov	r0, s15
 800dfaa:	f7fe b95d 	b.w	800c268 <forward_cast+0x1e58>
 800dfae:	7828      	ldrb	r0, [r5, #0]
 800dfb0:	f7fe b95a 	b.w	800c268 <forward_cast+0x1e58>
 800dfb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dfb8:	f7f2 fef6 	bl	8000da8 <__aeabi_ul2f>
 800dfbc:	ee07 0a90 	vmov	s15, r0
 800dfc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfc4:	4aad      	ldr	r2, [pc, #692]	; (800e27c <forward_cast+0x3e6c>)
 800dfc6:	4bae      	ldr	r3, [pc, #696]	; (800e280 <forward_cast+0x3e70>)
 800dfc8:	ee17 0a90 	vmov	r0, s15
 800dfcc:	f7fe b94c 	b.w	800c268 <forward_cast+0x1e58>
 800dfd0:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dfd4:	f7fe b948 	b.w	800c268 <forward_cast+0x1e58>
 800dfd8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dfdc:	f7f2 feec 	bl	8000db8 <__aeabi_l2f>
 800dfe0:	ee07 0a90 	vmov	s15, r0
 800dfe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfe8:	4ba4      	ldr	r3, [pc, #656]	; (800e27c <forward_cast+0x3e6c>)
 800dfea:	4aa6      	ldr	r2, [pc, #664]	; (800e284 <forward_cast+0x3e74>)
 800dfec:	ee17 0a90 	vmov	r0, s15
 800dff0:	f7fe b988 	b.w	800c304 <forward_cast+0x1ef4>
 800dff4:	7828      	ldrb	r0, [r5, #0]
 800dff6:	f7fe b985 	b.w	800c304 <forward_cast+0x1ef4>
 800dffa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dffe:	f7f2 fed3 	bl	8000da8 <__aeabi_ul2f>
 800e002:	ee07 0a90 	vmov	s15, r0
 800e006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e00a:	4a9e      	ldr	r2, [pc, #632]	; (800e284 <forward_cast+0x3e74>)
 800e00c:	4b9b      	ldr	r3, [pc, #620]	; (800e27c <forward_cast+0x3e6c>)
 800e00e:	ee17 0a90 	vmov	r0, s15
 800e012:	f7fe b977 	b.w	800c304 <forward_cast+0x1ef4>
 800e016:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e01a:	f7fe b973 	b.w	800c304 <forward_cast+0x1ef4>
 800e01e:	f995 0000 	ldrsb.w	r0, [r5]
 800e022:	f7fe b921 	b.w	800c268 <forward_cast+0x1e58>
 800e026:	edd5 7a00 	vldr	s15, [r5]
 800e02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e02e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e032:	ee17 0a90 	vmov	r0, s15
 800e036:	f7fe b917 	b.w	800c268 <forward_cast+0x1e58>
 800e03a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e03e:	f7f2 febb 	bl	8000db8 <__aeabi_l2f>
 800e042:	ee07 0a90 	vmov	s15, r0
 800e046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e04a:	4b8d      	ldr	r3, [pc, #564]	; (800e280 <forward_cast+0x3e70>)
 800e04c:	4a8b      	ldr	r2, [pc, #556]	; (800e27c <forward_cast+0x3e6c>)
 800e04e:	ee17 0a90 	vmov	r0, s15
 800e052:	f7fc bb20 	b.w	800a696 <forward_cast+0x286>
 800e056:	7828      	ldrb	r0, [r5, #0]
 800e058:	f7fd b9b4 	b.w	800b3c4 <forward_cast+0xfb4>
 800e05c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e060:	f7f2 feaa 	bl	8000db8 <__aeabi_l2f>
 800e064:	ee07 0a90 	vmov	s15, r0
 800e068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e06c:	4b83      	ldr	r3, [pc, #524]	; (800e27c <forward_cast+0x3e6c>)
 800e06e:	4a85      	ldr	r2, [pc, #532]	; (800e284 <forward_cast+0x3e74>)
 800e070:	ee17 0a90 	vmov	r0, s15
 800e074:	f7fe b9e5 	b.w	800c442 <forward_cast+0x2032>
 800e078:	7828      	ldrb	r0, [r5, #0]
 800e07a:	f7fe b9e2 	b.w	800c442 <forward_cast+0x2032>
 800e07e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e082:	f7f2 fe91 	bl	8000da8 <__aeabi_ul2f>
 800e086:	ee07 0a90 	vmov	s15, r0
 800e08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e08e:	4a7d      	ldr	r2, [pc, #500]	; (800e284 <forward_cast+0x3e74>)
 800e090:	4b7a      	ldr	r3, [pc, #488]	; (800e27c <forward_cast+0x3e6c>)
 800e092:	ee17 0a90 	vmov	r0, s15
 800e096:	f7fe b9d4 	b.w	800c442 <forward_cast+0x2032>
 800e09a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e09e:	f7fe b9d0 	b.w	800c442 <forward_cast+0x2032>
 800e0a2:	f995 0000 	ldrsb.w	r0, [r5]
 800e0a6:	f7fe b9cc 	b.w	800c442 <forward_cast+0x2032>
 800e0aa:	edd5 7a00 	vldr	s15, [r5]
 800e0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0b6:	ee17 0a90 	vmov	r0, s15
 800e0ba:	f7fe b923 	b.w	800c304 <forward_cast+0x1ef4>
 800e0be:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e0c2:	f7f2 fe79 	bl	8000db8 <__aeabi_l2f>
 800e0c6:	ee07 0a90 	vmov	s15, r0
 800e0ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ce:	4a6d      	ldr	r2, [pc, #436]	; (800e284 <forward_cast+0x3e74>)
 800e0d0:	ee17 3a90 	vmov	r3, s15
 800e0d4:	b299      	uxth	r1, r3
 800e0d6:	4b69      	ldr	r3, [pc, #420]	; (800e27c <forward_cast+0x3e6c>)
 800e0d8:	f7fc bb98 	b.w	800a80c <forward_cast+0x3fc>
 800e0dc:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e0e0:	f7fd b815 	b.w	800b10e <forward_cast+0xcfe>
 800e0e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e0e8:	9301      	str	r3, [sp, #4]
 800e0ea:	f7f2 fe65 	bl	8000db8 <__aeabi_l2f>
 800e0ee:	ee07 0a90 	vmov	s15, r0
 800e0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0f6:	4a62      	ldr	r2, [pc, #392]	; (800e280 <forward_cast+0x3e70>)
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	ee17 0a90 	vmov	r0, s15
 800e0fe:	f7fe ba05 	b.w	800c50c <forward_cast+0x20fc>
 800e102:	7828      	ldrb	r0, [r5, #0]
 800e104:	f7fe ba02 	b.w	800c50c <forward_cast+0x20fc>
 800e108:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f7f2 fe4b 	bl	8000da8 <__aeabi_ul2f>
 800e112:	ee07 0a90 	vmov	s15, r0
 800e116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e11a:	9b01      	ldr	r3, [sp, #4]
 800e11c:	4a58      	ldr	r2, [pc, #352]	; (800e280 <forward_cast+0x3e70>)
 800e11e:	ee17 0a90 	vmov	r0, s15
 800e122:	f7fe b9f3 	b.w	800c50c <forward_cast+0x20fc>
 800e126:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e12a:	f7fe b9ef 	b.w	800c50c <forward_cast+0x20fc>
 800e12e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e132:	f7f2 fe41 	bl	8000db8 <__aeabi_l2f>
 800e136:	ee07 0a90 	vmov	s15, r0
 800e13a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e13e:	4b50      	ldr	r3, [pc, #320]	; (800e280 <forward_cast+0x3e70>)
 800e140:	edcd 7a01 	vstr	s15, [sp, #4]
 800e144:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e148:	4a4c      	ldr	r2, [pc, #304]	; (800e27c <forward_cast+0x3e6c>)
 800e14a:	f7fe bae3 	b.w	800c714 <forward_cast+0x2304>
 800e14e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e152:	f7f2 fe29 	bl	8000da8 <__aeabi_ul2f>
 800e156:	ee07 0a90 	vmov	s15, r0
 800e15a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e15e:	4a47      	ldr	r2, [pc, #284]	; (800e27c <forward_cast+0x3e6c>)
 800e160:	edcd 7a01 	vstr	s15, [sp, #4]
 800e164:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e168:	4b45      	ldr	r3, [pc, #276]	; (800e280 <forward_cast+0x3e70>)
 800e16a:	f7fe bad3 	b.w	800c714 <forward_cast+0x2304>
 800e16e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e172:	f7f2 fe21 	bl	8000db8 <__aeabi_l2f>
 800e176:	ee07 0a90 	vmov	s15, r0
 800e17a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e17e:	4b3f      	ldr	r3, [pc, #252]	; (800e27c <forward_cast+0x3e6c>)
 800e180:	4a40      	ldr	r2, [pc, #256]	; (800e284 <forward_cast+0x3e74>)
 800e182:	ee17 0a90 	vmov	r0, s15
 800e186:	f7fc bfc2 	b.w	800b10e <forward_cast+0xcfe>
 800e18a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e18e:	ee07 1a90 	vmov	s15, r1
 800e192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e196:	f7fc be03 	b.w	800ada0 <forward_cast+0x990>
 800e19a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e19e:	f7f2 fe0b 	bl	8000db8 <__aeabi_l2f>
 800e1a2:	ee07 0a90 	vmov	s15, r0
 800e1a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1aa:	4b34      	ldr	r3, [pc, #208]	; (800e27c <forward_cast+0x3e6c>)
 800e1ac:	4a36      	ldr	r2, [pc, #216]	; (800e288 <forward_cast+0x3e78>)
 800e1ae:	ee17 0a90 	vmov	r0, s15
 800e1b2:	f7fd b93d 	b.w	800b430 <forward_cast+0x1020>
 800e1b6:	7828      	ldrb	r0, [r5, #0]
 800e1b8:	f7fd b9a7 	b.w	800b50a <forward_cast+0x10fa>
 800e1bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1c0:	f7f2 fdfa 	bl	8000db8 <__aeabi_l2f>
 800e1c4:	ee07 0a90 	vmov	s15, r0
 800e1c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1cc:	4b2c      	ldr	r3, [pc, #176]	; (800e280 <forward_cast+0x3e70>)
 800e1ce:	edcd 7a01 	vstr	s15, [sp, #4]
 800e1d2:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800e1d6:	4a2b      	ldr	r2, [pc, #172]	; (800e284 <forward_cast+0x3e74>)
 800e1d8:	f7fd b95f 	b.w	800b49a <forward_cast+0x108a>
 800e1dc:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e1e0:	f7fd b849 	b.w	800b276 <forward_cast+0xe66>
 800e1e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1e8:	f7f2 fde6 	bl	8000db8 <__aeabi_l2f>
 800e1ec:	ee07 0a90 	vmov	s15, r0
 800e1f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1f4:	4b23      	ldr	r3, [pc, #140]	; (800e284 <forward_cast+0x3e74>)
 800e1f6:	4a25      	ldr	r2, [pc, #148]	; (800e28c <forward_cast+0x3e7c>)
 800e1f8:	ee17 0a90 	vmov	r0, s15
 800e1fc:	f7fe bae7 	b.w	800c7ce <forward_cast+0x23be>
 800e200:	7828      	ldrb	r0, [r5, #0]
 800e202:	f7fe bae4 	b.w	800c7ce <forward_cast+0x23be>
 800e206:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e20a:	f7f2 fdcd 	bl	8000da8 <__aeabi_ul2f>
 800e20e:	ee07 0a90 	vmov	s15, r0
 800e212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e216:	4a1d      	ldr	r2, [pc, #116]	; (800e28c <forward_cast+0x3e7c>)
 800e218:	4b1a      	ldr	r3, [pc, #104]	; (800e284 <forward_cast+0x3e74>)
 800e21a:	ee17 0a90 	vmov	r0, s15
 800e21e:	f7fe bad6 	b.w	800c7ce <forward_cast+0x23be>
 800e222:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e226:	f7fe bad2 	b.w	800c7ce <forward_cast+0x23be>
 800e22a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e22e:	f7f2 fdc3 	bl	8000db8 <__aeabi_l2f>
 800e232:	ee07 0a90 	vmov	s15, r0
 800e236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e23a:	4b12      	ldr	r3, [pc, #72]	; (800e284 <forward_cast+0x3e74>)
 800e23c:	4a13      	ldr	r2, [pc, #76]	; (800e28c <forward_cast+0x3e7c>)
 800e23e:	ee17 0a90 	vmov	r0, s15
 800e242:	f7fe bb0d 	b.w	800c860 <forward_cast+0x2450>
 800e246:	7828      	ldrb	r0, [r5, #0]
 800e248:	f7fe bb0a 	b.w	800c860 <forward_cast+0x2450>
 800e24c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e250:	f7f2 fdaa 	bl	8000da8 <__aeabi_ul2f>
 800e254:	ee07 0a90 	vmov	s15, r0
 800e258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e25c:	4a0b      	ldr	r2, [pc, #44]	; (800e28c <forward_cast+0x3e7c>)
 800e25e:	4b09      	ldr	r3, [pc, #36]	; (800e284 <forward_cast+0x3e74>)
 800e260:	ee17 0a90 	vmov	r0, s15
 800e264:	f7fe bafc 	b.w	800c860 <forward_cast+0x2450>
 800e268:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e26c:	f7fe baf8 	b.w	800c860 <forward_cast+0x2450>
 800e270:	2300      	movs	r3, #0
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	deff      	udf	#255	; 0xff
 800e276:	2300      	movs	r3, #0
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	deff      	udf	#255	; 0xff
 800e27c:	00041040 	.word	0x00041040
 800e280:	00841040 	.word	0x00841040
 800e284:	00042040 	.word	0x00042040
 800e288:	00040440 	.word	0x00040440
 800e28c:	00060440 	.word	0x00060440

0800e290 <forward_relu>:
 800e290:	6982      	ldr	r2, [r0, #24]
 800e292:	8813      	ldrh	r3, [r2, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d05b      	beq.n	800e350 <forward_relu+0xc0>
 800e298:	6851      	ldr	r1, [r2, #4]
 800e29a:	684a      	ldr	r2, [r1, #4]
 800e29c:	b102      	cbz	r2, 800e2a0 <forward_relu+0x10>
 800e29e:	6812      	ldr	r2, [r2, #0]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	f000 8123 	beq.w	800e4ec <forward_relu+0x25c>
 800e2a6:	b470      	push	{r4, r5, r6}
 800e2a8:	6909      	ldr	r1, [r1, #16]
 800e2aa:	b101      	cbz	r1, 800e2ae <forward_relu+0x1e>
 800e2ac:	6809      	ldr	r1, [r1, #0]
 800e2ae:	69c6      	ldr	r6, [r0, #28]
 800e2b0:	2e00      	cmp	r6, #0
 800e2b2:	f000 8097 	beq.w	800e3e4 <forward_relu+0x154>
 800e2b6:	6873      	ldr	r3, [r6, #4]
 800e2b8:	6988      	ldr	r0, [r1, #24]
 800e2ba:	6991      	ldr	r1, [r2, #24]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	f000 80c1 	beq.w	800e444 <forward_relu+0x1b4>
 800e2c2:	6893      	ldr	r3, [r2, #8]
 800e2c4:	6880      	ldr	r0, [r0, #8]
 800e2c6:	688c      	ldr	r4, [r1, #8]
 800e2c8:	0a1b      	lsrs	r3, r3, #8
 800e2ca:	f000 80f2 	beq.w	800e4b2 <forward_relu+0x222>
 800e2ce:	68d5      	ldr	r5, [r2, #12]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e2d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2da:	42ab      	cmp	r3, r5
 800e2dc:	fb01 f202 	mul.w	r2, r1, r2
 800e2e0:	d1f9      	bne.n	800e2d6 <forward_relu+0x46>
 800e2e2:	68b3      	ldr	r3, [r6, #8]
 800e2e4:	ed93 7a02 	vldr	s14, [r3, #8]
 800e2e8:	edd3 6a00 	vldr	s13, [r3]
 800e2ec:	ed93 6a01 	vldr	s12, [r3, #4]
 800e2f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e2f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800e2f8:	3a01      	subs	r2, #1
 800e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e302:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e306:	d425      	bmi.n	800e354 <forward_relu+0xc4>
 800e308:	429c      	cmp	r4, r3
 800e30a:	d81f      	bhi.n	800e34c <forward_relu+0xbc>
 800e30c:	1d1a      	adds	r2, r3, #4
 800e30e:	1d01      	adds	r1, r0, #4
 800e310:	e00d      	b.n	800e32e <forward_relu+0x9e>
 800e312:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	db03      	blt.n	800e324 <forward_relu+0x94>
 800e31c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e320:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e324:	3b08      	subs	r3, #8
 800e326:	429c      	cmp	r4, r3
 800e328:	ed61 7a01 	vstmdb	r1!, {s15}
 800e32c:	d80e      	bhi.n	800e34c <forward_relu+0xbc>
 800e32e:	4613      	mov	r3, r2
 800e330:	ed72 7a01 	vldmdb	r2!, {s15}
 800e334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	d9e9      	bls.n	800e312 <forward_relu+0x82>
 800e33e:	3b08      	subs	r3, #8
 800e340:	eef0 7a47 	vmov.f32	s15, s14
 800e344:	429c      	cmp	r4, r3
 800e346:	ed61 7a01 	vstmdb	r1!, {s15}
 800e34a:	d9f0      	bls.n	800e32e <forward_relu+0x9e>
 800e34c:	bc70      	pop	{r4, r5, r6}
 800e34e:	4770      	bx	lr
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	deff      	udf	#255	; 0xff
 800e354:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35c:	d11f      	bne.n	800e39e <forward_relu+0x10e>
 800e35e:	429c      	cmp	r4, r3
 800e360:	d8f4      	bhi.n	800e34c <forward_relu+0xbc>
 800e362:	1b1c      	subs	r4, r3, r4
 800e364:	f024 0403 	bic.w	r4, r4, #3
 800e368:	1d1a      	adds	r2, r3, #4
 800e36a:	2500      	movs	r5, #0
 800e36c:	1b1b      	subs	r3, r3, r4
 800e36e:	1d01      	adds	r1, r0, #4
 800e370:	ed72 7a01 	vldmdb	r2!, {s15}
 800e374:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	dc0a      	bgt.n	800e394 <forward_relu+0x104>
 800e37e:	429a      	cmp	r2, r3
 800e380:	f841 5d04 	str.w	r5, [r1, #-4]!
 800e384:	d0e2      	beq.n	800e34c <forward_relu+0xbc>
 800e386:	ed72 7a01 	vldmdb	r2!, {s15}
 800e38a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e392:	ddf4      	ble.n	800e37e <forward_relu+0xee>
 800e394:	429a      	cmp	r2, r3
 800e396:	ed61 7a01 	vstmdb	r1!, {s15}
 800e39a:	d1e9      	bne.n	800e370 <forward_relu+0xe0>
 800e39c:	e7d6      	b.n	800e34c <forward_relu+0xbc>
 800e39e:	429c      	cmp	r4, r3
 800e3a0:	d8d4      	bhi.n	800e34c <forward_relu+0xbc>
 800e3a2:	1b1c      	subs	r4, r3, r4
 800e3a4:	f024 0403 	bic.w	r4, r4, #3
 800e3a8:	1d1a      	adds	r2, r3, #4
 800e3aa:	1d01      	adds	r1, r0, #4
 800e3ac:	1b1b      	subs	r3, r3, r4
 800e3ae:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3b2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ba:	db0e      	blt.n	800e3da <forward_relu+0x14a>
 800e3bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e3c6:	ed61 7a01 	vstmdb	r1!, {s15}
 800e3ca:	d0bf      	beq.n	800e34c <forward_relu+0xbc>
 800e3cc:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	daf0      	bge.n	800e3bc <forward_relu+0x12c>
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	ed61 7a01 	vstmdb	r1!, {s15}
 800e3e0:	d1e5      	bne.n	800e3ae <forward_relu+0x11e>
 800e3e2:	e7b3      	b.n	800e34c <forward_relu+0xbc>
 800e3e4:	6893      	ldr	r3, [r2, #8]
 800e3e6:	6989      	ldr	r1, [r1, #24]
 800e3e8:	6990      	ldr	r0, [r2, #24]
 800e3ea:	6889      	ldr	r1, [r1, #8]
 800e3ec:	6884      	ldr	r4, [r0, #8]
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	d075      	beq.n	800e4de <forward_relu+0x24e>
 800e3f2:	68d5      	ldr	r5, [r2, #12]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e3fa:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e3fe:	429d      	cmp	r5, r3
 800e400:	fb00 f202 	mul.w	r2, r0, r2
 800e404:	d1f9      	bne.n	800e3fa <forward_relu+0x16a>
 800e406:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800e40a:	3b01      	subs	r3, #1
 800e40c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e410:	4294      	cmp	r4, r2
 800e412:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e416:	d899      	bhi.n	800e34c <forward_relu+0xbc>
 800e418:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e4f4 <forward_relu+0x264>
 800e41c:	3204      	adds	r2, #4
 800e41e:	3104      	adds	r1, #4
 800e420:	4613      	mov	r3, r2
 800e422:	ed72 7a01 	vldmdb	r2!, {s15}
 800e426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	f1a3 0308 	sub.w	r3, r3, #8
 800e432:	bfb8      	it	lt
 800e434:	eef0 7a47 	vmovlt.f32	s15, s14
 800e438:	429c      	cmp	r4, r3
 800e43a:	ed61 7a01 	vstmdb	r1!, {s15}
 800e43e:	d9ef      	bls.n	800e420 <forward_relu+0x190>
 800e440:	bc70      	pop	{r4, r5, r6}
 800e442:	4770      	bx	lr
 800e444:	688c      	ldr	r4, [r1, #8]
 800e446:	6891      	ldr	r1, [r2, #8]
 800e448:	6880      	ldr	r0, [r0, #8]
 800e44a:	0a09      	lsrs	r1, r1, #8
 800e44c:	d049      	beq.n	800e4e2 <forward_relu+0x252>
 800e44e:	68d5      	ldr	r5, [r2, #12]
 800e450:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800e454:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e458:	42aa      	cmp	r2, r5
 800e45a:	fb01 f303 	mul.w	r3, r1, r3
 800e45e:	d1f9      	bne.n	800e454 <forward_relu+0x1c4>
 800e460:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800e464:	3a01      	subs	r2, #1
 800e466:	68b1      	ldr	r1, [r6, #8]
 800e468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e46c:	429c      	cmp	r4, r3
 800e46e:	ed91 7a00 	vldr	s14, [r1]
 800e472:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e476:	f63f af69 	bhi.w	800e34c <forward_relu+0xbc>
 800e47a:	2500      	movs	r5, #0
 800e47c:	3304      	adds	r3, #4
 800e47e:	1d02      	adds	r2, r0, #4
 800e480:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48c:	f1a3 0104 	sub.w	r1, r3, #4
 800e490:	f1a3 0308 	sub.w	r3, r3, #8
 800e494:	d406      	bmi.n	800e4a4 <forward_relu+0x214>
 800e496:	429c      	cmp	r4, r3
 800e498:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e49c:	f63f af56 	bhi.w	800e34c <forward_relu+0xbc>
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	e7ed      	b.n	800e480 <forward_relu+0x1f0>
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	ed62 7a01 	vstmdb	r2!, {s15}
 800e4aa:	f63f af4f 	bhi.w	800e34c <forward_relu+0xbc>
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	e7e6      	b.n	800e480 <forward_relu+0x1f0>
 800e4b2:	68b3      	ldr	r3, [r6, #8]
 800e4b4:	ed93 7a02 	vldr	s14, [r3, #8]
 800e4b8:	edd3 6a00 	vldr	s13, [r3]
 800e4bc:	ed93 6a01 	vldr	s12, [r3, #4]
 800e4c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	d401      	bmi.n	800e4ce <forward_relu+0x23e>
 800e4ca:	4623      	mov	r3, r4
 800e4cc:	e71e      	b.n	800e30c <forward_relu+0x7c>
 800e4ce:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d6:	4623      	mov	r3, r4
 800e4d8:	f47f af63 	bne.w	800e3a2 <forward_relu+0x112>
 800e4dc:	e741      	b.n	800e362 <forward_relu+0xd2>
 800e4de:	4622      	mov	r2, r4
 800e4e0:	e79a      	b.n	800e418 <forward_relu+0x188>
 800e4e2:	68b2      	ldr	r2, [r6, #8]
 800e4e4:	4623      	mov	r3, r4
 800e4e6:	ed92 7a00 	vldr	s14, [r2]
 800e4ea:	e7c6      	b.n	800e47a <forward_relu+0x1ea>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	deff      	udf	#255	; 0xff
 800e4f2:	bf00      	nop
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <forward_sm>:
 800e4f8:	6982      	ldr	r2, [r0, #24]
 800e4fa:	8813      	ldrh	r3, [r2, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d07c      	beq.n	800e5fa <forward_sm+0x102>
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	ed2d 8b04 	vpush	{d8-d9}
 800e508:	6852      	ldr	r2, [r2, #4]
 800e50a:	6854      	ldr	r4, [r2, #4]
 800e50c:	b085      	sub	sp, #20
 800e50e:	b104      	cbz	r4, 800e512 <forward_sm+0x1a>
 800e510:	6824      	ldr	r4, [r4, #0]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d076      	beq.n	800e604 <forward_sm+0x10c>
 800e516:	6913      	ldr	r3, [r2, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d076      	beq.n	800e60a <forward_sm+0x112>
 800e51c:	681e      	ldr	r6, [r3, #0]
 800e51e:	68a3      	ldr	r3, [r4, #8]
 800e520:	68e0      	ldr	r0, [r4, #12]
 800e522:	68f2      	ldr	r2, [r6, #12]
 800e524:	6845      	ldr	r5, [r0, #4]
 800e526:	6857      	ldr	r7, [r2, #4]
 800e528:	0a1b      	lsrs	r3, r3, #8
 800e52a:	d068      	beq.n	800e5fe <forward_sm+0x106>
 800e52c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e530:	2201      	movs	r2, #1
 800e532:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e536:	4298      	cmp	r0, r3
 800e538:	fb01 f202 	mul.w	r2, r1, r2
 800e53c:	d1f9      	bne.n	800e532 <forward_sm+0x3a>
 800e53e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e542:	69a2      	ldr	r2, [r4, #24]
 800e544:	69b3      	ldr	r3, [r6, #24]
 800e546:	6892      	ldr	r2, [r2, #8]
 800e548:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e54c:	eb02 0309 	add.w	r3, r2, r9
 800e550:	429a      	cmp	r2, r3
 800e552:	9301      	str	r3, [sp, #4]
 800e554:	d24c      	bcs.n	800e5f0 <forward_sm+0xf8>
 800e556:	00bb      	lsls	r3, r7, #2
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e55e:	00ab      	lsls	r3, r5, #2
 800e560:	2d01      	cmp	r5, #1
 800e562:	ed92 8a00 	vldr	s16, [r2]
 800e566:	9302      	str	r3, [sp, #8]
 800e568:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e56c:	463e      	mov	r6, r7
 800e56e:	d93c      	bls.n	800e5ea <forward_sm+0xf2>
 800e570:	1d13      	adds	r3, r2, #4
 800e572:	ecf3 7a01 	vldmia	r3!, {s15}
 800e576:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	bfb8      	it	lt
 800e580:	eeb0 8a67 	vmovlt.f32	s16, s15
 800e584:	429e      	cmp	r6, r3
 800e586:	d1f4      	bne.n	800e572 <forward_sm+0x7a>
 800e588:	eddf 8a21 	vldr	s17, [pc, #132]	; 800e610 <forward_sm+0x118>
 800e58c:	4692      	mov	sl, r2
 800e58e:	46c3      	mov	fp, r8
 800e590:	46c1      	mov	r9, r8
 800e592:	2400      	movs	r4, #0
 800e594:	ecba 0a01 	vldmia	sl!, {s0}
 800e598:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e59c:	f003 fda6 	bl	80120ec <expf>
 800e5a0:	3401      	adds	r4, #1
 800e5a2:	42a5      	cmp	r5, r4
 800e5a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e5a8:	eca9 0a01 	vstmia	r9!, {s0}
 800e5ac:	d8f2      	bhi.n	800e594 <forward_sm+0x9c>
 800e5ae:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b6:	d00b      	beq.n	800e5d0 <forward_sm+0xd8>
 800e5b8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e5bc:	2300      	movs	r3, #0
 800e5be:	3301      	adds	r3, #1
 800e5c0:	429d      	cmp	r5, r3
 800e5c2:	eddb 7a00 	vldr	s15, [fp]
 800e5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ca:	eceb 7a01 	vstmia	fp!, {s15}
 800e5ce:	d8f6      	bhi.n	800e5be <forward_sm+0xc6>
 800e5d0:	9b03      	ldr	r3, [sp, #12]
 800e5d2:	9901      	ldr	r1, [sp, #4]
 800e5d4:	4498      	add	r8, r3
 800e5d6:	9b02      	ldr	r3, [sp, #8]
 800e5d8:	42b9      	cmp	r1, r7
 800e5da:	463a      	mov	r2, r7
 800e5dc:	441e      	add	r6, r3
 800e5de:	d907      	bls.n	800e5f0 <forward_sm+0xf8>
 800e5e0:	2d01      	cmp	r5, #1
 800e5e2:	ed92 8a00 	vldr	s16, [r2]
 800e5e6:	441f      	add	r7, r3
 800e5e8:	d8c2      	bhi.n	800e570 <forward_sm+0x78>
 800e5ea:	2d00      	cmp	r5, #0
 800e5ec:	d0f0      	beq.n	800e5d0 <forward_sm+0xd8>
 800e5ee:	e7cb      	b.n	800e588 <forward_sm+0x90>
 800e5f0:	b005      	add	sp, #20
 800e5f2:	ecbd 8b04 	vpop	{d8-d9}
 800e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	deff      	udf	#255	; 0xff
 800e5fe:	f04f 0904 	mov.w	r9, #4
 800e602:	e79e      	b.n	800e542 <forward_sm+0x4a>
 800e604:	2300      	movs	r3, #0
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	deff      	udf	#255	; 0xff
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	deff      	udf	#255	; 0xff
 800e60e:	bf00      	nop
 800e610:	00000000 	.word	0x00000000

0800e614 <ai_check_custom_types>:
 800e614:	b082      	sub	sp, #8
 800e616:	4b13      	ldr	r3, [pc, #76]	; (800e664 <ai_check_custom_types+0x50>)
 800e618:	9301      	str	r3, [sp, #4]
 800e61a:	b118      	cbz	r0, 800e624 <ai_check_custom_types+0x10>
 800e61c:	7803      	ldrb	r3, [r0, #0]
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d002      	beq.n	800e628 <ai_check_custom_types+0x14>
 800e622:	2000      	movs	r0, #0
 800e624:	b002      	add	sp, #8
 800e626:	4770      	bx	lr
 800e628:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d004      	beq.n	800e63a <ai_check_custom_types+0x26>
 800e630:	2001      	movs	r0, #1
 800e632:	f080 0001 	eor.w	r0, r0, #1
 800e636:	b002      	add	sp, #8
 800e638:	4770      	bx	lr
 800e63a:	7842      	ldrb	r2, [r0, #1]
 800e63c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e640:	429a      	cmp	r2, r3
 800e642:	f100 0001 	add.w	r0, r0, #1
 800e646:	d1f3      	bne.n	800e630 <ai_check_custom_types+0x1c>
 800e648:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e64c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e650:	429a      	cmp	r2, r3
 800e652:	d1ed      	bne.n	800e630 <ai_check_custom_types+0x1c>
 800e654:	7842      	ldrb	r2, [r0, #1]
 800e656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d1e8      	bne.n	800e630 <ai_check_custom_types+0x1c>
 800e65e:	2000      	movs	r0, #0
 800e660:	e7e7      	b.n	800e632 <ai_check_custom_types+0x1e>
 800e662:	bf00      	nop
 800e664:	84048403 	.word	0x84048403

0800e668 <ai_layers_init_all>:
 800e668:	4601      	mov	r1, r0
 800e66a:	2000      	movs	r0, #0
 800e66c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e66e:	b143      	cbz	r3, 800e682 <ai_layers_init_all+0x1a>
 800e670:	691a      	ldr	r2, [r3, #16]
 800e672:	60d9      	str	r1, [r3, #12]
 800e674:	429a      	cmp	r2, r3
 800e676:	f100 0001 	add.w	r0, r0, #1
 800e67a:	d002      	beq.n	800e682 <ai_layers_init_all+0x1a>
 800e67c:	b10a      	cbz	r2, 800e682 <ai_layers_init_all+0x1a>
 800e67e:	4613      	mov	r3, r2
 800e680:	e7f5      	b.n	800e66e <ai_layers_init_all+0x6>
 800e682:	4770      	bx	lr

0800e684 <ai_layers_post_init_all>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e688:	2500      	movs	r5, #0
 800e68a:	b16c      	cbz	r4, 800e6a8 <ai_layers_post_init_all+0x24>
 800e68c:	6863      	ldr	r3, [r4, #4]
 800e68e:	07db      	lsls	r3, r3, #31
 800e690:	d504      	bpl.n	800e69c <ai_layers_post_init_all+0x18>
 800e692:	6a23      	ldr	r3, [r4, #32]
 800e694:	4620      	mov	r0, r4
 800e696:	b10b      	cbz	r3, 800e69c <ai_layers_post_init_all+0x18>
 800e698:	4798      	blx	r3
 800e69a:	3501      	adds	r5, #1
 800e69c:	6923      	ldr	r3, [r4, #16]
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	d002      	beq.n	800e6a8 <ai_layers_post_init_all+0x24>
 800e6a2:	b10b      	cbz	r3, 800e6a8 <ai_layers_post_init_all+0x24>
 800e6a4:	461c      	mov	r4, r3
 800e6a6:	e7f0      	b.n	800e68a <ai_layers_post_init_all+0x6>
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	bd38      	pop	{r3, r4, r5, pc}

0800e6ac <ai_layers_forward_all>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	f1b8 0f00 	cmp.w	r8, #0
 800e6ba:	d02b      	beq.n	800e714 <ai_layers_forward_all+0x68>
 800e6bc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e6be:	6381      	str	r1, [r0, #56]	; 0x38
 800e6c0:	b321      	cbz	r1, 800e70c <ai_layers_forward_all+0x60>
 800e6c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e6c4:	2001      	movs	r0, #1
 800e6c6:	47c0      	blx	r8
 800e6c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e6ca:	b1fe      	cbz	r6, 800e70c <ai_layers_forward_all+0x60>
 800e6cc:	2700      	movs	r7, #0
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e6d2:	2002      	movs	r0, #2
 800e6d4:	47c0      	blx	r8
 800e6d6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e6d8:	4628      	mov	r0, r5
 800e6da:	696b      	ldr	r3, [r5, #20]
 800e6dc:	4798      	blx	r3
 800e6de:	692e      	ldr	r6, [r5, #16]
 800e6e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e6e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e6e4:	42b5      	cmp	r5, r6
 800e6e6:	f04f 0003 	mov.w	r0, #3
 800e6ea:	d007      	beq.n	800e6fc <ai_layers_forward_all+0x50>
 800e6ec:	47c0      	blx	r8
 800e6ee:	3701      	adds	r7, #1
 800e6f0:	63a6      	str	r6, [r4, #56]	; 0x38
 800e6f2:	2e00      	cmp	r6, #0
 800e6f4:	d1eb      	bne.n	800e6ce <ai_layers_forward_all+0x22>
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fc:	2003      	movs	r0, #3
 800e6fe:	47c0      	blx	r8
 800e700:	2300      	movs	r3, #0
 800e702:	3701      	adds	r7, #1
 800e704:	63a3      	str	r3, [r4, #56]	; 0x38
 800e706:	4638      	mov	r0, r7
 800e708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70c:	2700      	movs	r7, #0
 800e70e:	4638      	mov	r0, r7
 800e710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e714:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e716:	6385      	str	r5, [r0, #56]	; 0x38
 800e718:	2d00      	cmp	r5, #0
 800e71a:	d0f7      	beq.n	800e70c <ai_layers_forward_all+0x60>
 800e71c:	4647      	mov	r7, r8
 800e71e:	696b      	ldr	r3, [r5, #20]
 800e720:	4628      	mov	r0, r5
 800e722:	4798      	blx	r3
 800e724:	462b      	mov	r3, r5
 800e726:	692d      	ldr	r5, [r5, #16]
 800e728:	429d      	cmp	r5, r3
 800e72a:	d004      	beq.n	800e736 <ai_layers_forward_all+0x8a>
 800e72c:	63a5      	str	r5, [r4, #56]	; 0x38
 800e72e:	3701      	adds	r7, #1
 800e730:	2d00      	cmp	r5, #0
 800e732:	d1f4      	bne.n	800e71e <ai_layers_forward_all+0x72>
 800e734:	e7df      	b.n	800e6f6 <ai_layers_forward_all+0x4a>
 800e736:	2300      	movs	r3, #0
 800e738:	63a3      	str	r3, [r4, #56]	; 0x38
 800e73a:	3701      	adds	r7, #1
 800e73c:	e7db      	b.n	800e6f6 <ai_layers_forward_all+0x4a>
 800e73e:	bf00      	nop

0800e740 <lite_dense_if32of32wf32>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800e748:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e74c:	4287      	cmp	r7, r0
 800e74e:	f240 8106 	bls.w	800e95e <lite_dense_if32of32wf32+0x21e>
 800e752:	f1a6 0810 	sub.w	r8, r6, #16
 800e756:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e75a:	f108 0801 	add.w	r8, r8, #1
 800e75e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800e762:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e766:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e76a:	4605      	mov	r5, r0
 800e76c:	f006 0a0f 	and.w	sl, r6, #15
 800e770:	2e0f      	cmp	r6, #15
 800e772:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e984 <lite_dense_if32of32wf32+0x244>
 800e776:	f240 8101 	bls.w	800e97c <lite_dense_if32of32wf32+0x23c>
 800e77a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e77e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e782:	46b6      	mov	lr, r6
 800e784:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800e788:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e78c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800e790:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800e794:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800e798:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800e79c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800e7a0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800e7a4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800e7a8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800e7ac:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800e7b0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800e7b4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800e7b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7bc:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e7c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e7c4:	f1ae 0e10 	sub.w	lr, lr, #16
 800e7c8:	f1be 0f0f 	cmp.w	lr, #15
 800e7cc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800e7d0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800e7d4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e7d8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e7dc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800e7e0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800e7e4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800e7e8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800e7ec:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800e7f0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800e7f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e7f8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800e7fc:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800e800:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e804:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800e808:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800e80c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e810:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e814:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e818:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e81c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e820:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e824:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e828:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e82c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e830:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e834:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e838:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e83c:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e840:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e844:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e848:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e84c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e850:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e854:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e858:	d894      	bhi.n	800e784 <lite_dense_if32of32wf32+0x44>
 800e85a:	eb02 0e0b 	add.w	lr, r2, fp
 800e85e:	4654      	mov	r4, sl
 800e860:	46c4      	mov	ip, r8
 800e862:	2c00      	cmp	r4, #0
 800e864:	d075      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e866:	eddc 6a00 	vldr	s13, [ip]
 800e86a:	edde 7a00 	vldr	s15, [lr]
 800e86e:	2c01      	cmp	r4, #1
 800e870:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e874:	d06d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e876:	eddc 6a01 	vldr	s13, [ip, #4]
 800e87a:	edde 7a01 	vldr	s15, [lr, #4]
 800e87e:	2c02      	cmp	r4, #2
 800e880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e884:	d065      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e886:	eddc 6a02 	vldr	s13, [ip, #8]
 800e88a:	edde 7a02 	vldr	s15, [lr, #8]
 800e88e:	2c03      	cmp	r4, #3
 800e890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e894:	d05d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e896:	eddc 6a03 	vldr	s13, [ip, #12]
 800e89a:	edde 7a03 	vldr	s15, [lr, #12]
 800e89e:	2c04      	cmp	r4, #4
 800e8a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8a4:	d055      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8a6:	eddc 6a04 	vldr	s13, [ip, #16]
 800e8aa:	edde 7a04 	vldr	s15, [lr, #16]
 800e8ae:	2c05      	cmp	r4, #5
 800e8b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8b4:	d04d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8b6:	eddc 6a05 	vldr	s13, [ip, #20]
 800e8ba:	edde 7a05 	vldr	s15, [lr, #20]
 800e8be:	2c06      	cmp	r4, #6
 800e8c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8c4:	d045      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8c6:	eddc 6a06 	vldr	s13, [ip, #24]
 800e8ca:	edde 7a06 	vldr	s15, [lr, #24]
 800e8ce:	2c07      	cmp	r4, #7
 800e8d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8d4:	d03d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8d6:	eddc 6a07 	vldr	s13, [ip, #28]
 800e8da:	edde 7a07 	vldr	s15, [lr, #28]
 800e8de:	2c08      	cmp	r4, #8
 800e8e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8e4:	d035      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8e6:	eddc 6a08 	vldr	s13, [ip, #32]
 800e8ea:	edde 7a08 	vldr	s15, [lr, #32]
 800e8ee:	2c09      	cmp	r4, #9
 800e8f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8f4:	d02d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e8f6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e8fa:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e8fe:	2c0a      	cmp	r4, #10
 800e900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e904:	d025      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e906:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e90a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e90e:	2c0b      	cmp	r4, #11
 800e910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e914:	d01d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e916:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e91a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e91e:	2c0c      	cmp	r4, #12
 800e920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e924:	d015      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e926:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e92a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e92e:	3c0d      	subs	r4, #13
 800e930:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e934:	d00d      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e936:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e93a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e93e:	2c01      	cmp	r4, #1
 800e940:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e944:	d005      	beq.n	800e952 <lite_dense_if32of32wf32+0x212>
 800e946:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800e94a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800e94e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e952:	444a      	add	r2, r9
 800e954:	eca5 7a01 	vstmia	r5!, {s14}
 800e958:	42af      	cmp	r7, r5
 800e95a:	f63f af09 	bhi.w	800e770 <lite_dense_if32of32wf32+0x30>
 800e95e:	b15b      	cbz	r3, 800e978 <lite_dense_if32of32wf32+0x238>
 800e960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e962:	b14a      	cbz	r2, 800e978 <lite_dense_if32of32wf32+0x238>
 800e964:	edd0 7a00 	vldr	s15, [r0]
 800e968:	ecb3 7a01 	vldmia	r3!, {s14}
 800e96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e970:	ece0 7a01 	vstmia	r0!, {s15}
 800e974:	4287      	cmp	r7, r0
 800e976:	d1f5      	bne.n	800e964 <lite_dense_if32of32wf32+0x224>
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97c:	4634      	mov	r4, r6
 800e97e:	4696      	mov	lr, r2
 800e980:	468c      	mov	ip, r1
 800e982:	e76e      	b.n	800e862 <lite_dense_if32of32wf32+0x122>
 800e984:	00000000 	.word	0x00000000

0800e988 <ai_version_get>:
 800e988:	0212      	lsls	r2, r2, #8
 800e98a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e98e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e992:	4770      	bx	lr

0800e994 <get_tensor_byte_size>:
 800e994:	b410      	push	{r4}
 800e996:	6983      	ldr	r3, [r0, #24]
 800e998:	68c4      	ldr	r4, [r0, #12]
 800e99a:	6941      	ldr	r1, [r0, #20]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	68e0      	ldr	r0, [r4, #12]
 800e9a0:	4a07      	ldr	r2, [pc, #28]	; (800e9c0 <get_tensor_byte_size+0x2c>)
 800e9a2:	68c9      	ldr	r1, [r1, #12]
 800e9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800e9ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e9b0:	fb01 f000 	mul.w	r0, r1, r0
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	bf04      	itt	eq
 800e9b8:	3007      	addeq	r0, #7
 800e9ba:	08c0      	lsreq	r0, r0, #3
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	000400c0 	.word	0x000400c0

0800e9c4 <ai_array_to_buffer_fmt>:
 800e9c4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d050      	beq.n	800ea6e <ai_array_to_buffer_fmt+0xaa>
 800e9cc:	4b2a      	ldr	r3, [pc, #168]	; (800ea78 <ai_array_to_buffer_fmt+0xb4>)
 800e9ce:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d00b      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800e9d6:	dc1c      	bgt.n	800ea12 <ai_array_to_buffer_fmt+0x4e>
 800e9d8:	4b28      	ldr	r3, [pc, #160]	; (800ea7c <ai_array_to_buffer_fmt+0xb8>)
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d007      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800e9de:	dd0b      	ble.n	800e9f8 <ai_array_to_buffer_fmt+0x34>
 800e9e0:	4b27      	ldr	r3, [pc, #156]	; (800ea80 <ai_array_to_buffer_fmt+0xbc>)
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d003      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800e9e6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d131      	bne.n	800ea52 <ai_array_to_buffer_fmt+0x8e>
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e9f4:	4318      	orrs	r0, r3
 800e9f6:	4770      	bx	lr
 800e9f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d0f6      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea00:	dd2c      	ble.n	800ea5c <ai_array_to_buffer_fmt+0x98>
 800ea02:	4b20      	ldr	r3, [pc, #128]	; (800ea84 <ai_array_to_buffer_fmt+0xc0>)
 800ea04:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	bf18      	it	ne
 800ea0c:	2340      	movne	r3, #64	; 0x40
 800ea0e:	4318      	orrs	r0, r3
 800ea10:	4770      	bx	lr
 800ea12:	4b1d      	ldr	r3, [pc, #116]	; (800ea88 <ai_array_to_buffer_fmt+0xc4>)
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d0ea      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea18:	dd0e      	ble.n	800ea38 <ai_array_to_buffer_fmt+0x74>
 800ea1a:	4b1c      	ldr	r3, [pc, #112]	; (800ea8c <ai_array_to_buffer_fmt+0xc8>)
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d0e6      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea20:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d0e2      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea28:	4b19      	ldr	r3, [pc, #100]	; (800ea90 <ai_array_to_buffer_fmt+0xcc>)
 800ea2a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	bf18      	it	ne
 800ea32:	2340      	movne	r3, #64	; 0x40
 800ea34:	4318      	orrs	r0, r3
 800ea36:	4770      	bx	lr
 800ea38:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d0d6      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea40:	3307      	adds	r3, #7
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d0d3      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea46:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	bf18      	it	ne
 800ea4e:	2340      	movne	r3, #64	; 0x40
 800ea50:	e7ce      	b.n	800e9f0 <ai_array_to_buffer_fmt+0x2c>
 800ea52:	4b10      	ldr	r3, [pc, #64]	; (800ea94 <ai_array_to_buffer_fmt+0xd0>)
 800ea54:	429a      	cmp	r2, r3
 800ea56:	bf18      	it	ne
 800ea58:	2340      	movne	r3, #64	; 0x40
 800ea5a:	e7c9      	b.n	800e9f0 <ai_array_to_buffer_fmt+0x2c>
 800ea5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d0c4      	beq.n	800e9ee <ai_array_to_buffer_fmt+0x2a>
 800ea64:	3380      	adds	r3, #128	; 0x80
 800ea66:	429a      	cmp	r2, r3
 800ea68:	bf18      	it	ne
 800ea6a:	2340      	movne	r3, #64	; 0x40
 800ea6c:	e7c0      	b.n	800e9f0 <ai_array_to_buffer_fmt+0x2c>
 800ea6e:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <ai_array_to_buffer_fmt+0xd4>)
 800ea70:	4003      	ands	r3, r0
 800ea72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ea76:	e7bb      	b.n	800e9f0 <ai_array_to_buffer_fmt+0x2c>
 800ea78:	00840040 	.word	0x00840040
 800ea7c:	00040840 	.word	0x00040840
 800ea80:	00041040 	.word	0x00041040
 800ea84:	00040447 	.word	0x00040447
 800ea88:	00840840 	.word	0x00840840
 800ea8c:	00841040 	.word	0x00841040
 800ea90:	0084084f 	.word	0x0084084f
 800ea94:	0004084f 	.word	0x0004084f
 800ea98:	00803fff 	.word	0x00803fff

0800ea9c <ai_array_get_byte_size>:
 800ea9c:	b319      	cbz	r1, 800eae6 <ai_array_get_byte_size+0x4a>
 800ea9e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800eaa2:	fb03 f101 	mul.w	r1, r3, r1
 800eaa6:	3107      	adds	r1, #7
 800eaa8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800eaac:	f021 0307 	bic.w	r3, r1, #7
 800eab0:	2a04      	cmp	r2, #4
 800eab2:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800eab6:	fa23 f101 	lsr.w	r1, r3, r1
 800eaba:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800eabe:	d00b      	beq.n	800ead8 <ai_array_get_byte_size+0x3c>
 800eac0:	2a08      	cmp	r2, #8
 800eac2:	d002      	beq.n	800eaca <ai_array_get_byte_size+0x2e>
 800eac4:	3107      	adds	r1, #7
 800eac6:	08c8      	lsrs	r0, r1, #3
 800eac8:	4770      	bx	lr
 800eaca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eace:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ead2:	3107      	adds	r1, #7
 800ead4:	08c8      	lsrs	r0, r1, #3
 800ead6:	4770      	bx	lr
 800ead8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eadc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800eae0:	3107      	adds	r1, #7
 800eae2:	08c8      	lsrs	r0, r1, #3
 800eae4:	4770      	bx	lr
 800eae6:	4608      	mov	r0, r1
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop

0800eaec <ai_array_get_data_byte_size>:
 800eaec:	b169      	cbz	r1, 800eb0a <ai_array_get_data_byte_size+0x1e>
 800eaee:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800eaf2:	fb02 f101 	mul.w	r1, r2, r1
 800eaf6:	1dcb      	adds	r3, r1, #7
 800eaf8:	f023 0307 	bic.w	r3, r3, #7
 800eafc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800eb00:	fa23 f000 	lsr.w	r0, r3, r0
 800eb04:	3007      	adds	r0, #7
 800eb06:	08c0      	lsrs	r0, r0, #3
 800eb08:	4770      	bx	lr
 800eb0a:	4608      	mov	r0, r1
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop

0800eb10 <arm_max_f32>:
 800eb10:	f101 3cff 	add.w	ip, r1, #4294967295
 800eb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb16:	4607      	mov	r7, r0
 800eb18:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800eb1c:	ecf7 7a01 	vldmia	r7!, {s15}
 800eb20:	d060      	beq.n	800ebe4 <arm_max_f32+0xd4>
 800eb22:	2400      	movs	r4, #0
 800eb24:	3014      	adds	r0, #20
 800eb26:	4625      	mov	r5, r4
 800eb28:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800eb2c:	ed10 7a04 	vldr	s14, [r0, #-16]
 800eb30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb38:	bf48      	it	mi
 800eb3a:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb3e:	ed10 7a03 	vldr	s14, [r0, #-12]
 800eb42:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb46:	bf48      	it	mi
 800eb48:	1c65      	addmi	r5, r4, #1
 800eb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4e:	bf48      	it	mi
 800eb50:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb54:	ed10 7a02 	vldr	s14, [r0, #-8]
 800eb58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb5c:	bf48      	it	mi
 800eb5e:	1ca5      	addmi	r5, r4, #2
 800eb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb64:	bf48      	it	mi
 800eb66:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb6a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800eb6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb72:	bf48      	it	mi
 800eb74:	1ce5      	addmi	r5, r4, #3
 800eb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7a:	f104 0404 	add.w	r4, r4, #4
 800eb7e:	bf44      	itt	mi
 800eb80:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb84:	4625      	movmi	r5, r4
 800eb86:	42a6      	cmp	r6, r4
 800eb88:	f100 0010 	add.w	r0, r0, #16
 800eb8c:	d1ce      	bne.n	800eb2c <arm_max_f32+0x1c>
 800eb8e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800eb92:	f01c 0003 	ands.w	r0, ip, #3
 800eb96:	d021      	beq.n	800ebdc <arm_max_f32+0xcc>
 800eb98:	ed97 7a00 	vldr	s14, [r7]
 800eb9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	bfc4      	itt	gt
 800eba6:	eef0 7a47 	vmovgt.f32	s15, s14
 800ebaa:	1a0d      	subgt	r5, r1, r0
 800ebac:	3801      	subs	r0, #1
 800ebae:	d015      	beq.n	800ebdc <arm_max_f32+0xcc>
 800ebb0:	ed97 7a01 	vldr	s14, [r7, #4]
 800ebb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbc:	bf44      	itt	mi
 800ebbe:	eef0 7a47 	vmovmi.f32	s15, s14
 800ebc2:	1a0d      	submi	r5, r1, r0
 800ebc4:	2801      	cmp	r0, #1
 800ebc6:	d009      	beq.n	800ebdc <arm_max_f32+0xcc>
 800ebc8:	ed97 7a02 	vldr	s14, [r7, #8]
 800ebcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	bfc4      	itt	gt
 800ebd6:	eef0 7a47 	vmovgt.f32	s15, s14
 800ebda:	4665      	movgt	r5, ip
 800ebdc:	edc2 7a00 	vstr	s15, [r2]
 800ebe0:	601d      	str	r5, [r3, #0]
 800ebe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebe4:	4675      	mov	r5, lr
 800ebe6:	e7d4      	b.n	800eb92 <arm_max_f32+0x82>

0800ebe8 <arm_fir_init_f32>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	9c04      	ldr	r4, [sp, #16]
 800ebec:	6082      	str	r2, [r0, #8]
 800ebee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800ebf2:	3c01      	subs	r4, #1
 800ebf4:	440c      	add	r4, r1
 800ebf6:	8001      	strh	r1, [r0, #0]
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	00a2      	lsls	r2, r4, #2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	2100      	movs	r1, #0
 800ec00:	f000 fac6 	bl	800f190 <memset>
 800ec04:	6068      	str	r0, [r5, #4]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}

0800ec08 <arm_fir_f32>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	ed2d 8b10 	vpush	{d8-d15}
 800ec10:	b08b      	sub	sp, #44	; 0x2c
 800ec12:	f8b0 8000 	ldrh.w	r8, [r0]
 800ec16:	9003      	str	r0, [sp, #12]
 800ec18:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800ec1c:	461e      	mov	r6, r3
 800ec1e:	9304      	str	r3, [sp, #16]
 800ec20:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 800ec24:	3b01      	subs	r3, #1
 800ec26:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800ec2a:	08f3      	lsrs	r3, r6, #3
 800ec2c:	9002      	str	r0, [sp, #8]
 800ec2e:	9500      	str	r5, [sp, #0]
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	f000 81f1 	beq.w	800f018 <arm_fir_f32+0x410>
 800ec36:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800ec3a:	f100 0620 	add.w	r6, r0, #32
 800ec3e:	9405      	str	r4, [sp, #20]
 800ec40:	0164      	lsls	r4, r4, #5
 800ec42:	4420      	add	r0, r4
 800ec44:	f008 0a07 	and.w	sl, r8, #7
 800ec48:	9607      	str	r6, [sp, #28]
 800ec4a:	9006      	str	r0, [sp, #24]
 800ec4c:	469c      	mov	ip, r3
 800ec4e:	4650      	mov	r0, sl
 800ec50:	4623      	mov	r3, r4
 800ec52:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ec56:	f8cd 8020 	str.w	r8, [sp, #32]
 800ec5a:	1937      	adds	r7, r6, r4
 800ec5c:	f109 0b1c 	add.w	fp, r9, #28
 800ec60:	f8dd e014 	ldr.w	lr, [sp, #20]
 800ec64:	9209      	str	r2, [sp, #36]	; 0x24
 800ec66:	f8cd 9014 	str.w	r9, [sp, #20]
 800ec6a:	f101 0620 	add.w	r6, r1, #32
 800ec6e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ec72:	9106      	str	r1, [sp, #24]
 800ec74:	3520      	adds	r5, #32
 800ec76:	f102 0420 	add.w	r4, r2, #32
 800ec7a:	4698      	mov	r8, r3
 800ec7c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800ec80:	f845 3c20 	str.w	r3, [r5, #-32]
 800ec84:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800ec88:	f845 3c1c 	str.w	r3, [r5, #-28]
 800ec8c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800ec90:	f845 3c18 	str.w	r3, [r5, #-24]
 800ec94:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800ec98:	f845 3c14 	str.w	r3, [r5, #-20]
 800ec9c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800eca0:	f845 3c10 	str.w	r3, [r5, #-16]
 800eca4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800eca8:	f845 3c0c 	str.w	r3, [r5, #-12]
 800ecac:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ecb0:	f845 3c08 	str.w	r3, [r5, #-8]
 800ecb4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecb8:	f845 3c04 	str.w	r3, [r5, #-4]
 800ecbc:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 800ecc0:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 800ecc4:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 800ecc8:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800eccc:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800ecd0:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800ecd4:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800ecd8:	eddf 6af5 	vldr	s13, [pc, #980]	; 800f0b0 <arm_fir_f32+0x4a8>
 800ecdc:	465a      	mov	r2, fp
 800ecde:	f1be 0f00 	cmp.w	lr, #0
 800ece2:	f000 81fe 	beq.w	800f0e2 <arm_fir_f32+0x4da>
 800ece6:	f10b 0120 	add.w	r1, fp, #32
 800ecea:	eef0 ba66 	vmov.f32	s23, s13
 800ecee:	eeb0 6a66 	vmov.f32	s12, s13
 800ecf2:	eeb0 9a66 	vmov.f32	s18, s13
 800ecf6:	eef0 9a66 	vmov.f32	s19, s13
 800ecfa:	eeb0 aa66 	vmov.f32	s20, s13
 800ecfe:	eef0 aa66 	vmov.f32	s21, s13
 800ed02:	eeb0 ba66 	vmov.f32	s22, s13
 800ed06:	460a      	mov	r2, r1
 800ed08:	4653      	mov	r3, sl
 800ed0a:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800ed0e:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 800ed12:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 800ed16:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 800ed1a:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 800ed1e:	ed53 ca04 	vldr	s25, [r3, #-16]
 800ed22:	ed53 2a03 	vldr	s5, [r3, #-12]
 800ed26:	ed13 4a02 	vldr	s8, [r3, #-8]
 800ed2a:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ed2e:	ee67 fa02 	vmul.f32	s31, s14, s4
 800ed32:	ee27 da21 	vmul.f32	s26, s14, s3
 800ed36:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 800ed3a:	ee27 ca01 	vmul.f32	s24, s14, s2
 800ed3e:	ee27 3a20 	vmul.f32	s6, s14, s1
 800ed42:	ee67 3a00 	vmul.f32	s7, s14, s0
 800ed46:	ee67 5a08 	vmul.f32	s11, s14, s16
 800ed4a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800ed4e:	ee67 7a24 	vmul.f32	s15, s14, s9
 800ed52:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ed56:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ed5a:	ee6e faa1 	vmul.f32	s31, s29, s3
 800ed5e:	ee2e da81 	vmul.f32	s26, s29, s2
 800ed62:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 800ed66:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ed6a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ed6e:	ee2e caa0 	vmul.f32	s24, s29, s1
 800ed72:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800ed76:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ed7a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ed7e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800ed82:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800ed86:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ed8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed8e:	ee24 faae 	vmul.f32	s30, s9, s29
 800ed92:	ee6e ea82 	vmul.f32	s29, s29, s4
 800ed96:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800ed9a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ed9e:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 800eda2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800eda6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800edaa:	ee2e da20 	vmul.f32	s26, s28, s1
 800edae:	ee2e ca00 	vmul.f32	s24, s28, s0
 800edb2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800edb6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800edba:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800edbe:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800edc2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800edc6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800edca:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800edce:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800edd2:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800edd6:	ee2e ea21 	vmul.f32	s28, s28, s3
 800edda:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800edde:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ede2:	ed52 0a04 	vldr	s1, [r2, #-16]
 800ede6:	ee2d da80 	vmul.f32	s26, s27, s0
 800edea:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800edee:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800edf2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800edf6:	ee2d ca88 	vmul.f32	s24, s27, s16
 800edfa:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800edfe:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ee02:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee06:	ee64 3aad 	vmul.f32	s7, s9, s27
 800ee0a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800ee0e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee12:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ee16:	ee21 faad 	vmul.f32	s30, s3, s27
 800ee1a:	ee6d da81 	vmul.f32	s27, s27, s2
 800ee1e:	ee6c fa80 	vmul.f32	s31, s25, s0
 800ee22:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800ee26:	ed12 0a03 	vldr	s0, [r2, #-12]
 800ee2a:	ee3d da2a 	vadd.f32	s26, s26, s21
 800ee2e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ee32:	ee6c aa88 	vmul.f32	s21, s25, s16
 800ee36:	ee2c caa8 	vmul.f32	s24, s25, s17
 800ee3a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ee3e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ee42:	ee24 3aac 	vmul.f32	s6, s9, s25
 800ee46:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800ee4a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee4e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee52:	ee61 5aac 	vmul.f32	s11, s3, s25
 800ee56:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800ee5a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ee5e:	ee6c caa0 	vmul.f32	s25, s25, s1
 800ee62:	ee62 ea88 	vmul.f32	s29, s5, s16
 800ee66:	ee3a da8d 	vadd.f32	s26, s21, s26
 800ee6a:	ed12 8a02 	vldr	s16, [r2, #-8]
 800ee6e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800ee72:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ee76:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ee7a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ee7e:	ee24 caa2 	vmul.f32	s24, s9, s5
 800ee82:	ee22 3a22 	vmul.f32	s6, s4, s5
 800ee86:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ee8a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee8e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800ee92:	ee61 5a22 	vmul.f32	s11, s2, s5
 800ee96:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee9a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800ee9e:	ee20 faa2 	vmul.f32	s30, s1, s5
 800eea2:	ee62 2a80 	vmul.f32	s5, s5, s0
 800eea6:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800eeaa:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800eeae:	ee24 ba28 	vmul.f32	s22, s8, s17
 800eeb2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800eeb6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800eeba:	ee24 da84 	vmul.f32	s26, s9, s8
 800eebe:	ee22 ca04 	vmul.f32	s24, s4, s8
 800eec2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800eec6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800eeca:	ee21 3a84 	vmul.f32	s6, s3, s8
 800eece:	ee61 3a04 	vmul.f32	s7, s2, s8
 800eed2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800eed6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800eeda:	ee60 5a84 	vmul.f32	s11, s1, s8
 800eede:	ee20 7a04 	vmul.f32	s14, s0, s8
 800eee2:	ee64 6a08 	vmul.f32	s13, s8, s16
 800eee6:	ed52 8a01 	vldr	s17, [r2, #-4]
 800eeea:	ee73 9a29 	vadd.f32	s19, s6, s19
 800eeee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800eef2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800eef6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800eefa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800eefe:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800ef02:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ef06:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ef0a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800ef0e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ef12:	ee61 2a85 	vmul.f32	s5, s3, s10
 800ef16:	ee21 3a05 	vmul.f32	s6, s2, s10
 800ef1a:	ee60 3a85 	vmul.f32	s7, s1, s10
 800ef1e:	ee60 5a05 	vmul.f32	s11, s0, s10
 800ef22:	ee68 ba05 	vmul.f32	s23, s16, s10
 800ef26:	ee65 7a28 	vmul.f32	s15, s10, s17
 800ef2a:	3320      	adds	r3, #32
 800ef2c:	429f      	cmp	r7, r3
 800ef2e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800ef32:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800ef36:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800ef3a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ef3e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ef42:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ef46:	ee7b ba87 	vadd.f32	s23, s23, s14
 800ef4a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ef4e:	f102 0220 	add.w	r2, r2, #32
 800ef52:	f47f aeda 	bne.w	800ed0a <arm_fir_f32+0x102>
 800ef56:	eb0b 0208 	add.w	r2, fp, r8
 800ef5a:	46cb      	mov	fp, r9
 800ef5c:	b3a0      	cbz	r0, 800efc8 <arm_fir_f32+0x3c0>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	ecfb 7a01 	vldmia	fp!, {s15}
 800ef64:	ecf2 5a01 	vldmia	r2!, {s11}
 800ef68:	ee27 2a82 	vmul.f32	s4, s15, s4
 800ef6c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800ef70:	ee27 3a81 	vmul.f32	s6, s15, s2
 800ef74:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800ef78:	ee27 4a80 	vmul.f32	s8, s15, s0
 800ef7c:	ee67 4a88 	vmul.f32	s9, s15, s16
 800ef80:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800ef84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800ef8e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800ef92:	eeb0 2a61 	vmov.f32	s4, s3
 800ef96:	ee3a aa03 	vadd.f32	s20, s20, s6
 800ef9a:	eef0 1a41 	vmov.f32	s3, s2
 800ef9e:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800efa2:	eeb0 1a60 	vmov.f32	s2, s1
 800efa6:	ee39 9a04 	vadd.f32	s18, s18, s8
 800efaa:	eef0 0a40 	vmov.f32	s1, s0
 800efae:	ee36 6a24 	vadd.f32	s12, s12, s9
 800efb2:	eeb0 0a48 	vmov.f32	s0, s16
 800efb6:	ee7b ba85 	vadd.f32	s23, s23, s10
 800efba:	eeb0 8a68 	vmov.f32	s16, s17
 800efbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800efc2:	eef0 8a65 	vmov.f32	s17, s11
 800efc6:	d1cb      	bne.n	800ef60 <arm_fir_f32+0x358>
 800efc8:	f1bc 0c01 	subs.w	ip, ip, #1
 800efcc:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 800efd0:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 800efd4:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 800efd8:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 800efdc:	ed04 9a04 	vstr	s18, [r4, #-16]
 800efe0:	ed04 6a03 	vstr	s12, [r4, #-12]
 800efe4:	ed44 ba02 	vstr	s23, [r4, #-8]
 800efe8:	ed44 6a01 	vstr	s13, [r4, #-4]
 800efec:	f106 0620 	add.w	r6, r6, #32
 800eff0:	f105 0520 	add.w	r5, r5, #32
 800eff4:	f104 0420 	add.w	r4, r4, #32
 800eff8:	468b      	mov	fp, r1
 800effa:	f47f ae3f 	bne.w	800ec7c <arm_fir_f32+0x74>
 800effe:	9b01      	ldr	r3, [sp, #4]
 800f000:	9800      	ldr	r0, [sp, #0]
 800f002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f008:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800f00c:	015b      	lsls	r3, r3, #5
 800f00e:	4418      	add	r0, r3
 800f010:	4419      	add	r1, r3
 800f012:	441a      	add	r2, r3
 800f014:	4499      	add	r9, r3
 800f016:	9000      	str	r0, [sp, #0]
 800f018:	9b04      	ldr	r3, [sp, #16]
 800f01a:	f013 0707 	ands.w	r7, r3, #7
 800f01e:	d020      	beq.n	800f062 <arm_fir_f32+0x45a>
 800f020:	00bf      	lsls	r7, r7, #2
 800f022:	9e00      	ldr	r6, [sp, #0]
 800f024:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f028:	eb01 0c07 	add.w	ip, r1, r7
 800f02c:	464d      	mov	r5, r9
 800f02e:	f851 3b04 	ldr.w	r3, [r1], #4
 800f032:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f0b0 <arm_fir_f32+0x4a8>
 800f036:	f846 3b04 	str.w	r3, [r6], #4
 800f03a:	4674      	mov	r4, lr
 800f03c:	4643      	mov	r3, r8
 800f03e:	4628      	mov	r0, r5
 800f040:	ecf0 7a01 	vldmia	r0!, {s15}
 800f044:	ecf4 6a01 	vldmia	r4!, {s13}
 800f048:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f04c:	3b01      	subs	r3, #1
 800f04e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f052:	d1f5      	bne.n	800f040 <arm_fir_f32+0x438>
 800f054:	4561      	cmp	r1, ip
 800f056:	eca2 7a01 	vstmia	r2!, {s14}
 800f05a:	f105 0504 	add.w	r5, r5, #4
 800f05e:	d1e6      	bne.n	800f02e <arm_fir_f32+0x426>
 800f060:	44b9      	add	r9, r7
 800f062:	f108 38ff 	add.w	r8, r8, #4294967295
 800f066:	9b03      	ldr	r3, [sp, #12]
 800f068:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f06c:	685d      	ldr	r5, [r3, #4]
 800f06e:	d021      	beq.n	800f0b4 <arm_fir_f32+0x4ac>
 800f070:	f109 0210 	add.w	r2, r9, #16
 800f074:	f105 0310 	add.w	r3, r5, #16
 800f078:	4621      	mov	r1, r4
 800f07a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f07e:	f843 0c10 	str.w	r0, [r3, #-16]
 800f082:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800f086:	f843 0c0c 	str.w	r0, [r3, #-12]
 800f08a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800f08e:	f843 0c08 	str.w	r0, [r3, #-8]
 800f092:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f096:	f843 0c04 	str.w	r0, [r3, #-4]
 800f09a:	3901      	subs	r1, #1
 800f09c:	f102 0210 	add.w	r2, r2, #16
 800f0a0:	f103 0310 	add.w	r3, r3, #16
 800f0a4:	d1e9      	bne.n	800f07a <arm_fir_f32+0x472>
 800f0a6:	0124      	lsls	r4, r4, #4
 800f0a8:	44a1      	add	r9, r4
 800f0aa:	4425      	add	r5, r4
 800f0ac:	e002      	b.n	800f0b4 <arm_fir_f32+0x4ac>
 800f0ae:	bf00      	nop
 800f0b0:	00000000 	.word	0x00000000
 800f0b4:	f018 0803 	ands.w	r8, r8, #3
 800f0b8:	d00e      	beq.n	800f0d8 <arm_fir_f32+0x4d0>
 800f0ba:	f8d9 3000 	ldr.w	r3, [r9]
 800f0be:	602b      	str	r3, [r5, #0]
 800f0c0:	f1b8 0801 	subs.w	r8, r8, #1
 800f0c4:	d008      	beq.n	800f0d8 <arm_fir_f32+0x4d0>
 800f0c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f0ca:	606b      	str	r3, [r5, #4]
 800f0cc:	f1b8 0f01 	cmp.w	r8, #1
 800f0d0:	bf1c      	itt	ne
 800f0d2:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800f0d6:	60ab      	strne	r3, [r5, #8]
 800f0d8:	b00b      	add	sp, #44	; 0x2c
 800f0da:	ecbd 8b10 	vpop	{d8-d15}
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	eef0 ba66 	vmov.f32	s23, s13
 800f0e6:	eeb0 6a66 	vmov.f32	s12, s13
 800f0ea:	eeb0 9a66 	vmov.f32	s18, s13
 800f0ee:	eef0 9a66 	vmov.f32	s19, s13
 800f0f2:	eeb0 aa66 	vmov.f32	s20, s13
 800f0f6:	eef0 aa66 	vmov.f32	s21, s13
 800f0fa:	eeb0 ba66 	vmov.f32	s22, s13
 800f0fe:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f102:	f102 0120 	add.w	r1, r2, #32
 800f106:	e729      	b.n	800ef5c <arm_fir_f32+0x354>

0800f108 <atoi>:
 800f108:	220a      	movs	r2, #10
 800f10a:	2100      	movs	r1, #0
 800f10c:	f000 be4c 	b.w	800fda8 <strtol>

0800f110 <__errno>:
 800f110:	4b01      	ldr	r3, [pc, #4]	; (800f118 <__errno+0x8>)
 800f112:	6818      	ldr	r0, [r3, #0]
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	20000bd0 	.word	0x20000bd0

0800f11c <__libc_init_array>:
 800f11c:	b570      	push	{r4, r5, r6, lr}
 800f11e:	4d0d      	ldr	r5, [pc, #52]	; (800f154 <__libc_init_array+0x38>)
 800f120:	4c0d      	ldr	r4, [pc, #52]	; (800f158 <__libc_init_array+0x3c>)
 800f122:	1b64      	subs	r4, r4, r5
 800f124:	10a4      	asrs	r4, r4, #2
 800f126:	2600      	movs	r6, #0
 800f128:	42a6      	cmp	r6, r4
 800f12a:	d109      	bne.n	800f140 <__libc_init_array+0x24>
 800f12c:	4d0b      	ldr	r5, [pc, #44]	; (800f15c <__libc_init_array+0x40>)
 800f12e:	4c0c      	ldr	r4, [pc, #48]	; (800f160 <__libc_init_array+0x44>)
 800f130:	f003 f952 	bl	80123d8 <_init>
 800f134:	1b64      	subs	r4, r4, r5
 800f136:	10a4      	asrs	r4, r4, #2
 800f138:	2600      	movs	r6, #0
 800f13a:	42a6      	cmp	r6, r4
 800f13c:	d105      	bne.n	800f14a <__libc_init_array+0x2e>
 800f13e:	bd70      	pop	{r4, r5, r6, pc}
 800f140:	f855 3b04 	ldr.w	r3, [r5], #4
 800f144:	4798      	blx	r3
 800f146:	3601      	adds	r6, #1
 800f148:	e7ee      	b.n	800f128 <__libc_init_array+0xc>
 800f14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14e:	4798      	blx	r3
 800f150:	3601      	adds	r6, #1
 800f152:	e7f2      	b.n	800f13a <__libc_init_array+0x1e>
 800f154:	0814691c 	.word	0x0814691c
 800f158:	0814691c 	.word	0x0814691c
 800f15c:	0814691c 	.word	0x0814691c
 800f160:	08146920 	.word	0x08146920

0800f164 <malloc>:
 800f164:	4b02      	ldr	r3, [pc, #8]	; (800f170 <malloc+0xc>)
 800f166:	4601      	mov	r1, r0
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	f000 b885 	b.w	800f278 <_malloc_r>
 800f16e:	bf00      	nop
 800f170:	20000bd0 	.word	0x20000bd0

0800f174 <memcpy>:
 800f174:	440a      	add	r2, r1
 800f176:	4291      	cmp	r1, r2
 800f178:	f100 33ff 	add.w	r3, r0, #4294967295
 800f17c:	d100      	bne.n	800f180 <memcpy+0xc>
 800f17e:	4770      	bx	lr
 800f180:	b510      	push	{r4, lr}
 800f182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f18a:	4291      	cmp	r1, r2
 800f18c:	d1f9      	bne.n	800f182 <memcpy+0xe>
 800f18e:	bd10      	pop	{r4, pc}

0800f190 <memset>:
 800f190:	4402      	add	r2, r0
 800f192:	4603      	mov	r3, r0
 800f194:	4293      	cmp	r3, r2
 800f196:	d100      	bne.n	800f19a <memset+0xa>
 800f198:	4770      	bx	lr
 800f19a:	f803 1b01 	strb.w	r1, [r3], #1
 800f19e:	e7f9      	b.n	800f194 <memset+0x4>

0800f1a0 <_free_r>:
 800f1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1a2:	2900      	cmp	r1, #0
 800f1a4:	d044      	beq.n	800f230 <_free_r+0x90>
 800f1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1aa:	9001      	str	r0, [sp, #4]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800f1b2:	bfb8      	it	lt
 800f1b4:	18e4      	addlt	r4, r4, r3
 800f1b6:	f001 fc81 	bl	8010abc <__malloc_lock>
 800f1ba:	4a1e      	ldr	r2, [pc, #120]	; (800f234 <_free_r+0x94>)
 800f1bc:	9801      	ldr	r0, [sp, #4]
 800f1be:	6813      	ldr	r3, [r2, #0]
 800f1c0:	b933      	cbnz	r3, 800f1d0 <_free_r+0x30>
 800f1c2:	6063      	str	r3, [r4, #4]
 800f1c4:	6014      	str	r4, [r2, #0]
 800f1c6:	b003      	add	sp, #12
 800f1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1cc:	f001 bc7c 	b.w	8010ac8 <__malloc_unlock>
 800f1d0:	42a3      	cmp	r3, r4
 800f1d2:	d908      	bls.n	800f1e6 <_free_r+0x46>
 800f1d4:	6825      	ldr	r5, [r4, #0]
 800f1d6:	1961      	adds	r1, r4, r5
 800f1d8:	428b      	cmp	r3, r1
 800f1da:	bf01      	itttt	eq
 800f1dc:	6819      	ldreq	r1, [r3, #0]
 800f1de:	685b      	ldreq	r3, [r3, #4]
 800f1e0:	1949      	addeq	r1, r1, r5
 800f1e2:	6021      	streq	r1, [r4, #0]
 800f1e4:	e7ed      	b.n	800f1c2 <_free_r+0x22>
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	b10b      	cbz	r3, 800f1f0 <_free_r+0x50>
 800f1ec:	42a3      	cmp	r3, r4
 800f1ee:	d9fa      	bls.n	800f1e6 <_free_r+0x46>
 800f1f0:	6811      	ldr	r1, [r2, #0]
 800f1f2:	1855      	adds	r5, r2, r1
 800f1f4:	42a5      	cmp	r5, r4
 800f1f6:	d10b      	bne.n	800f210 <_free_r+0x70>
 800f1f8:	6824      	ldr	r4, [r4, #0]
 800f1fa:	4421      	add	r1, r4
 800f1fc:	1854      	adds	r4, r2, r1
 800f1fe:	42a3      	cmp	r3, r4
 800f200:	6011      	str	r1, [r2, #0]
 800f202:	d1e0      	bne.n	800f1c6 <_free_r+0x26>
 800f204:	681c      	ldr	r4, [r3, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	6053      	str	r3, [r2, #4]
 800f20a:	4421      	add	r1, r4
 800f20c:	6011      	str	r1, [r2, #0]
 800f20e:	e7da      	b.n	800f1c6 <_free_r+0x26>
 800f210:	d902      	bls.n	800f218 <_free_r+0x78>
 800f212:	230c      	movs	r3, #12
 800f214:	6003      	str	r3, [r0, #0]
 800f216:	e7d6      	b.n	800f1c6 <_free_r+0x26>
 800f218:	6825      	ldr	r5, [r4, #0]
 800f21a:	1961      	adds	r1, r4, r5
 800f21c:	428b      	cmp	r3, r1
 800f21e:	bf04      	itt	eq
 800f220:	6819      	ldreq	r1, [r3, #0]
 800f222:	685b      	ldreq	r3, [r3, #4]
 800f224:	6063      	str	r3, [r4, #4]
 800f226:	bf04      	itt	eq
 800f228:	1949      	addeq	r1, r1, r5
 800f22a:	6021      	streq	r1, [r4, #0]
 800f22c:	6054      	str	r4, [r2, #4]
 800f22e:	e7ca      	b.n	800f1c6 <_free_r+0x26>
 800f230:	b003      	add	sp, #12
 800f232:	bd30      	pop	{r4, r5, pc}
 800f234:	200020b8 	.word	0x200020b8

0800f238 <sbrk_aligned>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	4e0e      	ldr	r6, [pc, #56]	; (800f274 <sbrk_aligned+0x3c>)
 800f23c:	460c      	mov	r4, r1
 800f23e:	6831      	ldr	r1, [r6, #0]
 800f240:	4605      	mov	r5, r0
 800f242:	b911      	cbnz	r1, 800f24a <sbrk_aligned+0x12>
 800f244:	f000 fcf6 	bl	800fc34 <_sbrk_r>
 800f248:	6030      	str	r0, [r6, #0]
 800f24a:	4621      	mov	r1, r4
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 fcf1 	bl	800fc34 <_sbrk_r>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d00a      	beq.n	800f26c <sbrk_aligned+0x34>
 800f256:	1cc4      	adds	r4, r0, #3
 800f258:	f024 0403 	bic.w	r4, r4, #3
 800f25c:	42a0      	cmp	r0, r4
 800f25e:	d007      	beq.n	800f270 <sbrk_aligned+0x38>
 800f260:	1a21      	subs	r1, r4, r0
 800f262:	4628      	mov	r0, r5
 800f264:	f000 fce6 	bl	800fc34 <_sbrk_r>
 800f268:	3001      	adds	r0, #1
 800f26a:	d101      	bne.n	800f270 <sbrk_aligned+0x38>
 800f26c:	f04f 34ff 	mov.w	r4, #4294967295
 800f270:	4620      	mov	r0, r4
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	200020bc 	.word	0x200020bc

0800f278 <_malloc_r>:
 800f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27c:	1ccd      	adds	r5, r1, #3
 800f27e:	f025 0503 	bic.w	r5, r5, #3
 800f282:	3508      	adds	r5, #8
 800f284:	2d0c      	cmp	r5, #12
 800f286:	bf38      	it	cc
 800f288:	250c      	movcc	r5, #12
 800f28a:	2d00      	cmp	r5, #0
 800f28c:	4607      	mov	r7, r0
 800f28e:	db01      	blt.n	800f294 <_malloc_r+0x1c>
 800f290:	42a9      	cmp	r1, r5
 800f292:	d905      	bls.n	800f2a0 <_malloc_r+0x28>
 800f294:	230c      	movs	r3, #12
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	2600      	movs	r6, #0
 800f29a:	4630      	mov	r0, r6
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	4e2e      	ldr	r6, [pc, #184]	; (800f35c <_malloc_r+0xe4>)
 800f2a2:	f001 fc0b 	bl	8010abc <__malloc_lock>
 800f2a6:	6833      	ldr	r3, [r6, #0]
 800f2a8:	461c      	mov	r4, r3
 800f2aa:	bb34      	cbnz	r4, 800f2fa <_malloc_r+0x82>
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	f7ff ffc2 	bl	800f238 <sbrk_aligned>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	d14d      	bne.n	800f356 <_malloc_r+0xde>
 800f2ba:	6834      	ldr	r4, [r6, #0]
 800f2bc:	4626      	mov	r6, r4
 800f2be:	2e00      	cmp	r6, #0
 800f2c0:	d140      	bne.n	800f344 <_malloc_r+0xcc>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	eb04 0803 	add.w	r8, r4, r3
 800f2cc:	f000 fcb2 	bl	800fc34 <_sbrk_r>
 800f2d0:	4580      	cmp	r8, r0
 800f2d2:	d13a      	bne.n	800f34a <_malloc_r+0xd2>
 800f2d4:	6821      	ldr	r1, [r4, #0]
 800f2d6:	3503      	adds	r5, #3
 800f2d8:	1a6d      	subs	r5, r5, r1
 800f2da:	f025 0503 	bic.w	r5, r5, #3
 800f2de:	3508      	adds	r5, #8
 800f2e0:	2d0c      	cmp	r5, #12
 800f2e2:	bf38      	it	cc
 800f2e4:	250c      	movcc	r5, #12
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f7ff ffa5 	bl	800f238 <sbrk_aligned>
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	d02b      	beq.n	800f34a <_malloc_r+0xd2>
 800f2f2:	6823      	ldr	r3, [r4, #0]
 800f2f4:	442b      	add	r3, r5
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	e00e      	b.n	800f318 <_malloc_r+0xa0>
 800f2fa:	6822      	ldr	r2, [r4, #0]
 800f2fc:	1b52      	subs	r2, r2, r5
 800f2fe:	d41e      	bmi.n	800f33e <_malloc_r+0xc6>
 800f300:	2a0b      	cmp	r2, #11
 800f302:	d916      	bls.n	800f332 <_malloc_r+0xba>
 800f304:	1961      	adds	r1, r4, r5
 800f306:	42a3      	cmp	r3, r4
 800f308:	6025      	str	r5, [r4, #0]
 800f30a:	bf18      	it	ne
 800f30c:	6059      	strne	r1, [r3, #4]
 800f30e:	6863      	ldr	r3, [r4, #4]
 800f310:	bf08      	it	eq
 800f312:	6031      	streq	r1, [r6, #0]
 800f314:	5162      	str	r2, [r4, r5]
 800f316:	604b      	str	r3, [r1, #4]
 800f318:	4638      	mov	r0, r7
 800f31a:	f104 060b 	add.w	r6, r4, #11
 800f31e:	f001 fbd3 	bl	8010ac8 <__malloc_unlock>
 800f322:	f026 0607 	bic.w	r6, r6, #7
 800f326:	1d23      	adds	r3, r4, #4
 800f328:	1af2      	subs	r2, r6, r3
 800f32a:	d0b6      	beq.n	800f29a <_malloc_r+0x22>
 800f32c:	1b9b      	subs	r3, r3, r6
 800f32e:	50a3      	str	r3, [r4, r2]
 800f330:	e7b3      	b.n	800f29a <_malloc_r+0x22>
 800f332:	6862      	ldr	r2, [r4, #4]
 800f334:	42a3      	cmp	r3, r4
 800f336:	bf0c      	ite	eq
 800f338:	6032      	streq	r2, [r6, #0]
 800f33a:	605a      	strne	r2, [r3, #4]
 800f33c:	e7ec      	b.n	800f318 <_malloc_r+0xa0>
 800f33e:	4623      	mov	r3, r4
 800f340:	6864      	ldr	r4, [r4, #4]
 800f342:	e7b2      	b.n	800f2aa <_malloc_r+0x32>
 800f344:	4634      	mov	r4, r6
 800f346:	6876      	ldr	r6, [r6, #4]
 800f348:	e7b9      	b.n	800f2be <_malloc_r+0x46>
 800f34a:	230c      	movs	r3, #12
 800f34c:	603b      	str	r3, [r7, #0]
 800f34e:	4638      	mov	r0, r7
 800f350:	f001 fbba 	bl	8010ac8 <__malloc_unlock>
 800f354:	e7a1      	b.n	800f29a <_malloc_r+0x22>
 800f356:	6025      	str	r5, [r4, #0]
 800f358:	e7de      	b.n	800f318 <_malloc_r+0xa0>
 800f35a:	bf00      	nop
 800f35c:	200020b8 	.word	0x200020b8

0800f360 <__cvt>:
 800f360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f364:	ec55 4b10 	vmov	r4, r5, d0
 800f368:	2d00      	cmp	r5, #0
 800f36a:	460e      	mov	r6, r1
 800f36c:	4619      	mov	r1, r3
 800f36e:	462b      	mov	r3, r5
 800f370:	bfbb      	ittet	lt
 800f372:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f376:	461d      	movlt	r5, r3
 800f378:	2300      	movge	r3, #0
 800f37a:	232d      	movlt	r3, #45	; 0x2d
 800f37c:	700b      	strb	r3, [r1, #0]
 800f37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f380:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f384:	4691      	mov	r9, r2
 800f386:	f023 0820 	bic.w	r8, r3, #32
 800f38a:	bfbc      	itt	lt
 800f38c:	4622      	movlt	r2, r4
 800f38e:	4614      	movlt	r4, r2
 800f390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f394:	d005      	beq.n	800f3a2 <__cvt+0x42>
 800f396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f39a:	d100      	bne.n	800f39e <__cvt+0x3e>
 800f39c:	3601      	adds	r6, #1
 800f39e:	2102      	movs	r1, #2
 800f3a0:	e000      	b.n	800f3a4 <__cvt+0x44>
 800f3a2:	2103      	movs	r1, #3
 800f3a4:	ab03      	add	r3, sp, #12
 800f3a6:	9301      	str	r3, [sp, #4]
 800f3a8:	ab02      	add	r3, sp, #8
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	ec45 4b10 	vmov	d0, r4, r5
 800f3b0:	4653      	mov	r3, sl
 800f3b2:	4632      	mov	r2, r6
 800f3b4:	f000 fd90 	bl	800fed8 <_dtoa_r>
 800f3b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f3bc:	4607      	mov	r7, r0
 800f3be:	d102      	bne.n	800f3c6 <__cvt+0x66>
 800f3c0:	f019 0f01 	tst.w	r9, #1
 800f3c4:	d022      	beq.n	800f40c <__cvt+0xac>
 800f3c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3ca:	eb07 0906 	add.w	r9, r7, r6
 800f3ce:	d110      	bne.n	800f3f2 <__cvt+0x92>
 800f3d0:	783b      	ldrb	r3, [r7, #0]
 800f3d2:	2b30      	cmp	r3, #48	; 0x30
 800f3d4:	d10a      	bne.n	800f3ec <__cvt+0x8c>
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7f1 fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 800f3e2:	b918      	cbnz	r0, 800f3ec <__cvt+0x8c>
 800f3e4:	f1c6 0601 	rsb	r6, r6, #1
 800f3e8:	f8ca 6000 	str.w	r6, [sl]
 800f3ec:	f8da 3000 	ldr.w	r3, [sl]
 800f3f0:	4499      	add	r9, r3
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	f7f1 fb7d 	bl	8000af8 <__aeabi_dcmpeq>
 800f3fe:	b108      	cbz	r0, 800f404 <__cvt+0xa4>
 800f400:	f8cd 900c 	str.w	r9, [sp, #12]
 800f404:	2230      	movs	r2, #48	; 0x30
 800f406:	9b03      	ldr	r3, [sp, #12]
 800f408:	454b      	cmp	r3, r9
 800f40a:	d307      	bcc.n	800f41c <__cvt+0xbc>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f410:	1bdb      	subs	r3, r3, r7
 800f412:	4638      	mov	r0, r7
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	b004      	add	sp, #16
 800f418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f41c:	1c59      	adds	r1, r3, #1
 800f41e:	9103      	str	r1, [sp, #12]
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	e7f0      	b.n	800f406 <__cvt+0xa6>

0800f424 <__exponent>:
 800f424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f426:	4603      	mov	r3, r0
 800f428:	2900      	cmp	r1, #0
 800f42a:	bfb8      	it	lt
 800f42c:	4249      	neglt	r1, r1
 800f42e:	f803 2b02 	strb.w	r2, [r3], #2
 800f432:	bfb4      	ite	lt
 800f434:	222d      	movlt	r2, #45	; 0x2d
 800f436:	222b      	movge	r2, #43	; 0x2b
 800f438:	2909      	cmp	r1, #9
 800f43a:	7042      	strb	r2, [r0, #1]
 800f43c:	dd2a      	ble.n	800f494 <__exponent+0x70>
 800f43e:	f10d 0407 	add.w	r4, sp, #7
 800f442:	46a4      	mov	ip, r4
 800f444:	270a      	movs	r7, #10
 800f446:	46a6      	mov	lr, r4
 800f448:	460a      	mov	r2, r1
 800f44a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f44e:	fb07 1516 	mls	r5, r7, r6, r1
 800f452:	3530      	adds	r5, #48	; 0x30
 800f454:	2a63      	cmp	r2, #99	; 0x63
 800f456:	f104 34ff 	add.w	r4, r4, #4294967295
 800f45a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f45e:	4631      	mov	r1, r6
 800f460:	dcf1      	bgt.n	800f446 <__exponent+0x22>
 800f462:	3130      	adds	r1, #48	; 0x30
 800f464:	f1ae 0502 	sub.w	r5, lr, #2
 800f468:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f46c:	1c44      	adds	r4, r0, #1
 800f46e:	4629      	mov	r1, r5
 800f470:	4561      	cmp	r1, ip
 800f472:	d30a      	bcc.n	800f48a <__exponent+0x66>
 800f474:	f10d 0209 	add.w	r2, sp, #9
 800f478:	eba2 020e 	sub.w	r2, r2, lr
 800f47c:	4565      	cmp	r5, ip
 800f47e:	bf88      	it	hi
 800f480:	2200      	movhi	r2, #0
 800f482:	4413      	add	r3, r2
 800f484:	1a18      	subs	r0, r3, r0
 800f486:	b003      	add	sp, #12
 800f488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f48e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f492:	e7ed      	b.n	800f470 <__exponent+0x4c>
 800f494:	2330      	movs	r3, #48	; 0x30
 800f496:	3130      	adds	r1, #48	; 0x30
 800f498:	7083      	strb	r3, [r0, #2]
 800f49a:	70c1      	strb	r1, [r0, #3]
 800f49c:	1d03      	adds	r3, r0, #4
 800f49e:	e7f1      	b.n	800f484 <__exponent+0x60>

0800f4a0 <_printf_float>:
 800f4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a4:	ed2d 8b02 	vpush	{d8}
 800f4a8:	b08d      	sub	sp, #52	; 0x34
 800f4aa:	460c      	mov	r4, r1
 800f4ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4b0:	4616      	mov	r6, r2
 800f4b2:	461f      	mov	r7, r3
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	f001 fafd 	bl	8010ab4 <_localeconv_r>
 800f4ba:	f8d0 a000 	ldr.w	sl, [r0]
 800f4be:	4650      	mov	r0, sl
 800f4c0:	f7f0 fe9e 	bl	8000200 <strlen>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f4c8:	6823      	ldr	r3, [r4, #0]
 800f4ca:	9305      	str	r3, [sp, #20]
 800f4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f4d4:	3307      	adds	r3, #7
 800f4d6:	f023 0307 	bic.w	r3, r3, #7
 800f4da:	f103 0208 	add.w	r2, r3, #8
 800f4de:	f8c8 2000 	str.w	r2, [r8]
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f4ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4f2:	9307      	str	r3, [sp, #28]
 800f4f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f4f8:	ee08 0a10 	vmov	s16, r0
 800f4fc:	4b9f      	ldr	r3, [pc, #636]	; (800f77c <_printf_float+0x2dc>)
 800f4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	f7f1 fb29 	bl	8000b5c <__aeabi_dcmpun>
 800f50a:	bb88      	cbnz	r0, 800f570 <_printf_float+0xd0>
 800f50c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f510:	4b9a      	ldr	r3, [pc, #616]	; (800f77c <_printf_float+0x2dc>)
 800f512:	f04f 32ff 	mov.w	r2, #4294967295
 800f516:	f7f1 fb03 	bl	8000b20 <__aeabi_dcmple>
 800f51a:	bb48      	cbnz	r0, 800f570 <_printf_float+0xd0>
 800f51c:	2200      	movs	r2, #0
 800f51e:	2300      	movs	r3, #0
 800f520:	4640      	mov	r0, r8
 800f522:	4649      	mov	r1, r9
 800f524:	f7f1 faf2 	bl	8000b0c <__aeabi_dcmplt>
 800f528:	b110      	cbz	r0, 800f530 <_printf_float+0x90>
 800f52a:	232d      	movs	r3, #45	; 0x2d
 800f52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f530:	4b93      	ldr	r3, [pc, #588]	; (800f780 <_printf_float+0x2e0>)
 800f532:	4894      	ldr	r0, [pc, #592]	; (800f784 <_printf_float+0x2e4>)
 800f534:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f538:	bf94      	ite	ls
 800f53a:	4698      	movls	r8, r3
 800f53c:	4680      	movhi	r8, r0
 800f53e:	2303      	movs	r3, #3
 800f540:	6123      	str	r3, [r4, #16]
 800f542:	9b05      	ldr	r3, [sp, #20]
 800f544:	f023 0204 	bic.w	r2, r3, #4
 800f548:	6022      	str	r2, [r4, #0]
 800f54a:	f04f 0900 	mov.w	r9, #0
 800f54e:	9700      	str	r7, [sp, #0]
 800f550:	4633      	mov	r3, r6
 800f552:	aa0b      	add	r2, sp, #44	; 0x2c
 800f554:	4621      	mov	r1, r4
 800f556:	4628      	mov	r0, r5
 800f558:	f000 f9d8 	bl	800f90c <_printf_common>
 800f55c:	3001      	adds	r0, #1
 800f55e:	f040 8090 	bne.w	800f682 <_printf_float+0x1e2>
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	b00d      	add	sp, #52	; 0x34
 800f568:	ecbd 8b02 	vpop	{d8}
 800f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f570:	4642      	mov	r2, r8
 800f572:	464b      	mov	r3, r9
 800f574:	4640      	mov	r0, r8
 800f576:	4649      	mov	r1, r9
 800f578:	f7f1 faf0 	bl	8000b5c <__aeabi_dcmpun>
 800f57c:	b140      	cbz	r0, 800f590 <_printf_float+0xf0>
 800f57e:	464b      	mov	r3, r9
 800f580:	2b00      	cmp	r3, #0
 800f582:	bfbc      	itt	lt
 800f584:	232d      	movlt	r3, #45	; 0x2d
 800f586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f58a:	487f      	ldr	r0, [pc, #508]	; (800f788 <_printf_float+0x2e8>)
 800f58c:	4b7f      	ldr	r3, [pc, #508]	; (800f78c <_printf_float+0x2ec>)
 800f58e:	e7d1      	b.n	800f534 <_printf_float+0x94>
 800f590:	6863      	ldr	r3, [r4, #4]
 800f592:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f596:	9206      	str	r2, [sp, #24]
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	d13f      	bne.n	800f61c <_printf_float+0x17c>
 800f59c:	2306      	movs	r3, #6
 800f59e:	6063      	str	r3, [r4, #4]
 800f5a0:	9b05      	ldr	r3, [sp, #20]
 800f5a2:	6861      	ldr	r1, [r4, #4]
 800f5a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9303      	str	r3, [sp, #12]
 800f5ac:	ab0a      	add	r3, sp, #40	; 0x28
 800f5ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5b2:	ab09      	add	r3, sp, #36	; 0x24
 800f5b4:	ec49 8b10 	vmov	d0, r8, r9
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	6022      	str	r2, [r4, #0]
 800f5bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f7ff fecd 	bl	800f360 <__cvt>
 800f5c6:	9b06      	ldr	r3, [sp, #24]
 800f5c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5ca:	2b47      	cmp	r3, #71	; 0x47
 800f5cc:	4680      	mov	r8, r0
 800f5ce:	d108      	bne.n	800f5e2 <_printf_float+0x142>
 800f5d0:	1cc8      	adds	r0, r1, #3
 800f5d2:	db02      	blt.n	800f5da <_printf_float+0x13a>
 800f5d4:	6863      	ldr	r3, [r4, #4]
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	dd41      	ble.n	800f65e <_printf_float+0x1be>
 800f5da:	f1ab 0b02 	sub.w	fp, fp, #2
 800f5de:	fa5f fb8b 	uxtb.w	fp, fp
 800f5e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5e6:	d820      	bhi.n	800f62a <_printf_float+0x18a>
 800f5e8:	3901      	subs	r1, #1
 800f5ea:	465a      	mov	r2, fp
 800f5ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5f0:	9109      	str	r1, [sp, #36]	; 0x24
 800f5f2:	f7ff ff17 	bl	800f424 <__exponent>
 800f5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5f8:	1813      	adds	r3, r2, r0
 800f5fa:	2a01      	cmp	r2, #1
 800f5fc:	4681      	mov	r9, r0
 800f5fe:	6123      	str	r3, [r4, #16]
 800f600:	dc02      	bgt.n	800f608 <_printf_float+0x168>
 800f602:	6822      	ldr	r2, [r4, #0]
 800f604:	07d2      	lsls	r2, r2, #31
 800f606:	d501      	bpl.n	800f60c <_printf_float+0x16c>
 800f608:	3301      	adds	r3, #1
 800f60a:	6123      	str	r3, [r4, #16]
 800f60c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f610:	2b00      	cmp	r3, #0
 800f612:	d09c      	beq.n	800f54e <_printf_float+0xae>
 800f614:	232d      	movs	r3, #45	; 0x2d
 800f616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61a:	e798      	b.n	800f54e <_printf_float+0xae>
 800f61c:	9a06      	ldr	r2, [sp, #24]
 800f61e:	2a47      	cmp	r2, #71	; 0x47
 800f620:	d1be      	bne.n	800f5a0 <_printf_float+0x100>
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1bc      	bne.n	800f5a0 <_printf_float+0x100>
 800f626:	2301      	movs	r3, #1
 800f628:	e7b9      	b.n	800f59e <_printf_float+0xfe>
 800f62a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f62e:	d118      	bne.n	800f662 <_printf_float+0x1c2>
 800f630:	2900      	cmp	r1, #0
 800f632:	6863      	ldr	r3, [r4, #4]
 800f634:	dd0b      	ble.n	800f64e <_printf_float+0x1ae>
 800f636:	6121      	str	r1, [r4, #16]
 800f638:	b913      	cbnz	r3, 800f640 <_printf_float+0x1a0>
 800f63a:	6822      	ldr	r2, [r4, #0]
 800f63c:	07d0      	lsls	r0, r2, #31
 800f63e:	d502      	bpl.n	800f646 <_printf_float+0x1a6>
 800f640:	3301      	adds	r3, #1
 800f642:	440b      	add	r3, r1
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	65a1      	str	r1, [r4, #88]	; 0x58
 800f648:	f04f 0900 	mov.w	r9, #0
 800f64c:	e7de      	b.n	800f60c <_printf_float+0x16c>
 800f64e:	b913      	cbnz	r3, 800f656 <_printf_float+0x1b6>
 800f650:	6822      	ldr	r2, [r4, #0]
 800f652:	07d2      	lsls	r2, r2, #31
 800f654:	d501      	bpl.n	800f65a <_printf_float+0x1ba>
 800f656:	3302      	adds	r3, #2
 800f658:	e7f4      	b.n	800f644 <_printf_float+0x1a4>
 800f65a:	2301      	movs	r3, #1
 800f65c:	e7f2      	b.n	800f644 <_printf_float+0x1a4>
 800f65e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f664:	4299      	cmp	r1, r3
 800f666:	db05      	blt.n	800f674 <_printf_float+0x1d4>
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	6121      	str	r1, [r4, #16]
 800f66c:	07d8      	lsls	r0, r3, #31
 800f66e:	d5ea      	bpl.n	800f646 <_printf_float+0x1a6>
 800f670:	1c4b      	adds	r3, r1, #1
 800f672:	e7e7      	b.n	800f644 <_printf_float+0x1a4>
 800f674:	2900      	cmp	r1, #0
 800f676:	bfd4      	ite	le
 800f678:	f1c1 0202 	rsble	r2, r1, #2
 800f67c:	2201      	movgt	r2, #1
 800f67e:	4413      	add	r3, r2
 800f680:	e7e0      	b.n	800f644 <_printf_float+0x1a4>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	055a      	lsls	r2, r3, #21
 800f686:	d407      	bmi.n	800f698 <_printf_float+0x1f8>
 800f688:	6923      	ldr	r3, [r4, #16]
 800f68a:	4642      	mov	r2, r8
 800f68c:	4631      	mov	r1, r6
 800f68e:	4628      	mov	r0, r5
 800f690:	47b8      	blx	r7
 800f692:	3001      	adds	r0, #1
 800f694:	d12c      	bne.n	800f6f0 <_printf_float+0x250>
 800f696:	e764      	b.n	800f562 <_printf_float+0xc2>
 800f698:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f69c:	f240 80e0 	bls.w	800f860 <_printf_float+0x3c0>
 800f6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f7f1 fa26 	bl	8000af8 <__aeabi_dcmpeq>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d034      	beq.n	800f71a <_printf_float+0x27a>
 800f6b0:	4a37      	ldr	r2, [pc, #220]	; (800f790 <_printf_float+0x2f0>)
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	47b8      	blx	r7
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	f43f af51 	beq.w	800f562 <_printf_float+0xc2>
 800f6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	db02      	blt.n	800f6ce <_printf_float+0x22e>
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	07d8      	lsls	r0, r3, #31
 800f6cc:	d510      	bpl.n	800f6f0 <_printf_float+0x250>
 800f6ce:	ee18 3a10 	vmov	r3, s16
 800f6d2:	4652      	mov	r2, sl
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	47b8      	blx	r7
 800f6da:	3001      	adds	r0, #1
 800f6dc:	f43f af41 	beq.w	800f562 <_printf_float+0xc2>
 800f6e0:	f04f 0800 	mov.w	r8, #0
 800f6e4:	f104 091a 	add.w	r9, r4, #26
 800f6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4543      	cmp	r3, r8
 800f6ee:	dc09      	bgt.n	800f704 <_printf_float+0x264>
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	079b      	lsls	r3, r3, #30
 800f6f4:	f100 8105 	bmi.w	800f902 <_printf_float+0x462>
 800f6f8:	68e0      	ldr	r0, [r4, #12]
 800f6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6fc:	4298      	cmp	r0, r3
 800f6fe:	bfb8      	it	lt
 800f700:	4618      	movlt	r0, r3
 800f702:	e730      	b.n	800f566 <_printf_float+0xc6>
 800f704:	2301      	movs	r3, #1
 800f706:	464a      	mov	r2, r9
 800f708:	4631      	mov	r1, r6
 800f70a:	4628      	mov	r0, r5
 800f70c:	47b8      	blx	r7
 800f70e:	3001      	adds	r0, #1
 800f710:	f43f af27 	beq.w	800f562 <_printf_float+0xc2>
 800f714:	f108 0801 	add.w	r8, r8, #1
 800f718:	e7e6      	b.n	800f6e8 <_printf_float+0x248>
 800f71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc39      	bgt.n	800f794 <_printf_float+0x2f4>
 800f720:	4a1b      	ldr	r2, [pc, #108]	; (800f790 <_printf_float+0x2f0>)
 800f722:	2301      	movs	r3, #1
 800f724:	4631      	mov	r1, r6
 800f726:	4628      	mov	r0, r5
 800f728:	47b8      	blx	r7
 800f72a:	3001      	adds	r0, #1
 800f72c:	f43f af19 	beq.w	800f562 <_printf_float+0xc2>
 800f730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f734:	4313      	orrs	r3, r2
 800f736:	d102      	bne.n	800f73e <_printf_float+0x29e>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	07d9      	lsls	r1, r3, #31
 800f73c:	d5d8      	bpl.n	800f6f0 <_printf_float+0x250>
 800f73e:	ee18 3a10 	vmov	r3, s16
 800f742:	4652      	mov	r2, sl
 800f744:	4631      	mov	r1, r6
 800f746:	4628      	mov	r0, r5
 800f748:	47b8      	blx	r7
 800f74a:	3001      	adds	r0, #1
 800f74c:	f43f af09 	beq.w	800f562 <_printf_float+0xc2>
 800f750:	f04f 0900 	mov.w	r9, #0
 800f754:	f104 0a1a 	add.w	sl, r4, #26
 800f758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f75a:	425b      	negs	r3, r3
 800f75c:	454b      	cmp	r3, r9
 800f75e:	dc01      	bgt.n	800f764 <_printf_float+0x2c4>
 800f760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f762:	e792      	b.n	800f68a <_printf_float+0x1ea>
 800f764:	2301      	movs	r3, #1
 800f766:	4652      	mov	r2, sl
 800f768:	4631      	mov	r1, r6
 800f76a:	4628      	mov	r0, r5
 800f76c:	47b8      	blx	r7
 800f76e:	3001      	adds	r0, #1
 800f770:	f43f aef7 	beq.w	800f562 <_printf_float+0xc2>
 800f774:	f109 0901 	add.w	r9, r9, #1
 800f778:	e7ee      	b.n	800f758 <_printf_float+0x2b8>
 800f77a:	bf00      	nop
 800f77c:	7fefffff 	.word	0x7fefffff
 800f780:	08146524 	.word	0x08146524
 800f784:	08146528 	.word	0x08146528
 800f788:	08146530 	.word	0x08146530
 800f78c:	0814652c 	.word	0x0814652c
 800f790:	08146534 	.word	0x08146534
 800f794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f798:	429a      	cmp	r2, r3
 800f79a:	bfa8      	it	ge
 800f79c:	461a      	movge	r2, r3
 800f79e:	2a00      	cmp	r2, #0
 800f7a0:	4691      	mov	r9, r2
 800f7a2:	dc37      	bgt.n	800f814 <_printf_float+0x374>
 800f7a4:	f04f 0b00 	mov.w	fp, #0
 800f7a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7ac:	f104 021a 	add.w	r2, r4, #26
 800f7b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7b2:	9305      	str	r3, [sp, #20]
 800f7b4:	eba3 0309 	sub.w	r3, r3, r9
 800f7b8:	455b      	cmp	r3, fp
 800f7ba:	dc33      	bgt.n	800f824 <_printf_float+0x384>
 800f7bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	db3b      	blt.n	800f83c <_printf_float+0x39c>
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	07da      	lsls	r2, r3, #31
 800f7c8:	d438      	bmi.n	800f83c <_printf_float+0x39c>
 800f7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7cc:	9a05      	ldr	r2, [sp, #20]
 800f7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7d0:	1a9a      	subs	r2, r3, r2
 800f7d2:	eba3 0901 	sub.w	r9, r3, r1
 800f7d6:	4591      	cmp	r9, r2
 800f7d8:	bfa8      	it	ge
 800f7da:	4691      	movge	r9, r2
 800f7dc:	f1b9 0f00 	cmp.w	r9, #0
 800f7e0:	dc35      	bgt.n	800f84e <_printf_float+0x3ae>
 800f7e2:	f04f 0800 	mov.w	r8, #0
 800f7e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7ea:	f104 0a1a 	add.w	sl, r4, #26
 800f7ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	eba3 0309 	sub.w	r3, r3, r9
 800f7f8:	4543      	cmp	r3, r8
 800f7fa:	f77f af79 	ble.w	800f6f0 <_printf_float+0x250>
 800f7fe:	2301      	movs	r3, #1
 800f800:	4652      	mov	r2, sl
 800f802:	4631      	mov	r1, r6
 800f804:	4628      	mov	r0, r5
 800f806:	47b8      	blx	r7
 800f808:	3001      	adds	r0, #1
 800f80a:	f43f aeaa 	beq.w	800f562 <_printf_float+0xc2>
 800f80e:	f108 0801 	add.w	r8, r8, #1
 800f812:	e7ec      	b.n	800f7ee <_printf_float+0x34e>
 800f814:	4613      	mov	r3, r2
 800f816:	4631      	mov	r1, r6
 800f818:	4642      	mov	r2, r8
 800f81a:	4628      	mov	r0, r5
 800f81c:	47b8      	blx	r7
 800f81e:	3001      	adds	r0, #1
 800f820:	d1c0      	bne.n	800f7a4 <_printf_float+0x304>
 800f822:	e69e      	b.n	800f562 <_printf_float+0xc2>
 800f824:	2301      	movs	r3, #1
 800f826:	4631      	mov	r1, r6
 800f828:	4628      	mov	r0, r5
 800f82a:	9205      	str	r2, [sp, #20]
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f ae97 	beq.w	800f562 <_printf_float+0xc2>
 800f834:	9a05      	ldr	r2, [sp, #20]
 800f836:	f10b 0b01 	add.w	fp, fp, #1
 800f83a:	e7b9      	b.n	800f7b0 <_printf_float+0x310>
 800f83c:	ee18 3a10 	vmov	r3, s16
 800f840:	4652      	mov	r2, sl
 800f842:	4631      	mov	r1, r6
 800f844:	4628      	mov	r0, r5
 800f846:	47b8      	blx	r7
 800f848:	3001      	adds	r0, #1
 800f84a:	d1be      	bne.n	800f7ca <_printf_float+0x32a>
 800f84c:	e689      	b.n	800f562 <_printf_float+0xc2>
 800f84e:	9a05      	ldr	r2, [sp, #20]
 800f850:	464b      	mov	r3, r9
 800f852:	4442      	add	r2, r8
 800f854:	4631      	mov	r1, r6
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	d1c1      	bne.n	800f7e2 <_printf_float+0x342>
 800f85e:	e680      	b.n	800f562 <_printf_float+0xc2>
 800f860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f862:	2a01      	cmp	r2, #1
 800f864:	dc01      	bgt.n	800f86a <_printf_float+0x3ca>
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	d538      	bpl.n	800f8dc <_printf_float+0x43c>
 800f86a:	2301      	movs	r3, #1
 800f86c:	4642      	mov	r2, r8
 800f86e:	4631      	mov	r1, r6
 800f870:	4628      	mov	r0, r5
 800f872:	47b8      	blx	r7
 800f874:	3001      	adds	r0, #1
 800f876:	f43f ae74 	beq.w	800f562 <_printf_float+0xc2>
 800f87a:	ee18 3a10 	vmov	r3, s16
 800f87e:	4652      	mov	r2, sl
 800f880:	4631      	mov	r1, r6
 800f882:	4628      	mov	r0, r5
 800f884:	47b8      	blx	r7
 800f886:	3001      	adds	r0, #1
 800f888:	f43f ae6b 	beq.w	800f562 <_printf_float+0xc2>
 800f88c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f890:	2200      	movs	r2, #0
 800f892:	2300      	movs	r3, #0
 800f894:	f7f1 f930 	bl	8000af8 <__aeabi_dcmpeq>
 800f898:	b9d8      	cbnz	r0, 800f8d2 <_printf_float+0x432>
 800f89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f89c:	f108 0201 	add.w	r2, r8, #1
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b8      	blx	r7
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d10e      	bne.n	800f8ca <_printf_float+0x42a>
 800f8ac:	e659      	b.n	800f562 <_printf_float+0xc2>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	47b8      	blx	r7
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	f43f ae52 	beq.w	800f562 <_printf_float+0xc2>
 800f8be:	f108 0801 	add.w	r8, r8, #1
 800f8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	4543      	cmp	r3, r8
 800f8c8:	dcf1      	bgt.n	800f8ae <_printf_float+0x40e>
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f8d0:	e6dc      	b.n	800f68c <_printf_float+0x1ec>
 800f8d2:	f04f 0800 	mov.w	r8, #0
 800f8d6:	f104 0a1a 	add.w	sl, r4, #26
 800f8da:	e7f2      	b.n	800f8c2 <_printf_float+0x422>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	4642      	mov	r2, r8
 800f8e0:	e7df      	b.n	800f8a2 <_printf_float+0x402>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	464a      	mov	r2, r9
 800f8e6:	4631      	mov	r1, r6
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	47b8      	blx	r7
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	f43f ae38 	beq.w	800f562 <_printf_float+0xc2>
 800f8f2:	f108 0801 	add.w	r8, r8, #1
 800f8f6:	68e3      	ldr	r3, [r4, #12]
 800f8f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8fa:	1a5b      	subs	r3, r3, r1
 800f8fc:	4543      	cmp	r3, r8
 800f8fe:	dcf0      	bgt.n	800f8e2 <_printf_float+0x442>
 800f900:	e6fa      	b.n	800f6f8 <_printf_float+0x258>
 800f902:	f04f 0800 	mov.w	r8, #0
 800f906:	f104 0919 	add.w	r9, r4, #25
 800f90a:	e7f4      	b.n	800f8f6 <_printf_float+0x456>

0800f90c <_printf_common>:
 800f90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	4616      	mov	r6, r2
 800f912:	4699      	mov	r9, r3
 800f914:	688a      	ldr	r2, [r1, #8]
 800f916:	690b      	ldr	r3, [r1, #16]
 800f918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f91c:	4293      	cmp	r3, r2
 800f91e:	bfb8      	it	lt
 800f920:	4613      	movlt	r3, r2
 800f922:	6033      	str	r3, [r6, #0]
 800f924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f928:	4607      	mov	r7, r0
 800f92a:	460c      	mov	r4, r1
 800f92c:	b10a      	cbz	r2, 800f932 <_printf_common+0x26>
 800f92e:	3301      	adds	r3, #1
 800f930:	6033      	str	r3, [r6, #0]
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	0699      	lsls	r1, r3, #26
 800f936:	bf42      	ittt	mi
 800f938:	6833      	ldrmi	r3, [r6, #0]
 800f93a:	3302      	addmi	r3, #2
 800f93c:	6033      	strmi	r3, [r6, #0]
 800f93e:	6825      	ldr	r5, [r4, #0]
 800f940:	f015 0506 	ands.w	r5, r5, #6
 800f944:	d106      	bne.n	800f954 <_printf_common+0x48>
 800f946:	f104 0a19 	add.w	sl, r4, #25
 800f94a:	68e3      	ldr	r3, [r4, #12]
 800f94c:	6832      	ldr	r2, [r6, #0]
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	42ab      	cmp	r3, r5
 800f952:	dc26      	bgt.n	800f9a2 <_printf_common+0x96>
 800f954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f958:	1e13      	subs	r3, r2, #0
 800f95a:	6822      	ldr	r2, [r4, #0]
 800f95c:	bf18      	it	ne
 800f95e:	2301      	movne	r3, #1
 800f960:	0692      	lsls	r2, r2, #26
 800f962:	d42b      	bmi.n	800f9bc <_printf_common+0xb0>
 800f964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f968:	4649      	mov	r1, r9
 800f96a:	4638      	mov	r0, r7
 800f96c:	47c0      	blx	r8
 800f96e:	3001      	adds	r0, #1
 800f970:	d01e      	beq.n	800f9b0 <_printf_common+0xa4>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	68e5      	ldr	r5, [r4, #12]
 800f976:	6832      	ldr	r2, [r6, #0]
 800f978:	f003 0306 	and.w	r3, r3, #6
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	bf08      	it	eq
 800f980:	1aad      	subeq	r5, r5, r2
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	6922      	ldr	r2, [r4, #16]
 800f986:	bf0c      	ite	eq
 800f988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f98c:	2500      	movne	r5, #0
 800f98e:	4293      	cmp	r3, r2
 800f990:	bfc4      	itt	gt
 800f992:	1a9b      	subgt	r3, r3, r2
 800f994:	18ed      	addgt	r5, r5, r3
 800f996:	2600      	movs	r6, #0
 800f998:	341a      	adds	r4, #26
 800f99a:	42b5      	cmp	r5, r6
 800f99c:	d11a      	bne.n	800f9d4 <_printf_common+0xc8>
 800f99e:	2000      	movs	r0, #0
 800f9a0:	e008      	b.n	800f9b4 <_printf_common+0xa8>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4652      	mov	r2, sl
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4638      	mov	r0, r7
 800f9aa:	47c0      	blx	r8
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d103      	bne.n	800f9b8 <_printf_common+0xac>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	e7c6      	b.n	800f94a <_printf_common+0x3e>
 800f9bc:	18e1      	adds	r1, r4, r3
 800f9be:	1c5a      	adds	r2, r3, #1
 800f9c0:	2030      	movs	r0, #48	; 0x30
 800f9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9c6:	4422      	add	r2, r4
 800f9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9d0:	3302      	adds	r3, #2
 800f9d2:	e7c7      	b.n	800f964 <_printf_common+0x58>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4649      	mov	r1, r9
 800f9da:	4638      	mov	r0, r7
 800f9dc:	47c0      	blx	r8
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d0e6      	beq.n	800f9b0 <_printf_common+0xa4>
 800f9e2:	3601      	adds	r6, #1
 800f9e4:	e7d9      	b.n	800f99a <_printf_common+0x8e>
	...

0800f9e8 <_printf_i>:
 800f9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ec:	7e0f      	ldrb	r7, [r1, #24]
 800f9ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9f0:	2f78      	cmp	r7, #120	; 0x78
 800f9f2:	4691      	mov	r9, r2
 800f9f4:	4680      	mov	r8, r0
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	469a      	mov	sl, r3
 800f9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9fe:	d807      	bhi.n	800fa10 <_printf_i+0x28>
 800fa00:	2f62      	cmp	r7, #98	; 0x62
 800fa02:	d80a      	bhi.n	800fa1a <_printf_i+0x32>
 800fa04:	2f00      	cmp	r7, #0
 800fa06:	f000 80d8 	beq.w	800fbba <_printf_i+0x1d2>
 800fa0a:	2f58      	cmp	r7, #88	; 0x58
 800fa0c:	f000 80a3 	beq.w	800fb56 <_printf_i+0x16e>
 800fa10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa18:	e03a      	b.n	800fa90 <_printf_i+0xa8>
 800fa1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa1e:	2b15      	cmp	r3, #21
 800fa20:	d8f6      	bhi.n	800fa10 <_printf_i+0x28>
 800fa22:	a101      	add	r1, pc, #4	; (adr r1, 800fa28 <_printf_i+0x40>)
 800fa24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa28:	0800fa81 	.word	0x0800fa81
 800fa2c:	0800fa95 	.word	0x0800fa95
 800fa30:	0800fa11 	.word	0x0800fa11
 800fa34:	0800fa11 	.word	0x0800fa11
 800fa38:	0800fa11 	.word	0x0800fa11
 800fa3c:	0800fa11 	.word	0x0800fa11
 800fa40:	0800fa95 	.word	0x0800fa95
 800fa44:	0800fa11 	.word	0x0800fa11
 800fa48:	0800fa11 	.word	0x0800fa11
 800fa4c:	0800fa11 	.word	0x0800fa11
 800fa50:	0800fa11 	.word	0x0800fa11
 800fa54:	0800fba1 	.word	0x0800fba1
 800fa58:	0800fac5 	.word	0x0800fac5
 800fa5c:	0800fb83 	.word	0x0800fb83
 800fa60:	0800fa11 	.word	0x0800fa11
 800fa64:	0800fa11 	.word	0x0800fa11
 800fa68:	0800fbc3 	.word	0x0800fbc3
 800fa6c:	0800fa11 	.word	0x0800fa11
 800fa70:	0800fac5 	.word	0x0800fac5
 800fa74:	0800fa11 	.word	0x0800fa11
 800fa78:	0800fa11 	.word	0x0800fa11
 800fa7c:	0800fb8b 	.word	0x0800fb8b
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	1d1a      	adds	r2, r3, #4
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	602a      	str	r2, [r5, #0]
 800fa88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa90:	2301      	movs	r3, #1
 800fa92:	e0a3      	b.n	800fbdc <_printf_i+0x1f4>
 800fa94:	6820      	ldr	r0, [r4, #0]
 800fa96:	6829      	ldr	r1, [r5, #0]
 800fa98:	0606      	lsls	r6, r0, #24
 800fa9a:	f101 0304 	add.w	r3, r1, #4
 800fa9e:	d50a      	bpl.n	800fab6 <_printf_i+0xce>
 800faa0:	680e      	ldr	r6, [r1, #0]
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	2e00      	cmp	r6, #0
 800faa6:	da03      	bge.n	800fab0 <_printf_i+0xc8>
 800faa8:	232d      	movs	r3, #45	; 0x2d
 800faaa:	4276      	negs	r6, r6
 800faac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab0:	485e      	ldr	r0, [pc, #376]	; (800fc2c <_printf_i+0x244>)
 800fab2:	230a      	movs	r3, #10
 800fab4:	e019      	b.n	800faea <_printf_i+0x102>
 800fab6:	680e      	ldr	r6, [r1, #0]
 800fab8:	602b      	str	r3, [r5, #0]
 800faba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fabe:	bf18      	it	ne
 800fac0:	b236      	sxthne	r6, r6
 800fac2:	e7ef      	b.n	800faa4 <_printf_i+0xbc>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	6820      	ldr	r0, [r4, #0]
 800fac8:	1d19      	adds	r1, r3, #4
 800faca:	6029      	str	r1, [r5, #0]
 800facc:	0601      	lsls	r1, r0, #24
 800face:	d501      	bpl.n	800fad4 <_printf_i+0xec>
 800fad0:	681e      	ldr	r6, [r3, #0]
 800fad2:	e002      	b.n	800fada <_printf_i+0xf2>
 800fad4:	0646      	lsls	r6, r0, #25
 800fad6:	d5fb      	bpl.n	800fad0 <_printf_i+0xe8>
 800fad8:	881e      	ldrh	r6, [r3, #0]
 800fada:	4854      	ldr	r0, [pc, #336]	; (800fc2c <_printf_i+0x244>)
 800fadc:	2f6f      	cmp	r7, #111	; 0x6f
 800fade:	bf0c      	ite	eq
 800fae0:	2308      	moveq	r3, #8
 800fae2:	230a      	movne	r3, #10
 800fae4:	2100      	movs	r1, #0
 800fae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faea:	6865      	ldr	r5, [r4, #4]
 800faec:	60a5      	str	r5, [r4, #8]
 800faee:	2d00      	cmp	r5, #0
 800faf0:	bfa2      	ittt	ge
 800faf2:	6821      	ldrge	r1, [r4, #0]
 800faf4:	f021 0104 	bicge.w	r1, r1, #4
 800faf8:	6021      	strge	r1, [r4, #0]
 800fafa:	b90e      	cbnz	r6, 800fb00 <_printf_i+0x118>
 800fafc:	2d00      	cmp	r5, #0
 800fafe:	d04d      	beq.n	800fb9c <_printf_i+0x1b4>
 800fb00:	4615      	mov	r5, r2
 800fb02:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb06:	fb03 6711 	mls	r7, r3, r1, r6
 800fb0a:	5dc7      	ldrb	r7, [r0, r7]
 800fb0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb10:	4637      	mov	r7, r6
 800fb12:	42bb      	cmp	r3, r7
 800fb14:	460e      	mov	r6, r1
 800fb16:	d9f4      	bls.n	800fb02 <_printf_i+0x11a>
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d10b      	bne.n	800fb34 <_printf_i+0x14c>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	07de      	lsls	r6, r3, #31
 800fb20:	d508      	bpl.n	800fb34 <_printf_i+0x14c>
 800fb22:	6923      	ldr	r3, [r4, #16]
 800fb24:	6861      	ldr	r1, [r4, #4]
 800fb26:	4299      	cmp	r1, r3
 800fb28:	bfde      	ittt	le
 800fb2a:	2330      	movle	r3, #48	; 0x30
 800fb2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb34:	1b52      	subs	r2, r2, r5
 800fb36:	6122      	str	r2, [r4, #16]
 800fb38:	f8cd a000 	str.w	sl, [sp]
 800fb3c:	464b      	mov	r3, r9
 800fb3e:	aa03      	add	r2, sp, #12
 800fb40:	4621      	mov	r1, r4
 800fb42:	4640      	mov	r0, r8
 800fb44:	f7ff fee2 	bl	800f90c <_printf_common>
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d14c      	bne.n	800fbe6 <_printf_i+0x1fe>
 800fb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb50:	b004      	add	sp, #16
 800fb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb56:	4835      	ldr	r0, [pc, #212]	; (800fc2c <_printf_i+0x244>)
 800fb58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb5c:	6829      	ldr	r1, [r5, #0]
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb64:	6029      	str	r1, [r5, #0]
 800fb66:	061d      	lsls	r5, r3, #24
 800fb68:	d514      	bpl.n	800fb94 <_printf_i+0x1ac>
 800fb6a:	07df      	lsls	r7, r3, #31
 800fb6c:	bf44      	itt	mi
 800fb6e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb72:	6023      	strmi	r3, [r4, #0]
 800fb74:	b91e      	cbnz	r6, 800fb7e <_printf_i+0x196>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	f023 0320 	bic.w	r3, r3, #32
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	2310      	movs	r3, #16
 800fb80:	e7b0      	b.n	800fae4 <_printf_i+0xfc>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	f043 0320 	orr.w	r3, r3, #32
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	2378      	movs	r3, #120	; 0x78
 800fb8c:	4828      	ldr	r0, [pc, #160]	; (800fc30 <_printf_i+0x248>)
 800fb8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb92:	e7e3      	b.n	800fb5c <_printf_i+0x174>
 800fb94:	0659      	lsls	r1, r3, #25
 800fb96:	bf48      	it	mi
 800fb98:	b2b6      	uxthmi	r6, r6
 800fb9a:	e7e6      	b.n	800fb6a <_printf_i+0x182>
 800fb9c:	4615      	mov	r5, r2
 800fb9e:	e7bb      	b.n	800fb18 <_printf_i+0x130>
 800fba0:	682b      	ldr	r3, [r5, #0]
 800fba2:	6826      	ldr	r6, [r4, #0]
 800fba4:	6961      	ldr	r1, [r4, #20]
 800fba6:	1d18      	adds	r0, r3, #4
 800fba8:	6028      	str	r0, [r5, #0]
 800fbaa:	0635      	lsls	r5, r6, #24
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	d501      	bpl.n	800fbb4 <_printf_i+0x1cc>
 800fbb0:	6019      	str	r1, [r3, #0]
 800fbb2:	e002      	b.n	800fbba <_printf_i+0x1d2>
 800fbb4:	0670      	lsls	r0, r6, #25
 800fbb6:	d5fb      	bpl.n	800fbb0 <_printf_i+0x1c8>
 800fbb8:	8019      	strh	r1, [r3, #0]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	6123      	str	r3, [r4, #16]
 800fbbe:	4615      	mov	r5, r2
 800fbc0:	e7ba      	b.n	800fb38 <_printf_i+0x150>
 800fbc2:	682b      	ldr	r3, [r5, #0]
 800fbc4:	1d1a      	adds	r2, r3, #4
 800fbc6:	602a      	str	r2, [r5, #0]
 800fbc8:	681d      	ldr	r5, [r3, #0]
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f7f0 fb1e 	bl	8000210 <memchr>
 800fbd4:	b108      	cbz	r0, 800fbda <_printf_i+0x1f2>
 800fbd6:	1b40      	subs	r0, r0, r5
 800fbd8:	6060      	str	r0, [r4, #4]
 800fbda:	6863      	ldr	r3, [r4, #4]
 800fbdc:	6123      	str	r3, [r4, #16]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe4:	e7a8      	b.n	800fb38 <_printf_i+0x150>
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	462a      	mov	r2, r5
 800fbea:	4649      	mov	r1, r9
 800fbec:	4640      	mov	r0, r8
 800fbee:	47d0      	blx	sl
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d0ab      	beq.n	800fb4c <_printf_i+0x164>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	079b      	lsls	r3, r3, #30
 800fbf8:	d413      	bmi.n	800fc22 <_printf_i+0x23a>
 800fbfa:	68e0      	ldr	r0, [r4, #12]
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	4298      	cmp	r0, r3
 800fc00:	bfb8      	it	lt
 800fc02:	4618      	movlt	r0, r3
 800fc04:	e7a4      	b.n	800fb50 <_printf_i+0x168>
 800fc06:	2301      	movs	r3, #1
 800fc08:	4632      	mov	r2, r6
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	47d0      	blx	sl
 800fc10:	3001      	adds	r0, #1
 800fc12:	d09b      	beq.n	800fb4c <_printf_i+0x164>
 800fc14:	3501      	adds	r5, #1
 800fc16:	68e3      	ldr	r3, [r4, #12]
 800fc18:	9903      	ldr	r1, [sp, #12]
 800fc1a:	1a5b      	subs	r3, r3, r1
 800fc1c:	42ab      	cmp	r3, r5
 800fc1e:	dcf2      	bgt.n	800fc06 <_printf_i+0x21e>
 800fc20:	e7eb      	b.n	800fbfa <_printf_i+0x212>
 800fc22:	2500      	movs	r5, #0
 800fc24:	f104 0619 	add.w	r6, r4, #25
 800fc28:	e7f5      	b.n	800fc16 <_printf_i+0x22e>
 800fc2a:	bf00      	nop
 800fc2c:	08146536 	.word	0x08146536
 800fc30:	08146547 	.word	0x08146547

0800fc34 <_sbrk_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d06      	ldr	r5, [pc, #24]	; (800fc50 <_sbrk_r+0x1c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	4608      	mov	r0, r1
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	f7f3 f9f8 	bl	8003034 <_sbrk>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_sbrk_r+0x1a>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_sbrk_r+0x1a>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	200020c0 	.word	0x200020c0

0800fc54 <siprintf>:
 800fc54:	b40e      	push	{r1, r2, r3}
 800fc56:	b500      	push	{lr}
 800fc58:	b09c      	sub	sp, #112	; 0x70
 800fc5a:	ab1d      	add	r3, sp, #116	; 0x74
 800fc5c:	9002      	str	r0, [sp, #8]
 800fc5e:	9006      	str	r0, [sp, #24]
 800fc60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc64:	4809      	ldr	r0, [pc, #36]	; (800fc8c <siprintf+0x38>)
 800fc66:	9107      	str	r1, [sp, #28]
 800fc68:	9104      	str	r1, [sp, #16]
 800fc6a:	4909      	ldr	r1, [pc, #36]	; (800fc90 <siprintf+0x3c>)
 800fc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc70:	9105      	str	r1, [sp, #20]
 800fc72:	6800      	ldr	r0, [r0, #0]
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	a902      	add	r1, sp, #8
 800fc78:	f001 fb50 	bl	801131c <_svfiprintf_r>
 800fc7c:	9b02      	ldr	r3, [sp, #8]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	701a      	strb	r2, [r3, #0]
 800fc82:	b01c      	add	sp, #112	; 0x70
 800fc84:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc88:	b003      	add	sp, #12
 800fc8a:	4770      	bx	lr
 800fc8c:	20000bd0 	.word	0x20000bd0
 800fc90:	ffff0208 	.word	0xffff0208

0800fc94 <strcpy>:
 800fc94:	4603      	mov	r3, r0
 800fc96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc9a:	f803 2b01 	strb.w	r2, [r3], #1
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d1f9      	bne.n	800fc96 <strcpy+0x2>
 800fca2:	4770      	bx	lr

0800fca4 <_strtol_l.constprop.0>:
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcaa:	d001      	beq.n	800fcb0 <_strtol_l.constprop.0+0xc>
 800fcac:	2b24      	cmp	r3, #36	; 0x24
 800fcae:	d906      	bls.n	800fcbe <_strtol_l.constprop.0+0x1a>
 800fcb0:	f7ff fa2e 	bl	800f110 <__errno>
 800fcb4:	2316      	movs	r3, #22
 800fcb6:	6003      	str	r3, [r0, #0]
 800fcb8:	2000      	movs	r0, #0
 800fcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fda4 <_strtol_l.constprop.0+0x100>
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	462e      	mov	r6, r5
 800fcc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcca:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fcce:	f017 0708 	ands.w	r7, r7, #8
 800fcd2:	d1f7      	bne.n	800fcc4 <_strtol_l.constprop.0+0x20>
 800fcd4:	2c2d      	cmp	r4, #45	; 0x2d
 800fcd6:	d132      	bne.n	800fd3e <_strtol_l.constprop.0+0x9a>
 800fcd8:	782c      	ldrb	r4, [r5, #0]
 800fcda:	2701      	movs	r7, #1
 800fcdc:	1cb5      	adds	r5, r6, #2
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d05b      	beq.n	800fd9a <_strtol_l.constprop.0+0xf6>
 800fce2:	2b10      	cmp	r3, #16
 800fce4:	d109      	bne.n	800fcfa <_strtol_l.constprop.0+0x56>
 800fce6:	2c30      	cmp	r4, #48	; 0x30
 800fce8:	d107      	bne.n	800fcfa <_strtol_l.constprop.0+0x56>
 800fcea:	782c      	ldrb	r4, [r5, #0]
 800fcec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcf0:	2c58      	cmp	r4, #88	; 0x58
 800fcf2:	d14d      	bne.n	800fd90 <_strtol_l.constprop.0+0xec>
 800fcf4:	786c      	ldrb	r4, [r5, #1]
 800fcf6:	2310      	movs	r3, #16
 800fcf8:	3502      	adds	r5, #2
 800fcfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcfe:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd02:	f04f 0c00 	mov.w	ip, #0
 800fd06:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd0a:	4666      	mov	r6, ip
 800fd0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd14:	f1be 0f09 	cmp.w	lr, #9
 800fd18:	d816      	bhi.n	800fd48 <_strtol_l.constprop.0+0xa4>
 800fd1a:	4674      	mov	r4, lr
 800fd1c:	42a3      	cmp	r3, r4
 800fd1e:	dd24      	ble.n	800fd6a <_strtol_l.constprop.0+0xc6>
 800fd20:	f1bc 0f00 	cmp.w	ip, #0
 800fd24:	db1e      	blt.n	800fd64 <_strtol_l.constprop.0+0xc0>
 800fd26:	45b1      	cmp	r9, r6
 800fd28:	d31c      	bcc.n	800fd64 <_strtol_l.constprop.0+0xc0>
 800fd2a:	d101      	bne.n	800fd30 <_strtol_l.constprop.0+0x8c>
 800fd2c:	45a2      	cmp	sl, r4
 800fd2e:	db19      	blt.n	800fd64 <_strtol_l.constprop.0+0xc0>
 800fd30:	fb06 4603 	mla	r6, r6, r3, r4
 800fd34:	f04f 0c01 	mov.w	ip, #1
 800fd38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd3c:	e7e8      	b.n	800fd10 <_strtol_l.constprop.0+0x6c>
 800fd3e:	2c2b      	cmp	r4, #43	; 0x2b
 800fd40:	bf04      	itt	eq
 800fd42:	782c      	ldrbeq	r4, [r5, #0]
 800fd44:	1cb5      	addeq	r5, r6, #2
 800fd46:	e7ca      	b.n	800fcde <_strtol_l.constprop.0+0x3a>
 800fd48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd4c:	f1be 0f19 	cmp.w	lr, #25
 800fd50:	d801      	bhi.n	800fd56 <_strtol_l.constprop.0+0xb2>
 800fd52:	3c37      	subs	r4, #55	; 0x37
 800fd54:	e7e2      	b.n	800fd1c <_strtol_l.constprop.0+0x78>
 800fd56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd5a:	f1be 0f19 	cmp.w	lr, #25
 800fd5e:	d804      	bhi.n	800fd6a <_strtol_l.constprop.0+0xc6>
 800fd60:	3c57      	subs	r4, #87	; 0x57
 800fd62:	e7db      	b.n	800fd1c <_strtol_l.constprop.0+0x78>
 800fd64:	f04f 3cff 	mov.w	ip, #4294967295
 800fd68:	e7e6      	b.n	800fd38 <_strtol_l.constprop.0+0x94>
 800fd6a:	f1bc 0f00 	cmp.w	ip, #0
 800fd6e:	da05      	bge.n	800fd7c <_strtol_l.constprop.0+0xd8>
 800fd70:	2322      	movs	r3, #34	; 0x22
 800fd72:	6003      	str	r3, [r0, #0]
 800fd74:	4646      	mov	r6, r8
 800fd76:	b942      	cbnz	r2, 800fd8a <_strtol_l.constprop.0+0xe6>
 800fd78:	4630      	mov	r0, r6
 800fd7a:	e79e      	b.n	800fcba <_strtol_l.constprop.0+0x16>
 800fd7c:	b107      	cbz	r7, 800fd80 <_strtol_l.constprop.0+0xdc>
 800fd7e:	4276      	negs	r6, r6
 800fd80:	2a00      	cmp	r2, #0
 800fd82:	d0f9      	beq.n	800fd78 <_strtol_l.constprop.0+0xd4>
 800fd84:	f1bc 0f00 	cmp.w	ip, #0
 800fd88:	d000      	beq.n	800fd8c <_strtol_l.constprop.0+0xe8>
 800fd8a:	1e69      	subs	r1, r5, #1
 800fd8c:	6011      	str	r1, [r2, #0]
 800fd8e:	e7f3      	b.n	800fd78 <_strtol_l.constprop.0+0xd4>
 800fd90:	2430      	movs	r4, #48	; 0x30
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1b1      	bne.n	800fcfa <_strtol_l.constprop.0+0x56>
 800fd96:	2308      	movs	r3, #8
 800fd98:	e7af      	b.n	800fcfa <_strtol_l.constprop.0+0x56>
 800fd9a:	2c30      	cmp	r4, #48	; 0x30
 800fd9c:	d0a5      	beq.n	800fcea <_strtol_l.constprop.0+0x46>
 800fd9e:	230a      	movs	r3, #10
 800fda0:	e7ab      	b.n	800fcfa <_strtol_l.constprop.0+0x56>
 800fda2:	bf00      	nop
 800fda4:	08146559 	.word	0x08146559

0800fda8 <strtol>:
 800fda8:	4613      	mov	r3, r2
 800fdaa:	460a      	mov	r2, r1
 800fdac:	4601      	mov	r1, r0
 800fdae:	4802      	ldr	r0, [pc, #8]	; (800fdb8 <strtol+0x10>)
 800fdb0:	6800      	ldr	r0, [r0, #0]
 800fdb2:	f7ff bf77 	b.w	800fca4 <_strtol_l.constprop.0>
 800fdb6:	bf00      	nop
 800fdb8:	20000bd0 	.word	0x20000bd0

0800fdbc <quorem>:
 800fdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	6903      	ldr	r3, [r0, #16]
 800fdc2:	690c      	ldr	r4, [r1, #16]
 800fdc4:	42a3      	cmp	r3, r4
 800fdc6:	4607      	mov	r7, r0
 800fdc8:	f2c0 8081 	blt.w	800fece <quorem+0x112>
 800fdcc:	3c01      	subs	r4, #1
 800fdce:	f101 0814 	add.w	r8, r1, #20
 800fdd2:	f100 0514 	add.w	r5, r0, #20
 800fdd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdda:	9301      	str	r3, [sp, #4]
 800fddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fde0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fde4:	3301      	adds	r3, #1
 800fde6:	429a      	cmp	r2, r3
 800fde8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fdec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdf4:	d331      	bcc.n	800fe5a <quorem+0x9e>
 800fdf6:	f04f 0e00 	mov.w	lr, #0
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	46ac      	mov	ip, r5
 800fdfe:	46f2      	mov	sl, lr
 800fe00:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe04:	b293      	uxth	r3, r2
 800fe06:	fb06 e303 	mla	r3, r6, r3, lr
 800fe0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	ebaa 0303 	sub.w	r3, sl, r3
 800fe14:	f8dc a000 	ldr.w	sl, [ip]
 800fe18:	0c12      	lsrs	r2, r2, #16
 800fe1a:	fa13 f38a 	uxtah	r3, r3, sl
 800fe1e:	fb06 e202 	mla	r2, r6, r2, lr
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	9b00      	ldr	r3, [sp, #0]
 800fe26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe2a:	b292      	uxth	r2, r2
 800fe2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe34:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe38:	4581      	cmp	r9, r0
 800fe3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe3e:	f84c 3b04 	str.w	r3, [ip], #4
 800fe42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe46:	d2db      	bcs.n	800fe00 <quorem+0x44>
 800fe48:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe4c:	b92b      	cbnz	r3, 800fe5a <quorem+0x9e>
 800fe4e:	9b01      	ldr	r3, [sp, #4]
 800fe50:	3b04      	subs	r3, #4
 800fe52:	429d      	cmp	r5, r3
 800fe54:	461a      	mov	r2, r3
 800fe56:	d32e      	bcc.n	800feb6 <quorem+0xfa>
 800fe58:	613c      	str	r4, [r7, #16]
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	f001 f8bc 	bl	8010fd8 <__mcmp>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	db24      	blt.n	800feae <quorem+0xf2>
 800fe64:	3601      	adds	r6, #1
 800fe66:	4628      	mov	r0, r5
 800fe68:	f04f 0c00 	mov.w	ip, #0
 800fe6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe70:	f8d0 e000 	ldr.w	lr, [r0]
 800fe74:	b293      	uxth	r3, r2
 800fe76:	ebac 0303 	sub.w	r3, ip, r3
 800fe7a:	0c12      	lsrs	r2, r2, #16
 800fe7c:	fa13 f38e 	uxtah	r3, r3, lr
 800fe80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe8e:	45c1      	cmp	r9, r8
 800fe90:	f840 3b04 	str.w	r3, [r0], #4
 800fe94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe98:	d2e8      	bcs.n	800fe6c <quorem+0xb0>
 800fe9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fea2:	b922      	cbnz	r2, 800feae <quorem+0xf2>
 800fea4:	3b04      	subs	r3, #4
 800fea6:	429d      	cmp	r5, r3
 800fea8:	461a      	mov	r2, r3
 800feaa:	d30a      	bcc.n	800fec2 <quorem+0x106>
 800feac:	613c      	str	r4, [r7, #16]
 800feae:	4630      	mov	r0, r6
 800feb0:	b003      	add	sp, #12
 800feb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb6:	6812      	ldr	r2, [r2, #0]
 800feb8:	3b04      	subs	r3, #4
 800feba:	2a00      	cmp	r2, #0
 800febc:	d1cc      	bne.n	800fe58 <quorem+0x9c>
 800febe:	3c01      	subs	r4, #1
 800fec0:	e7c7      	b.n	800fe52 <quorem+0x96>
 800fec2:	6812      	ldr	r2, [r2, #0]
 800fec4:	3b04      	subs	r3, #4
 800fec6:	2a00      	cmp	r2, #0
 800fec8:	d1f0      	bne.n	800feac <quorem+0xf0>
 800feca:	3c01      	subs	r4, #1
 800fecc:	e7eb      	b.n	800fea6 <quorem+0xea>
 800fece:	2000      	movs	r0, #0
 800fed0:	e7ee      	b.n	800feb0 <quorem+0xf4>
 800fed2:	0000      	movs	r0, r0
 800fed4:	0000      	movs	r0, r0
	...

0800fed8 <_dtoa_r>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	ed2d 8b04 	vpush	{d8-d9}
 800fee0:	ec57 6b10 	vmov	r6, r7, d0
 800fee4:	b093      	sub	sp, #76	; 0x4c
 800fee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fee8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800feec:	9106      	str	r1, [sp, #24]
 800feee:	ee10 aa10 	vmov	sl, s0
 800fef2:	4604      	mov	r4, r0
 800fef4:	9209      	str	r2, [sp, #36]	; 0x24
 800fef6:	930c      	str	r3, [sp, #48]	; 0x30
 800fef8:	46bb      	mov	fp, r7
 800fefa:	b975      	cbnz	r5, 800ff1a <_dtoa_r+0x42>
 800fefc:	2010      	movs	r0, #16
 800fefe:	f7ff f931 	bl	800f164 <malloc>
 800ff02:	4602      	mov	r2, r0
 800ff04:	6260      	str	r0, [r4, #36]	; 0x24
 800ff06:	b920      	cbnz	r0, 800ff12 <_dtoa_r+0x3a>
 800ff08:	4ba7      	ldr	r3, [pc, #668]	; (80101a8 <_dtoa_r+0x2d0>)
 800ff0a:	21ea      	movs	r1, #234	; 0xea
 800ff0c:	48a7      	ldr	r0, [pc, #668]	; (80101ac <_dtoa_r+0x2d4>)
 800ff0e:	f001 fb05 	bl	801151c <__assert_func>
 800ff12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff16:	6005      	str	r5, [r0, #0]
 800ff18:	60c5      	str	r5, [r0, #12]
 800ff1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff1c:	6819      	ldr	r1, [r3, #0]
 800ff1e:	b151      	cbz	r1, 800ff36 <_dtoa_r+0x5e>
 800ff20:	685a      	ldr	r2, [r3, #4]
 800ff22:	604a      	str	r2, [r1, #4]
 800ff24:	2301      	movs	r3, #1
 800ff26:	4093      	lsls	r3, r2
 800ff28:	608b      	str	r3, [r1, #8]
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f000 fe12 	bl	8010b54 <_Bfree>
 800ff30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff32:	2200      	movs	r2, #0
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	1e3b      	subs	r3, r7, #0
 800ff38:	bfaa      	itet	ge
 800ff3a:	2300      	movge	r3, #0
 800ff3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ff40:	f8c8 3000 	strge.w	r3, [r8]
 800ff44:	4b9a      	ldr	r3, [pc, #616]	; (80101b0 <_dtoa_r+0x2d8>)
 800ff46:	bfbc      	itt	lt
 800ff48:	2201      	movlt	r2, #1
 800ff4a:	f8c8 2000 	strlt.w	r2, [r8]
 800ff4e:	ea33 030b 	bics.w	r3, r3, fp
 800ff52:	d11b      	bne.n	800ff8c <_dtoa_r+0xb4>
 800ff54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff5a:	6013      	str	r3, [r2, #0]
 800ff5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff60:	4333      	orrs	r3, r6
 800ff62:	f000 8592 	beq.w	8010a8a <_dtoa_r+0xbb2>
 800ff66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff68:	b963      	cbnz	r3, 800ff84 <_dtoa_r+0xac>
 800ff6a:	4b92      	ldr	r3, [pc, #584]	; (80101b4 <_dtoa_r+0x2dc>)
 800ff6c:	e022      	b.n	800ffb4 <_dtoa_r+0xdc>
 800ff6e:	4b92      	ldr	r3, [pc, #584]	; (80101b8 <_dtoa_r+0x2e0>)
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	3308      	adds	r3, #8
 800ff74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	9801      	ldr	r0, [sp, #4]
 800ff7a:	b013      	add	sp, #76	; 0x4c
 800ff7c:	ecbd 8b04 	vpop	{d8-d9}
 800ff80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff84:	4b8b      	ldr	r3, [pc, #556]	; (80101b4 <_dtoa_r+0x2dc>)
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	3303      	adds	r3, #3
 800ff8a:	e7f3      	b.n	800ff74 <_dtoa_r+0x9c>
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2300      	movs	r3, #0
 800ff90:	4650      	mov	r0, sl
 800ff92:	4659      	mov	r1, fp
 800ff94:	f7f0 fdb0 	bl	8000af8 <__aeabi_dcmpeq>
 800ff98:	ec4b ab19 	vmov	d9, sl, fp
 800ff9c:	4680      	mov	r8, r0
 800ff9e:	b158      	cbz	r0, 800ffb8 <_dtoa_r+0xe0>
 800ffa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	6013      	str	r3, [r2, #0]
 800ffa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 856b 	beq.w	8010a84 <_dtoa_r+0xbac>
 800ffae:	4883      	ldr	r0, [pc, #524]	; (80101bc <_dtoa_r+0x2e4>)
 800ffb0:	6018      	str	r0, [r3, #0]
 800ffb2:	1e43      	subs	r3, r0, #1
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	e7df      	b.n	800ff78 <_dtoa_r+0xa0>
 800ffb8:	ec4b ab10 	vmov	d0, sl, fp
 800ffbc:	aa10      	add	r2, sp, #64	; 0x40
 800ffbe:	a911      	add	r1, sp, #68	; 0x44
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f001 f8af 	bl	8011124 <__d2b>
 800ffc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ffca:	ee08 0a10 	vmov	s16, r0
 800ffce:	2d00      	cmp	r5, #0
 800ffd0:	f000 8084 	beq.w	80100dc <_dtoa_r+0x204>
 800ffd4:	ee19 3a90 	vmov	r3, s19
 800ffd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ffe0:	4656      	mov	r6, sl
 800ffe2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ffe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ffea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ffee:	4b74      	ldr	r3, [pc, #464]	; (80101c0 <_dtoa_r+0x2e8>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	4630      	mov	r0, r6
 800fff4:	4639      	mov	r1, r7
 800fff6:	f7f0 f95f 	bl	80002b8 <__aeabi_dsub>
 800fffa:	a365      	add	r3, pc, #404	; (adr r3, 8010190 <_dtoa_r+0x2b8>)
 800fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010000:	f7f0 fb12 	bl	8000628 <__aeabi_dmul>
 8010004:	a364      	add	r3, pc, #400	; (adr r3, 8010198 <_dtoa_r+0x2c0>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	f7f0 f957 	bl	80002bc <__adddf3>
 801000e:	4606      	mov	r6, r0
 8010010:	4628      	mov	r0, r5
 8010012:	460f      	mov	r7, r1
 8010014:	f7f0 fa9e 	bl	8000554 <__aeabi_i2d>
 8010018:	a361      	add	r3, pc, #388	; (adr r3, 80101a0 <_dtoa_r+0x2c8>)
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	f7f0 fb03 	bl	8000628 <__aeabi_dmul>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	4630      	mov	r0, r6
 8010028:	4639      	mov	r1, r7
 801002a:	f7f0 f947 	bl	80002bc <__adddf3>
 801002e:	4606      	mov	r6, r0
 8010030:	460f      	mov	r7, r1
 8010032:	f7f0 fda9 	bl	8000b88 <__aeabi_d2iz>
 8010036:	2200      	movs	r2, #0
 8010038:	9000      	str	r0, [sp, #0]
 801003a:	2300      	movs	r3, #0
 801003c:	4630      	mov	r0, r6
 801003e:	4639      	mov	r1, r7
 8010040:	f7f0 fd64 	bl	8000b0c <__aeabi_dcmplt>
 8010044:	b150      	cbz	r0, 801005c <_dtoa_r+0x184>
 8010046:	9800      	ldr	r0, [sp, #0]
 8010048:	f7f0 fa84 	bl	8000554 <__aeabi_i2d>
 801004c:	4632      	mov	r2, r6
 801004e:	463b      	mov	r3, r7
 8010050:	f7f0 fd52 	bl	8000af8 <__aeabi_dcmpeq>
 8010054:	b910      	cbnz	r0, 801005c <_dtoa_r+0x184>
 8010056:	9b00      	ldr	r3, [sp, #0]
 8010058:	3b01      	subs	r3, #1
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	9b00      	ldr	r3, [sp, #0]
 801005e:	2b16      	cmp	r3, #22
 8010060:	d85a      	bhi.n	8010118 <_dtoa_r+0x240>
 8010062:	9a00      	ldr	r2, [sp, #0]
 8010064:	4b57      	ldr	r3, [pc, #348]	; (80101c4 <_dtoa_r+0x2ec>)
 8010066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	ec51 0b19 	vmov	r0, r1, d9
 8010072:	f7f0 fd4b 	bl	8000b0c <__aeabi_dcmplt>
 8010076:	2800      	cmp	r0, #0
 8010078:	d050      	beq.n	801011c <_dtoa_r+0x244>
 801007a:	9b00      	ldr	r3, [sp, #0]
 801007c:	3b01      	subs	r3, #1
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	2300      	movs	r3, #0
 8010082:	930b      	str	r3, [sp, #44]	; 0x2c
 8010084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010086:	1b5d      	subs	r5, r3, r5
 8010088:	1e6b      	subs	r3, r5, #1
 801008a:	9305      	str	r3, [sp, #20]
 801008c:	bf45      	ittet	mi
 801008e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010092:	9304      	strmi	r3, [sp, #16]
 8010094:	2300      	movpl	r3, #0
 8010096:	2300      	movmi	r3, #0
 8010098:	bf4c      	ite	mi
 801009a:	9305      	strmi	r3, [sp, #20]
 801009c:	9304      	strpl	r3, [sp, #16]
 801009e:	9b00      	ldr	r3, [sp, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	db3d      	blt.n	8010120 <_dtoa_r+0x248>
 80100a4:	9b05      	ldr	r3, [sp, #20]
 80100a6:	9a00      	ldr	r2, [sp, #0]
 80100a8:	920a      	str	r2, [sp, #40]	; 0x28
 80100aa:	4413      	add	r3, r2
 80100ac:	9305      	str	r3, [sp, #20]
 80100ae:	2300      	movs	r3, #0
 80100b0:	9307      	str	r3, [sp, #28]
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	2b09      	cmp	r3, #9
 80100b6:	f200 8089 	bhi.w	80101cc <_dtoa_r+0x2f4>
 80100ba:	2b05      	cmp	r3, #5
 80100bc:	bfc4      	itt	gt
 80100be:	3b04      	subgt	r3, #4
 80100c0:	9306      	strgt	r3, [sp, #24]
 80100c2:	9b06      	ldr	r3, [sp, #24]
 80100c4:	f1a3 0302 	sub.w	r3, r3, #2
 80100c8:	bfcc      	ite	gt
 80100ca:	2500      	movgt	r5, #0
 80100cc:	2501      	movle	r5, #1
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	f200 8087 	bhi.w	80101e2 <_dtoa_r+0x30a>
 80100d4:	e8df f003 	tbb	[pc, r3]
 80100d8:	59383a2d 	.word	0x59383a2d
 80100dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80100e0:	441d      	add	r5, r3
 80100e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80100e6:	2b20      	cmp	r3, #32
 80100e8:	bfc1      	itttt	gt
 80100ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80100f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80100f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100fa:	bfda      	itte	le
 80100fc:	f1c3 0320 	rsble	r3, r3, #32
 8010100:	fa06 f003 	lslle.w	r0, r6, r3
 8010104:	4318      	orrgt	r0, r3
 8010106:	f7f0 fa15 	bl	8000534 <__aeabi_ui2d>
 801010a:	2301      	movs	r3, #1
 801010c:	4606      	mov	r6, r0
 801010e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010112:	3d01      	subs	r5, #1
 8010114:	930e      	str	r3, [sp, #56]	; 0x38
 8010116:	e76a      	b.n	800ffee <_dtoa_r+0x116>
 8010118:	2301      	movs	r3, #1
 801011a:	e7b2      	b.n	8010082 <_dtoa_r+0x1aa>
 801011c:	900b      	str	r0, [sp, #44]	; 0x2c
 801011e:	e7b1      	b.n	8010084 <_dtoa_r+0x1ac>
 8010120:	9b04      	ldr	r3, [sp, #16]
 8010122:	9a00      	ldr	r2, [sp, #0]
 8010124:	1a9b      	subs	r3, r3, r2
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	4253      	negs	r3, r2
 801012a:	9307      	str	r3, [sp, #28]
 801012c:	2300      	movs	r3, #0
 801012e:	930a      	str	r3, [sp, #40]	; 0x28
 8010130:	e7bf      	b.n	80100b2 <_dtoa_r+0x1da>
 8010132:	2300      	movs	r3, #0
 8010134:	9308      	str	r3, [sp, #32]
 8010136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010138:	2b00      	cmp	r3, #0
 801013a:	dc55      	bgt.n	80101e8 <_dtoa_r+0x310>
 801013c:	2301      	movs	r3, #1
 801013e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010142:	461a      	mov	r2, r3
 8010144:	9209      	str	r2, [sp, #36]	; 0x24
 8010146:	e00c      	b.n	8010162 <_dtoa_r+0x28a>
 8010148:	2301      	movs	r3, #1
 801014a:	e7f3      	b.n	8010134 <_dtoa_r+0x25c>
 801014c:	2300      	movs	r3, #0
 801014e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010150:	9308      	str	r3, [sp, #32]
 8010152:	9b00      	ldr	r3, [sp, #0]
 8010154:	4413      	add	r3, r2
 8010156:	9302      	str	r3, [sp, #8]
 8010158:	3301      	adds	r3, #1
 801015a:	2b01      	cmp	r3, #1
 801015c:	9303      	str	r3, [sp, #12]
 801015e:	bfb8      	it	lt
 8010160:	2301      	movlt	r3, #1
 8010162:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010164:	2200      	movs	r2, #0
 8010166:	6042      	str	r2, [r0, #4]
 8010168:	2204      	movs	r2, #4
 801016a:	f102 0614 	add.w	r6, r2, #20
 801016e:	429e      	cmp	r6, r3
 8010170:	6841      	ldr	r1, [r0, #4]
 8010172:	d93d      	bls.n	80101f0 <_dtoa_r+0x318>
 8010174:	4620      	mov	r0, r4
 8010176:	f000 fcad 	bl	8010ad4 <_Balloc>
 801017a:	9001      	str	r0, [sp, #4]
 801017c:	2800      	cmp	r0, #0
 801017e:	d13b      	bne.n	80101f8 <_dtoa_r+0x320>
 8010180:	4b11      	ldr	r3, [pc, #68]	; (80101c8 <_dtoa_r+0x2f0>)
 8010182:	4602      	mov	r2, r0
 8010184:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010188:	e6c0      	b.n	800ff0c <_dtoa_r+0x34>
 801018a:	2301      	movs	r3, #1
 801018c:	e7df      	b.n	801014e <_dtoa_r+0x276>
 801018e:	bf00      	nop
 8010190:	636f4361 	.word	0x636f4361
 8010194:	3fd287a7 	.word	0x3fd287a7
 8010198:	8b60c8b3 	.word	0x8b60c8b3
 801019c:	3fc68a28 	.word	0x3fc68a28
 80101a0:	509f79fb 	.word	0x509f79fb
 80101a4:	3fd34413 	.word	0x3fd34413
 80101a8:	08146666 	.word	0x08146666
 80101ac:	0814667d 	.word	0x0814667d
 80101b0:	7ff00000 	.word	0x7ff00000
 80101b4:	08146662 	.word	0x08146662
 80101b8:	08146659 	.word	0x08146659
 80101bc:	08146535 	.word	0x08146535
 80101c0:	3ff80000 	.word	0x3ff80000
 80101c4:	08146770 	.word	0x08146770
 80101c8:	081466d8 	.word	0x081466d8
 80101cc:	2501      	movs	r5, #1
 80101ce:	2300      	movs	r3, #0
 80101d0:	9306      	str	r3, [sp, #24]
 80101d2:	9508      	str	r5, [sp, #32]
 80101d4:	f04f 33ff 	mov.w	r3, #4294967295
 80101d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101dc:	2200      	movs	r2, #0
 80101de:	2312      	movs	r3, #18
 80101e0:	e7b0      	b.n	8010144 <_dtoa_r+0x26c>
 80101e2:	2301      	movs	r3, #1
 80101e4:	9308      	str	r3, [sp, #32]
 80101e6:	e7f5      	b.n	80101d4 <_dtoa_r+0x2fc>
 80101e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101ee:	e7b8      	b.n	8010162 <_dtoa_r+0x28a>
 80101f0:	3101      	adds	r1, #1
 80101f2:	6041      	str	r1, [r0, #4]
 80101f4:	0052      	lsls	r2, r2, #1
 80101f6:	e7b8      	b.n	801016a <_dtoa_r+0x292>
 80101f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101fa:	9a01      	ldr	r2, [sp, #4]
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	9b03      	ldr	r3, [sp, #12]
 8010200:	2b0e      	cmp	r3, #14
 8010202:	f200 809d 	bhi.w	8010340 <_dtoa_r+0x468>
 8010206:	2d00      	cmp	r5, #0
 8010208:	f000 809a 	beq.w	8010340 <_dtoa_r+0x468>
 801020c:	9b00      	ldr	r3, [sp, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	dd32      	ble.n	8010278 <_dtoa_r+0x3a0>
 8010212:	4ab7      	ldr	r2, [pc, #732]	; (80104f0 <_dtoa_r+0x618>)
 8010214:	f003 030f 	and.w	r3, r3, #15
 8010218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801021c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010220:	9b00      	ldr	r3, [sp, #0]
 8010222:	05d8      	lsls	r0, r3, #23
 8010224:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010228:	d516      	bpl.n	8010258 <_dtoa_r+0x380>
 801022a:	4bb2      	ldr	r3, [pc, #712]	; (80104f4 <_dtoa_r+0x61c>)
 801022c:	ec51 0b19 	vmov	r0, r1, d9
 8010230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010234:	f7f0 fb22 	bl	800087c <__aeabi_ddiv>
 8010238:	f007 070f 	and.w	r7, r7, #15
 801023c:	4682      	mov	sl, r0
 801023e:	468b      	mov	fp, r1
 8010240:	2503      	movs	r5, #3
 8010242:	4eac      	ldr	r6, [pc, #688]	; (80104f4 <_dtoa_r+0x61c>)
 8010244:	b957      	cbnz	r7, 801025c <_dtoa_r+0x384>
 8010246:	4642      	mov	r2, r8
 8010248:	464b      	mov	r3, r9
 801024a:	4650      	mov	r0, sl
 801024c:	4659      	mov	r1, fp
 801024e:	f7f0 fb15 	bl	800087c <__aeabi_ddiv>
 8010252:	4682      	mov	sl, r0
 8010254:	468b      	mov	fp, r1
 8010256:	e028      	b.n	80102aa <_dtoa_r+0x3d2>
 8010258:	2502      	movs	r5, #2
 801025a:	e7f2      	b.n	8010242 <_dtoa_r+0x36a>
 801025c:	07f9      	lsls	r1, r7, #31
 801025e:	d508      	bpl.n	8010272 <_dtoa_r+0x39a>
 8010260:	4640      	mov	r0, r8
 8010262:	4649      	mov	r1, r9
 8010264:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010268:	f7f0 f9de 	bl	8000628 <__aeabi_dmul>
 801026c:	3501      	adds	r5, #1
 801026e:	4680      	mov	r8, r0
 8010270:	4689      	mov	r9, r1
 8010272:	107f      	asrs	r7, r7, #1
 8010274:	3608      	adds	r6, #8
 8010276:	e7e5      	b.n	8010244 <_dtoa_r+0x36c>
 8010278:	f000 809b 	beq.w	80103b2 <_dtoa_r+0x4da>
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	4f9d      	ldr	r7, [pc, #628]	; (80104f4 <_dtoa_r+0x61c>)
 8010280:	425e      	negs	r6, r3
 8010282:	4b9b      	ldr	r3, [pc, #620]	; (80104f0 <_dtoa_r+0x618>)
 8010284:	f006 020f 	and.w	r2, r6, #15
 8010288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010290:	ec51 0b19 	vmov	r0, r1, d9
 8010294:	f7f0 f9c8 	bl	8000628 <__aeabi_dmul>
 8010298:	1136      	asrs	r6, r6, #4
 801029a:	4682      	mov	sl, r0
 801029c:	468b      	mov	fp, r1
 801029e:	2300      	movs	r3, #0
 80102a0:	2502      	movs	r5, #2
 80102a2:	2e00      	cmp	r6, #0
 80102a4:	d17a      	bne.n	801039c <_dtoa_r+0x4c4>
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1d3      	bne.n	8010252 <_dtoa_r+0x37a>
 80102aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f000 8082 	beq.w	80103b6 <_dtoa_r+0x4de>
 80102b2:	4b91      	ldr	r3, [pc, #580]	; (80104f8 <_dtoa_r+0x620>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	4650      	mov	r0, sl
 80102b8:	4659      	mov	r1, fp
 80102ba:	f7f0 fc27 	bl	8000b0c <__aeabi_dcmplt>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d079      	beq.n	80103b6 <_dtoa_r+0x4de>
 80102c2:	9b03      	ldr	r3, [sp, #12]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d076      	beq.n	80103b6 <_dtoa_r+0x4de>
 80102c8:	9b02      	ldr	r3, [sp, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	dd36      	ble.n	801033c <_dtoa_r+0x464>
 80102ce:	9b00      	ldr	r3, [sp, #0]
 80102d0:	4650      	mov	r0, sl
 80102d2:	4659      	mov	r1, fp
 80102d4:	1e5f      	subs	r7, r3, #1
 80102d6:	2200      	movs	r2, #0
 80102d8:	4b88      	ldr	r3, [pc, #544]	; (80104fc <_dtoa_r+0x624>)
 80102da:	f7f0 f9a5 	bl	8000628 <__aeabi_dmul>
 80102de:	9e02      	ldr	r6, [sp, #8]
 80102e0:	4682      	mov	sl, r0
 80102e2:	468b      	mov	fp, r1
 80102e4:	3501      	adds	r5, #1
 80102e6:	4628      	mov	r0, r5
 80102e8:	f7f0 f934 	bl	8000554 <__aeabi_i2d>
 80102ec:	4652      	mov	r2, sl
 80102ee:	465b      	mov	r3, fp
 80102f0:	f7f0 f99a 	bl	8000628 <__aeabi_dmul>
 80102f4:	4b82      	ldr	r3, [pc, #520]	; (8010500 <_dtoa_r+0x628>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	f7ef ffe0 	bl	80002bc <__adddf3>
 80102fc:	46d0      	mov	r8, sl
 80102fe:	46d9      	mov	r9, fp
 8010300:	4682      	mov	sl, r0
 8010302:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010306:	2e00      	cmp	r6, #0
 8010308:	d158      	bne.n	80103bc <_dtoa_r+0x4e4>
 801030a:	4b7e      	ldr	r3, [pc, #504]	; (8010504 <_dtoa_r+0x62c>)
 801030c:	2200      	movs	r2, #0
 801030e:	4640      	mov	r0, r8
 8010310:	4649      	mov	r1, r9
 8010312:	f7ef ffd1 	bl	80002b8 <__aeabi_dsub>
 8010316:	4652      	mov	r2, sl
 8010318:	465b      	mov	r3, fp
 801031a:	4680      	mov	r8, r0
 801031c:	4689      	mov	r9, r1
 801031e:	f7f0 fc13 	bl	8000b48 <__aeabi_dcmpgt>
 8010322:	2800      	cmp	r0, #0
 8010324:	f040 8295 	bne.w	8010852 <_dtoa_r+0x97a>
 8010328:	4652      	mov	r2, sl
 801032a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801032e:	4640      	mov	r0, r8
 8010330:	4649      	mov	r1, r9
 8010332:	f7f0 fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8010336:	2800      	cmp	r0, #0
 8010338:	f040 8289 	bne.w	801084e <_dtoa_r+0x976>
 801033c:	ec5b ab19 	vmov	sl, fp, d9
 8010340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010342:	2b00      	cmp	r3, #0
 8010344:	f2c0 8148 	blt.w	80105d8 <_dtoa_r+0x700>
 8010348:	9a00      	ldr	r2, [sp, #0]
 801034a:	2a0e      	cmp	r2, #14
 801034c:	f300 8144 	bgt.w	80105d8 <_dtoa_r+0x700>
 8010350:	4b67      	ldr	r3, [pc, #412]	; (80104f0 <_dtoa_r+0x618>)
 8010352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010356:	e9d3 8900 	ldrd	r8, r9, [r3]
 801035a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035c:	2b00      	cmp	r3, #0
 801035e:	f280 80d5 	bge.w	801050c <_dtoa_r+0x634>
 8010362:	9b03      	ldr	r3, [sp, #12]
 8010364:	2b00      	cmp	r3, #0
 8010366:	f300 80d1 	bgt.w	801050c <_dtoa_r+0x634>
 801036a:	f040 826f 	bne.w	801084c <_dtoa_r+0x974>
 801036e:	4b65      	ldr	r3, [pc, #404]	; (8010504 <_dtoa_r+0x62c>)
 8010370:	2200      	movs	r2, #0
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	f7f0 f957 	bl	8000628 <__aeabi_dmul>
 801037a:	4652      	mov	r2, sl
 801037c:	465b      	mov	r3, fp
 801037e:	f7f0 fbd9 	bl	8000b34 <__aeabi_dcmpge>
 8010382:	9e03      	ldr	r6, [sp, #12]
 8010384:	4637      	mov	r7, r6
 8010386:	2800      	cmp	r0, #0
 8010388:	f040 8245 	bne.w	8010816 <_dtoa_r+0x93e>
 801038c:	9d01      	ldr	r5, [sp, #4]
 801038e:	2331      	movs	r3, #49	; 0x31
 8010390:	f805 3b01 	strb.w	r3, [r5], #1
 8010394:	9b00      	ldr	r3, [sp, #0]
 8010396:	3301      	adds	r3, #1
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	e240      	b.n	801081e <_dtoa_r+0x946>
 801039c:	07f2      	lsls	r2, r6, #31
 801039e:	d505      	bpl.n	80103ac <_dtoa_r+0x4d4>
 80103a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103a4:	f7f0 f940 	bl	8000628 <__aeabi_dmul>
 80103a8:	3501      	adds	r5, #1
 80103aa:	2301      	movs	r3, #1
 80103ac:	1076      	asrs	r6, r6, #1
 80103ae:	3708      	adds	r7, #8
 80103b0:	e777      	b.n	80102a2 <_dtoa_r+0x3ca>
 80103b2:	2502      	movs	r5, #2
 80103b4:	e779      	b.n	80102aa <_dtoa_r+0x3d2>
 80103b6:	9f00      	ldr	r7, [sp, #0]
 80103b8:	9e03      	ldr	r6, [sp, #12]
 80103ba:	e794      	b.n	80102e6 <_dtoa_r+0x40e>
 80103bc:	9901      	ldr	r1, [sp, #4]
 80103be:	4b4c      	ldr	r3, [pc, #304]	; (80104f0 <_dtoa_r+0x618>)
 80103c0:	4431      	add	r1, r6
 80103c2:	910d      	str	r1, [sp, #52]	; 0x34
 80103c4:	9908      	ldr	r1, [sp, #32]
 80103c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80103ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103ce:	2900      	cmp	r1, #0
 80103d0:	d043      	beq.n	801045a <_dtoa_r+0x582>
 80103d2:	494d      	ldr	r1, [pc, #308]	; (8010508 <_dtoa_r+0x630>)
 80103d4:	2000      	movs	r0, #0
 80103d6:	f7f0 fa51 	bl	800087c <__aeabi_ddiv>
 80103da:	4652      	mov	r2, sl
 80103dc:	465b      	mov	r3, fp
 80103de:	f7ef ff6b 	bl	80002b8 <__aeabi_dsub>
 80103e2:	9d01      	ldr	r5, [sp, #4]
 80103e4:	4682      	mov	sl, r0
 80103e6:	468b      	mov	fp, r1
 80103e8:	4649      	mov	r1, r9
 80103ea:	4640      	mov	r0, r8
 80103ec:	f7f0 fbcc 	bl	8000b88 <__aeabi_d2iz>
 80103f0:	4606      	mov	r6, r0
 80103f2:	f7f0 f8af 	bl	8000554 <__aeabi_i2d>
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	4640      	mov	r0, r8
 80103fc:	4649      	mov	r1, r9
 80103fe:	f7ef ff5b 	bl	80002b8 <__aeabi_dsub>
 8010402:	3630      	adds	r6, #48	; 0x30
 8010404:	f805 6b01 	strb.w	r6, [r5], #1
 8010408:	4652      	mov	r2, sl
 801040a:	465b      	mov	r3, fp
 801040c:	4680      	mov	r8, r0
 801040e:	4689      	mov	r9, r1
 8010410:	f7f0 fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8010414:	2800      	cmp	r0, #0
 8010416:	d163      	bne.n	80104e0 <_dtoa_r+0x608>
 8010418:	4642      	mov	r2, r8
 801041a:	464b      	mov	r3, r9
 801041c:	4936      	ldr	r1, [pc, #216]	; (80104f8 <_dtoa_r+0x620>)
 801041e:	2000      	movs	r0, #0
 8010420:	f7ef ff4a 	bl	80002b8 <__aeabi_dsub>
 8010424:	4652      	mov	r2, sl
 8010426:	465b      	mov	r3, fp
 8010428:	f7f0 fb70 	bl	8000b0c <__aeabi_dcmplt>
 801042c:	2800      	cmp	r0, #0
 801042e:	f040 80b5 	bne.w	801059c <_dtoa_r+0x6c4>
 8010432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010434:	429d      	cmp	r5, r3
 8010436:	d081      	beq.n	801033c <_dtoa_r+0x464>
 8010438:	4b30      	ldr	r3, [pc, #192]	; (80104fc <_dtoa_r+0x624>)
 801043a:	2200      	movs	r2, #0
 801043c:	4650      	mov	r0, sl
 801043e:	4659      	mov	r1, fp
 8010440:	f7f0 f8f2 	bl	8000628 <__aeabi_dmul>
 8010444:	4b2d      	ldr	r3, [pc, #180]	; (80104fc <_dtoa_r+0x624>)
 8010446:	4682      	mov	sl, r0
 8010448:	468b      	mov	fp, r1
 801044a:	4640      	mov	r0, r8
 801044c:	4649      	mov	r1, r9
 801044e:	2200      	movs	r2, #0
 8010450:	f7f0 f8ea 	bl	8000628 <__aeabi_dmul>
 8010454:	4680      	mov	r8, r0
 8010456:	4689      	mov	r9, r1
 8010458:	e7c6      	b.n	80103e8 <_dtoa_r+0x510>
 801045a:	4650      	mov	r0, sl
 801045c:	4659      	mov	r1, fp
 801045e:	f7f0 f8e3 	bl	8000628 <__aeabi_dmul>
 8010462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010464:	9d01      	ldr	r5, [sp, #4]
 8010466:	930f      	str	r3, [sp, #60]	; 0x3c
 8010468:	4682      	mov	sl, r0
 801046a:	468b      	mov	fp, r1
 801046c:	4649      	mov	r1, r9
 801046e:	4640      	mov	r0, r8
 8010470:	f7f0 fb8a 	bl	8000b88 <__aeabi_d2iz>
 8010474:	4606      	mov	r6, r0
 8010476:	f7f0 f86d 	bl	8000554 <__aeabi_i2d>
 801047a:	3630      	adds	r6, #48	; 0x30
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4640      	mov	r0, r8
 8010482:	4649      	mov	r1, r9
 8010484:	f7ef ff18 	bl	80002b8 <__aeabi_dsub>
 8010488:	f805 6b01 	strb.w	r6, [r5], #1
 801048c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801048e:	429d      	cmp	r5, r3
 8010490:	4680      	mov	r8, r0
 8010492:	4689      	mov	r9, r1
 8010494:	f04f 0200 	mov.w	r2, #0
 8010498:	d124      	bne.n	80104e4 <_dtoa_r+0x60c>
 801049a:	4b1b      	ldr	r3, [pc, #108]	; (8010508 <_dtoa_r+0x630>)
 801049c:	4650      	mov	r0, sl
 801049e:	4659      	mov	r1, fp
 80104a0:	f7ef ff0c 	bl	80002bc <__adddf3>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	4640      	mov	r0, r8
 80104aa:	4649      	mov	r1, r9
 80104ac:	f7f0 fb4c 	bl	8000b48 <__aeabi_dcmpgt>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d173      	bne.n	801059c <_dtoa_r+0x6c4>
 80104b4:	4652      	mov	r2, sl
 80104b6:	465b      	mov	r3, fp
 80104b8:	4913      	ldr	r1, [pc, #76]	; (8010508 <_dtoa_r+0x630>)
 80104ba:	2000      	movs	r0, #0
 80104bc:	f7ef fefc 	bl	80002b8 <__aeabi_dsub>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4640      	mov	r0, r8
 80104c6:	4649      	mov	r1, r9
 80104c8:	f7f0 fb20 	bl	8000b0c <__aeabi_dcmplt>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	f43f af35 	beq.w	801033c <_dtoa_r+0x464>
 80104d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80104d4:	1e6b      	subs	r3, r5, #1
 80104d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80104d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104dc:	2b30      	cmp	r3, #48	; 0x30
 80104de:	d0f8      	beq.n	80104d2 <_dtoa_r+0x5fa>
 80104e0:	9700      	str	r7, [sp, #0]
 80104e2:	e049      	b.n	8010578 <_dtoa_r+0x6a0>
 80104e4:	4b05      	ldr	r3, [pc, #20]	; (80104fc <_dtoa_r+0x624>)
 80104e6:	f7f0 f89f 	bl	8000628 <__aeabi_dmul>
 80104ea:	4680      	mov	r8, r0
 80104ec:	4689      	mov	r9, r1
 80104ee:	e7bd      	b.n	801046c <_dtoa_r+0x594>
 80104f0:	08146770 	.word	0x08146770
 80104f4:	08146748 	.word	0x08146748
 80104f8:	3ff00000 	.word	0x3ff00000
 80104fc:	40240000 	.word	0x40240000
 8010500:	401c0000 	.word	0x401c0000
 8010504:	40140000 	.word	0x40140000
 8010508:	3fe00000 	.word	0x3fe00000
 801050c:	9d01      	ldr	r5, [sp, #4]
 801050e:	4656      	mov	r6, sl
 8010510:	465f      	mov	r7, fp
 8010512:	4642      	mov	r2, r8
 8010514:	464b      	mov	r3, r9
 8010516:	4630      	mov	r0, r6
 8010518:	4639      	mov	r1, r7
 801051a:	f7f0 f9af 	bl	800087c <__aeabi_ddiv>
 801051e:	f7f0 fb33 	bl	8000b88 <__aeabi_d2iz>
 8010522:	4682      	mov	sl, r0
 8010524:	f7f0 f816 	bl	8000554 <__aeabi_i2d>
 8010528:	4642      	mov	r2, r8
 801052a:	464b      	mov	r3, r9
 801052c:	f7f0 f87c 	bl	8000628 <__aeabi_dmul>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	4630      	mov	r0, r6
 8010536:	4639      	mov	r1, r7
 8010538:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801053c:	f7ef febc 	bl	80002b8 <__aeabi_dsub>
 8010540:	f805 6b01 	strb.w	r6, [r5], #1
 8010544:	9e01      	ldr	r6, [sp, #4]
 8010546:	9f03      	ldr	r7, [sp, #12]
 8010548:	1bae      	subs	r6, r5, r6
 801054a:	42b7      	cmp	r7, r6
 801054c:	4602      	mov	r2, r0
 801054e:	460b      	mov	r3, r1
 8010550:	d135      	bne.n	80105be <_dtoa_r+0x6e6>
 8010552:	f7ef feb3 	bl	80002bc <__adddf3>
 8010556:	4642      	mov	r2, r8
 8010558:	464b      	mov	r3, r9
 801055a:	4606      	mov	r6, r0
 801055c:	460f      	mov	r7, r1
 801055e:	f7f0 faf3 	bl	8000b48 <__aeabi_dcmpgt>
 8010562:	b9d0      	cbnz	r0, 801059a <_dtoa_r+0x6c2>
 8010564:	4642      	mov	r2, r8
 8010566:	464b      	mov	r3, r9
 8010568:	4630      	mov	r0, r6
 801056a:	4639      	mov	r1, r7
 801056c:	f7f0 fac4 	bl	8000af8 <__aeabi_dcmpeq>
 8010570:	b110      	cbz	r0, 8010578 <_dtoa_r+0x6a0>
 8010572:	f01a 0f01 	tst.w	sl, #1
 8010576:	d110      	bne.n	801059a <_dtoa_r+0x6c2>
 8010578:	4620      	mov	r0, r4
 801057a:	ee18 1a10 	vmov	r1, s16
 801057e:	f000 fae9 	bl	8010b54 <_Bfree>
 8010582:	2300      	movs	r3, #0
 8010584:	9800      	ldr	r0, [sp, #0]
 8010586:	702b      	strb	r3, [r5, #0]
 8010588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801058a:	3001      	adds	r0, #1
 801058c:	6018      	str	r0, [r3, #0]
 801058e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010590:	2b00      	cmp	r3, #0
 8010592:	f43f acf1 	beq.w	800ff78 <_dtoa_r+0xa0>
 8010596:	601d      	str	r5, [r3, #0]
 8010598:	e4ee      	b.n	800ff78 <_dtoa_r+0xa0>
 801059a:	9f00      	ldr	r7, [sp, #0]
 801059c:	462b      	mov	r3, r5
 801059e:	461d      	mov	r5, r3
 80105a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105a4:	2a39      	cmp	r2, #57	; 0x39
 80105a6:	d106      	bne.n	80105b6 <_dtoa_r+0x6de>
 80105a8:	9a01      	ldr	r2, [sp, #4]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d1f7      	bne.n	801059e <_dtoa_r+0x6c6>
 80105ae:	9901      	ldr	r1, [sp, #4]
 80105b0:	2230      	movs	r2, #48	; 0x30
 80105b2:	3701      	adds	r7, #1
 80105b4:	700a      	strb	r2, [r1, #0]
 80105b6:	781a      	ldrb	r2, [r3, #0]
 80105b8:	3201      	adds	r2, #1
 80105ba:	701a      	strb	r2, [r3, #0]
 80105bc:	e790      	b.n	80104e0 <_dtoa_r+0x608>
 80105be:	4ba6      	ldr	r3, [pc, #664]	; (8010858 <_dtoa_r+0x980>)
 80105c0:	2200      	movs	r2, #0
 80105c2:	f7f0 f831 	bl	8000628 <__aeabi_dmul>
 80105c6:	2200      	movs	r2, #0
 80105c8:	2300      	movs	r3, #0
 80105ca:	4606      	mov	r6, r0
 80105cc:	460f      	mov	r7, r1
 80105ce:	f7f0 fa93 	bl	8000af8 <__aeabi_dcmpeq>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d09d      	beq.n	8010512 <_dtoa_r+0x63a>
 80105d6:	e7cf      	b.n	8010578 <_dtoa_r+0x6a0>
 80105d8:	9a08      	ldr	r2, [sp, #32]
 80105da:	2a00      	cmp	r2, #0
 80105dc:	f000 80d7 	beq.w	801078e <_dtoa_r+0x8b6>
 80105e0:	9a06      	ldr	r2, [sp, #24]
 80105e2:	2a01      	cmp	r2, #1
 80105e4:	f300 80ba 	bgt.w	801075c <_dtoa_r+0x884>
 80105e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	f000 80b2 	beq.w	8010754 <_dtoa_r+0x87c>
 80105f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80105f4:	9e07      	ldr	r6, [sp, #28]
 80105f6:	9d04      	ldr	r5, [sp, #16]
 80105f8:	9a04      	ldr	r2, [sp, #16]
 80105fa:	441a      	add	r2, r3
 80105fc:	9204      	str	r2, [sp, #16]
 80105fe:	9a05      	ldr	r2, [sp, #20]
 8010600:	2101      	movs	r1, #1
 8010602:	441a      	add	r2, r3
 8010604:	4620      	mov	r0, r4
 8010606:	9205      	str	r2, [sp, #20]
 8010608:	f000 fb5c 	bl	8010cc4 <__i2b>
 801060c:	4607      	mov	r7, r0
 801060e:	2d00      	cmp	r5, #0
 8010610:	dd0c      	ble.n	801062c <_dtoa_r+0x754>
 8010612:	9b05      	ldr	r3, [sp, #20]
 8010614:	2b00      	cmp	r3, #0
 8010616:	dd09      	ble.n	801062c <_dtoa_r+0x754>
 8010618:	42ab      	cmp	r3, r5
 801061a:	9a04      	ldr	r2, [sp, #16]
 801061c:	bfa8      	it	ge
 801061e:	462b      	movge	r3, r5
 8010620:	1ad2      	subs	r2, r2, r3
 8010622:	9204      	str	r2, [sp, #16]
 8010624:	9a05      	ldr	r2, [sp, #20]
 8010626:	1aed      	subs	r5, r5, r3
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	9305      	str	r3, [sp, #20]
 801062c:	9b07      	ldr	r3, [sp, #28]
 801062e:	b31b      	cbz	r3, 8010678 <_dtoa_r+0x7a0>
 8010630:	9b08      	ldr	r3, [sp, #32]
 8010632:	2b00      	cmp	r3, #0
 8010634:	f000 80af 	beq.w	8010796 <_dtoa_r+0x8be>
 8010638:	2e00      	cmp	r6, #0
 801063a:	dd13      	ble.n	8010664 <_dtoa_r+0x78c>
 801063c:	4639      	mov	r1, r7
 801063e:	4632      	mov	r2, r6
 8010640:	4620      	mov	r0, r4
 8010642:	f000 fbff 	bl	8010e44 <__pow5mult>
 8010646:	ee18 2a10 	vmov	r2, s16
 801064a:	4601      	mov	r1, r0
 801064c:	4607      	mov	r7, r0
 801064e:	4620      	mov	r0, r4
 8010650:	f000 fb4e 	bl	8010cf0 <__multiply>
 8010654:	ee18 1a10 	vmov	r1, s16
 8010658:	4680      	mov	r8, r0
 801065a:	4620      	mov	r0, r4
 801065c:	f000 fa7a 	bl	8010b54 <_Bfree>
 8010660:	ee08 8a10 	vmov	s16, r8
 8010664:	9b07      	ldr	r3, [sp, #28]
 8010666:	1b9a      	subs	r2, r3, r6
 8010668:	d006      	beq.n	8010678 <_dtoa_r+0x7a0>
 801066a:	ee18 1a10 	vmov	r1, s16
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fbe8 	bl	8010e44 <__pow5mult>
 8010674:	ee08 0a10 	vmov	s16, r0
 8010678:	2101      	movs	r1, #1
 801067a:	4620      	mov	r0, r4
 801067c:	f000 fb22 	bl	8010cc4 <__i2b>
 8010680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010682:	2b00      	cmp	r3, #0
 8010684:	4606      	mov	r6, r0
 8010686:	f340 8088 	ble.w	801079a <_dtoa_r+0x8c2>
 801068a:	461a      	mov	r2, r3
 801068c:	4601      	mov	r1, r0
 801068e:	4620      	mov	r0, r4
 8010690:	f000 fbd8 	bl	8010e44 <__pow5mult>
 8010694:	9b06      	ldr	r3, [sp, #24]
 8010696:	2b01      	cmp	r3, #1
 8010698:	4606      	mov	r6, r0
 801069a:	f340 8081 	ble.w	80107a0 <_dtoa_r+0x8c8>
 801069e:	f04f 0800 	mov.w	r8, #0
 80106a2:	6933      	ldr	r3, [r6, #16]
 80106a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106a8:	6918      	ldr	r0, [r3, #16]
 80106aa:	f000 fabb 	bl	8010c24 <__hi0bits>
 80106ae:	f1c0 0020 	rsb	r0, r0, #32
 80106b2:	9b05      	ldr	r3, [sp, #20]
 80106b4:	4418      	add	r0, r3
 80106b6:	f010 001f 	ands.w	r0, r0, #31
 80106ba:	f000 8092 	beq.w	80107e2 <_dtoa_r+0x90a>
 80106be:	f1c0 0320 	rsb	r3, r0, #32
 80106c2:	2b04      	cmp	r3, #4
 80106c4:	f340 808a 	ble.w	80107dc <_dtoa_r+0x904>
 80106c8:	f1c0 001c 	rsb	r0, r0, #28
 80106cc:	9b04      	ldr	r3, [sp, #16]
 80106ce:	4403      	add	r3, r0
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	9b05      	ldr	r3, [sp, #20]
 80106d4:	4403      	add	r3, r0
 80106d6:	4405      	add	r5, r0
 80106d8:	9305      	str	r3, [sp, #20]
 80106da:	9b04      	ldr	r3, [sp, #16]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	dd07      	ble.n	80106f0 <_dtoa_r+0x818>
 80106e0:	ee18 1a10 	vmov	r1, s16
 80106e4:	461a      	mov	r2, r3
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 fc06 	bl	8010ef8 <__lshift>
 80106ec:	ee08 0a10 	vmov	s16, r0
 80106f0:	9b05      	ldr	r3, [sp, #20]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	dd05      	ble.n	8010702 <_dtoa_r+0x82a>
 80106f6:	4631      	mov	r1, r6
 80106f8:	461a      	mov	r2, r3
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 fbfc 	bl	8010ef8 <__lshift>
 8010700:	4606      	mov	r6, r0
 8010702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010704:	2b00      	cmp	r3, #0
 8010706:	d06e      	beq.n	80107e6 <_dtoa_r+0x90e>
 8010708:	ee18 0a10 	vmov	r0, s16
 801070c:	4631      	mov	r1, r6
 801070e:	f000 fc63 	bl	8010fd8 <__mcmp>
 8010712:	2800      	cmp	r0, #0
 8010714:	da67      	bge.n	80107e6 <_dtoa_r+0x90e>
 8010716:	9b00      	ldr	r3, [sp, #0]
 8010718:	3b01      	subs	r3, #1
 801071a:	ee18 1a10 	vmov	r1, s16
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	220a      	movs	r2, #10
 8010722:	2300      	movs	r3, #0
 8010724:	4620      	mov	r0, r4
 8010726:	f000 fa37 	bl	8010b98 <__multadd>
 801072a:	9b08      	ldr	r3, [sp, #32]
 801072c:	ee08 0a10 	vmov	s16, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	f000 81b1 	beq.w	8010a98 <_dtoa_r+0xbc0>
 8010736:	2300      	movs	r3, #0
 8010738:	4639      	mov	r1, r7
 801073a:	220a      	movs	r2, #10
 801073c:	4620      	mov	r0, r4
 801073e:	f000 fa2b 	bl	8010b98 <__multadd>
 8010742:	9b02      	ldr	r3, [sp, #8]
 8010744:	2b00      	cmp	r3, #0
 8010746:	4607      	mov	r7, r0
 8010748:	f300 808e 	bgt.w	8010868 <_dtoa_r+0x990>
 801074c:	9b06      	ldr	r3, [sp, #24]
 801074e:	2b02      	cmp	r3, #2
 8010750:	dc51      	bgt.n	80107f6 <_dtoa_r+0x91e>
 8010752:	e089      	b.n	8010868 <_dtoa_r+0x990>
 8010754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801075a:	e74b      	b.n	80105f4 <_dtoa_r+0x71c>
 801075c:	9b03      	ldr	r3, [sp, #12]
 801075e:	1e5e      	subs	r6, r3, #1
 8010760:	9b07      	ldr	r3, [sp, #28]
 8010762:	42b3      	cmp	r3, r6
 8010764:	bfbf      	itttt	lt
 8010766:	9b07      	ldrlt	r3, [sp, #28]
 8010768:	9607      	strlt	r6, [sp, #28]
 801076a:	1af2      	sublt	r2, r6, r3
 801076c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801076e:	bfb6      	itet	lt
 8010770:	189b      	addlt	r3, r3, r2
 8010772:	1b9e      	subge	r6, r3, r6
 8010774:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	bfb8      	it	lt
 801077a:	2600      	movlt	r6, #0
 801077c:	2b00      	cmp	r3, #0
 801077e:	bfb7      	itett	lt
 8010780:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010784:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010788:	1a9d      	sublt	r5, r3, r2
 801078a:	2300      	movlt	r3, #0
 801078c:	e734      	b.n	80105f8 <_dtoa_r+0x720>
 801078e:	9e07      	ldr	r6, [sp, #28]
 8010790:	9d04      	ldr	r5, [sp, #16]
 8010792:	9f08      	ldr	r7, [sp, #32]
 8010794:	e73b      	b.n	801060e <_dtoa_r+0x736>
 8010796:	9a07      	ldr	r2, [sp, #28]
 8010798:	e767      	b.n	801066a <_dtoa_r+0x792>
 801079a:	9b06      	ldr	r3, [sp, #24]
 801079c:	2b01      	cmp	r3, #1
 801079e:	dc18      	bgt.n	80107d2 <_dtoa_r+0x8fa>
 80107a0:	f1ba 0f00 	cmp.w	sl, #0
 80107a4:	d115      	bne.n	80107d2 <_dtoa_r+0x8fa>
 80107a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107aa:	b993      	cbnz	r3, 80107d2 <_dtoa_r+0x8fa>
 80107ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80107b0:	0d1b      	lsrs	r3, r3, #20
 80107b2:	051b      	lsls	r3, r3, #20
 80107b4:	b183      	cbz	r3, 80107d8 <_dtoa_r+0x900>
 80107b6:	9b04      	ldr	r3, [sp, #16]
 80107b8:	3301      	adds	r3, #1
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	9b05      	ldr	r3, [sp, #20]
 80107be:	3301      	adds	r3, #1
 80107c0:	9305      	str	r3, [sp, #20]
 80107c2:	f04f 0801 	mov.w	r8, #1
 80107c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f47f af6a 	bne.w	80106a2 <_dtoa_r+0x7ca>
 80107ce:	2001      	movs	r0, #1
 80107d0:	e76f      	b.n	80106b2 <_dtoa_r+0x7da>
 80107d2:	f04f 0800 	mov.w	r8, #0
 80107d6:	e7f6      	b.n	80107c6 <_dtoa_r+0x8ee>
 80107d8:	4698      	mov	r8, r3
 80107da:	e7f4      	b.n	80107c6 <_dtoa_r+0x8ee>
 80107dc:	f43f af7d 	beq.w	80106da <_dtoa_r+0x802>
 80107e0:	4618      	mov	r0, r3
 80107e2:	301c      	adds	r0, #28
 80107e4:	e772      	b.n	80106cc <_dtoa_r+0x7f4>
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	dc37      	bgt.n	801085c <_dtoa_r+0x984>
 80107ec:	9b06      	ldr	r3, [sp, #24]
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	dd34      	ble.n	801085c <_dtoa_r+0x984>
 80107f2:	9b03      	ldr	r3, [sp, #12]
 80107f4:	9302      	str	r3, [sp, #8]
 80107f6:	9b02      	ldr	r3, [sp, #8]
 80107f8:	b96b      	cbnz	r3, 8010816 <_dtoa_r+0x93e>
 80107fa:	4631      	mov	r1, r6
 80107fc:	2205      	movs	r2, #5
 80107fe:	4620      	mov	r0, r4
 8010800:	f000 f9ca 	bl	8010b98 <__multadd>
 8010804:	4601      	mov	r1, r0
 8010806:	4606      	mov	r6, r0
 8010808:	ee18 0a10 	vmov	r0, s16
 801080c:	f000 fbe4 	bl	8010fd8 <__mcmp>
 8010810:	2800      	cmp	r0, #0
 8010812:	f73f adbb 	bgt.w	801038c <_dtoa_r+0x4b4>
 8010816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010818:	9d01      	ldr	r5, [sp, #4]
 801081a:	43db      	mvns	r3, r3
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	f04f 0800 	mov.w	r8, #0
 8010822:	4631      	mov	r1, r6
 8010824:	4620      	mov	r0, r4
 8010826:	f000 f995 	bl	8010b54 <_Bfree>
 801082a:	2f00      	cmp	r7, #0
 801082c:	f43f aea4 	beq.w	8010578 <_dtoa_r+0x6a0>
 8010830:	f1b8 0f00 	cmp.w	r8, #0
 8010834:	d005      	beq.n	8010842 <_dtoa_r+0x96a>
 8010836:	45b8      	cmp	r8, r7
 8010838:	d003      	beq.n	8010842 <_dtoa_r+0x96a>
 801083a:	4641      	mov	r1, r8
 801083c:	4620      	mov	r0, r4
 801083e:	f000 f989 	bl	8010b54 <_Bfree>
 8010842:	4639      	mov	r1, r7
 8010844:	4620      	mov	r0, r4
 8010846:	f000 f985 	bl	8010b54 <_Bfree>
 801084a:	e695      	b.n	8010578 <_dtoa_r+0x6a0>
 801084c:	2600      	movs	r6, #0
 801084e:	4637      	mov	r7, r6
 8010850:	e7e1      	b.n	8010816 <_dtoa_r+0x93e>
 8010852:	9700      	str	r7, [sp, #0]
 8010854:	4637      	mov	r7, r6
 8010856:	e599      	b.n	801038c <_dtoa_r+0x4b4>
 8010858:	40240000 	.word	0x40240000
 801085c:	9b08      	ldr	r3, [sp, #32]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 80ca 	beq.w	80109f8 <_dtoa_r+0xb20>
 8010864:	9b03      	ldr	r3, [sp, #12]
 8010866:	9302      	str	r3, [sp, #8]
 8010868:	2d00      	cmp	r5, #0
 801086a:	dd05      	ble.n	8010878 <_dtoa_r+0x9a0>
 801086c:	4639      	mov	r1, r7
 801086e:	462a      	mov	r2, r5
 8010870:	4620      	mov	r0, r4
 8010872:	f000 fb41 	bl	8010ef8 <__lshift>
 8010876:	4607      	mov	r7, r0
 8010878:	f1b8 0f00 	cmp.w	r8, #0
 801087c:	d05b      	beq.n	8010936 <_dtoa_r+0xa5e>
 801087e:	6879      	ldr	r1, [r7, #4]
 8010880:	4620      	mov	r0, r4
 8010882:	f000 f927 	bl	8010ad4 <_Balloc>
 8010886:	4605      	mov	r5, r0
 8010888:	b928      	cbnz	r0, 8010896 <_dtoa_r+0x9be>
 801088a:	4b87      	ldr	r3, [pc, #540]	; (8010aa8 <_dtoa_r+0xbd0>)
 801088c:	4602      	mov	r2, r0
 801088e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010892:	f7ff bb3b 	b.w	800ff0c <_dtoa_r+0x34>
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	3202      	adds	r2, #2
 801089a:	0092      	lsls	r2, r2, #2
 801089c:	f107 010c 	add.w	r1, r7, #12
 80108a0:	300c      	adds	r0, #12
 80108a2:	f7fe fc67 	bl	800f174 <memcpy>
 80108a6:	2201      	movs	r2, #1
 80108a8:	4629      	mov	r1, r5
 80108aa:	4620      	mov	r0, r4
 80108ac:	f000 fb24 	bl	8010ef8 <__lshift>
 80108b0:	9b01      	ldr	r3, [sp, #4]
 80108b2:	f103 0901 	add.w	r9, r3, #1
 80108b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80108ba:	4413      	add	r3, r2
 80108bc:	9305      	str	r3, [sp, #20]
 80108be:	f00a 0301 	and.w	r3, sl, #1
 80108c2:	46b8      	mov	r8, r7
 80108c4:	9304      	str	r3, [sp, #16]
 80108c6:	4607      	mov	r7, r0
 80108c8:	4631      	mov	r1, r6
 80108ca:	ee18 0a10 	vmov	r0, s16
 80108ce:	f7ff fa75 	bl	800fdbc <quorem>
 80108d2:	4641      	mov	r1, r8
 80108d4:	9002      	str	r0, [sp, #8]
 80108d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80108da:	ee18 0a10 	vmov	r0, s16
 80108de:	f000 fb7b 	bl	8010fd8 <__mcmp>
 80108e2:	463a      	mov	r2, r7
 80108e4:	9003      	str	r0, [sp, #12]
 80108e6:	4631      	mov	r1, r6
 80108e8:	4620      	mov	r0, r4
 80108ea:	f000 fb91 	bl	8011010 <__mdiff>
 80108ee:	68c2      	ldr	r2, [r0, #12]
 80108f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80108f4:	4605      	mov	r5, r0
 80108f6:	bb02      	cbnz	r2, 801093a <_dtoa_r+0xa62>
 80108f8:	4601      	mov	r1, r0
 80108fa:	ee18 0a10 	vmov	r0, s16
 80108fe:	f000 fb6b 	bl	8010fd8 <__mcmp>
 8010902:	4602      	mov	r2, r0
 8010904:	4629      	mov	r1, r5
 8010906:	4620      	mov	r0, r4
 8010908:	9207      	str	r2, [sp, #28]
 801090a:	f000 f923 	bl	8010b54 <_Bfree>
 801090e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010912:	ea43 0102 	orr.w	r1, r3, r2
 8010916:	9b04      	ldr	r3, [sp, #16]
 8010918:	430b      	orrs	r3, r1
 801091a:	464d      	mov	r5, r9
 801091c:	d10f      	bne.n	801093e <_dtoa_r+0xa66>
 801091e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010922:	d02a      	beq.n	801097a <_dtoa_r+0xaa2>
 8010924:	9b03      	ldr	r3, [sp, #12]
 8010926:	2b00      	cmp	r3, #0
 8010928:	dd02      	ble.n	8010930 <_dtoa_r+0xa58>
 801092a:	9b02      	ldr	r3, [sp, #8]
 801092c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010930:	f88b a000 	strb.w	sl, [fp]
 8010934:	e775      	b.n	8010822 <_dtoa_r+0x94a>
 8010936:	4638      	mov	r0, r7
 8010938:	e7ba      	b.n	80108b0 <_dtoa_r+0x9d8>
 801093a:	2201      	movs	r2, #1
 801093c:	e7e2      	b.n	8010904 <_dtoa_r+0xa2c>
 801093e:	9b03      	ldr	r3, [sp, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	db04      	blt.n	801094e <_dtoa_r+0xa76>
 8010944:	9906      	ldr	r1, [sp, #24]
 8010946:	430b      	orrs	r3, r1
 8010948:	9904      	ldr	r1, [sp, #16]
 801094a:	430b      	orrs	r3, r1
 801094c:	d122      	bne.n	8010994 <_dtoa_r+0xabc>
 801094e:	2a00      	cmp	r2, #0
 8010950:	ddee      	ble.n	8010930 <_dtoa_r+0xa58>
 8010952:	ee18 1a10 	vmov	r1, s16
 8010956:	2201      	movs	r2, #1
 8010958:	4620      	mov	r0, r4
 801095a:	f000 facd 	bl	8010ef8 <__lshift>
 801095e:	4631      	mov	r1, r6
 8010960:	ee08 0a10 	vmov	s16, r0
 8010964:	f000 fb38 	bl	8010fd8 <__mcmp>
 8010968:	2800      	cmp	r0, #0
 801096a:	dc03      	bgt.n	8010974 <_dtoa_r+0xa9c>
 801096c:	d1e0      	bne.n	8010930 <_dtoa_r+0xa58>
 801096e:	f01a 0f01 	tst.w	sl, #1
 8010972:	d0dd      	beq.n	8010930 <_dtoa_r+0xa58>
 8010974:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010978:	d1d7      	bne.n	801092a <_dtoa_r+0xa52>
 801097a:	2339      	movs	r3, #57	; 0x39
 801097c:	f88b 3000 	strb.w	r3, [fp]
 8010980:	462b      	mov	r3, r5
 8010982:	461d      	mov	r5, r3
 8010984:	3b01      	subs	r3, #1
 8010986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801098a:	2a39      	cmp	r2, #57	; 0x39
 801098c:	d071      	beq.n	8010a72 <_dtoa_r+0xb9a>
 801098e:	3201      	adds	r2, #1
 8010990:	701a      	strb	r2, [r3, #0]
 8010992:	e746      	b.n	8010822 <_dtoa_r+0x94a>
 8010994:	2a00      	cmp	r2, #0
 8010996:	dd07      	ble.n	80109a8 <_dtoa_r+0xad0>
 8010998:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801099c:	d0ed      	beq.n	801097a <_dtoa_r+0xaa2>
 801099e:	f10a 0301 	add.w	r3, sl, #1
 80109a2:	f88b 3000 	strb.w	r3, [fp]
 80109a6:	e73c      	b.n	8010822 <_dtoa_r+0x94a>
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80109ae:	4599      	cmp	r9, r3
 80109b0:	d047      	beq.n	8010a42 <_dtoa_r+0xb6a>
 80109b2:	ee18 1a10 	vmov	r1, s16
 80109b6:	2300      	movs	r3, #0
 80109b8:	220a      	movs	r2, #10
 80109ba:	4620      	mov	r0, r4
 80109bc:	f000 f8ec 	bl	8010b98 <__multadd>
 80109c0:	45b8      	cmp	r8, r7
 80109c2:	ee08 0a10 	vmov	s16, r0
 80109c6:	f04f 0300 	mov.w	r3, #0
 80109ca:	f04f 020a 	mov.w	r2, #10
 80109ce:	4641      	mov	r1, r8
 80109d0:	4620      	mov	r0, r4
 80109d2:	d106      	bne.n	80109e2 <_dtoa_r+0xb0a>
 80109d4:	f000 f8e0 	bl	8010b98 <__multadd>
 80109d8:	4680      	mov	r8, r0
 80109da:	4607      	mov	r7, r0
 80109dc:	f109 0901 	add.w	r9, r9, #1
 80109e0:	e772      	b.n	80108c8 <_dtoa_r+0x9f0>
 80109e2:	f000 f8d9 	bl	8010b98 <__multadd>
 80109e6:	4639      	mov	r1, r7
 80109e8:	4680      	mov	r8, r0
 80109ea:	2300      	movs	r3, #0
 80109ec:	220a      	movs	r2, #10
 80109ee:	4620      	mov	r0, r4
 80109f0:	f000 f8d2 	bl	8010b98 <__multadd>
 80109f4:	4607      	mov	r7, r0
 80109f6:	e7f1      	b.n	80109dc <_dtoa_r+0xb04>
 80109f8:	9b03      	ldr	r3, [sp, #12]
 80109fa:	9302      	str	r3, [sp, #8]
 80109fc:	9d01      	ldr	r5, [sp, #4]
 80109fe:	ee18 0a10 	vmov	r0, s16
 8010a02:	4631      	mov	r1, r6
 8010a04:	f7ff f9da 	bl	800fdbc <quorem>
 8010a08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a0c:	9b01      	ldr	r3, [sp, #4]
 8010a0e:	f805 ab01 	strb.w	sl, [r5], #1
 8010a12:	1aea      	subs	r2, r5, r3
 8010a14:	9b02      	ldr	r3, [sp, #8]
 8010a16:	4293      	cmp	r3, r2
 8010a18:	dd09      	ble.n	8010a2e <_dtoa_r+0xb56>
 8010a1a:	ee18 1a10 	vmov	r1, s16
 8010a1e:	2300      	movs	r3, #0
 8010a20:	220a      	movs	r2, #10
 8010a22:	4620      	mov	r0, r4
 8010a24:	f000 f8b8 	bl	8010b98 <__multadd>
 8010a28:	ee08 0a10 	vmov	s16, r0
 8010a2c:	e7e7      	b.n	80109fe <_dtoa_r+0xb26>
 8010a2e:	9b02      	ldr	r3, [sp, #8]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bfc8      	it	gt
 8010a34:	461d      	movgt	r5, r3
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	bfd8      	it	le
 8010a3a:	2501      	movle	r5, #1
 8010a3c:	441d      	add	r5, r3
 8010a3e:	f04f 0800 	mov.w	r8, #0
 8010a42:	ee18 1a10 	vmov	r1, s16
 8010a46:	2201      	movs	r2, #1
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 fa55 	bl	8010ef8 <__lshift>
 8010a4e:	4631      	mov	r1, r6
 8010a50:	ee08 0a10 	vmov	s16, r0
 8010a54:	f000 fac0 	bl	8010fd8 <__mcmp>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	dc91      	bgt.n	8010980 <_dtoa_r+0xaa8>
 8010a5c:	d102      	bne.n	8010a64 <_dtoa_r+0xb8c>
 8010a5e:	f01a 0f01 	tst.w	sl, #1
 8010a62:	d18d      	bne.n	8010980 <_dtoa_r+0xaa8>
 8010a64:	462b      	mov	r3, r5
 8010a66:	461d      	mov	r5, r3
 8010a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a6c:	2a30      	cmp	r2, #48	; 0x30
 8010a6e:	d0fa      	beq.n	8010a66 <_dtoa_r+0xb8e>
 8010a70:	e6d7      	b.n	8010822 <_dtoa_r+0x94a>
 8010a72:	9a01      	ldr	r2, [sp, #4]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d184      	bne.n	8010982 <_dtoa_r+0xaaa>
 8010a78:	9b00      	ldr	r3, [sp, #0]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	2331      	movs	r3, #49	; 0x31
 8010a80:	7013      	strb	r3, [r2, #0]
 8010a82:	e6ce      	b.n	8010822 <_dtoa_r+0x94a>
 8010a84:	4b09      	ldr	r3, [pc, #36]	; (8010aac <_dtoa_r+0xbd4>)
 8010a86:	f7ff ba95 	b.w	800ffb4 <_dtoa_r+0xdc>
 8010a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f47f aa6e 	bne.w	800ff6e <_dtoa_r+0x96>
 8010a92:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <_dtoa_r+0xbd8>)
 8010a94:	f7ff ba8e 	b.w	800ffb4 <_dtoa_r+0xdc>
 8010a98:	9b02      	ldr	r3, [sp, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	dcae      	bgt.n	80109fc <_dtoa_r+0xb24>
 8010a9e:	9b06      	ldr	r3, [sp, #24]
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	f73f aea8 	bgt.w	80107f6 <_dtoa_r+0x91e>
 8010aa6:	e7a9      	b.n	80109fc <_dtoa_r+0xb24>
 8010aa8:	081466d8 	.word	0x081466d8
 8010aac:	08146534 	.word	0x08146534
 8010ab0:	08146659 	.word	0x08146659

08010ab4 <_localeconv_r>:
 8010ab4:	4800      	ldr	r0, [pc, #0]	; (8010ab8 <_localeconv_r+0x4>)
 8010ab6:	4770      	bx	lr
 8010ab8:	20000d24 	.word	0x20000d24

08010abc <__malloc_lock>:
 8010abc:	4801      	ldr	r0, [pc, #4]	; (8010ac4 <__malloc_lock+0x8>)
 8010abe:	f000 bd5e 	b.w	801157e <__retarget_lock_acquire_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	200020c4 	.word	0x200020c4

08010ac8 <__malloc_unlock>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	; (8010ad0 <__malloc_unlock+0x8>)
 8010aca:	f000 bd59 	b.w	8011580 <__retarget_lock_release_recursive>
 8010ace:	bf00      	nop
 8010ad0:	200020c4 	.word	0x200020c4

08010ad4 <_Balloc>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	b976      	cbnz	r6, 8010afc <_Balloc+0x28>
 8010ade:	2010      	movs	r0, #16
 8010ae0:	f7fe fb40 	bl	800f164 <malloc>
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8010ae8:	b920      	cbnz	r0, 8010af4 <_Balloc+0x20>
 8010aea:	4b18      	ldr	r3, [pc, #96]	; (8010b4c <_Balloc+0x78>)
 8010aec:	4818      	ldr	r0, [pc, #96]	; (8010b50 <_Balloc+0x7c>)
 8010aee:	2166      	movs	r1, #102	; 0x66
 8010af0:	f000 fd14 	bl	801151c <__assert_func>
 8010af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af8:	6006      	str	r6, [r0, #0]
 8010afa:	60c6      	str	r6, [r0, #12]
 8010afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010afe:	68f3      	ldr	r3, [r6, #12]
 8010b00:	b183      	cbz	r3, 8010b24 <_Balloc+0x50>
 8010b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b0a:	b9b8      	cbnz	r0, 8010b3c <_Balloc+0x68>
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8010b12:	1d72      	adds	r2, r6, #5
 8010b14:	0092      	lsls	r2, r2, #2
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 fb60 	bl	80111dc <_calloc_r>
 8010b1c:	b160      	cbz	r0, 8010b38 <_Balloc+0x64>
 8010b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b22:	e00e      	b.n	8010b42 <_Balloc+0x6e>
 8010b24:	2221      	movs	r2, #33	; 0x21
 8010b26:	2104      	movs	r1, #4
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f000 fb57 	bl	80111dc <_calloc_r>
 8010b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b30:	60f0      	str	r0, [r6, #12]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1e4      	bne.n	8010b02 <_Balloc+0x2e>
 8010b38:	2000      	movs	r0, #0
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	6802      	ldr	r2, [r0, #0]
 8010b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b42:	2300      	movs	r3, #0
 8010b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b48:	e7f7      	b.n	8010b3a <_Balloc+0x66>
 8010b4a:	bf00      	nop
 8010b4c:	08146666 	.word	0x08146666
 8010b50:	081466e9 	.word	0x081466e9

08010b54 <_Bfree>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b58:	4605      	mov	r5, r0
 8010b5a:	460c      	mov	r4, r1
 8010b5c:	b976      	cbnz	r6, 8010b7c <_Bfree+0x28>
 8010b5e:	2010      	movs	r0, #16
 8010b60:	f7fe fb00 	bl	800f164 <malloc>
 8010b64:	4602      	mov	r2, r0
 8010b66:	6268      	str	r0, [r5, #36]	; 0x24
 8010b68:	b920      	cbnz	r0, 8010b74 <_Bfree+0x20>
 8010b6a:	4b09      	ldr	r3, [pc, #36]	; (8010b90 <_Bfree+0x3c>)
 8010b6c:	4809      	ldr	r0, [pc, #36]	; (8010b94 <_Bfree+0x40>)
 8010b6e:	218a      	movs	r1, #138	; 0x8a
 8010b70:	f000 fcd4 	bl	801151c <__assert_func>
 8010b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b78:	6006      	str	r6, [r0, #0]
 8010b7a:	60c6      	str	r6, [r0, #12]
 8010b7c:	b13c      	cbz	r4, 8010b8e <_Bfree+0x3a>
 8010b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b80:	6862      	ldr	r2, [r4, #4]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b88:	6021      	str	r1, [r4, #0]
 8010b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b8e:	bd70      	pop	{r4, r5, r6, pc}
 8010b90:	08146666 	.word	0x08146666
 8010b94:	081466e9 	.word	0x081466e9

08010b98 <__multadd>:
 8010b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9c:	690d      	ldr	r5, [r1, #16]
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	461e      	mov	r6, r3
 8010ba4:	f101 0c14 	add.w	ip, r1, #20
 8010ba8:	2000      	movs	r0, #0
 8010baa:	f8dc 3000 	ldr.w	r3, [ip]
 8010bae:	b299      	uxth	r1, r3
 8010bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8010bb4:	0c1e      	lsrs	r6, r3, #16
 8010bb6:	0c0b      	lsrs	r3, r1, #16
 8010bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8010bbc:	b289      	uxth	r1, r1
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bc4:	4285      	cmp	r5, r0
 8010bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8010bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bce:	dcec      	bgt.n	8010baa <__multadd+0x12>
 8010bd0:	b30e      	cbz	r6, 8010c16 <__multadd+0x7e>
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	42ab      	cmp	r3, r5
 8010bd6:	dc19      	bgt.n	8010c0c <__multadd+0x74>
 8010bd8:	6861      	ldr	r1, [r4, #4]
 8010bda:	4638      	mov	r0, r7
 8010bdc:	3101      	adds	r1, #1
 8010bde:	f7ff ff79 	bl	8010ad4 <_Balloc>
 8010be2:	4680      	mov	r8, r0
 8010be4:	b928      	cbnz	r0, 8010bf2 <__multadd+0x5a>
 8010be6:	4602      	mov	r2, r0
 8010be8:	4b0c      	ldr	r3, [pc, #48]	; (8010c1c <__multadd+0x84>)
 8010bea:	480d      	ldr	r0, [pc, #52]	; (8010c20 <__multadd+0x88>)
 8010bec:	21b5      	movs	r1, #181	; 0xb5
 8010bee:	f000 fc95 	bl	801151c <__assert_func>
 8010bf2:	6922      	ldr	r2, [r4, #16]
 8010bf4:	3202      	adds	r2, #2
 8010bf6:	f104 010c 	add.w	r1, r4, #12
 8010bfa:	0092      	lsls	r2, r2, #2
 8010bfc:	300c      	adds	r0, #12
 8010bfe:	f7fe fab9 	bl	800f174 <memcpy>
 8010c02:	4621      	mov	r1, r4
 8010c04:	4638      	mov	r0, r7
 8010c06:	f7ff ffa5 	bl	8010b54 <_Bfree>
 8010c0a:	4644      	mov	r4, r8
 8010c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c10:	3501      	adds	r5, #1
 8010c12:	615e      	str	r6, [r3, #20]
 8010c14:	6125      	str	r5, [r4, #16]
 8010c16:	4620      	mov	r0, r4
 8010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1c:	081466d8 	.word	0x081466d8
 8010c20:	081466e9 	.word	0x081466e9

08010c24 <__hi0bits>:
 8010c24:	0c03      	lsrs	r3, r0, #16
 8010c26:	041b      	lsls	r3, r3, #16
 8010c28:	b9d3      	cbnz	r3, 8010c60 <__hi0bits+0x3c>
 8010c2a:	0400      	lsls	r0, r0, #16
 8010c2c:	2310      	movs	r3, #16
 8010c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010c32:	bf04      	itt	eq
 8010c34:	0200      	lsleq	r0, r0, #8
 8010c36:	3308      	addeq	r3, #8
 8010c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010c3c:	bf04      	itt	eq
 8010c3e:	0100      	lsleq	r0, r0, #4
 8010c40:	3304      	addeq	r3, #4
 8010c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010c46:	bf04      	itt	eq
 8010c48:	0080      	lsleq	r0, r0, #2
 8010c4a:	3302      	addeq	r3, #2
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	db05      	blt.n	8010c5c <__hi0bits+0x38>
 8010c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c54:	f103 0301 	add.w	r3, r3, #1
 8010c58:	bf08      	it	eq
 8010c5a:	2320      	moveq	r3, #32
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	4770      	bx	lr
 8010c60:	2300      	movs	r3, #0
 8010c62:	e7e4      	b.n	8010c2e <__hi0bits+0xa>

08010c64 <__lo0bits>:
 8010c64:	6803      	ldr	r3, [r0, #0]
 8010c66:	f013 0207 	ands.w	r2, r3, #7
 8010c6a:	4601      	mov	r1, r0
 8010c6c:	d00b      	beq.n	8010c86 <__lo0bits+0x22>
 8010c6e:	07da      	lsls	r2, r3, #31
 8010c70:	d423      	bmi.n	8010cba <__lo0bits+0x56>
 8010c72:	0798      	lsls	r0, r3, #30
 8010c74:	bf49      	itett	mi
 8010c76:	085b      	lsrmi	r3, r3, #1
 8010c78:	089b      	lsrpl	r3, r3, #2
 8010c7a:	2001      	movmi	r0, #1
 8010c7c:	600b      	strmi	r3, [r1, #0]
 8010c7e:	bf5c      	itt	pl
 8010c80:	600b      	strpl	r3, [r1, #0]
 8010c82:	2002      	movpl	r0, #2
 8010c84:	4770      	bx	lr
 8010c86:	b298      	uxth	r0, r3
 8010c88:	b9a8      	cbnz	r0, 8010cb6 <__lo0bits+0x52>
 8010c8a:	0c1b      	lsrs	r3, r3, #16
 8010c8c:	2010      	movs	r0, #16
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	b90a      	cbnz	r2, 8010c96 <__lo0bits+0x32>
 8010c92:	3008      	adds	r0, #8
 8010c94:	0a1b      	lsrs	r3, r3, #8
 8010c96:	071a      	lsls	r2, r3, #28
 8010c98:	bf04      	itt	eq
 8010c9a:	091b      	lsreq	r3, r3, #4
 8010c9c:	3004      	addeq	r0, #4
 8010c9e:	079a      	lsls	r2, r3, #30
 8010ca0:	bf04      	itt	eq
 8010ca2:	089b      	lsreq	r3, r3, #2
 8010ca4:	3002      	addeq	r0, #2
 8010ca6:	07da      	lsls	r2, r3, #31
 8010ca8:	d403      	bmi.n	8010cb2 <__lo0bits+0x4e>
 8010caa:	085b      	lsrs	r3, r3, #1
 8010cac:	f100 0001 	add.w	r0, r0, #1
 8010cb0:	d005      	beq.n	8010cbe <__lo0bits+0x5a>
 8010cb2:	600b      	str	r3, [r1, #0]
 8010cb4:	4770      	bx	lr
 8010cb6:	4610      	mov	r0, r2
 8010cb8:	e7e9      	b.n	8010c8e <__lo0bits+0x2a>
 8010cba:	2000      	movs	r0, #0
 8010cbc:	4770      	bx	lr
 8010cbe:	2020      	movs	r0, #32
 8010cc0:	4770      	bx	lr
	...

08010cc4 <__i2b>:
 8010cc4:	b510      	push	{r4, lr}
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	2101      	movs	r1, #1
 8010cca:	f7ff ff03 	bl	8010ad4 <_Balloc>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	b928      	cbnz	r0, 8010cde <__i2b+0x1a>
 8010cd2:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <__i2b+0x24>)
 8010cd4:	4805      	ldr	r0, [pc, #20]	; (8010cec <__i2b+0x28>)
 8010cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010cda:	f000 fc1f 	bl	801151c <__assert_func>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	6144      	str	r4, [r0, #20]
 8010ce2:	6103      	str	r3, [r0, #16]
 8010ce4:	bd10      	pop	{r4, pc}
 8010ce6:	bf00      	nop
 8010ce8:	081466d8 	.word	0x081466d8
 8010cec:	081466e9 	.word	0x081466e9

08010cf0 <__multiply>:
 8010cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	4691      	mov	r9, r2
 8010cf6:	690a      	ldr	r2, [r1, #16]
 8010cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	bfb8      	it	lt
 8010d00:	460b      	movlt	r3, r1
 8010d02:	460c      	mov	r4, r1
 8010d04:	bfbc      	itt	lt
 8010d06:	464c      	movlt	r4, r9
 8010d08:	4699      	movlt	r9, r3
 8010d0a:	6927      	ldr	r7, [r4, #16]
 8010d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d10:	68a3      	ldr	r3, [r4, #8]
 8010d12:	6861      	ldr	r1, [r4, #4]
 8010d14:	eb07 060a 	add.w	r6, r7, sl
 8010d18:	42b3      	cmp	r3, r6
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	bfb8      	it	lt
 8010d1e:	3101      	addlt	r1, #1
 8010d20:	f7ff fed8 	bl	8010ad4 <_Balloc>
 8010d24:	b930      	cbnz	r0, 8010d34 <__multiply+0x44>
 8010d26:	4602      	mov	r2, r0
 8010d28:	4b44      	ldr	r3, [pc, #272]	; (8010e3c <__multiply+0x14c>)
 8010d2a:	4845      	ldr	r0, [pc, #276]	; (8010e40 <__multiply+0x150>)
 8010d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8010d30:	f000 fbf4 	bl	801151c <__assert_func>
 8010d34:	f100 0514 	add.w	r5, r0, #20
 8010d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	2200      	movs	r2, #0
 8010d40:	4543      	cmp	r3, r8
 8010d42:	d321      	bcc.n	8010d88 <__multiply+0x98>
 8010d44:	f104 0314 	add.w	r3, r4, #20
 8010d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010d4c:	f109 0314 	add.w	r3, r9, #20
 8010d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010d54:	9202      	str	r2, [sp, #8]
 8010d56:	1b3a      	subs	r2, r7, r4
 8010d58:	3a15      	subs	r2, #21
 8010d5a:	f022 0203 	bic.w	r2, r2, #3
 8010d5e:	3204      	adds	r2, #4
 8010d60:	f104 0115 	add.w	r1, r4, #21
 8010d64:	428f      	cmp	r7, r1
 8010d66:	bf38      	it	cc
 8010d68:	2204      	movcc	r2, #4
 8010d6a:	9201      	str	r2, [sp, #4]
 8010d6c:	9a02      	ldr	r2, [sp, #8]
 8010d6e:	9303      	str	r3, [sp, #12]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d80c      	bhi.n	8010d8e <__multiply+0x9e>
 8010d74:	2e00      	cmp	r6, #0
 8010d76:	dd03      	ble.n	8010d80 <__multiply+0x90>
 8010d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d05a      	beq.n	8010e36 <__multiply+0x146>
 8010d80:	6106      	str	r6, [r0, #16]
 8010d82:	b005      	add	sp, #20
 8010d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d88:	f843 2b04 	str.w	r2, [r3], #4
 8010d8c:	e7d8      	b.n	8010d40 <__multiply+0x50>
 8010d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d92:	f1ba 0f00 	cmp.w	sl, #0
 8010d96:	d024      	beq.n	8010de2 <__multiply+0xf2>
 8010d98:	f104 0e14 	add.w	lr, r4, #20
 8010d9c:	46a9      	mov	r9, r5
 8010d9e:	f04f 0c00 	mov.w	ip, #0
 8010da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010da6:	f8d9 1000 	ldr.w	r1, [r9]
 8010daa:	fa1f fb82 	uxth.w	fp, r2
 8010dae:	b289      	uxth	r1, r1
 8010db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8010db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010db8:	f8d9 2000 	ldr.w	r2, [r9]
 8010dbc:	4461      	add	r1, ip
 8010dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8010dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010dca:	b289      	uxth	r1, r1
 8010dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010dd0:	4577      	cmp	r7, lr
 8010dd2:	f849 1b04 	str.w	r1, [r9], #4
 8010dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010dda:	d8e2      	bhi.n	8010da2 <__multiply+0xb2>
 8010ddc:	9a01      	ldr	r2, [sp, #4]
 8010dde:	f845 c002 	str.w	ip, [r5, r2]
 8010de2:	9a03      	ldr	r2, [sp, #12]
 8010de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010de8:	3304      	adds	r3, #4
 8010dea:	f1b9 0f00 	cmp.w	r9, #0
 8010dee:	d020      	beq.n	8010e32 <__multiply+0x142>
 8010df0:	6829      	ldr	r1, [r5, #0]
 8010df2:	f104 0c14 	add.w	ip, r4, #20
 8010df6:	46ae      	mov	lr, r5
 8010df8:	f04f 0a00 	mov.w	sl, #0
 8010dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8010e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e04:	fb09 220b 	mla	r2, r9, fp, r2
 8010e08:	4492      	add	sl, r2
 8010e0a:	b289      	uxth	r1, r1
 8010e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010e10:	f84e 1b04 	str.w	r1, [lr], #4
 8010e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e18:	f8be 1000 	ldrh.w	r1, [lr]
 8010e1c:	0c12      	lsrs	r2, r2, #16
 8010e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8010e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010e26:	4567      	cmp	r7, ip
 8010e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e2c:	d8e6      	bhi.n	8010dfc <__multiply+0x10c>
 8010e2e:	9a01      	ldr	r2, [sp, #4]
 8010e30:	50a9      	str	r1, [r5, r2]
 8010e32:	3504      	adds	r5, #4
 8010e34:	e79a      	b.n	8010d6c <__multiply+0x7c>
 8010e36:	3e01      	subs	r6, #1
 8010e38:	e79c      	b.n	8010d74 <__multiply+0x84>
 8010e3a:	bf00      	nop
 8010e3c:	081466d8 	.word	0x081466d8
 8010e40:	081466e9 	.word	0x081466e9

08010e44 <__pow5mult>:
 8010e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e48:	4615      	mov	r5, r2
 8010e4a:	f012 0203 	ands.w	r2, r2, #3
 8010e4e:	4606      	mov	r6, r0
 8010e50:	460f      	mov	r7, r1
 8010e52:	d007      	beq.n	8010e64 <__pow5mult+0x20>
 8010e54:	4c25      	ldr	r4, [pc, #148]	; (8010eec <__pow5mult+0xa8>)
 8010e56:	3a01      	subs	r2, #1
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e5e:	f7ff fe9b 	bl	8010b98 <__multadd>
 8010e62:	4607      	mov	r7, r0
 8010e64:	10ad      	asrs	r5, r5, #2
 8010e66:	d03d      	beq.n	8010ee4 <__pow5mult+0xa0>
 8010e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e6a:	b97c      	cbnz	r4, 8010e8c <__pow5mult+0x48>
 8010e6c:	2010      	movs	r0, #16
 8010e6e:	f7fe f979 	bl	800f164 <malloc>
 8010e72:	4602      	mov	r2, r0
 8010e74:	6270      	str	r0, [r6, #36]	; 0x24
 8010e76:	b928      	cbnz	r0, 8010e84 <__pow5mult+0x40>
 8010e78:	4b1d      	ldr	r3, [pc, #116]	; (8010ef0 <__pow5mult+0xac>)
 8010e7a:	481e      	ldr	r0, [pc, #120]	; (8010ef4 <__pow5mult+0xb0>)
 8010e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e80:	f000 fb4c 	bl	801151c <__assert_func>
 8010e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e88:	6004      	str	r4, [r0, #0]
 8010e8a:	60c4      	str	r4, [r0, #12]
 8010e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e94:	b94c      	cbnz	r4, 8010eaa <__pow5mult+0x66>
 8010e96:	f240 2171 	movw	r1, #625	; 0x271
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ff12 	bl	8010cc4 <__i2b>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	6003      	str	r3, [r0, #0]
 8010eaa:	f04f 0900 	mov.w	r9, #0
 8010eae:	07eb      	lsls	r3, r5, #31
 8010eb0:	d50a      	bpl.n	8010ec8 <__pow5mult+0x84>
 8010eb2:	4639      	mov	r1, r7
 8010eb4:	4622      	mov	r2, r4
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff ff1a 	bl	8010cf0 <__multiply>
 8010ebc:	4639      	mov	r1, r7
 8010ebe:	4680      	mov	r8, r0
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7ff fe47 	bl	8010b54 <_Bfree>
 8010ec6:	4647      	mov	r7, r8
 8010ec8:	106d      	asrs	r5, r5, #1
 8010eca:	d00b      	beq.n	8010ee4 <__pow5mult+0xa0>
 8010ecc:	6820      	ldr	r0, [r4, #0]
 8010ece:	b938      	cbnz	r0, 8010ee0 <__pow5mult+0x9c>
 8010ed0:	4622      	mov	r2, r4
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f7ff ff0b 	bl	8010cf0 <__multiply>
 8010eda:	6020      	str	r0, [r4, #0]
 8010edc:	f8c0 9000 	str.w	r9, [r0]
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	e7e4      	b.n	8010eae <__pow5mult+0x6a>
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eea:	bf00      	nop
 8010eec:	08146838 	.word	0x08146838
 8010ef0:	08146666 	.word	0x08146666
 8010ef4:	081466e9 	.word	0x081466e9

08010ef8 <__lshift>:
 8010ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efc:	460c      	mov	r4, r1
 8010efe:	6849      	ldr	r1, [r1, #4]
 8010f00:	6923      	ldr	r3, [r4, #16]
 8010f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	4607      	mov	r7, r0
 8010f0a:	4691      	mov	r9, r2
 8010f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f10:	f108 0601 	add.w	r6, r8, #1
 8010f14:	42b3      	cmp	r3, r6
 8010f16:	db0b      	blt.n	8010f30 <__lshift+0x38>
 8010f18:	4638      	mov	r0, r7
 8010f1a:	f7ff fddb 	bl	8010ad4 <_Balloc>
 8010f1e:	4605      	mov	r5, r0
 8010f20:	b948      	cbnz	r0, 8010f36 <__lshift+0x3e>
 8010f22:	4602      	mov	r2, r0
 8010f24:	4b2a      	ldr	r3, [pc, #168]	; (8010fd0 <__lshift+0xd8>)
 8010f26:	482b      	ldr	r0, [pc, #172]	; (8010fd4 <__lshift+0xdc>)
 8010f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010f2c:	f000 faf6 	bl	801151c <__assert_func>
 8010f30:	3101      	adds	r1, #1
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	e7ee      	b.n	8010f14 <__lshift+0x1c>
 8010f36:	2300      	movs	r3, #0
 8010f38:	f100 0114 	add.w	r1, r0, #20
 8010f3c:	f100 0210 	add.w	r2, r0, #16
 8010f40:	4618      	mov	r0, r3
 8010f42:	4553      	cmp	r3, sl
 8010f44:	db37      	blt.n	8010fb6 <__lshift+0xbe>
 8010f46:	6920      	ldr	r0, [r4, #16]
 8010f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f4c:	f104 0314 	add.w	r3, r4, #20
 8010f50:	f019 091f 	ands.w	r9, r9, #31
 8010f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f5c:	d02f      	beq.n	8010fbe <__lshift+0xc6>
 8010f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8010f62:	468a      	mov	sl, r1
 8010f64:	f04f 0c00 	mov.w	ip, #0
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8010f6e:	ea42 020c 	orr.w	r2, r2, ip
 8010f72:	f84a 2b04 	str.w	r2, [sl], #4
 8010f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7a:	4298      	cmp	r0, r3
 8010f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f80:	d8f2      	bhi.n	8010f68 <__lshift+0x70>
 8010f82:	1b03      	subs	r3, r0, r4
 8010f84:	3b15      	subs	r3, #21
 8010f86:	f023 0303 	bic.w	r3, r3, #3
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	f104 0215 	add.w	r2, r4, #21
 8010f90:	4290      	cmp	r0, r2
 8010f92:	bf38      	it	cc
 8010f94:	2304      	movcc	r3, #4
 8010f96:	f841 c003 	str.w	ip, [r1, r3]
 8010f9a:	f1bc 0f00 	cmp.w	ip, #0
 8010f9e:	d001      	beq.n	8010fa4 <__lshift+0xac>
 8010fa0:	f108 0602 	add.w	r6, r8, #2
 8010fa4:	3e01      	subs	r6, #1
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	612e      	str	r6, [r5, #16]
 8010faa:	4621      	mov	r1, r4
 8010fac:	f7ff fdd2 	bl	8010b54 <_Bfree>
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010fba:	3301      	adds	r3, #1
 8010fbc:	e7c1      	b.n	8010f42 <__lshift+0x4a>
 8010fbe:	3904      	subs	r1, #4
 8010fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010fc8:	4298      	cmp	r0, r3
 8010fca:	d8f9      	bhi.n	8010fc0 <__lshift+0xc8>
 8010fcc:	e7ea      	b.n	8010fa4 <__lshift+0xac>
 8010fce:	bf00      	nop
 8010fd0:	081466d8 	.word	0x081466d8
 8010fd4:	081466e9 	.word	0x081466e9

08010fd8 <__mcmp>:
 8010fd8:	b530      	push	{r4, r5, lr}
 8010fda:	6902      	ldr	r2, [r0, #16]
 8010fdc:	690c      	ldr	r4, [r1, #16]
 8010fde:	1b12      	subs	r2, r2, r4
 8010fe0:	d10e      	bne.n	8011000 <__mcmp+0x28>
 8010fe2:	f100 0314 	add.w	r3, r0, #20
 8010fe6:	3114      	adds	r1, #20
 8010fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010ff8:	42a5      	cmp	r5, r4
 8010ffa:	d003      	beq.n	8011004 <__mcmp+0x2c>
 8010ffc:	d305      	bcc.n	801100a <__mcmp+0x32>
 8010ffe:	2201      	movs	r2, #1
 8011000:	4610      	mov	r0, r2
 8011002:	bd30      	pop	{r4, r5, pc}
 8011004:	4283      	cmp	r3, r0
 8011006:	d3f3      	bcc.n	8010ff0 <__mcmp+0x18>
 8011008:	e7fa      	b.n	8011000 <__mcmp+0x28>
 801100a:	f04f 32ff 	mov.w	r2, #4294967295
 801100e:	e7f7      	b.n	8011000 <__mcmp+0x28>

08011010 <__mdiff>:
 8011010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	460c      	mov	r4, r1
 8011016:	4606      	mov	r6, r0
 8011018:	4611      	mov	r1, r2
 801101a:	4620      	mov	r0, r4
 801101c:	4690      	mov	r8, r2
 801101e:	f7ff ffdb 	bl	8010fd8 <__mcmp>
 8011022:	1e05      	subs	r5, r0, #0
 8011024:	d110      	bne.n	8011048 <__mdiff+0x38>
 8011026:	4629      	mov	r1, r5
 8011028:	4630      	mov	r0, r6
 801102a:	f7ff fd53 	bl	8010ad4 <_Balloc>
 801102e:	b930      	cbnz	r0, 801103e <__mdiff+0x2e>
 8011030:	4b3a      	ldr	r3, [pc, #232]	; (801111c <__mdiff+0x10c>)
 8011032:	4602      	mov	r2, r0
 8011034:	f240 2132 	movw	r1, #562	; 0x232
 8011038:	4839      	ldr	r0, [pc, #228]	; (8011120 <__mdiff+0x110>)
 801103a:	f000 fa6f 	bl	801151c <__assert_func>
 801103e:	2301      	movs	r3, #1
 8011040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011048:	bfa4      	itt	ge
 801104a:	4643      	movge	r3, r8
 801104c:	46a0      	movge	r8, r4
 801104e:	4630      	mov	r0, r6
 8011050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011054:	bfa6      	itte	ge
 8011056:	461c      	movge	r4, r3
 8011058:	2500      	movge	r5, #0
 801105a:	2501      	movlt	r5, #1
 801105c:	f7ff fd3a 	bl	8010ad4 <_Balloc>
 8011060:	b920      	cbnz	r0, 801106c <__mdiff+0x5c>
 8011062:	4b2e      	ldr	r3, [pc, #184]	; (801111c <__mdiff+0x10c>)
 8011064:	4602      	mov	r2, r0
 8011066:	f44f 7110 	mov.w	r1, #576	; 0x240
 801106a:	e7e5      	b.n	8011038 <__mdiff+0x28>
 801106c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011070:	6926      	ldr	r6, [r4, #16]
 8011072:	60c5      	str	r5, [r0, #12]
 8011074:	f104 0914 	add.w	r9, r4, #20
 8011078:	f108 0514 	add.w	r5, r8, #20
 801107c:	f100 0e14 	add.w	lr, r0, #20
 8011080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011088:	f108 0210 	add.w	r2, r8, #16
 801108c:	46f2      	mov	sl, lr
 801108e:	2100      	movs	r1, #0
 8011090:	f859 3b04 	ldr.w	r3, [r9], #4
 8011094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011098:	fa1f f883 	uxth.w	r8, r3
 801109c:	fa11 f18b 	uxtah	r1, r1, fp
 80110a0:	0c1b      	lsrs	r3, r3, #16
 80110a2:	eba1 0808 	sub.w	r8, r1, r8
 80110a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80110aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80110ae:	fa1f f888 	uxth.w	r8, r8
 80110b2:	1419      	asrs	r1, r3, #16
 80110b4:	454e      	cmp	r6, r9
 80110b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80110ba:	f84a 3b04 	str.w	r3, [sl], #4
 80110be:	d8e7      	bhi.n	8011090 <__mdiff+0x80>
 80110c0:	1b33      	subs	r3, r6, r4
 80110c2:	3b15      	subs	r3, #21
 80110c4:	f023 0303 	bic.w	r3, r3, #3
 80110c8:	3304      	adds	r3, #4
 80110ca:	3415      	adds	r4, #21
 80110cc:	42a6      	cmp	r6, r4
 80110ce:	bf38      	it	cc
 80110d0:	2304      	movcc	r3, #4
 80110d2:	441d      	add	r5, r3
 80110d4:	4473      	add	r3, lr
 80110d6:	469e      	mov	lr, r3
 80110d8:	462e      	mov	r6, r5
 80110da:	4566      	cmp	r6, ip
 80110dc:	d30e      	bcc.n	80110fc <__mdiff+0xec>
 80110de:	f10c 0203 	add.w	r2, ip, #3
 80110e2:	1b52      	subs	r2, r2, r5
 80110e4:	f022 0203 	bic.w	r2, r2, #3
 80110e8:	3d03      	subs	r5, #3
 80110ea:	45ac      	cmp	ip, r5
 80110ec:	bf38      	it	cc
 80110ee:	2200      	movcc	r2, #0
 80110f0:	441a      	add	r2, r3
 80110f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80110f6:	b17b      	cbz	r3, 8011118 <__mdiff+0x108>
 80110f8:	6107      	str	r7, [r0, #16]
 80110fa:	e7a3      	b.n	8011044 <__mdiff+0x34>
 80110fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8011100:	fa11 f288 	uxtah	r2, r1, r8
 8011104:	1414      	asrs	r4, r2, #16
 8011106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801110a:	b292      	uxth	r2, r2
 801110c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011110:	f84e 2b04 	str.w	r2, [lr], #4
 8011114:	1421      	asrs	r1, r4, #16
 8011116:	e7e0      	b.n	80110da <__mdiff+0xca>
 8011118:	3f01      	subs	r7, #1
 801111a:	e7ea      	b.n	80110f2 <__mdiff+0xe2>
 801111c:	081466d8 	.word	0x081466d8
 8011120:	081466e9 	.word	0x081466e9

08011124 <__d2b>:
 8011124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011128:	4689      	mov	r9, r1
 801112a:	2101      	movs	r1, #1
 801112c:	ec57 6b10 	vmov	r6, r7, d0
 8011130:	4690      	mov	r8, r2
 8011132:	f7ff fccf 	bl	8010ad4 <_Balloc>
 8011136:	4604      	mov	r4, r0
 8011138:	b930      	cbnz	r0, 8011148 <__d2b+0x24>
 801113a:	4602      	mov	r2, r0
 801113c:	4b25      	ldr	r3, [pc, #148]	; (80111d4 <__d2b+0xb0>)
 801113e:	4826      	ldr	r0, [pc, #152]	; (80111d8 <__d2b+0xb4>)
 8011140:	f240 310a 	movw	r1, #778	; 0x30a
 8011144:	f000 f9ea 	bl	801151c <__assert_func>
 8011148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801114c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011150:	bb35      	cbnz	r5, 80111a0 <__d2b+0x7c>
 8011152:	2e00      	cmp	r6, #0
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	d028      	beq.n	80111aa <__d2b+0x86>
 8011158:	4668      	mov	r0, sp
 801115a:	9600      	str	r6, [sp, #0]
 801115c:	f7ff fd82 	bl	8010c64 <__lo0bits>
 8011160:	9900      	ldr	r1, [sp, #0]
 8011162:	b300      	cbz	r0, 80111a6 <__d2b+0x82>
 8011164:	9a01      	ldr	r2, [sp, #4]
 8011166:	f1c0 0320 	rsb	r3, r0, #32
 801116a:	fa02 f303 	lsl.w	r3, r2, r3
 801116e:	430b      	orrs	r3, r1
 8011170:	40c2      	lsrs	r2, r0
 8011172:	6163      	str	r3, [r4, #20]
 8011174:	9201      	str	r2, [sp, #4]
 8011176:	9b01      	ldr	r3, [sp, #4]
 8011178:	61a3      	str	r3, [r4, #24]
 801117a:	2b00      	cmp	r3, #0
 801117c:	bf14      	ite	ne
 801117e:	2202      	movne	r2, #2
 8011180:	2201      	moveq	r2, #1
 8011182:	6122      	str	r2, [r4, #16]
 8011184:	b1d5      	cbz	r5, 80111bc <__d2b+0x98>
 8011186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801118a:	4405      	add	r5, r0
 801118c:	f8c9 5000 	str.w	r5, [r9]
 8011190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011194:	f8c8 0000 	str.w	r0, [r8]
 8011198:	4620      	mov	r0, r4
 801119a:	b003      	add	sp, #12
 801119c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80111a4:	e7d5      	b.n	8011152 <__d2b+0x2e>
 80111a6:	6161      	str	r1, [r4, #20]
 80111a8:	e7e5      	b.n	8011176 <__d2b+0x52>
 80111aa:	a801      	add	r0, sp, #4
 80111ac:	f7ff fd5a 	bl	8010c64 <__lo0bits>
 80111b0:	9b01      	ldr	r3, [sp, #4]
 80111b2:	6163      	str	r3, [r4, #20]
 80111b4:	2201      	movs	r2, #1
 80111b6:	6122      	str	r2, [r4, #16]
 80111b8:	3020      	adds	r0, #32
 80111ba:	e7e3      	b.n	8011184 <__d2b+0x60>
 80111bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111c4:	f8c9 0000 	str.w	r0, [r9]
 80111c8:	6918      	ldr	r0, [r3, #16]
 80111ca:	f7ff fd2b 	bl	8010c24 <__hi0bits>
 80111ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111d2:	e7df      	b.n	8011194 <__d2b+0x70>
 80111d4:	081466d8 	.word	0x081466d8
 80111d8:	081466e9 	.word	0x081466e9

080111dc <_calloc_r>:
 80111dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111de:	fba1 2402 	umull	r2, r4, r1, r2
 80111e2:	b94c      	cbnz	r4, 80111f8 <_calloc_r+0x1c>
 80111e4:	4611      	mov	r1, r2
 80111e6:	9201      	str	r2, [sp, #4]
 80111e8:	f7fe f846 	bl	800f278 <_malloc_r>
 80111ec:	9a01      	ldr	r2, [sp, #4]
 80111ee:	4605      	mov	r5, r0
 80111f0:	b930      	cbnz	r0, 8011200 <_calloc_r+0x24>
 80111f2:	4628      	mov	r0, r5
 80111f4:	b003      	add	sp, #12
 80111f6:	bd30      	pop	{r4, r5, pc}
 80111f8:	220c      	movs	r2, #12
 80111fa:	6002      	str	r2, [r0, #0]
 80111fc:	2500      	movs	r5, #0
 80111fe:	e7f8      	b.n	80111f2 <_calloc_r+0x16>
 8011200:	4621      	mov	r1, r4
 8011202:	f7fd ffc5 	bl	800f190 <memset>
 8011206:	e7f4      	b.n	80111f2 <_calloc_r+0x16>

08011208 <_realloc_r>:
 8011208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120c:	4680      	mov	r8, r0
 801120e:	4614      	mov	r4, r2
 8011210:	460e      	mov	r6, r1
 8011212:	b921      	cbnz	r1, 801121e <_realloc_r+0x16>
 8011214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011218:	4611      	mov	r1, r2
 801121a:	f7fe b82d 	b.w	800f278 <_malloc_r>
 801121e:	b92a      	cbnz	r2, 801122c <_realloc_r+0x24>
 8011220:	f7fd ffbe 	bl	800f1a0 <_free_r>
 8011224:	4625      	mov	r5, r4
 8011226:	4628      	mov	r0, r5
 8011228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801122c:	f000 f9d5 	bl	80115da <_malloc_usable_size_r>
 8011230:	4284      	cmp	r4, r0
 8011232:	4607      	mov	r7, r0
 8011234:	d802      	bhi.n	801123c <_realloc_r+0x34>
 8011236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801123a:	d812      	bhi.n	8011262 <_realloc_r+0x5a>
 801123c:	4621      	mov	r1, r4
 801123e:	4640      	mov	r0, r8
 8011240:	f7fe f81a 	bl	800f278 <_malloc_r>
 8011244:	4605      	mov	r5, r0
 8011246:	2800      	cmp	r0, #0
 8011248:	d0ed      	beq.n	8011226 <_realloc_r+0x1e>
 801124a:	42bc      	cmp	r4, r7
 801124c:	4622      	mov	r2, r4
 801124e:	4631      	mov	r1, r6
 8011250:	bf28      	it	cs
 8011252:	463a      	movcs	r2, r7
 8011254:	f7fd ff8e 	bl	800f174 <memcpy>
 8011258:	4631      	mov	r1, r6
 801125a:	4640      	mov	r0, r8
 801125c:	f7fd ffa0 	bl	800f1a0 <_free_r>
 8011260:	e7e1      	b.n	8011226 <_realloc_r+0x1e>
 8011262:	4635      	mov	r5, r6
 8011264:	e7df      	b.n	8011226 <_realloc_r+0x1e>

08011266 <__ssputs_r>:
 8011266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801126a:	688e      	ldr	r6, [r1, #8]
 801126c:	429e      	cmp	r6, r3
 801126e:	4682      	mov	sl, r0
 8011270:	460c      	mov	r4, r1
 8011272:	4690      	mov	r8, r2
 8011274:	461f      	mov	r7, r3
 8011276:	d838      	bhi.n	80112ea <__ssputs_r+0x84>
 8011278:	898a      	ldrh	r2, [r1, #12]
 801127a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801127e:	d032      	beq.n	80112e6 <__ssputs_r+0x80>
 8011280:	6825      	ldr	r5, [r4, #0]
 8011282:	6909      	ldr	r1, [r1, #16]
 8011284:	eba5 0901 	sub.w	r9, r5, r1
 8011288:	6965      	ldr	r5, [r4, #20]
 801128a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801128e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011292:	3301      	adds	r3, #1
 8011294:	444b      	add	r3, r9
 8011296:	106d      	asrs	r5, r5, #1
 8011298:	429d      	cmp	r5, r3
 801129a:	bf38      	it	cc
 801129c:	461d      	movcc	r5, r3
 801129e:	0553      	lsls	r3, r2, #21
 80112a0:	d531      	bpl.n	8011306 <__ssputs_r+0xa0>
 80112a2:	4629      	mov	r1, r5
 80112a4:	f7fd ffe8 	bl	800f278 <_malloc_r>
 80112a8:	4606      	mov	r6, r0
 80112aa:	b950      	cbnz	r0, 80112c2 <__ssputs_r+0x5c>
 80112ac:	230c      	movs	r3, #12
 80112ae:	f8ca 3000 	str.w	r3, [sl]
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112b8:	81a3      	strh	r3, [r4, #12]
 80112ba:	f04f 30ff 	mov.w	r0, #4294967295
 80112be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112c2:	6921      	ldr	r1, [r4, #16]
 80112c4:	464a      	mov	r2, r9
 80112c6:	f7fd ff55 	bl	800f174 <memcpy>
 80112ca:	89a3      	ldrh	r3, [r4, #12]
 80112cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112d4:	81a3      	strh	r3, [r4, #12]
 80112d6:	6126      	str	r6, [r4, #16]
 80112d8:	6165      	str	r5, [r4, #20]
 80112da:	444e      	add	r6, r9
 80112dc:	eba5 0509 	sub.w	r5, r5, r9
 80112e0:	6026      	str	r6, [r4, #0]
 80112e2:	60a5      	str	r5, [r4, #8]
 80112e4:	463e      	mov	r6, r7
 80112e6:	42be      	cmp	r6, r7
 80112e8:	d900      	bls.n	80112ec <__ssputs_r+0x86>
 80112ea:	463e      	mov	r6, r7
 80112ec:	6820      	ldr	r0, [r4, #0]
 80112ee:	4632      	mov	r2, r6
 80112f0:	4641      	mov	r1, r8
 80112f2:	f000 f958 	bl	80115a6 <memmove>
 80112f6:	68a3      	ldr	r3, [r4, #8]
 80112f8:	1b9b      	subs	r3, r3, r6
 80112fa:	60a3      	str	r3, [r4, #8]
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	4433      	add	r3, r6
 8011300:	6023      	str	r3, [r4, #0]
 8011302:	2000      	movs	r0, #0
 8011304:	e7db      	b.n	80112be <__ssputs_r+0x58>
 8011306:	462a      	mov	r2, r5
 8011308:	f7ff ff7e 	bl	8011208 <_realloc_r>
 801130c:	4606      	mov	r6, r0
 801130e:	2800      	cmp	r0, #0
 8011310:	d1e1      	bne.n	80112d6 <__ssputs_r+0x70>
 8011312:	6921      	ldr	r1, [r4, #16]
 8011314:	4650      	mov	r0, sl
 8011316:	f7fd ff43 	bl	800f1a0 <_free_r>
 801131a:	e7c7      	b.n	80112ac <__ssputs_r+0x46>

0801131c <_svfiprintf_r>:
 801131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011320:	4698      	mov	r8, r3
 8011322:	898b      	ldrh	r3, [r1, #12]
 8011324:	061b      	lsls	r3, r3, #24
 8011326:	b09d      	sub	sp, #116	; 0x74
 8011328:	4607      	mov	r7, r0
 801132a:	460d      	mov	r5, r1
 801132c:	4614      	mov	r4, r2
 801132e:	d50e      	bpl.n	801134e <_svfiprintf_r+0x32>
 8011330:	690b      	ldr	r3, [r1, #16]
 8011332:	b963      	cbnz	r3, 801134e <_svfiprintf_r+0x32>
 8011334:	2140      	movs	r1, #64	; 0x40
 8011336:	f7fd ff9f 	bl	800f278 <_malloc_r>
 801133a:	6028      	str	r0, [r5, #0]
 801133c:	6128      	str	r0, [r5, #16]
 801133e:	b920      	cbnz	r0, 801134a <_svfiprintf_r+0x2e>
 8011340:	230c      	movs	r3, #12
 8011342:	603b      	str	r3, [r7, #0]
 8011344:	f04f 30ff 	mov.w	r0, #4294967295
 8011348:	e0d1      	b.n	80114ee <_svfiprintf_r+0x1d2>
 801134a:	2340      	movs	r3, #64	; 0x40
 801134c:	616b      	str	r3, [r5, #20]
 801134e:	2300      	movs	r3, #0
 8011350:	9309      	str	r3, [sp, #36]	; 0x24
 8011352:	2320      	movs	r3, #32
 8011354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011358:	f8cd 800c 	str.w	r8, [sp, #12]
 801135c:	2330      	movs	r3, #48	; 0x30
 801135e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011508 <_svfiprintf_r+0x1ec>
 8011362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011366:	f04f 0901 	mov.w	r9, #1
 801136a:	4623      	mov	r3, r4
 801136c:	469a      	mov	sl, r3
 801136e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011372:	b10a      	cbz	r2, 8011378 <_svfiprintf_r+0x5c>
 8011374:	2a25      	cmp	r2, #37	; 0x25
 8011376:	d1f9      	bne.n	801136c <_svfiprintf_r+0x50>
 8011378:	ebba 0b04 	subs.w	fp, sl, r4
 801137c:	d00b      	beq.n	8011396 <_svfiprintf_r+0x7a>
 801137e:	465b      	mov	r3, fp
 8011380:	4622      	mov	r2, r4
 8011382:	4629      	mov	r1, r5
 8011384:	4638      	mov	r0, r7
 8011386:	f7ff ff6e 	bl	8011266 <__ssputs_r>
 801138a:	3001      	adds	r0, #1
 801138c:	f000 80aa 	beq.w	80114e4 <_svfiprintf_r+0x1c8>
 8011390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011392:	445a      	add	r2, fp
 8011394:	9209      	str	r2, [sp, #36]	; 0x24
 8011396:	f89a 3000 	ldrb.w	r3, [sl]
 801139a:	2b00      	cmp	r3, #0
 801139c:	f000 80a2 	beq.w	80114e4 <_svfiprintf_r+0x1c8>
 80113a0:	2300      	movs	r3, #0
 80113a2:	f04f 32ff 	mov.w	r2, #4294967295
 80113a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113aa:	f10a 0a01 	add.w	sl, sl, #1
 80113ae:	9304      	str	r3, [sp, #16]
 80113b0:	9307      	str	r3, [sp, #28]
 80113b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113b6:	931a      	str	r3, [sp, #104]	; 0x68
 80113b8:	4654      	mov	r4, sl
 80113ba:	2205      	movs	r2, #5
 80113bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c0:	4851      	ldr	r0, [pc, #324]	; (8011508 <_svfiprintf_r+0x1ec>)
 80113c2:	f7ee ff25 	bl	8000210 <memchr>
 80113c6:	9a04      	ldr	r2, [sp, #16]
 80113c8:	b9d8      	cbnz	r0, 8011402 <_svfiprintf_r+0xe6>
 80113ca:	06d0      	lsls	r0, r2, #27
 80113cc:	bf44      	itt	mi
 80113ce:	2320      	movmi	r3, #32
 80113d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113d4:	0711      	lsls	r1, r2, #28
 80113d6:	bf44      	itt	mi
 80113d8:	232b      	movmi	r3, #43	; 0x2b
 80113da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113de:	f89a 3000 	ldrb.w	r3, [sl]
 80113e2:	2b2a      	cmp	r3, #42	; 0x2a
 80113e4:	d015      	beq.n	8011412 <_svfiprintf_r+0xf6>
 80113e6:	9a07      	ldr	r2, [sp, #28]
 80113e8:	4654      	mov	r4, sl
 80113ea:	2000      	movs	r0, #0
 80113ec:	f04f 0c0a 	mov.w	ip, #10
 80113f0:	4621      	mov	r1, r4
 80113f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113f6:	3b30      	subs	r3, #48	; 0x30
 80113f8:	2b09      	cmp	r3, #9
 80113fa:	d94e      	bls.n	801149a <_svfiprintf_r+0x17e>
 80113fc:	b1b0      	cbz	r0, 801142c <_svfiprintf_r+0x110>
 80113fe:	9207      	str	r2, [sp, #28]
 8011400:	e014      	b.n	801142c <_svfiprintf_r+0x110>
 8011402:	eba0 0308 	sub.w	r3, r0, r8
 8011406:	fa09 f303 	lsl.w	r3, r9, r3
 801140a:	4313      	orrs	r3, r2
 801140c:	9304      	str	r3, [sp, #16]
 801140e:	46a2      	mov	sl, r4
 8011410:	e7d2      	b.n	80113b8 <_svfiprintf_r+0x9c>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	1d19      	adds	r1, r3, #4
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	9103      	str	r1, [sp, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	bfbb      	ittet	lt
 801141e:	425b      	neglt	r3, r3
 8011420:	f042 0202 	orrlt.w	r2, r2, #2
 8011424:	9307      	strge	r3, [sp, #28]
 8011426:	9307      	strlt	r3, [sp, #28]
 8011428:	bfb8      	it	lt
 801142a:	9204      	strlt	r2, [sp, #16]
 801142c:	7823      	ldrb	r3, [r4, #0]
 801142e:	2b2e      	cmp	r3, #46	; 0x2e
 8011430:	d10c      	bne.n	801144c <_svfiprintf_r+0x130>
 8011432:	7863      	ldrb	r3, [r4, #1]
 8011434:	2b2a      	cmp	r3, #42	; 0x2a
 8011436:	d135      	bne.n	80114a4 <_svfiprintf_r+0x188>
 8011438:	9b03      	ldr	r3, [sp, #12]
 801143a:	1d1a      	adds	r2, r3, #4
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	9203      	str	r2, [sp, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	bfb8      	it	lt
 8011444:	f04f 33ff 	movlt.w	r3, #4294967295
 8011448:	3402      	adds	r4, #2
 801144a:	9305      	str	r3, [sp, #20]
 801144c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011518 <_svfiprintf_r+0x1fc>
 8011450:	7821      	ldrb	r1, [r4, #0]
 8011452:	2203      	movs	r2, #3
 8011454:	4650      	mov	r0, sl
 8011456:	f7ee fedb 	bl	8000210 <memchr>
 801145a:	b140      	cbz	r0, 801146e <_svfiprintf_r+0x152>
 801145c:	2340      	movs	r3, #64	; 0x40
 801145e:	eba0 000a 	sub.w	r0, r0, sl
 8011462:	fa03 f000 	lsl.w	r0, r3, r0
 8011466:	9b04      	ldr	r3, [sp, #16]
 8011468:	4303      	orrs	r3, r0
 801146a:	3401      	adds	r4, #1
 801146c:	9304      	str	r3, [sp, #16]
 801146e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011472:	4826      	ldr	r0, [pc, #152]	; (801150c <_svfiprintf_r+0x1f0>)
 8011474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011478:	2206      	movs	r2, #6
 801147a:	f7ee fec9 	bl	8000210 <memchr>
 801147e:	2800      	cmp	r0, #0
 8011480:	d038      	beq.n	80114f4 <_svfiprintf_r+0x1d8>
 8011482:	4b23      	ldr	r3, [pc, #140]	; (8011510 <_svfiprintf_r+0x1f4>)
 8011484:	bb1b      	cbnz	r3, 80114ce <_svfiprintf_r+0x1b2>
 8011486:	9b03      	ldr	r3, [sp, #12]
 8011488:	3307      	adds	r3, #7
 801148a:	f023 0307 	bic.w	r3, r3, #7
 801148e:	3308      	adds	r3, #8
 8011490:	9303      	str	r3, [sp, #12]
 8011492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011494:	4433      	add	r3, r6
 8011496:	9309      	str	r3, [sp, #36]	; 0x24
 8011498:	e767      	b.n	801136a <_svfiprintf_r+0x4e>
 801149a:	fb0c 3202 	mla	r2, ip, r2, r3
 801149e:	460c      	mov	r4, r1
 80114a0:	2001      	movs	r0, #1
 80114a2:	e7a5      	b.n	80113f0 <_svfiprintf_r+0xd4>
 80114a4:	2300      	movs	r3, #0
 80114a6:	3401      	adds	r4, #1
 80114a8:	9305      	str	r3, [sp, #20]
 80114aa:	4619      	mov	r1, r3
 80114ac:	f04f 0c0a 	mov.w	ip, #10
 80114b0:	4620      	mov	r0, r4
 80114b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114b6:	3a30      	subs	r2, #48	; 0x30
 80114b8:	2a09      	cmp	r2, #9
 80114ba:	d903      	bls.n	80114c4 <_svfiprintf_r+0x1a8>
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d0c5      	beq.n	801144c <_svfiprintf_r+0x130>
 80114c0:	9105      	str	r1, [sp, #20]
 80114c2:	e7c3      	b.n	801144c <_svfiprintf_r+0x130>
 80114c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80114c8:	4604      	mov	r4, r0
 80114ca:	2301      	movs	r3, #1
 80114cc:	e7f0      	b.n	80114b0 <_svfiprintf_r+0x194>
 80114ce:	ab03      	add	r3, sp, #12
 80114d0:	9300      	str	r3, [sp, #0]
 80114d2:	462a      	mov	r2, r5
 80114d4:	4b0f      	ldr	r3, [pc, #60]	; (8011514 <_svfiprintf_r+0x1f8>)
 80114d6:	a904      	add	r1, sp, #16
 80114d8:	4638      	mov	r0, r7
 80114da:	f7fd ffe1 	bl	800f4a0 <_printf_float>
 80114de:	1c42      	adds	r2, r0, #1
 80114e0:	4606      	mov	r6, r0
 80114e2:	d1d6      	bne.n	8011492 <_svfiprintf_r+0x176>
 80114e4:	89ab      	ldrh	r3, [r5, #12]
 80114e6:	065b      	lsls	r3, r3, #25
 80114e8:	f53f af2c 	bmi.w	8011344 <_svfiprintf_r+0x28>
 80114ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114ee:	b01d      	add	sp, #116	; 0x74
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	ab03      	add	r3, sp, #12
 80114f6:	9300      	str	r3, [sp, #0]
 80114f8:	462a      	mov	r2, r5
 80114fa:	4b06      	ldr	r3, [pc, #24]	; (8011514 <_svfiprintf_r+0x1f8>)
 80114fc:	a904      	add	r1, sp, #16
 80114fe:	4638      	mov	r0, r7
 8011500:	f7fe fa72 	bl	800f9e8 <_printf_i>
 8011504:	e7eb      	b.n	80114de <_svfiprintf_r+0x1c2>
 8011506:	bf00      	nop
 8011508:	08146844 	.word	0x08146844
 801150c:	0814684e 	.word	0x0814684e
 8011510:	0800f4a1 	.word	0x0800f4a1
 8011514:	08011267 	.word	0x08011267
 8011518:	0814684a 	.word	0x0814684a

0801151c <__assert_func>:
 801151c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801151e:	4614      	mov	r4, r2
 8011520:	461a      	mov	r2, r3
 8011522:	4b09      	ldr	r3, [pc, #36]	; (8011548 <__assert_func+0x2c>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4605      	mov	r5, r0
 8011528:	68d8      	ldr	r0, [r3, #12]
 801152a:	b14c      	cbz	r4, 8011540 <__assert_func+0x24>
 801152c:	4b07      	ldr	r3, [pc, #28]	; (801154c <__assert_func+0x30>)
 801152e:	9100      	str	r1, [sp, #0]
 8011530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011534:	4906      	ldr	r1, [pc, #24]	; (8011550 <__assert_func+0x34>)
 8011536:	462b      	mov	r3, r5
 8011538:	f000 f80e 	bl	8011558 <fiprintf>
 801153c:	f000 fa7c 	bl	8011a38 <abort>
 8011540:	4b04      	ldr	r3, [pc, #16]	; (8011554 <__assert_func+0x38>)
 8011542:	461c      	mov	r4, r3
 8011544:	e7f3      	b.n	801152e <__assert_func+0x12>
 8011546:	bf00      	nop
 8011548:	20000bd0 	.word	0x20000bd0
 801154c:	08146855 	.word	0x08146855
 8011550:	08146862 	.word	0x08146862
 8011554:	08146890 	.word	0x08146890

08011558 <fiprintf>:
 8011558:	b40e      	push	{r1, r2, r3}
 801155a:	b503      	push	{r0, r1, lr}
 801155c:	4601      	mov	r1, r0
 801155e:	ab03      	add	r3, sp, #12
 8011560:	4805      	ldr	r0, [pc, #20]	; (8011578 <fiprintf+0x20>)
 8011562:	f853 2b04 	ldr.w	r2, [r3], #4
 8011566:	6800      	ldr	r0, [r0, #0]
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	f000 f867 	bl	801163c <_vfiprintf_r>
 801156e:	b002      	add	sp, #8
 8011570:	f85d eb04 	ldr.w	lr, [sp], #4
 8011574:	b003      	add	sp, #12
 8011576:	4770      	bx	lr
 8011578:	20000bd0 	.word	0x20000bd0

0801157c <__retarget_lock_init_recursive>:
 801157c:	4770      	bx	lr

0801157e <__retarget_lock_acquire_recursive>:
 801157e:	4770      	bx	lr

08011580 <__retarget_lock_release_recursive>:
 8011580:	4770      	bx	lr

08011582 <__ascii_mbtowc>:
 8011582:	b082      	sub	sp, #8
 8011584:	b901      	cbnz	r1, 8011588 <__ascii_mbtowc+0x6>
 8011586:	a901      	add	r1, sp, #4
 8011588:	b142      	cbz	r2, 801159c <__ascii_mbtowc+0x1a>
 801158a:	b14b      	cbz	r3, 80115a0 <__ascii_mbtowc+0x1e>
 801158c:	7813      	ldrb	r3, [r2, #0]
 801158e:	600b      	str	r3, [r1, #0]
 8011590:	7812      	ldrb	r2, [r2, #0]
 8011592:	1e10      	subs	r0, r2, #0
 8011594:	bf18      	it	ne
 8011596:	2001      	movne	r0, #1
 8011598:	b002      	add	sp, #8
 801159a:	4770      	bx	lr
 801159c:	4610      	mov	r0, r2
 801159e:	e7fb      	b.n	8011598 <__ascii_mbtowc+0x16>
 80115a0:	f06f 0001 	mvn.w	r0, #1
 80115a4:	e7f8      	b.n	8011598 <__ascii_mbtowc+0x16>

080115a6 <memmove>:
 80115a6:	4288      	cmp	r0, r1
 80115a8:	b510      	push	{r4, lr}
 80115aa:	eb01 0402 	add.w	r4, r1, r2
 80115ae:	d902      	bls.n	80115b6 <memmove+0x10>
 80115b0:	4284      	cmp	r4, r0
 80115b2:	4623      	mov	r3, r4
 80115b4:	d807      	bhi.n	80115c6 <memmove+0x20>
 80115b6:	1e43      	subs	r3, r0, #1
 80115b8:	42a1      	cmp	r1, r4
 80115ba:	d008      	beq.n	80115ce <memmove+0x28>
 80115bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115c4:	e7f8      	b.n	80115b8 <memmove+0x12>
 80115c6:	4402      	add	r2, r0
 80115c8:	4601      	mov	r1, r0
 80115ca:	428a      	cmp	r2, r1
 80115cc:	d100      	bne.n	80115d0 <memmove+0x2a>
 80115ce:	bd10      	pop	{r4, pc}
 80115d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115d8:	e7f7      	b.n	80115ca <memmove+0x24>

080115da <_malloc_usable_size_r>:
 80115da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115de:	1f18      	subs	r0, r3, #4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfbc      	itt	lt
 80115e4:	580b      	ldrlt	r3, [r1, r0]
 80115e6:	18c0      	addlt	r0, r0, r3
 80115e8:	4770      	bx	lr

080115ea <__sfputc_r>:
 80115ea:	6893      	ldr	r3, [r2, #8]
 80115ec:	3b01      	subs	r3, #1
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	b410      	push	{r4}
 80115f2:	6093      	str	r3, [r2, #8]
 80115f4:	da08      	bge.n	8011608 <__sfputc_r+0x1e>
 80115f6:	6994      	ldr	r4, [r2, #24]
 80115f8:	42a3      	cmp	r3, r4
 80115fa:	db01      	blt.n	8011600 <__sfputc_r+0x16>
 80115fc:	290a      	cmp	r1, #10
 80115fe:	d103      	bne.n	8011608 <__sfputc_r+0x1e>
 8011600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011604:	f000 b94a 	b.w	801189c <__swbuf_r>
 8011608:	6813      	ldr	r3, [r2, #0]
 801160a:	1c58      	adds	r0, r3, #1
 801160c:	6010      	str	r0, [r2, #0]
 801160e:	7019      	strb	r1, [r3, #0]
 8011610:	4608      	mov	r0, r1
 8011612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011616:	4770      	bx	lr

08011618 <__sfputs_r>:
 8011618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161a:	4606      	mov	r6, r0
 801161c:	460f      	mov	r7, r1
 801161e:	4614      	mov	r4, r2
 8011620:	18d5      	adds	r5, r2, r3
 8011622:	42ac      	cmp	r4, r5
 8011624:	d101      	bne.n	801162a <__sfputs_r+0x12>
 8011626:	2000      	movs	r0, #0
 8011628:	e007      	b.n	801163a <__sfputs_r+0x22>
 801162a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162e:	463a      	mov	r2, r7
 8011630:	4630      	mov	r0, r6
 8011632:	f7ff ffda 	bl	80115ea <__sfputc_r>
 8011636:	1c43      	adds	r3, r0, #1
 8011638:	d1f3      	bne.n	8011622 <__sfputs_r+0xa>
 801163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801163c <_vfiprintf_r>:
 801163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	460d      	mov	r5, r1
 8011642:	b09d      	sub	sp, #116	; 0x74
 8011644:	4614      	mov	r4, r2
 8011646:	4698      	mov	r8, r3
 8011648:	4606      	mov	r6, r0
 801164a:	b118      	cbz	r0, 8011654 <_vfiprintf_r+0x18>
 801164c:	6983      	ldr	r3, [r0, #24]
 801164e:	b90b      	cbnz	r3, 8011654 <_vfiprintf_r+0x18>
 8011650:	f000 fb14 	bl	8011c7c <__sinit>
 8011654:	4b89      	ldr	r3, [pc, #548]	; (801187c <_vfiprintf_r+0x240>)
 8011656:	429d      	cmp	r5, r3
 8011658:	d11b      	bne.n	8011692 <_vfiprintf_r+0x56>
 801165a:	6875      	ldr	r5, [r6, #4]
 801165c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801165e:	07d9      	lsls	r1, r3, #31
 8011660:	d405      	bmi.n	801166e <_vfiprintf_r+0x32>
 8011662:	89ab      	ldrh	r3, [r5, #12]
 8011664:	059a      	lsls	r2, r3, #22
 8011666:	d402      	bmi.n	801166e <_vfiprintf_r+0x32>
 8011668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801166a:	f7ff ff88 	bl	801157e <__retarget_lock_acquire_recursive>
 801166e:	89ab      	ldrh	r3, [r5, #12]
 8011670:	071b      	lsls	r3, r3, #28
 8011672:	d501      	bpl.n	8011678 <_vfiprintf_r+0x3c>
 8011674:	692b      	ldr	r3, [r5, #16]
 8011676:	b9eb      	cbnz	r3, 80116b4 <_vfiprintf_r+0x78>
 8011678:	4629      	mov	r1, r5
 801167a:	4630      	mov	r0, r6
 801167c:	f000 f96e 	bl	801195c <__swsetup_r>
 8011680:	b1c0      	cbz	r0, 80116b4 <_vfiprintf_r+0x78>
 8011682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011684:	07dc      	lsls	r4, r3, #31
 8011686:	d50e      	bpl.n	80116a6 <_vfiprintf_r+0x6a>
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	b01d      	add	sp, #116	; 0x74
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	4b7b      	ldr	r3, [pc, #492]	; (8011880 <_vfiprintf_r+0x244>)
 8011694:	429d      	cmp	r5, r3
 8011696:	d101      	bne.n	801169c <_vfiprintf_r+0x60>
 8011698:	68b5      	ldr	r5, [r6, #8]
 801169a:	e7df      	b.n	801165c <_vfiprintf_r+0x20>
 801169c:	4b79      	ldr	r3, [pc, #484]	; (8011884 <_vfiprintf_r+0x248>)
 801169e:	429d      	cmp	r5, r3
 80116a0:	bf08      	it	eq
 80116a2:	68f5      	ldreq	r5, [r6, #12]
 80116a4:	e7da      	b.n	801165c <_vfiprintf_r+0x20>
 80116a6:	89ab      	ldrh	r3, [r5, #12]
 80116a8:	0598      	lsls	r0, r3, #22
 80116aa:	d4ed      	bmi.n	8011688 <_vfiprintf_r+0x4c>
 80116ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116ae:	f7ff ff67 	bl	8011580 <__retarget_lock_release_recursive>
 80116b2:	e7e9      	b.n	8011688 <_vfiprintf_r+0x4c>
 80116b4:	2300      	movs	r3, #0
 80116b6:	9309      	str	r3, [sp, #36]	; 0x24
 80116b8:	2320      	movs	r3, #32
 80116ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116be:	f8cd 800c 	str.w	r8, [sp, #12]
 80116c2:	2330      	movs	r3, #48	; 0x30
 80116c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011888 <_vfiprintf_r+0x24c>
 80116c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116cc:	f04f 0901 	mov.w	r9, #1
 80116d0:	4623      	mov	r3, r4
 80116d2:	469a      	mov	sl, r3
 80116d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116d8:	b10a      	cbz	r2, 80116de <_vfiprintf_r+0xa2>
 80116da:	2a25      	cmp	r2, #37	; 0x25
 80116dc:	d1f9      	bne.n	80116d2 <_vfiprintf_r+0x96>
 80116de:	ebba 0b04 	subs.w	fp, sl, r4
 80116e2:	d00b      	beq.n	80116fc <_vfiprintf_r+0xc0>
 80116e4:	465b      	mov	r3, fp
 80116e6:	4622      	mov	r2, r4
 80116e8:	4629      	mov	r1, r5
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7ff ff94 	bl	8011618 <__sfputs_r>
 80116f0:	3001      	adds	r0, #1
 80116f2:	f000 80aa 	beq.w	801184a <_vfiprintf_r+0x20e>
 80116f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116f8:	445a      	add	r2, fp
 80116fa:	9209      	str	r2, [sp, #36]	; 0x24
 80116fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 80a2 	beq.w	801184a <_vfiprintf_r+0x20e>
 8011706:	2300      	movs	r3, #0
 8011708:	f04f 32ff 	mov.w	r2, #4294967295
 801170c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011710:	f10a 0a01 	add.w	sl, sl, #1
 8011714:	9304      	str	r3, [sp, #16]
 8011716:	9307      	str	r3, [sp, #28]
 8011718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801171c:	931a      	str	r3, [sp, #104]	; 0x68
 801171e:	4654      	mov	r4, sl
 8011720:	2205      	movs	r2, #5
 8011722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011726:	4858      	ldr	r0, [pc, #352]	; (8011888 <_vfiprintf_r+0x24c>)
 8011728:	f7ee fd72 	bl	8000210 <memchr>
 801172c:	9a04      	ldr	r2, [sp, #16]
 801172e:	b9d8      	cbnz	r0, 8011768 <_vfiprintf_r+0x12c>
 8011730:	06d1      	lsls	r1, r2, #27
 8011732:	bf44      	itt	mi
 8011734:	2320      	movmi	r3, #32
 8011736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801173a:	0713      	lsls	r3, r2, #28
 801173c:	bf44      	itt	mi
 801173e:	232b      	movmi	r3, #43	; 0x2b
 8011740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011744:	f89a 3000 	ldrb.w	r3, [sl]
 8011748:	2b2a      	cmp	r3, #42	; 0x2a
 801174a:	d015      	beq.n	8011778 <_vfiprintf_r+0x13c>
 801174c:	9a07      	ldr	r2, [sp, #28]
 801174e:	4654      	mov	r4, sl
 8011750:	2000      	movs	r0, #0
 8011752:	f04f 0c0a 	mov.w	ip, #10
 8011756:	4621      	mov	r1, r4
 8011758:	f811 3b01 	ldrb.w	r3, [r1], #1
 801175c:	3b30      	subs	r3, #48	; 0x30
 801175e:	2b09      	cmp	r3, #9
 8011760:	d94e      	bls.n	8011800 <_vfiprintf_r+0x1c4>
 8011762:	b1b0      	cbz	r0, 8011792 <_vfiprintf_r+0x156>
 8011764:	9207      	str	r2, [sp, #28]
 8011766:	e014      	b.n	8011792 <_vfiprintf_r+0x156>
 8011768:	eba0 0308 	sub.w	r3, r0, r8
 801176c:	fa09 f303 	lsl.w	r3, r9, r3
 8011770:	4313      	orrs	r3, r2
 8011772:	9304      	str	r3, [sp, #16]
 8011774:	46a2      	mov	sl, r4
 8011776:	e7d2      	b.n	801171e <_vfiprintf_r+0xe2>
 8011778:	9b03      	ldr	r3, [sp, #12]
 801177a:	1d19      	adds	r1, r3, #4
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	9103      	str	r1, [sp, #12]
 8011780:	2b00      	cmp	r3, #0
 8011782:	bfbb      	ittet	lt
 8011784:	425b      	neglt	r3, r3
 8011786:	f042 0202 	orrlt.w	r2, r2, #2
 801178a:	9307      	strge	r3, [sp, #28]
 801178c:	9307      	strlt	r3, [sp, #28]
 801178e:	bfb8      	it	lt
 8011790:	9204      	strlt	r2, [sp, #16]
 8011792:	7823      	ldrb	r3, [r4, #0]
 8011794:	2b2e      	cmp	r3, #46	; 0x2e
 8011796:	d10c      	bne.n	80117b2 <_vfiprintf_r+0x176>
 8011798:	7863      	ldrb	r3, [r4, #1]
 801179a:	2b2a      	cmp	r3, #42	; 0x2a
 801179c:	d135      	bne.n	801180a <_vfiprintf_r+0x1ce>
 801179e:	9b03      	ldr	r3, [sp, #12]
 80117a0:	1d1a      	adds	r2, r3, #4
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	9203      	str	r2, [sp, #12]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	bfb8      	it	lt
 80117aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80117ae:	3402      	adds	r4, #2
 80117b0:	9305      	str	r3, [sp, #20]
 80117b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011898 <_vfiprintf_r+0x25c>
 80117b6:	7821      	ldrb	r1, [r4, #0]
 80117b8:	2203      	movs	r2, #3
 80117ba:	4650      	mov	r0, sl
 80117bc:	f7ee fd28 	bl	8000210 <memchr>
 80117c0:	b140      	cbz	r0, 80117d4 <_vfiprintf_r+0x198>
 80117c2:	2340      	movs	r3, #64	; 0x40
 80117c4:	eba0 000a 	sub.w	r0, r0, sl
 80117c8:	fa03 f000 	lsl.w	r0, r3, r0
 80117cc:	9b04      	ldr	r3, [sp, #16]
 80117ce:	4303      	orrs	r3, r0
 80117d0:	3401      	adds	r4, #1
 80117d2:	9304      	str	r3, [sp, #16]
 80117d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117d8:	482c      	ldr	r0, [pc, #176]	; (801188c <_vfiprintf_r+0x250>)
 80117da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117de:	2206      	movs	r2, #6
 80117e0:	f7ee fd16 	bl	8000210 <memchr>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d03f      	beq.n	8011868 <_vfiprintf_r+0x22c>
 80117e8:	4b29      	ldr	r3, [pc, #164]	; (8011890 <_vfiprintf_r+0x254>)
 80117ea:	bb1b      	cbnz	r3, 8011834 <_vfiprintf_r+0x1f8>
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	3307      	adds	r3, #7
 80117f0:	f023 0307 	bic.w	r3, r3, #7
 80117f4:	3308      	adds	r3, #8
 80117f6:	9303      	str	r3, [sp, #12]
 80117f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117fa:	443b      	add	r3, r7
 80117fc:	9309      	str	r3, [sp, #36]	; 0x24
 80117fe:	e767      	b.n	80116d0 <_vfiprintf_r+0x94>
 8011800:	fb0c 3202 	mla	r2, ip, r2, r3
 8011804:	460c      	mov	r4, r1
 8011806:	2001      	movs	r0, #1
 8011808:	e7a5      	b.n	8011756 <_vfiprintf_r+0x11a>
 801180a:	2300      	movs	r3, #0
 801180c:	3401      	adds	r4, #1
 801180e:	9305      	str	r3, [sp, #20]
 8011810:	4619      	mov	r1, r3
 8011812:	f04f 0c0a 	mov.w	ip, #10
 8011816:	4620      	mov	r0, r4
 8011818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801181c:	3a30      	subs	r2, #48	; 0x30
 801181e:	2a09      	cmp	r2, #9
 8011820:	d903      	bls.n	801182a <_vfiprintf_r+0x1ee>
 8011822:	2b00      	cmp	r3, #0
 8011824:	d0c5      	beq.n	80117b2 <_vfiprintf_r+0x176>
 8011826:	9105      	str	r1, [sp, #20]
 8011828:	e7c3      	b.n	80117b2 <_vfiprintf_r+0x176>
 801182a:	fb0c 2101 	mla	r1, ip, r1, r2
 801182e:	4604      	mov	r4, r0
 8011830:	2301      	movs	r3, #1
 8011832:	e7f0      	b.n	8011816 <_vfiprintf_r+0x1da>
 8011834:	ab03      	add	r3, sp, #12
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	462a      	mov	r2, r5
 801183a:	4b16      	ldr	r3, [pc, #88]	; (8011894 <_vfiprintf_r+0x258>)
 801183c:	a904      	add	r1, sp, #16
 801183e:	4630      	mov	r0, r6
 8011840:	f7fd fe2e 	bl	800f4a0 <_printf_float>
 8011844:	4607      	mov	r7, r0
 8011846:	1c78      	adds	r0, r7, #1
 8011848:	d1d6      	bne.n	80117f8 <_vfiprintf_r+0x1bc>
 801184a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801184c:	07d9      	lsls	r1, r3, #31
 801184e:	d405      	bmi.n	801185c <_vfiprintf_r+0x220>
 8011850:	89ab      	ldrh	r3, [r5, #12]
 8011852:	059a      	lsls	r2, r3, #22
 8011854:	d402      	bmi.n	801185c <_vfiprintf_r+0x220>
 8011856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011858:	f7ff fe92 	bl	8011580 <__retarget_lock_release_recursive>
 801185c:	89ab      	ldrh	r3, [r5, #12]
 801185e:	065b      	lsls	r3, r3, #25
 8011860:	f53f af12 	bmi.w	8011688 <_vfiprintf_r+0x4c>
 8011864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011866:	e711      	b.n	801168c <_vfiprintf_r+0x50>
 8011868:	ab03      	add	r3, sp, #12
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	462a      	mov	r2, r5
 801186e:	4b09      	ldr	r3, [pc, #36]	; (8011894 <_vfiprintf_r+0x258>)
 8011870:	a904      	add	r1, sp, #16
 8011872:	4630      	mov	r0, r6
 8011874:	f7fe f8b8 	bl	800f9e8 <_printf_i>
 8011878:	e7e4      	b.n	8011844 <_vfiprintf_r+0x208>
 801187a:	bf00      	nop
 801187c:	081468bc 	.word	0x081468bc
 8011880:	081468dc 	.word	0x081468dc
 8011884:	0814689c 	.word	0x0814689c
 8011888:	08146844 	.word	0x08146844
 801188c:	0814684e 	.word	0x0814684e
 8011890:	0800f4a1 	.word	0x0800f4a1
 8011894:	08011619 	.word	0x08011619
 8011898:	0814684a 	.word	0x0814684a

0801189c <__swbuf_r>:
 801189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189e:	460e      	mov	r6, r1
 80118a0:	4614      	mov	r4, r2
 80118a2:	4605      	mov	r5, r0
 80118a4:	b118      	cbz	r0, 80118ae <__swbuf_r+0x12>
 80118a6:	6983      	ldr	r3, [r0, #24]
 80118a8:	b90b      	cbnz	r3, 80118ae <__swbuf_r+0x12>
 80118aa:	f000 f9e7 	bl	8011c7c <__sinit>
 80118ae:	4b21      	ldr	r3, [pc, #132]	; (8011934 <__swbuf_r+0x98>)
 80118b0:	429c      	cmp	r4, r3
 80118b2:	d12b      	bne.n	801190c <__swbuf_r+0x70>
 80118b4:	686c      	ldr	r4, [r5, #4]
 80118b6:	69a3      	ldr	r3, [r4, #24]
 80118b8:	60a3      	str	r3, [r4, #8]
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	071a      	lsls	r2, r3, #28
 80118be:	d52f      	bpl.n	8011920 <__swbuf_r+0x84>
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	b36b      	cbz	r3, 8011920 <__swbuf_r+0x84>
 80118c4:	6923      	ldr	r3, [r4, #16]
 80118c6:	6820      	ldr	r0, [r4, #0]
 80118c8:	1ac0      	subs	r0, r0, r3
 80118ca:	6963      	ldr	r3, [r4, #20]
 80118cc:	b2f6      	uxtb	r6, r6
 80118ce:	4283      	cmp	r3, r0
 80118d0:	4637      	mov	r7, r6
 80118d2:	dc04      	bgt.n	80118de <__swbuf_r+0x42>
 80118d4:	4621      	mov	r1, r4
 80118d6:	4628      	mov	r0, r5
 80118d8:	f000 f93c 	bl	8011b54 <_fflush_r>
 80118dc:	bb30      	cbnz	r0, 801192c <__swbuf_r+0x90>
 80118de:	68a3      	ldr	r3, [r4, #8]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	60a3      	str	r3, [r4, #8]
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	6022      	str	r2, [r4, #0]
 80118ea:	701e      	strb	r6, [r3, #0]
 80118ec:	6963      	ldr	r3, [r4, #20]
 80118ee:	3001      	adds	r0, #1
 80118f0:	4283      	cmp	r3, r0
 80118f2:	d004      	beq.n	80118fe <__swbuf_r+0x62>
 80118f4:	89a3      	ldrh	r3, [r4, #12]
 80118f6:	07db      	lsls	r3, r3, #31
 80118f8:	d506      	bpl.n	8011908 <__swbuf_r+0x6c>
 80118fa:	2e0a      	cmp	r6, #10
 80118fc:	d104      	bne.n	8011908 <__swbuf_r+0x6c>
 80118fe:	4621      	mov	r1, r4
 8011900:	4628      	mov	r0, r5
 8011902:	f000 f927 	bl	8011b54 <_fflush_r>
 8011906:	b988      	cbnz	r0, 801192c <__swbuf_r+0x90>
 8011908:	4638      	mov	r0, r7
 801190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801190c:	4b0a      	ldr	r3, [pc, #40]	; (8011938 <__swbuf_r+0x9c>)
 801190e:	429c      	cmp	r4, r3
 8011910:	d101      	bne.n	8011916 <__swbuf_r+0x7a>
 8011912:	68ac      	ldr	r4, [r5, #8]
 8011914:	e7cf      	b.n	80118b6 <__swbuf_r+0x1a>
 8011916:	4b09      	ldr	r3, [pc, #36]	; (801193c <__swbuf_r+0xa0>)
 8011918:	429c      	cmp	r4, r3
 801191a:	bf08      	it	eq
 801191c:	68ec      	ldreq	r4, [r5, #12]
 801191e:	e7ca      	b.n	80118b6 <__swbuf_r+0x1a>
 8011920:	4621      	mov	r1, r4
 8011922:	4628      	mov	r0, r5
 8011924:	f000 f81a 	bl	801195c <__swsetup_r>
 8011928:	2800      	cmp	r0, #0
 801192a:	d0cb      	beq.n	80118c4 <__swbuf_r+0x28>
 801192c:	f04f 37ff 	mov.w	r7, #4294967295
 8011930:	e7ea      	b.n	8011908 <__swbuf_r+0x6c>
 8011932:	bf00      	nop
 8011934:	081468bc 	.word	0x081468bc
 8011938:	081468dc 	.word	0x081468dc
 801193c:	0814689c 	.word	0x0814689c

08011940 <__ascii_wctomb>:
 8011940:	b149      	cbz	r1, 8011956 <__ascii_wctomb+0x16>
 8011942:	2aff      	cmp	r2, #255	; 0xff
 8011944:	bf85      	ittet	hi
 8011946:	238a      	movhi	r3, #138	; 0x8a
 8011948:	6003      	strhi	r3, [r0, #0]
 801194a:	700a      	strbls	r2, [r1, #0]
 801194c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011950:	bf98      	it	ls
 8011952:	2001      	movls	r0, #1
 8011954:	4770      	bx	lr
 8011956:	4608      	mov	r0, r1
 8011958:	4770      	bx	lr
	...

0801195c <__swsetup_r>:
 801195c:	4b32      	ldr	r3, [pc, #200]	; (8011a28 <__swsetup_r+0xcc>)
 801195e:	b570      	push	{r4, r5, r6, lr}
 8011960:	681d      	ldr	r5, [r3, #0]
 8011962:	4606      	mov	r6, r0
 8011964:	460c      	mov	r4, r1
 8011966:	b125      	cbz	r5, 8011972 <__swsetup_r+0x16>
 8011968:	69ab      	ldr	r3, [r5, #24]
 801196a:	b913      	cbnz	r3, 8011972 <__swsetup_r+0x16>
 801196c:	4628      	mov	r0, r5
 801196e:	f000 f985 	bl	8011c7c <__sinit>
 8011972:	4b2e      	ldr	r3, [pc, #184]	; (8011a2c <__swsetup_r+0xd0>)
 8011974:	429c      	cmp	r4, r3
 8011976:	d10f      	bne.n	8011998 <__swsetup_r+0x3c>
 8011978:	686c      	ldr	r4, [r5, #4]
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011980:	0719      	lsls	r1, r3, #28
 8011982:	d42c      	bmi.n	80119de <__swsetup_r+0x82>
 8011984:	06dd      	lsls	r5, r3, #27
 8011986:	d411      	bmi.n	80119ac <__swsetup_r+0x50>
 8011988:	2309      	movs	r3, #9
 801198a:	6033      	str	r3, [r6, #0]
 801198c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011990:	81a3      	strh	r3, [r4, #12]
 8011992:	f04f 30ff 	mov.w	r0, #4294967295
 8011996:	e03e      	b.n	8011a16 <__swsetup_r+0xba>
 8011998:	4b25      	ldr	r3, [pc, #148]	; (8011a30 <__swsetup_r+0xd4>)
 801199a:	429c      	cmp	r4, r3
 801199c:	d101      	bne.n	80119a2 <__swsetup_r+0x46>
 801199e:	68ac      	ldr	r4, [r5, #8]
 80119a0:	e7eb      	b.n	801197a <__swsetup_r+0x1e>
 80119a2:	4b24      	ldr	r3, [pc, #144]	; (8011a34 <__swsetup_r+0xd8>)
 80119a4:	429c      	cmp	r4, r3
 80119a6:	bf08      	it	eq
 80119a8:	68ec      	ldreq	r4, [r5, #12]
 80119aa:	e7e6      	b.n	801197a <__swsetup_r+0x1e>
 80119ac:	0758      	lsls	r0, r3, #29
 80119ae:	d512      	bpl.n	80119d6 <__swsetup_r+0x7a>
 80119b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119b2:	b141      	cbz	r1, 80119c6 <__swsetup_r+0x6a>
 80119b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119b8:	4299      	cmp	r1, r3
 80119ba:	d002      	beq.n	80119c2 <__swsetup_r+0x66>
 80119bc:	4630      	mov	r0, r6
 80119be:	f7fd fbef 	bl	800f1a0 <_free_r>
 80119c2:	2300      	movs	r3, #0
 80119c4:	6363      	str	r3, [r4, #52]	; 0x34
 80119c6:	89a3      	ldrh	r3, [r4, #12]
 80119c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119cc:	81a3      	strh	r3, [r4, #12]
 80119ce:	2300      	movs	r3, #0
 80119d0:	6063      	str	r3, [r4, #4]
 80119d2:	6923      	ldr	r3, [r4, #16]
 80119d4:	6023      	str	r3, [r4, #0]
 80119d6:	89a3      	ldrh	r3, [r4, #12]
 80119d8:	f043 0308 	orr.w	r3, r3, #8
 80119dc:	81a3      	strh	r3, [r4, #12]
 80119de:	6923      	ldr	r3, [r4, #16]
 80119e0:	b94b      	cbnz	r3, 80119f6 <__swsetup_r+0x9a>
 80119e2:	89a3      	ldrh	r3, [r4, #12]
 80119e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119ec:	d003      	beq.n	80119f6 <__swsetup_r+0x9a>
 80119ee:	4621      	mov	r1, r4
 80119f0:	4630      	mov	r0, r6
 80119f2:	f000 fa05 	bl	8011e00 <__smakebuf_r>
 80119f6:	89a0      	ldrh	r0, [r4, #12]
 80119f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119fc:	f010 0301 	ands.w	r3, r0, #1
 8011a00:	d00a      	beq.n	8011a18 <__swsetup_r+0xbc>
 8011a02:	2300      	movs	r3, #0
 8011a04:	60a3      	str	r3, [r4, #8]
 8011a06:	6963      	ldr	r3, [r4, #20]
 8011a08:	425b      	negs	r3, r3
 8011a0a:	61a3      	str	r3, [r4, #24]
 8011a0c:	6923      	ldr	r3, [r4, #16]
 8011a0e:	b943      	cbnz	r3, 8011a22 <__swsetup_r+0xc6>
 8011a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a14:	d1ba      	bne.n	801198c <__swsetup_r+0x30>
 8011a16:	bd70      	pop	{r4, r5, r6, pc}
 8011a18:	0781      	lsls	r1, r0, #30
 8011a1a:	bf58      	it	pl
 8011a1c:	6963      	ldrpl	r3, [r4, #20]
 8011a1e:	60a3      	str	r3, [r4, #8]
 8011a20:	e7f4      	b.n	8011a0c <__swsetup_r+0xb0>
 8011a22:	2000      	movs	r0, #0
 8011a24:	e7f7      	b.n	8011a16 <__swsetup_r+0xba>
 8011a26:	bf00      	nop
 8011a28:	20000bd0 	.word	0x20000bd0
 8011a2c:	081468bc 	.word	0x081468bc
 8011a30:	081468dc 	.word	0x081468dc
 8011a34:	0814689c 	.word	0x0814689c

08011a38 <abort>:
 8011a38:	b508      	push	{r3, lr}
 8011a3a:	2006      	movs	r0, #6
 8011a3c:	f000 fa48 	bl	8011ed0 <raise>
 8011a40:	2001      	movs	r0, #1
 8011a42:	f000 fcc7 	bl	80123d4 <_exit>
	...

08011a48 <__sflush_r>:
 8011a48:	898a      	ldrh	r2, [r1, #12]
 8011a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a4e:	4605      	mov	r5, r0
 8011a50:	0710      	lsls	r0, r2, #28
 8011a52:	460c      	mov	r4, r1
 8011a54:	d458      	bmi.n	8011b08 <__sflush_r+0xc0>
 8011a56:	684b      	ldr	r3, [r1, #4]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	dc05      	bgt.n	8011a68 <__sflush_r+0x20>
 8011a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dc02      	bgt.n	8011a68 <__sflush_r+0x20>
 8011a62:	2000      	movs	r0, #0
 8011a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a6a:	2e00      	cmp	r6, #0
 8011a6c:	d0f9      	beq.n	8011a62 <__sflush_r+0x1a>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a74:	682f      	ldr	r7, [r5, #0]
 8011a76:	602b      	str	r3, [r5, #0]
 8011a78:	d032      	beq.n	8011ae0 <__sflush_r+0x98>
 8011a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	075a      	lsls	r2, r3, #29
 8011a80:	d505      	bpl.n	8011a8e <__sflush_r+0x46>
 8011a82:	6863      	ldr	r3, [r4, #4]
 8011a84:	1ac0      	subs	r0, r0, r3
 8011a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a88:	b10b      	cbz	r3, 8011a8e <__sflush_r+0x46>
 8011a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a8c:	1ac0      	subs	r0, r0, r3
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4602      	mov	r2, r0
 8011a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a94:	6a21      	ldr	r1, [r4, #32]
 8011a96:	4628      	mov	r0, r5
 8011a98:	47b0      	blx	r6
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	d106      	bne.n	8011aae <__sflush_r+0x66>
 8011aa0:	6829      	ldr	r1, [r5, #0]
 8011aa2:	291d      	cmp	r1, #29
 8011aa4:	d82c      	bhi.n	8011b00 <__sflush_r+0xb8>
 8011aa6:	4a2a      	ldr	r2, [pc, #168]	; (8011b50 <__sflush_r+0x108>)
 8011aa8:	40ca      	lsrs	r2, r1
 8011aaa:	07d6      	lsls	r6, r2, #31
 8011aac:	d528      	bpl.n	8011b00 <__sflush_r+0xb8>
 8011aae:	2200      	movs	r2, #0
 8011ab0:	6062      	str	r2, [r4, #4]
 8011ab2:	04d9      	lsls	r1, r3, #19
 8011ab4:	6922      	ldr	r2, [r4, #16]
 8011ab6:	6022      	str	r2, [r4, #0]
 8011ab8:	d504      	bpl.n	8011ac4 <__sflush_r+0x7c>
 8011aba:	1c42      	adds	r2, r0, #1
 8011abc:	d101      	bne.n	8011ac2 <__sflush_r+0x7a>
 8011abe:	682b      	ldr	r3, [r5, #0]
 8011ac0:	b903      	cbnz	r3, 8011ac4 <__sflush_r+0x7c>
 8011ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8011ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ac6:	602f      	str	r7, [r5, #0]
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	d0ca      	beq.n	8011a62 <__sflush_r+0x1a>
 8011acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ad0:	4299      	cmp	r1, r3
 8011ad2:	d002      	beq.n	8011ada <__sflush_r+0x92>
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f7fd fb63 	bl	800f1a0 <_free_r>
 8011ada:	2000      	movs	r0, #0
 8011adc:	6360      	str	r0, [r4, #52]	; 0x34
 8011ade:	e7c1      	b.n	8011a64 <__sflush_r+0x1c>
 8011ae0:	6a21      	ldr	r1, [r4, #32]
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	47b0      	blx	r6
 8011ae8:	1c41      	adds	r1, r0, #1
 8011aea:	d1c7      	bne.n	8011a7c <__sflush_r+0x34>
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d0c4      	beq.n	8011a7c <__sflush_r+0x34>
 8011af2:	2b1d      	cmp	r3, #29
 8011af4:	d001      	beq.n	8011afa <__sflush_r+0xb2>
 8011af6:	2b16      	cmp	r3, #22
 8011af8:	d101      	bne.n	8011afe <__sflush_r+0xb6>
 8011afa:	602f      	str	r7, [r5, #0]
 8011afc:	e7b1      	b.n	8011a62 <__sflush_r+0x1a>
 8011afe:	89a3      	ldrh	r3, [r4, #12]
 8011b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	e7ad      	b.n	8011a64 <__sflush_r+0x1c>
 8011b08:	690f      	ldr	r7, [r1, #16]
 8011b0a:	2f00      	cmp	r7, #0
 8011b0c:	d0a9      	beq.n	8011a62 <__sflush_r+0x1a>
 8011b0e:	0793      	lsls	r3, r2, #30
 8011b10:	680e      	ldr	r6, [r1, #0]
 8011b12:	bf08      	it	eq
 8011b14:	694b      	ldreq	r3, [r1, #20]
 8011b16:	600f      	str	r7, [r1, #0]
 8011b18:	bf18      	it	ne
 8011b1a:	2300      	movne	r3, #0
 8011b1c:	eba6 0807 	sub.w	r8, r6, r7
 8011b20:	608b      	str	r3, [r1, #8]
 8011b22:	f1b8 0f00 	cmp.w	r8, #0
 8011b26:	dd9c      	ble.n	8011a62 <__sflush_r+0x1a>
 8011b28:	6a21      	ldr	r1, [r4, #32]
 8011b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b2c:	4643      	mov	r3, r8
 8011b2e:	463a      	mov	r2, r7
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b0      	blx	r6
 8011b34:	2800      	cmp	r0, #0
 8011b36:	dc06      	bgt.n	8011b46 <__sflush_r+0xfe>
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b3e:	81a3      	strh	r3, [r4, #12]
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295
 8011b44:	e78e      	b.n	8011a64 <__sflush_r+0x1c>
 8011b46:	4407      	add	r7, r0
 8011b48:	eba8 0800 	sub.w	r8, r8, r0
 8011b4c:	e7e9      	b.n	8011b22 <__sflush_r+0xda>
 8011b4e:	bf00      	nop
 8011b50:	20400001 	.word	0x20400001

08011b54 <_fflush_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	690b      	ldr	r3, [r1, #16]
 8011b58:	4605      	mov	r5, r0
 8011b5a:	460c      	mov	r4, r1
 8011b5c:	b913      	cbnz	r3, 8011b64 <_fflush_r+0x10>
 8011b5e:	2500      	movs	r5, #0
 8011b60:	4628      	mov	r0, r5
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	b118      	cbz	r0, 8011b6e <_fflush_r+0x1a>
 8011b66:	6983      	ldr	r3, [r0, #24]
 8011b68:	b90b      	cbnz	r3, 8011b6e <_fflush_r+0x1a>
 8011b6a:	f000 f887 	bl	8011c7c <__sinit>
 8011b6e:	4b14      	ldr	r3, [pc, #80]	; (8011bc0 <_fflush_r+0x6c>)
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d11b      	bne.n	8011bac <_fflush_r+0x58>
 8011b74:	686c      	ldr	r4, [r5, #4]
 8011b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0ef      	beq.n	8011b5e <_fflush_r+0xa>
 8011b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b80:	07d0      	lsls	r0, r2, #31
 8011b82:	d404      	bmi.n	8011b8e <_fflush_r+0x3a>
 8011b84:	0599      	lsls	r1, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_fflush_r+0x3a>
 8011b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b8a:	f7ff fcf8 	bl	801157e <__retarget_lock_acquire_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	4621      	mov	r1, r4
 8011b92:	f7ff ff59 	bl	8011a48 <__sflush_r>
 8011b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b98:	07da      	lsls	r2, r3, #31
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	d4e0      	bmi.n	8011b60 <_fflush_r+0xc>
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	059b      	lsls	r3, r3, #22
 8011ba2:	d4dd      	bmi.n	8011b60 <_fflush_r+0xc>
 8011ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ba6:	f7ff fceb 	bl	8011580 <__retarget_lock_release_recursive>
 8011baa:	e7d9      	b.n	8011b60 <_fflush_r+0xc>
 8011bac:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <_fflush_r+0x70>)
 8011bae:	429c      	cmp	r4, r3
 8011bb0:	d101      	bne.n	8011bb6 <_fflush_r+0x62>
 8011bb2:	68ac      	ldr	r4, [r5, #8]
 8011bb4:	e7df      	b.n	8011b76 <_fflush_r+0x22>
 8011bb6:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <_fflush_r+0x74>)
 8011bb8:	429c      	cmp	r4, r3
 8011bba:	bf08      	it	eq
 8011bbc:	68ec      	ldreq	r4, [r5, #12]
 8011bbe:	e7da      	b.n	8011b76 <_fflush_r+0x22>
 8011bc0:	081468bc 	.word	0x081468bc
 8011bc4:	081468dc 	.word	0x081468dc
 8011bc8:	0814689c 	.word	0x0814689c

08011bcc <std>:
 8011bcc:	2300      	movs	r3, #0
 8011bce:	b510      	push	{r4, lr}
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8011bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bda:	6083      	str	r3, [r0, #8]
 8011bdc:	8181      	strh	r1, [r0, #12]
 8011bde:	6643      	str	r3, [r0, #100]	; 0x64
 8011be0:	81c2      	strh	r2, [r0, #14]
 8011be2:	6183      	str	r3, [r0, #24]
 8011be4:	4619      	mov	r1, r3
 8011be6:	2208      	movs	r2, #8
 8011be8:	305c      	adds	r0, #92	; 0x5c
 8011bea:	f7fd fad1 	bl	800f190 <memset>
 8011bee:	4b05      	ldr	r3, [pc, #20]	; (8011c04 <std+0x38>)
 8011bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8011bf2:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <std+0x3c>)
 8011bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bf6:	4b05      	ldr	r3, [pc, #20]	; (8011c0c <std+0x40>)
 8011bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bfa:	4b05      	ldr	r3, [pc, #20]	; (8011c10 <std+0x44>)
 8011bfc:	6224      	str	r4, [r4, #32]
 8011bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8011c00:	bd10      	pop	{r4, pc}
 8011c02:	bf00      	nop
 8011c04:	08011f09 	.word	0x08011f09
 8011c08:	08011f2b 	.word	0x08011f2b
 8011c0c:	08011f63 	.word	0x08011f63
 8011c10:	08011f87 	.word	0x08011f87

08011c14 <_cleanup_r>:
 8011c14:	4901      	ldr	r1, [pc, #4]	; (8011c1c <_cleanup_r+0x8>)
 8011c16:	f000 b8af 	b.w	8011d78 <_fwalk_reent>
 8011c1a:	bf00      	nop
 8011c1c:	08011b55 	.word	0x08011b55

08011c20 <__sfmoreglue>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	2268      	movs	r2, #104	; 0x68
 8011c24:	1e4d      	subs	r5, r1, #1
 8011c26:	4355      	muls	r5, r2
 8011c28:	460e      	mov	r6, r1
 8011c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c2e:	f7fd fb23 	bl	800f278 <_malloc_r>
 8011c32:	4604      	mov	r4, r0
 8011c34:	b140      	cbz	r0, 8011c48 <__sfmoreglue+0x28>
 8011c36:	2100      	movs	r1, #0
 8011c38:	e9c0 1600 	strd	r1, r6, [r0]
 8011c3c:	300c      	adds	r0, #12
 8011c3e:	60a0      	str	r0, [r4, #8]
 8011c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c44:	f7fd faa4 	bl	800f190 <memset>
 8011c48:	4620      	mov	r0, r4
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}

08011c4c <__sfp_lock_acquire>:
 8011c4c:	4801      	ldr	r0, [pc, #4]	; (8011c54 <__sfp_lock_acquire+0x8>)
 8011c4e:	f7ff bc96 	b.w	801157e <__retarget_lock_acquire_recursive>
 8011c52:	bf00      	nop
 8011c54:	200020c5 	.word	0x200020c5

08011c58 <__sfp_lock_release>:
 8011c58:	4801      	ldr	r0, [pc, #4]	; (8011c60 <__sfp_lock_release+0x8>)
 8011c5a:	f7ff bc91 	b.w	8011580 <__retarget_lock_release_recursive>
 8011c5e:	bf00      	nop
 8011c60:	200020c5 	.word	0x200020c5

08011c64 <__sinit_lock_acquire>:
 8011c64:	4801      	ldr	r0, [pc, #4]	; (8011c6c <__sinit_lock_acquire+0x8>)
 8011c66:	f7ff bc8a 	b.w	801157e <__retarget_lock_acquire_recursive>
 8011c6a:	bf00      	nop
 8011c6c:	200020c6 	.word	0x200020c6

08011c70 <__sinit_lock_release>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <__sinit_lock_release+0x8>)
 8011c72:	f7ff bc85 	b.w	8011580 <__retarget_lock_release_recursive>
 8011c76:	bf00      	nop
 8011c78:	200020c6 	.word	0x200020c6

08011c7c <__sinit>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	4604      	mov	r4, r0
 8011c80:	f7ff fff0 	bl	8011c64 <__sinit_lock_acquire>
 8011c84:	69a3      	ldr	r3, [r4, #24]
 8011c86:	b11b      	cbz	r3, 8011c90 <__sinit+0x14>
 8011c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c8c:	f7ff bff0 	b.w	8011c70 <__sinit_lock_release>
 8011c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c94:	6523      	str	r3, [r4, #80]	; 0x50
 8011c96:	4b13      	ldr	r3, [pc, #76]	; (8011ce4 <__sinit+0x68>)
 8011c98:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <__sinit+0x6c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c9e:	42a3      	cmp	r3, r4
 8011ca0:	bf04      	itt	eq
 8011ca2:	2301      	moveq	r3, #1
 8011ca4:	61a3      	streq	r3, [r4, #24]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 f820 	bl	8011cec <__sfp>
 8011cac:	6060      	str	r0, [r4, #4]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 f81c 	bl	8011cec <__sfp>
 8011cb4:	60a0      	str	r0, [r4, #8]
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 f818 	bl	8011cec <__sfp>
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	60e0      	str	r0, [r4, #12]
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	6860      	ldr	r0, [r4, #4]
 8011cc4:	f7ff ff82 	bl	8011bcc <std>
 8011cc8:	68a0      	ldr	r0, [r4, #8]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	2109      	movs	r1, #9
 8011cce:	f7ff ff7d 	bl	8011bcc <std>
 8011cd2:	68e0      	ldr	r0, [r4, #12]
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	2112      	movs	r1, #18
 8011cd8:	f7ff ff78 	bl	8011bcc <std>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	61a3      	str	r3, [r4, #24]
 8011ce0:	e7d2      	b.n	8011c88 <__sinit+0xc>
 8011ce2:	bf00      	nop
 8011ce4:	08146520 	.word	0x08146520
 8011ce8:	08011c15 	.word	0x08011c15

08011cec <__sfp>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	4607      	mov	r7, r0
 8011cf0:	f7ff ffac 	bl	8011c4c <__sfp_lock_acquire>
 8011cf4:	4b1e      	ldr	r3, [pc, #120]	; (8011d70 <__sfp+0x84>)
 8011cf6:	681e      	ldr	r6, [r3, #0]
 8011cf8:	69b3      	ldr	r3, [r6, #24]
 8011cfa:	b913      	cbnz	r3, 8011d02 <__sfp+0x16>
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7ff ffbd 	bl	8011c7c <__sinit>
 8011d02:	3648      	adds	r6, #72	; 0x48
 8011d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	d503      	bpl.n	8011d14 <__sfp+0x28>
 8011d0c:	6833      	ldr	r3, [r6, #0]
 8011d0e:	b30b      	cbz	r3, 8011d54 <__sfp+0x68>
 8011d10:	6836      	ldr	r6, [r6, #0]
 8011d12:	e7f7      	b.n	8011d04 <__sfp+0x18>
 8011d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d18:	b9d5      	cbnz	r5, 8011d50 <__sfp+0x64>
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <__sfp+0x88>)
 8011d1c:	60e3      	str	r3, [r4, #12]
 8011d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d22:	6665      	str	r5, [r4, #100]	; 0x64
 8011d24:	f7ff fc2a 	bl	801157c <__retarget_lock_init_recursive>
 8011d28:	f7ff ff96 	bl	8011c58 <__sfp_lock_release>
 8011d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d34:	6025      	str	r5, [r4, #0]
 8011d36:	61a5      	str	r5, [r4, #24]
 8011d38:	2208      	movs	r2, #8
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d40:	f7fd fa26 	bl	800f190 <memset>
 8011d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d50:	3468      	adds	r4, #104	; 0x68
 8011d52:	e7d9      	b.n	8011d08 <__sfp+0x1c>
 8011d54:	2104      	movs	r1, #4
 8011d56:	4638      	mov	r0, r7
 8011d58:	f7ff ff62 	bl	8011c20 <__sfmoreglue>
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	6030      	str	r0, [r6, #0]
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1d5      	bne.n	8011d10 <__sfp+0x24>
 8011d64:	f7ff ff78 	bl	8011c58 <__sfp_lock_release>
 8011d68:	230c      	movs	r3, #12
 8011d6a:	603b      	str	r3, [r7, #0]
 8011d6c:	e7ee      	b.n	8011d4c <__sfp+0x60>
 8011d6e:	bf00      	nop
 8011d70:	08146520 	.word	0x08146520
 8011d74:	ffff0001 	.word	0xffff0001

08011d78 <_fwalk_reent>:
 8011d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	4688      	mov	r8, r1
 8011d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d84:	2700      	movs	r7, #0
 8011d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8011d8e:	d505      	bpl.n	8011d9c <_fwalk_reent+0x24>
 8011d90:	6824      	ldr	r4, [r4, #0]
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	d1f7      	bne.n	8011d86 <_fwalk_reent+0xe>
 8011d96:	4638      	mov	r0, r7
 8011d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9c:	89ab      	ldrh	r3, [r5, #12]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d907      	bls.n	8011db2 <_fwalk_reent+0x3a>
 8011da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011da6:	3301      	adds	r3, #1
 8011da8:	d003      	beq.n	8011db2 <_fwalk_reent+0x3a>
 8011daa:	4629      	mov	r1, r5
 8011dac:	4630      	mov	r0, r6
 8011dae:	47c0      	blx	r8
 8011db0:	4307      	orrs	r7, r0
 8011db2:	3568      	adds	r5, #104	; 0x68
 8011db4:	e7e9      	b.n	8011d8a <_fwalk_reent+0x12>

08011db6 <__swhatbuf_r>:
 8011db6:	b570      	push	{r4, r5, r6, lr}
 8011db8:	460e      	mov	r6, r1
 8011dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	b096      	sub	sp, #88	; 0x58
 8011dc2:	4614      	mov	r4, r2
 8011dc4:	461d      	mov	r5, r3
 8011dc6:	da08      	bge.n	8011dda <__swhatbuf_r+0x24>
 8011dc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	602a      	str	r2, [r5, #0]
 8011dd0:	061a      	lsls	r2, r3, #24
 8011dd2:	d410      	bmi.n	8011df6 <__swhatbuf_r+0x40>
 8011dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dd8:	e00e      	b.n	8011df8 <__swhatbuf_r+0x42>
 8011dda:	466a      	mov	r2, sp
 8011ddc:	f000 f8fa 	bl	8011fd4 <_fstat_r>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	dbf1      	blt.n	8011dc8 <__swhatbuf_r+0x12>
 8011de4:	9a01      	ldr	r2, [sp, #4]
 8011de6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011dea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011dee:	425a      	negs	r2, r3
 8011df0:	415a      	adcs	r2, r3
 8011df2:	602a      	str	r2, [r5, #0]
 8011df4:	e7ee      	b.n	8011dd4 <__swhatbuf_r+0x1e>
 8011df6:	2340      	movs	r3, #64	; 0x40
 8011df8:	2000      	movs	r0, #0
 8011dfa:	6023      	str	r3, [r4, #0]
 8011dfc:	b016      	add	sp, #88	; 0x58
 8011dfe:	bd70      	pop	{r4, r5, r6, pc}

08011e00 <__smakebuf_r>:
 8011e00:	898b      	ldrh	r3, [r1, #12]
 8011e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e04:	079d      	lsls	r5, r3, #30
 8011e06:	4606      	mov	r6, r0
 8011e08:	460c      	mov	r4, r1
 8011e0a:	d507      	bpl.n	8011e1c <__smakebuf_r+0x1c>
 8011e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e10:	6023      	str	r3, [r4, #0]
 8011e12:	6123      	str	r3, [r4, #16]
 8011e14:	2301      	movs	r3, #1
 8011e16:	6163      	str	r3, [r4, #20]
 8011e18:	b002      	add	sp, #8
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	ab01      	add	r3, sp, #4
 8011e1e:	466a      	mov	r2, sp
 8011e20:	f7ff ffc9 	bl	8011db6 <__swhatbuf_r>
 8011e24:	9900      	ldr	r1, [sp, #0]
 8011e26:	4605      	mov	r5, r0
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f7fd fa25 	bl	800f278 <_malloc_r>
 8011e2e:	b948      	cbnz	r0, 8011e44 <__smakebuf_r+0x44>
 8011e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e34:	059a      	lsls	r2, r3, #22
 8011e36:	d4ef      	bmi.n	8011e18 <__smakebuf_r+0x18>
 8011e38:	f023 0303 	bic.w	r3, r3, #3
 8011e3c:	f043 0302 	orr.w	r3, r3, #2
 8011e40:	81a3      	strh	r3, [r4, #12]
 8011e42:	e7e3      	b.n	8011e0c <__smakebuf_r+0xc>
 8011e44:	4b0d      	ldr	r3, [pc, #52]	; (8011e7c <__smakebuf_r+0x7c>)
 8011e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	6020      	str	r0, [r4, #0]
 8011e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e50:	81a3      	strh	r3, [r4, #12]
 8011e52:	9b00      	ldr	r3, [sp, #0]
 8011e54:	6163      	str	r3, [r4, #20]
 8011e56:	9b01      	ldr	r3, [sp, #4]
 8011e58:	6120      	str	r0, [r4, #16]
 8011e5a:	b15b      	cbz	r3, 8011e74 <__smakebuf_r+0x74>
 8011e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e60:	4630      	mov	r0, r6
 8011e62:	f000 f8c9 	bl	8011ff8 <_isatty_r>
 8011e66:	b128      	cbz	r0, 8011e74 <__smakebuf_r+0x74>
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	f023 0303 	bic.w	r3, r3, #3
 8011e6e:	f043 0301 	orr.w	r3, r3, #1
 8011e72:	81a3      	strh	r3, [r4, #12]
 8011e74:	89a0      	ldrh	r0, [r4, #12]
 8011e76:	4305      	orrs	r5, r0
 8011e78:	81a5      	strh	r5, [r4, #12]
 8011e7a:	e7cd      	b.n	8011e18 <__smakebuf_r+0x18>
 8011e7c:	08011c15 	.word	0x08011c15

08011e80 <_raise_r>:
 8011e80:	291f      	cmp	r1, #31
 8011e82:	b538      	push	{r3, r4, r5, lr}
 8011e84:	4604      	mov	r4, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	d904      	bls.n	8011e94 <_raise_r+0x14>
 8011e8a:	2316      	movs	r3, #22
 8011e8c:	6003      	str	r3, [r0, #0]
 8011e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e92:	bd38      	pop	{r3, r4, r5, pc}
 8011e94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e96:	b112      	cbz	r2, 8011e9e <_raise_r+0x1e>
 8011e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e9c:	b94b      	cbnz	r3, 8011eb2 <_raise_r+0x32>
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f000 f830 	bl	8011f04 <_getpid_r>
 8011ea4:	462a      	mov	r2, r5
 8011ea6:	4601      	mov	r1, r0
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eae:	f000 b817 	b.w	8011ee0 <_kill_r>
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d00a      	beq.n	8011ecc <_raise_r+0x4c>
 8011eb6:	1c59      	adds	r1, r3, #1
 8011eb8:	d103      	bne.n	8011ec2 <_raise_r+0x42>
 8011eba:	2316      	movs	r3, #22
 8011ebc:	6003      	str	r3, [r0, #0]
 8011ebe:	2001      	movs	r0, #1
 8011ec0:	e7e7      	b.n	8011e92 <_raise_r+0x12>
 8011ec2:	2400      	movs	r4, #0
 8011ec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ec8:	4628      	mov	r0, r5
 8011eca:	4798      	blx	r3
 8011ecc:	2000      	movs	r0, #0
 8011ece:	e7e0      	b.n	8011e92 <_raise_r+0x12>

08011ed0 <raise>:
 8011ed0:	4b02      	ldr	r3, [pc, #8]	; (8011edc <raise+0xc>)
 8011ed2:	4601      	mov	r1, r0
 8011ed4:	6818      	ldr	r0, [r3, #0]
 8011ed6:	f7ff bfd3 	b.w	8011e80 <_raise_r>
 8011eda:	bf00      	nop
 8011edc:	20000bd0 	.word	0x20000bd0

08011ee0 <_kill_r>:
 8011ee0:	b538      	push	{r3, r4, r5, lr}
 8011ee2:	4d07      	ldr	r5, [pc, #28]	; (8011f00 <_kill_r+0x20>)
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	4608      	mov	r0, r1
 8011eea:	4611      	mov	r1, r2
 8011eec:	602b      	str	r3, [r5, #0]
 8011eee:	f000 fa51 	bl	8012394 <_kill>
 8011ef2:	1c43      	adds	r3, r0, #1
 8011ef4:	d102      	bne.n	8011efc <_kill_r+0x1c>
 8011ef6:	682b      	ldr	r3, [r5, #0]
 8011ef8:	b103      	cbz	r3, 8011efc <_kill_r+0x1c>
 8011efa:	6023      	str	r3, [r4, #0]
 8011efc:	bd38      	pop	{r3, r4, r5, pc}
 8011efe:	bf00      	nop
 8011f00:	200020c0 	.word	0x200020c0

08011f04 <_getpid_r>:
 8011f04:	f000 ba36 	b.w	8012374 <_getpid>

08011f08 <__sread>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f10:	f000 f894 	bl	801203c <_read_r>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	bfab      	itete	ge
 8011f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8011f1c:	181b      	addge	r3, r3, r0
 8011f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f22:	bfac      	ite	ge
 8011f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f26:	81a3      	strhlt	r3, [r4, #12]
 8011f28:	bd10      	pop	{r4, pc}

08011f2a <__swrite>:
 8011f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2e:	461f      	mov	r7, r3
 8011f30:	898b      	ldrh	r3, [r1, #12]
 8011f32:	05db      	lsls	r3, r3, #23
 8011f34:	4605      	mov	r5, r0
 8011f36:	460c      	mov	r4, r1
 8011f38:	4616      	mov	r6, r2
 8011f3a:	d505      	bpl.n	8011f48 <__swrite+0x1e>
 8011f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f40:	2302      	movs	r3, #2
 8011f42:	2200      	movs	r2, #0
 8011f44:	f000 f868 	bl	8012018 <_lseek_r>
 8011f48:	89a3      	ldrh	r3, [r4, #12]
 8011f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f52:	81a3      	strh	r3, [r4, #12]
 8011f54:	4632      	mov	r2, r6
 8011f56:	463b      	mov	r3, r7
 8011f58:	4628      	mov	r0, r5
 8011f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5e:	f000 b817 	b.w	8011f90 <_write_r>

08011f62 <__sseek>:
 8011f62:	b510      	push	{r4, lr}
 8011f64:	460c      	mov	r4, r1
 8011f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f6a:	f000 f855 	bl	8012018 <_lseek_r>
 8011f6e:	1c43      	adds	r3, r0, #1
 8011f70:	89a3      	ldrh	r3, [r4, #12]
 8011f72:	bf15      	itete	ne
 8011f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f7e:	81a3      	strheq	r3, [r4, #12]
 8011f80:	bf18      	it	ne
 8011f82:	81a3      	strhne	r3, [r4, #12]
 8011f84:	bd10      	pop	{r4, pc}

08011f86 <__sclose>:
 8011f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f8a:	f000 b813 	b.w	8011fb4 <_close_r>
	...

08011f90 <_write_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d07      	ldr	r5, [pc, #28]	; (8011fb0 <_write_r+0x20>)
 8011f94:	4604      	mov	r4, r0
 8011f96:	4608      	mov	r0, r1
 8011f98:	4611      	mov	r1, r2
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	602a      	str	r2, [r5, #0]
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	f000 fa10 	bl	80123c4 <_write>
 8011fa4:	1c43      	adds	r3, r0, #1
 8011fa6:	d102      	bne.n	8011fae <_write_r+0x1e>
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	b103      	cbz	r3, 8011fae <_write_r+0x1e>
 8011fac:	6023      	str	r3, [r4, #0]
 8011fae:	bd38      	pop	{r3, r4, r5, pc}
 8011fb0:	200020c0 	.word	0x200020c0

08011fb4 <_close_r>:
 8011fb4:	b538      	push	{r3, r4, r5, lr}
 8011fb6:	4d06      	ldr	r5, [pc, #24]	; (8011fd0 <_close_r+0x1c>)
 8011fb8:	2300      	movs	r3, #0
 8011fba:	4604      	mov	r4, r0
 8011fbc:	4608      	mov	r0, r1
 8011fbe:	602b      	str	r3, [r5, #0]
 8011fc0:	f000 f9c8 	bl	8012354 <_close>
 8011fc4:	1c43      	adds	r3, r0, #1
 8011fc6:	d102      	bne.n	8011fce <_close_r+0x1a>
 8011fc8:	682b      	ldr	r3, [r5, #0]
 8011fca:	b103      	cbz	r3, 8011fce <_close_r+0x1a>
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	bd38      	pop	{r3, r4, r5, pc}
 8011fd0:	200020c0 	.word	0x200020c0

08011fd4 <_fstat_r>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	4d07      	ldr	r5, [pc, #28]	; (8011ff4 <_fstat_r+0x20>)
 8011fd8:	2300      	movs	r3, #0
 8011fda:	4604      	mov	r4, r0
 8011fdc:	4608      	mov	r0, r1
 8011fde:	4611      	mov	r1, r2
 8011fe0:	602b      	str	r3, [r5, #0]
 8011fe2:	f000 f9bf 	bl	8012364 <_fstat>
 8011fe6:	1c43      	adds	r3, r0, #1
 8011fe8:	d102      	bne.n	8011ff0 <_fstat_r+0x1c>
 8011fea:	682b      	ldr	r3, [r5, #0]
 8011fec:	b103      	cbz	r3, 8011ff0 <_fstat_r+0x1c>
 8011fee:	6023      	str	r3, [r4, #0]
 8011ff0:	bd38      	pop	{r3, r4, r5, pc}
 8011ff2:	bf00      	nop
 8011ff4:	200020c0 	.word	0x200020c0

08011ff8 <_isatty_r>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	4d06      	ldr	r5, [pc, #24]	; (8012014 <_isatty_r+0x1c>)
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	4604      	mov	r4, r0
 8012000:	4608      	mov	r0, r1
 8012002:	602b      	str	r3, [r5, #0]
 8012004:	f000 f9be 	bl	8012384 <_isatty>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d102      	bne.n	8012012 <_isatty_r+0x1a>
 801200c:	682b      	ldr	r3, [r5, #0]
 801200e:	b103      	cbz	r3, 8012012 <_isatty_r+0x1a>
 8012010:	6023      	str	r3, [r4, #0]
 8012012:	bd38      	pop	{r3, r4, r5, pc}
 8012014:	200020c0 	.word	0x200020c0

08012018 <_lseek_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	4d07      	ldr	r5, [pc, #28]	; (8012038 <_lseek_r+0x20>)
 801201c:	4604      	mov	r4, r0
 801201e:	4608      	mov	r0, r1
 8012020:	4611      	mov	r1, r2
 8012022:	2200      	movs	r2, #0
 8012024:	602a      	str	r2, [r5, #0]
 8012026:	461a      	mov	r2, r3
 8012028:	f000 f9bc 	bl	80123a4 <_lseek>
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	d102      	bne.n	8012036 <_lseek_r+0x1e>
 8012030:	682b      	ldr	r3, [r5, #0]
 8012032:	b103      	cbz	r3, 8012036 <_lseek_r+0x1e>
 8012034:	6023      	str	r3, [r4, #0]
 8012036:	bd38      	pop	{r3, r4, r5, pc}
 8012038:	200020c0 	.word	0x200020c0

0801203c <_read_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4d07      	ldr	r5, [pc, #28]	; (801205c <_read_r+0x20>)
 8012040:	4604      	mov	r4, r0
 8012042:	4608      	mov	r0, r1
 8012044:	4611      	mov	r1, r2
 8012046:	2200      	movs	r2, #0
 8012048:	602a      	str	r2, [r5, #0]
 801204a:	461a      	mov	r2, r3
 801204c:	f000 f9b2 	bl	80123b4 <_read>
 8012050:	1c43      	adds	r3, r0, #1
 8012052:	d102      	bne.n	801205a <_read_r+0x1e>
 8012054:	682b      	ldr	r3, [r5, #0]
 8012056:	b103      	cbz	r3, 801205a <_read_r+0x1e>
 8012058:	6023      	str	r3, [r4, #0]
 801205a:	bd38      	pop	{r3, r4, r5, pc}
 801205c:	200020c0 	.word	0x200020c0

08012060 <round>:
 8012060:	ec51 0b10 	vmov	r0, r1, d0
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801206a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801206e:	2c13      	cmp	r4, #19
 8012070:	ee10 2a10 	vmov	r2, s0
 8012074:	460b      	mov	r3, r1
 8012076:	dc19      	bgt.n	80120ac <round+0x4c>
 8012078:	2c00      	cmp	r4, #0
 801207a:	da09      	bge.n	8012090 <round+0x30>
 801207c:	3401      	adds	r4, #1
 801207e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012082:	d103      	bne.n	801208c <round+0x2c>
 8012084:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012088:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801208c:	2200      	movs	r2, #0
 801208e:	e028      	b.n	80120e2 <round+0x82>
 8012090:	4d15      	ldr	r5, [pc, #84]	; (80120e8 <round+0x88>)
 8012092:	4125      	asrs	r5, r4
 8012094:	ea01 0605 	and.w	r6, r1, r5
 8012098:	4332      	orrs	r2, r6
 801209a:	d00e      	beq.n	80120ba <round+0x5a>
 801209c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80120a0:	fa42 f404 	asr.w	r4, r2, r4
 80120a4:	4423      	add	r3, r4
 80120a6:	ea23 0305 	bic.w	r3, r3, r5
 80120aa:	e7ef      	b.n	801208c <round+0x2c>
 80120ac:	2c33      	cmp	r4, #51	; 0x33
 80120ae:	dd07      	ble.n	80120c0 <round+0x60>
 80120b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80120b4:	d101      	bne.n	80120ba <round+0x5a>
 80120b6:	f7ee f901 	bl	80002bc <__adddf3>
 80120ba:	ec41 0b10 	vmov	d0, r0, r1
 80120be:	bd70      	pop	{r4, r5, r6, pc}
 80120c0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80120c4:	f04f 35ff 	mov.w	r5, #4294967295
 80120c8:	40f5      	lsrs	r5, r6
 80120ca:	4228      	tst	r0, r5
 80120cc:	d0f5      	beq.n	80120ba <round+0x5a>
 80120ce:	2101      	movs	r1, #1
 80120d0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80120d4:	fa01 f404 	lsl.w	r4, r1, r4
 80120d8:	1912      	adds	r2, r2, r4
 80120da:	bf28      	it	cs
 80120dc:	185b      	addcs	r3, r3, r1
 80120de:	ea22 0205 	bic.w	r2, r2, r5
 80120e2:	4619      	mov	r1, r3
 80120e4:	4610      	mov	r0, r2
 80120e6:	e7e8      	b.n	80120ba <round+0x5a>
 80120e8:	000fffff 	.word	0x000fffff

080120ec <expf>:
 80120ec:	b508      	push	{r3, lr}
 80120ee:	ed2d 8b02 	vpush	{d8}
 80120f2:	eef0 8a40 	vmov.f32	s17, s0
 80120f6:	f000 f82f 	bl	8012158 <__ieee754_expf>
 80120fa:	eeb0 8a40 	vmov.f32	s16, s0
 80120fe:	eeb0 0a68 	vmov.f32	s0, s17
 8012102:	f000 f919 	bl	8012338 <finitef>
 8012106:	b160      	cbz	r0, 8012122 <expf+0x36>
 8012108:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012148 <expf+0x5c>
 801210c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012114:	dd0a      	ble.n	801212c <expf+0x40>
 8012116:	f7fc fffb 	bl	800f110 <__errno>
 801211a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801214c <expf+0x60>
 801211e:	2322      	movs	r3, #34	; 0x22
 8012120:	6003      	str	r3, [r0, #0]
 8012122:	eeb0 0a48 	vmov.f32	s0, s16
 8012126:	ecbd 8b02 	vpop	{d8}
 801212a:	bd08      	pop	{r3, pc}
 801212c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012150 <expf+0x64>
 8012130:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012138:	d5f3      	bpl.n	8012122 <expf+0x36>
 801213a:	f7fc ffe9 	bl	800f110 <__errno>
 801213e:	2322      	movs	r3, #34	; 0x22
 8012140:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8012154 <expf+0x68>
 8012144:	6003      	str	r3, [r0, #0]
 8012146:	e7ec      	b.n	8012122 <expf+0x36>
 8012148:	42b17180 	.word	0x42b17180
 801214c:	7f800000 	.word	0x7f800000
 8012150:	c2cff1b5 	.word	0xc2cff1b5
 8012154:	00000000 	.word	0x00000000

08012158 <__ieee754_expf>:
 8012158:	ee10 2a10 	vmov	r2, s0
 801215c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012160:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012164:	d902      	bls.n	801216c <__ieee754_expf+0x14>
 8012166:	ee30 0a00 	vadd.f32	s0, s0, s0
 801216a:	4770      	bx	lr
 801216c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8012170:	d106      	bne.n	8012180 <__ieee754_expf+0x28>
 8012172:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80122ac <__ieee754_expf+0x154>
 8012176:	2b00      	cmp	r3, #0
 8012178:	bf18      	it	ne
 801217a:	eeb0 0a67 	vmovne.f32	s0, s15
 801217e:	4770      	bx	lr
 8012180:	484b      	ldr	r0, [pc, #300]	; (80122b0 <__ieee754_expf+0x158>)
 8012182:	4282      	cmp	r2, r0
 8012184:	dd02      	ble.n	801218c <__ieee754_expf+0x34>
 8012186:	2000      	movs	r0, #0
 8012188:	f000 b8d0 	b.w	801232c <__math_oflowf>
 801218c:	2a00      	cmp	r2, #0
 801218e:	da05      	bge.n	801219c <__ieee754_expf+0x44>
 8012190:	4a48      	ldr	r2, [pc, #288]	; (80122b4 <__ieee754_expf+0x15c>)
 8012192:	4291      	cmp	r1, r2
 8012194:	d902      	bls.n	801219c <__ieee754_expf+0x44>
 8012196:	2000      	movs	r0, #0
 8012198:	f000 b8c2 	b.w	8012320 <__math_uflowf>
 801219c:	4a46      	ldr	r2, [pc, #280]	; (80122b8 <__ieee754_expf+0x160>)
 801219e:	4291      	cmp	r1, r2
 80121a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80121a4:	d952      	bls.n	801224c <__ieee754_expf+0xf4>
 80121a6:	4a45      	ldr	r2, [pc, #276]	; (80122bc <__ieee754_expf+0x164>)
 80121a8:	4291      	cmp	r1, r2
 80121aa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80121ae:	d834      	bhi.n	801221a <__ieee754_expf+0xc2>
 80121b0:	4943      	ldr	r1, [pc, #268]	; (80122c0 <__ieee754_expf+0x168>)
 80121b2:	4411      	add	r1, r2
 80121b4:	ed91 7a00 	vldr	s14, [r1]
 80121b8:	4942      	ldr	r1, [pc, #264]	; (80122c4 <__ieee754_expf+0x16c>)
 80121ba:	440a      	add	r2, r1
 80121bc:	edd2 7a00 	vldr	s15, [r2]
 80121c0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80121c4:	f1c3 0201 	rsb	r2, r3, #1
 80121c8:	1ad2      	subs	r2, r2, r3
 80121ca:	ee37 0a67 	vsub.f32	s0, s14, s15
 80121ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 80121d2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80122c8 <__ieee754_expf+0x170>
 80121d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80122cc <__ieee754_expf+0x174>
 80121da:	eee6 6a05 	vfma.f32	s13, s12, s10
 80121de:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80122d0 <__ieee754_expf+0x178>
 80121e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80121e6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80122d4 <__ieee754_expf+0x17c>
 80121ea:	eee5 6a06 	vfma.f32	s13, s10, s12
 80121ee:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80122d8 <__ieee754_expf+0x180>
 80121f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80121f6:	eef0 6a40 	vmov.f32	s13, s0
 80121fa:	eee5 6a46 	vfms.f32	s13, s10, s12
 80121fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8012202:	ee20 5a26 	vmul.f32	s10, s0, s13
 8012206:	bb92      	cbnz	r2, 801226e <__ieee754_expf+0x116>
 8012208:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801220c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8012210:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012214:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8012218:	4770      	bx	lr
 801221a:	4b30      	ldr	r3, [pc, #192]	; (80122dc <__ieee754_expf+0x184>)
 801221c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80122e0 <__ieee754_expf+0x188>
 8012220:	eddf 6a30 	vldr	s13, [pc, #192]	; 80122e4 <__ieee754_expf+0x18c>
 8012224:	4413      	add	r3, r2
 8012226:	edd3 7a00 	vldr	s15, [r3]
 801222a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801222e:	eeb0 7a40 	vmov.f32	s14, s0
 8012232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012236:	ee17 2a90 	vmov	r2, s15
 801223a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801223e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012242:	eddf 6a29 	vldr	s13, [pc, #164]	; 80122e8 <__ieee754_expf+0x190>
 8012246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801224a:	e7be      	b.n	80121ca <__ieee754_expf+0x72>
 801224c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8012250:	d20b      	bcs.n	801226a <__ieee754_expf+0x112>
 8012252:	eddf 6a26 	vldr	s13, [pc, #152]	; 80122ec <__ieee754_expf+0x194>
 8012256:	ee70 6a26 	vadd.f32	s13, s0, s13
 801225a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012262:	dd02      	ble.n	801226a <__ieee754_expf+0x112>
 8012264:	ee30 0a25 	vadd.f32	s0, s0, s11
 8012268:	4770      	bx	lr
 801226a:	2200      	movs	r2, #0
 801226c:	e7af      	b.n	80121ce <__ieee754_expf+0x76>
 801226e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012272:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8012276:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801227a:	bfb8      	it	lt
 801227c:	3264      	addlt	r2, #100	; 0x64
 801227e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012282:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8012286:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801228a:	ee17 3a90 	vmov	r3, s15
 801228e:	bfab      	itete	ge
 8012290:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8012294:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8012298:	ee00 3a10 	vmovge	s0, r3
 801229c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80122f0 <__ieee754_expf+0x198>
 80122a0:	bfbc      	itt	lt
 80122a2:	ee00 3a10 	vmovlt	s0, r3
 80122a6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80122aa:	4770      	bx	lr
 80122ac:	00000000 	.word	0x00000000
 80122b0:	42b17217 	.word	0x42b17217
 80122b4:	42cff1b5 	.word	0x42cff1b5
 80122b8:	3eb17218 	.word	0x3eb17218
 80122bc:	3f851591 	.word	0x3f851591
 80122c0:	08146904 	.word	0x08146904
 80122c4:	0814690c 	.word	0x0814690c
 80122c8:	3331bb4c 	.word	0x3331bb4c
 80122cc:	b5ddea0e 	.word	0xb5ddea0e
 80122d0:	388ab355 	.word	0x388ab355
 80122d4:	bb360b61 	.word	0xbb360b61
 80122d8:	3e2aaaab 	.word	0x3e2aaaab
 80122dc:	081468fc 	.word	0x081468fc
 80122e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80122e4:	3f317180 	.word	0x3f317180
 80122e8:	3717f7d1 	.word	0x3717f7d1
 80122ec:	7149f2ca 	.word	0x7149f2ca
 80122f0:	0d800000 	.word	0x0d800000

080122f4 <with_errnof>:
 80122f4:	b513      	push	{r0, r1, r4, lr}
 80122f6:	4604      	mov	r4, r0
 80122f8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80122fc:	f7fc ff08 	bl	800f110 <__errno>
 8012300:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012304:	6004      	str	r4, [r0, #0]
 8012306:	b002      	add	sp, #8
 8012308:	bd10      	pop	{r4, pc}

0801230a <xflowf>:
 801230a:	b130      	cbz	r0, 801231a <xflowf+0x10>
 801230c:	eef1 7a40 	vneg.f32	s15, s0
 8012310:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012314:	2022      	movs	r0, #34	; 0x22
 8012316:	f7ff bfed 	b.w	80122f4 <with_errnof>
 801231a:	eef0 7a40 	vmov.f32	s15, s0
 801231e:	e7f7      	b.n	8012310 <xflowf+0x6>

08012320 <__math_uflowf>:
 8012320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012328 <__math_uflowf+0x8>
 8012324:	f7ff bff1 	b.w	801230a <xflowf>
 8012328:	10000000 	.word	0x10000000

0801232c <__math_oflowf>:
 801232c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012334 <__math_oflowf+0x8>
 8012330:	f7ff bfeb 	b.w	801230a <xflowf>
 8012334:	70000000 	.word	0x70000000

08012338 <finitef>:
 8012338:	b082      	sub	sp, #8
 801233a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801233e:	9801      	ldr	r0, [sp, #4]
 8012340:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012344:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012348:	bfac      	ite	ge
 801234a:	2000      	movge	r0, #0
 801234c:	2001      	movlt	r0, #1
 801234e:	b002      	add	sp, #8
 8012350:	4770      	bx	lr
	...

08012354 <_close>:
 8012354:	4b02      	ldr	r3, [pc, #8]	; (8012360 <_close+0xc>)
 8012356:	2258      	movs	r2, #88	; 0x58
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	f04f 30ff 	mov.w	r0, #4294967295
 801235e:	4770      	bx	lr
 8012360:	200020c0 	.word	0x200020c0

08012364 <_fstat>:
 8012364:	4b02      	ldr	r3, [pc, #8]	; (8012370 <_fstat+0xc>)
 8012366:	2258      	movs	r2, #88	; 0x58
 8012368:	601a      	str	r2, [r3, #0]
 801236a:	f04f 30ff 	mov.w	r0, #4294967295
 801236e:	4770      	bx	lr
 8012370:	200020c0 	.word	0x200020c0

08012374 <_getpid>:
 8012374:	4b02      	ldr	r3, [pc, #8]	; (8012380 <_getpid+0xc>)
 8012376:	2258      	movs	r2, #88	; 0x58
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	f04f 30ff 	mov.w	r0, #4294967295
 801237e:	4770      	bx	lr
 8012380:	200020c0 	.word	0x200020c0

08012384 <_isatty>:
 8012384:	4b02      	ldr	r3, [pc, #8]	; (8012390 <_isatty+0xc>)
 8012386:	2258      	movs	r2, #88	; 0x58
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	2000      	movs	r0, #0
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	200020c0 	.word	0x200020c0

08012394 <_kill>:
 8012394:	4b02      	ldr	r3, [pc, #8]	; (80123a0 <_kill+0xc>)
 8012396:	2258      	movs	r2, #88	; 0x58
 8012398:	601a      	str	r2, [r3, #0]
 801239a:	f04f 30ff 	mov.w	r0, #4294967295
 801239e:	4770      	bx	lr
 80123a0:	200020c0 	.word	0x200020c0

080123a4 <_lseek>:
 80123a4:	4b02      	ldr	r3, [pc, #8]	; (80123b0 <_lseek+0xc>)
 80123a6:	2258      	movs	r2, #88	; 0x58
 80123a8:	601a      	str	r2, [r3, #0]
 80123aa:	f04f 30ff 	mov.w	r0, #4294967295
 80123ae:	4770      	bx	lr
 80123b0:	200020c0 	.word	0x200020c0

080123b4 <_read>:
 80123b4:	4b02      	ldr	r3, [pc, #8]	; (80123c0 <_read+0xc>)
 80123b6:	2258      	movs	r2, #88	; 0x58
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	f04f 30ff 	mov.w	r0, #4294967295
 80123be:	4770      	bx	lr
 80123c0:	200020c0 	.word	0x200020c0

080123c4 <_write>:
 80123c4:	4b02      	ldr	r3, [pc, #8]	; (80123d0 <_write+0xc>)
 80123c6:	2258      	movs	r2, #88	; 0x58
 80123c8:	601a      	str	r2, [r3, #0]
 80123ca:	f04f 30ff 	mov.w	r0, #4294967295
 80123ce:	4770      	bx	lr
 80123d0:	200020c0 	.word	0x200020c0

080123d4 <_exit>:
 80123d4:	e7fe      	b.n	80123d4 <_exit>
	...

080123d8 <_init>:
 80123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123da:	bf00      	nop
 80123dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123de:	bc08      	pop	{r3}
 80123e0:	469e      	mov	lr, r3
 80123e2:	4770      	bx	lr

080123e4 <_fini>:
 80123e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123e6:	bf00      	nop
 80123e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ea:	bc08      	pop	{r3}
 80123ec:	469e      	mov	lr, r3
 80123ee:	4770      	bx	lr
