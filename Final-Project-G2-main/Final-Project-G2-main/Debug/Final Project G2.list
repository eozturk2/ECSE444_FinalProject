
Final Project G2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012268  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00134414  08012440  08012440  00022440  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08146854  08146854  00160d7c  2**0
                  CONTENTS
  4 .ARM          00000008  08146854  08146854  00156854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0814685c  0814685c  00160d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0814685c  0814685c  0015685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08146860  08146860  00156860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d7c  20000000  08146864  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012bc  20000d80  081475e0  00160d80  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000203c  081475e0  0016203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00160d7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000230a9  00000000  00000000  00160dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004419  00000000  00000000  00183e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00188270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00189b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f86a  00000000  00000000  0018b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f125  00000000  00000000  001baa9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121ff2  00000000  00000000  001d9bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  002fbbb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  002fbc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000106d  00000000  00000000  003038d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00304940  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00304a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000d80 	.word	0x20000d80
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012410 	.word	0x08012410

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000d84 	.word	0x20000d84
 80001fc:	08012410 	.word	0x08012410

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_frsub>:
 8000c18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	e002      	b.n	8000c24 <__addsf3>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_fsub>:
 8000c20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c24 <__addsf3>:
 8000c24:	0042      	lsls	r2, r0, #1
 8000c26:	bf1f      	itttt	ne
 8000c28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c2c:	ea92 0f03 	teqne	r2, r3
 8000c30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c38:	d06a      	beq.n	8000d10 <__addsf3+0xec>
 8000c3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c42:	bfc1      	itttt	gt
 8000c44:	18d2      	addgt	r2, r2, r3
 8000c46:	4041      	eorgt	r1, r0
 8000c48:	4048      	eorgt	r0, r1
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	bfb8      	it	lt
 8000c4e:	425b      	neglt	r3, r3
 8000c50:	2b19      	cmp	r3, #25
 8000c52:	bf88      	it	hi
 8000c54:	4770      	bxhi	lr
 8000c56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4249      	negne	r1, r1
 8000c76:	ea92 0f03 	teq	r2, r3
 8000c7a:	d03f      	beq.n	8000cfc <__addsf3+0xd8>
 8000c7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c80:	fa41 fc03 	asr.w	ip, r1, r3
 8000c84:	eb10 000c 	adds.w	r0, r0, ip
 8000c88:	f1c3 0320 	rsb	r3, r3, #32
 8000c8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__addsf3+0x78>
 8000c96:	4249      	negs	r1, r1
 8000c98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca0:	d313      	bcc.n	8000cca <__addsf3+0xa6>
 8000ca2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ca6:	d306      	bcc.n	8000cb6 <__addsf3+0x92>
 8000ca8:	0840      	lsrs	r0, r0, #1
 8000caa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cae:	f102 0201 	add.w	r2, r2, #1
 8000cb2:	2afe      	cmp	r2, #254	; 0xfe
 8000cb4:	d251      	bcs.n	8000d5a <__addsf3+0x136>
 8000cb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cbe:	bf08      	it	eq
 8000cc0:	f020 0001 	biceq.w	r0, r0, #1
 8000cc4:	ea40 0003 	orr.w	r0, r0, r3
 8000cc8:	4770      	bx	lr
 8000cca:	0049      	lsls	r1, r1, #1
 8000ccc:	eb40 0000 	adc.w	r0, r0, r0
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cd8:	d2ed      	bcs.n	8000cb6 <__addsf3+0x92>
 8000cda:	fab0 fc80 	clz	ip, r0
 8000cde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ce6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cea:	bfaa      	itet	ge
 8000cec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf0:	4252      	neglt	r2, r2
 8000cf2:	4318      	orrge	r0, r3
 8000cf4:	bfbc      	itt	lt
 8000cf6:	40d0      	lsrlt	r0, r2
 8000cf8:	4318      	orrlt	r0, r3
 8000cfa:	4770      	bx	lr
 8000cfc:	f092 0f00 	teq	r2, #0
 8000d00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d04:	bf06      	itte	eq
 8000d06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0a:	3201      	addeq	r2, #1
 8000d0c:	3b01      	subne	r3, #1
 8000d0e:	e7b5      	b.n	8000c7c <__addsf3+0x58>
 8000d10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d18:	bf18      	it	ne
 8000d1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1e:	d021      	beq.n	8000d64 <__addsf3+0x140>
 8000d20:	ea92 0f03 	teq	r2, r3
 8000d24:	d004      	beq.n	8000d30 <__addsf3+0x10c>
 8000d26:	f092 0f00 	teq	r2, #0
 8000d2a:	bf08      	it	eq
 8000d2c:	4608      	moveq	r0, r1
 8000d2e:	4770      	bx	lr
 8000d30:	ea90 0f01 	teq	r0, r1
 8000d34:	bf1c      	itt	ne
 8000d36:	2000      	movne	r0, #0
 8000d38:	4770      	bxne	lr
 8000d3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d3e:	d104      	bne.n	8000d4a <__addsf3+0x126>
 8000d40:	0040      	lsls	r0, r0, #1
 8000d42:	bf28      	it	cs
 8000d44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d48:	4770      	bx	lr
 8000d4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d4e:	bf3c      	itt	cc
 8000d50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bxcc	lr
 8000d56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	4770      	bx	lr
 8000d64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d68:	bf16      	itet	ne
 8000d6a:	4608      	movne	r0, r1
 8000d6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d70:	4601      	movne	r1, r0
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	bf06      	itte	eq
 8000d76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7a:	ea90 0f01 	teqeq	r0, r1
 8000d7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_ui2f>:
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e004      	b.n	8000d94 <__aeabi_i2f+0x8>
 8000d8a:	bf00      	nop

08000d8c <__aeabi_i2f>:
 8000d8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d90:	bf48      	it	mi
 8000d92:	4240      	negmi	r0, r0
 8000d94:	ea5f 0c00 	movs.w	ip, r0
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da0:	4601      	mov	r1, r0
 8000da2:	f04f 0000 	mov.w	r0, #0
 8000da6:	e01c      	b.n	8000de2 <__aeabi_l2f+0x2a>

08000da8 <__aeabi_ul2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e00a      	b.n	8000dcc <__aeabi_l2f+0x14>
 8000db6:	bf00      	nop

08000db8 <__aeabi_l2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc4:	d502      	bpl.n	8000dcc <__aeabi_l2f+0x14>
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dcc:	ea5f 0c01 	movs.w	ip, r1
 8000dd0:	bf02      	ittt	eq
 8000dd2:	4684      	moveq	ip, r0
 8000dd4:	4601      	moveq	r1, r0
 8000dd6:	2000      	moveq	r0, #0
 8000dd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ddc:	bf08      	it	eq
 8000dde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000de6:	fabc f28c 	clz	r2, ip
 8000dea:	3a08      	subs	r2, #8
 8000dec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df0:	db10      	blt.n	8000e14 <__aeabi_l2f+0x5c>
 8000df2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df6:	4463      	add	r3, ip
 8000df8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e04:	fa20 f202 	lsr.w	r2, r0, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	f020 0001 	biceq.w	r0, r0, #1
 8000e12:	4770      	bx	lr
 8000e14:	f102 0220 	add.w	r2, r2, #32
 8000e18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e24:	fa21 f202 	lsr.w	r2, r1, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_uldivmod>:
 8000e34:	b953      	cbnz	r3, 8000e4c <__aeabi_uldivmod+0x18>
 8000e36:	b94a      	cbnz	r2, 8000e4c <__aeabi_uldivmod+0x18>
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	bf08      	it	eq
 8000e3c:	2800      	cmpeq	r0, #0
 8000e3e:	bf1c      	itt	ne
 8000e40:	f04f 31ff 	movne.w	r1, #4294967295
 8000e44:	f04f 30ff 	movne.w	r0, #4294967295
 8000e48:	f000 b974 	b.w	8001134 <__aeabi_idiv0>
 8000e4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e54:	f000 f806 	bl	8000e64 <__udivmoddi4>
 8000e58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e60:	b004      	add	sp, #16
 8000e62:	4770      	bx	lr

08000e64 <__udivmoddi4>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	9d08      	ldr	r5, [sp, #32]
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	468e      	mov	lr, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d14d      	bne.n	8000f0e <__udivmoddi4+0xaa>
 8000e72:	428a      	cmp	r2, r1
 8000e74:	4694      	mov	ip, r2
 8000e76:	d969      	bls.n	8000f4c <__udivmoddi4+0xe8>
 8000e78:	fab2 f282 	clz	r2, r2
 8000e7c:	b152      	cbz	r2, 8000e94 <__udivmoddi4+0x30>
 8000e7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e82:	f1c2 0120 	rsb	r1, r2, #32
 8000e86:	fa20 f101 	lsr.w	r1, r0, r1
 8000e8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e92:	4094      	lsls	r4, r2
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	0c21      	lsrs	r1, r4, #16
 8000e9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e9e:	fa1f f78c 	uxth.w	r7, ip
 8000ea2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ea6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eaa:	fb06 f107 	mul.w	r1, r6, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d90a      	bls.n	8000ec8 <__udivmoddi4+0x64>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000eba:	f080 811f 	bcs.w	80010fc <__udivmoddi4+0x298>
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	f240 811c 	bls.w	80010fc <__udivmoddi4+0x298>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb00 f707 	mul.w	r7, r0, r7
 8000edc:	42a7      	cmp	r7, r4
 8000ede:	d90a      	bls.n	8000ef6 <__udivmoddi4+0x92>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	f080 810a 	bcs.w	8001100 <__udivmoddi4+0x29c>
 8000eec:	42a7      	cmp	r7, r4
 8000eee:	f240 8107 	bls.w	8001100 <__udivmoddi4+0x29c>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000efa:	1be4      	subs	r4, r4, r7
 8000efc:	2600      	movs	r6, #0
 8000efe:	b11d      	cbz	r5, 8000f08 <__udivmoddi4+0xa4>
 8000f00:	40d4      	lsrs	r4, r2
 8000f02:	2300      	movs	r3, #0
 8000f04:	e9c5 4300 	strd	r4, r3, [r5]
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d909      	bls.n	8000f26 <__udivmoddi4+0xc2>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	f000 80ef 	beq.w	80010f6 <__udivmoddi4+0x292>
 8000f18:	2600      	movs	r6, #0
 8000f1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1e:	4630      	mov	r0, r6
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	fab3 f683 	clz	r6, r3
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d14a      	bne.n	8000fc4 <__udivmoddi4+0x160>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d302      	bcc.n	8000f38 <__udivmoddi4+0xd4>
 8000f32:	4282      	cmp	r2, r0
 8000f34:	f200 80f9 	bhi.w	800112a <__udivmoddi4+0x2c6>
 8000f38:	1a84      	subs	r4, r0, r2
 8000f3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	469e      	mov	lr, r3
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d0e0      	beq.n	8000f08 <__udivmoddi4+0xa4>
 8000f46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f4a:	e7dd      	b.n	8000f08 <__udivmoddi4+0xa4>
 8000f4c:	b902      	cbnz	r2, 8000f50 <__udivmoddi4+0xec>
 8000f4e:	deff      	udf	#255	; 0xff
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	f040 8092 	bne.w	800107e <__udivmoddi4+0x21a>
 8000f5a:	eba1 010c 	sub.w	r1, r1, ip
 8000f5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f62:	fa1f fe8c 	uxth.w	lr, ip
 8000f66:	2601      	movs	r6, #1
 8000f68:	0c20      	lsrs	r0, r4, #16
 8000f6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f76:	fb0e f003 	mul.w	r0, lr, r3
 8000f7a:	4288      	cmp	r0, r1
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x12c>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x12a>
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	f200 80cb 	bhi.w	8001124 <__udivmoddi4+0x2c0>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f98:	fb07 1110 	mls	r1, r7, r0, r1
 8000f9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fa0:	fb0e fe00 	mul.w	lr, lr, r0
 8000fa4:	45a6      	cmp	lr, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x156>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d202      	bcs.n	8000fb8 <__udivmoddi4+0x154>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f200 80bb 	bhi.w	800112e <__udivmoddi4+0x2ca>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	eba4 040e 	sub.w	r4, r4, lr
 8000fbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fc2:	e79c      	b.n	8000efe <__udivmoddi4+0x9a>
 8000fc4:	f1c6 0720 	rsb	r7, r6, #32
 8000fc8:	40b3      	lsls	r3, r6
 8000fca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fd2:	fa20 f407 	lsr.w	r4, r0, r7
 8000fd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	40f9      	lsrs	r1, r7
 8000fde:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fe2:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fea:	0c20      	lsrs	r0, r4, #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ff4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ff8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ffc:	4288      	cmp	r0, r1
 8000ffe:	fa02 f206 	lsl.w	r2, r2, r6
 8001002:	d90b      	bls.n	800101c <__udivmoddi4+0x1b8>
 8001004:	eb1c 0101 	adds.w	r1, ip, r1
 8001008:	f108 3aff 	add.w	sl, r8, #4294967295
 800100c:	f080 8088 	bcs.w	8001120 <__udivmoddi4+0x2bc>
 8001010:	4288      	cmp	r0, r1
 8001012:	f240 8085 	bls.w	8001120 <__udivmoddi4+0x2bc>
 8001016:	f1a8 0802 	sub.w	r8, r8, #2
 800101a:	4461      	add	r1, ip
 800101c:	1a09      	subs	r1, r1, r0
 800101e:	b2a4      	uxth	r4, r4
 8001020:	fbb1 f0f9 	udiv	r0, r1, r9
 8001024:	fb09 1110 	mls	r1, r9, r0, r1
 8001028:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800102c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001030:	458e      	cmp	lr, r1
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x1e2>
 8001034:	eb1c 0101 	adds.w	r1, ip, r1
 8001038:	f100 34ff 	add.w	r4, r0, #4294967295
 800103c:	d26c      	bcs.n	8001118 <__udivmoddi4+0x2b4>
 800103e:	458e      	cmp	lr, r1
 8001040:	d96a      	bls.n	8001118 <__udivmoddi4+0x2b4>
 8001042:	3802      	subs	r0, #2
 8001044:	4461      	add	r1, ip
 8001046:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800104a:	fba0 9402 	umull	r9, r4, r0, r2
 800104e:	eba1 010e 	sub.w	r1, r1, lr
 8001052:	42a1      	cmp	r1, r4
 8001054:	46c8      	mov	r8, r9
 8001056:	46a6      	mov	lr, r4
 8001058:	d356      	bcc.n	8001108 <__udivmoddi4+0x2a4>
 800105a:	d053      	beq.n	8001104 <__udivmoddi4+0x2a0>
 800105c:	b15d      	cbz	r5, 8001076 <__udivmoddi4+0x212>
 800105e:	ebb3 0208 	subs.w	r2, r3, r8
 8001062:	eb61 010e 	sbc.w	r1, r1, lr
 8001066:	fa01 f707 	lsl.w	r7, r1, r7
 800106a:	fa22 f306 	lsr.w	r3, r2, r6
 800106e:	40f1      	lsrs	r1, r6
 8001070:	431f      	orrs	r7, r3
 8001072:	e9c5 7100 	strd	r7, r1, [r5]
 8001076:	2600      	movs	r6, #0
 8001078:	4631      	mov	r1, r6
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	f1c2 0320 	rsb	r3, r2, #32
 8001082:	40d8      	lsrs	r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	fa21 f303 	lsr.w	r3, r1, r3
 800108c:	4091      	lsls	r1, r2
 800108e:	4301      	orrs	r1, r0
 8001090:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001094:	fa1f fe8c 	uxth.w	lr, ip
 8001098:	fbb3 f0f7 	udiv	r0, r3, r7
 800109c:	fb07 3610 	mls	r6, r7, r0, r3
 80010a0:	0c0b      	lsrs	r3, r1, #16
 80010a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010a6:	fb00 f60e 	mul.w	r6, r0, lr
 80010aa:	429e      	cmp	r6, r3
 80010ac:	fa04 f402 	lsl.w	r4, r4, r2
 80010b0:	d908      	bls.n	80010c4 <__udivmoddi4+0x260>
 80010b2:	eb1c 0303 	adds.w	r3, ip, r3
 80010b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80010ba:	d22f      	bcs.n	800111c <__udivmoddi4+0x2b8>
 80010bc:	429e      	cmp	r6, r3
 80010be:	d92d      	bls.n	800111c <__udivmoddi4+0x2b8>
 80010c0:	3802      	subs	r0, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1b9b      	subs	r3, r3, r6
 80010c6:	b289      	uxth	r1, r1
 80010c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80010cc:	fb07 3316 	mls	r3, r7, r6, r3
 80010d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010d4:	fb06 f30e 	mul.w	r3, r6, lr
 80010d8:	428b      	cmp	r3, r1
 80010da:	d908      	bls.n	80010ee <__udivmoddi4+0x28a>
 80010dc:	eb1c 0101 	adds.w	r1, ip, r1
 80010e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80010e4:	d216      	bcs.n	8001114 <__udivmoddi4+0x2b0>
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d914      	bls.n	8001114 <__udivmoddi4+0x2b0>
 80010ea:	3e02      	subs	r6, #2
 80010ec:	4461      	add	r1, ip
 80010ee:	1ac9      	subs	r1, r1, r3
 80010f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010f4:	e738      	b.n	8000f68 <__udivmoddi4+0x104>
 80010f6:	462e      	mov	r6, r5
 80010f8:	4628      	mov	r0, r5
 80010fa:	e705      	b.n	8000f08 <__udivmoddi4+0xa4>
 80010fc:	4606      	mov	r6, r0
 80010fe:	e6e3      	b.n	8000ec8 <__udivmoddi4+0x64>
 8001100:	4618      	mov	r0, r3
 8001102:	e6f8      	b.n	8000ef6 <__udivmoddi4+0x92>
 8001104:	454b      	cmp	r3, r9
 8001106:	d2a9      	bcs.n	800105c <__udivmoddi4+0x1f8>
 8001108:	ebb9 0802 	subs.w	r8, r9, r2
 800110c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001110:	3801      	subs	r0, #1
 8001112:	e7a3      	b.n	800105c <__udivmoddi4+0x1f8>
 8001114:	4646      	mov	r6, r8
 8001116:	e7ea      	b.n	80010ee <__udivmoddi4+0x28a>
 8001118:	4620      	mov	r0, r4
 800111a:	e794      	b.n	8001046 <__udivmoddi4+0x1e2>
 800111c:	4640      	mov	r0, r8
 800111e:	e7d1      	b.n	80010c4 <__udivmoddi4+0x260>
 8001120:	46d0      	mov	r8, sl
 8001122:	e77b      	b.n	800101c <__udivmoddi4+0x1b8>
 8001124:	3b02      	subs	r3, #2
 8001126:	4461      	add	r1, ip
 8001128:	e732      	b.n	8000f90 <__udivmoddi4+0x12c>
 800112a:	4630      	mov	r0, r6
 800112c:	e709      	b.n	8000f42 <__udivmoddi4+0xde>
 800112e:	4464      	add	r4, ip
 8001130:	3802      	subs	r0, #2
 8001132:	e742      	b.n	8000fba <__udivmoddi4+0x156>

08001134 <__aeabi_idiv0>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <flashWrite>:
 * @param write_array_size: Size of array to write to memory
 * @param label: User-defined classification label of write_array
 * @retval None
 */
void flashWrite(uint8_t* write_array, int write_array_size, uint8_t label)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ce      	sub	sp, #312	; 0x138
 800113c:	af00      	add	r7, sp, #0
 800113e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800114c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001156:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800115a:	701a      	strb	r2, [r3, #0]
	// For this demo, only use the start addresses of blocks. In an actual application,
	// this wasteful method would be replaced by a struct that buffers multiple sample
	// arrays and autosaves them at certain intervals.
	uint32_t current_addr = (num_samples+1) * 64 * 1024;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <flashWrite+0x100>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	041b      	lsls	r3, r3, #16
 8001164:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	// Erase the current block first
	if(BSP_QSPI_Erase_Block(current_addr) != QSPI_OK) {
 8001168:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800116c:	f001 f9f0 	bl	8002550 <BSP_QSPI_Erase_Block>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <flashWrite+0x42>
			Error_Handler();
 8001176:	f000 fee9 	bl	8001f4c <Error_Handler>
	}

	// Write the label byte to the current address
	if(BSP_QSPI_Write(&label, current_addr, 1) != QSPI_OK) {
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	2201      	movs	r2, #1
 800117e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001182:	4618      	mov	r0, r3
 8001184:	f001 f95e 	bl	8002444 <BSP_QSPI_Write>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <flashWrite+0x5a>
			Error_Handler();
 800118e:	f000 fedd 	bl	8001f4c <Error_Handler>
	}

	// Read back the label byte for verification
	uint8_t label_read;
	if(BSP_QSPI_Read(&label_read, current_addr, 1)!= QSPI_OK) {
 8001192:	f207 1333 	addw	r3, r7, #307	; 0x133
 8001196:	2201      	movs	r2, #1
 8001198:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800119c:	4618      	mov	r0, r3
 800119e:	f001 f8ff 	bl	80023a0 <BSP_QSPI_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <flashWrite+0x74>
			Error_Handler();
 80011a8:	f000 fed0 	bl	8001f4c <Error_Handler>
	}

	// Increment the current write address by 1 to account for the label byte.
	current_addr += 1;
 80011ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	// Write the data array to current write address
	if(BSP_QSPI_Write(write_array, current_addr, 288) != QSPI_OK) {
 80011b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011be:	f44f 7290 	mov.w	r2, #288	; 0x120
 80011c2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f001 f93c 	bl	8002444 <BSP_QSPI_Write>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <flashWrite+0x9e>
			Error_Handler();
 80011d2:	f000 febb 	bl	8001f4c <Error_Handler>
	}

	// Read the data array from the current address and check for errors.
	uint8_t arr_cp[288];
	if(BSP_QSPI_Read(arr_cp, current_addr, 288)!= QSPI_OK) {
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	f44f 7290 	mov.w	r2, #288	; 0x120
 80011de:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f8dc 	bl	80023a0 <BSP_QSPI_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <flashWrite+0xba>
			Error_Handler();
 80011ee:	f000 fead 	bl	8001f4c <Error_Handler>
	}

	// Increment the current block number.
	++current_block;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <flashWrite+0x104>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <flashWrite+0x104>)
 80011fc:	701a      	strb	r2, [r3, #0]

	// Erase the first block and check for errors.
	if(BSP_QSPI_Erase_Block(0x00) != QSPI_OK) {
 80011fe:	2000      	movs	r0, #0
 8001200:	f001 f9a6 	bl	8002550 <BSP_QSPI_Erase_Block>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <flashWrite+0xd6>
			Error_Handler();
 800120a:	f000 fe9f 	bl	8001f4c <Error_Handler>
	}

	// Increment the number of samples.
	++num_samples;
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <flashWrite+0x100>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <flashWrite+0x100>)
 8001218:	701a      	strb	r2, [r3, #0]

	// Write the updated number of samples to the beginning of the flash memory and check for errors.
	if(BSP_QSPI_Write(&num_samples, 0x00, sizeof(num_samples)) != QSPI_OK) {
 800121a:	2201      	movs	r2, #1
 800121c:	2100      	movs	r1, #0
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <flashWrite+0x100>)
 8001220:	f001 f910 	bl	8002444 <BSP_QSPI_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <flashWrite+0xf6>
			Error_Handler();
 800122a:	f000 fe8f 	bl	8001f4c <Error_Handler>
	}
}
 800122e:	bf00      	nop
 8001230:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20001e84 	.word	0x20001e84
 800123c:	200001b4 	.word	0x200001b4

08001240 <flashRead>:
 * @brief This function reads the contents of flash memory and outputs them over UART.
 * @param None
 * @retval None
 */
void flashRead()
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b0df      	sub	sp, #380	; 0x17c
 8001244:	af02      	add	r7, sp, #8
	// Loop through each saved sample
	for (int i=1; i<=num_samples; ++i)
 8001246:	2301      	movs	r3, #1
 8001248:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800124c:	e09f      	b.n	800138e <flashRead+0x14e>
	{
		// Calculate the address of the current sample
		uint32_t addr = i * 64 * 1024;
 800124e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

		// Read the label of the current sample
		uint8_t current_label;
		if(BSP_QSPI_Read(&current_label, addr, sizeof(current_label))!= QSPI_OK) Error_Handler();
 8001258:	f207 1363 	addw	r3, r7, #355	; 0x163
 800125c:	2201      	movs	r2, #1
 800125e:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f89c 	bl	80023a0 <BSP_QSPI_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <flashRead+0x32>
 800126e:	f000 fe6d 	bl	8001f4c <Error_Handler>

		// Increment the address to read the sample array
		addr += sizeof(current_label);
 8001272:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001276:	3301      	adds	r3, #1
 8001278:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

		// Read the sample array
		uint8_t arr[288];
		if(BSP_QSPI_Read(arr, addr, sizeof(arr))!= QSPI_OK) Error_Handler();
 800127c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001280:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001284:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001288:	4618      	mov	r0, r3
 800128a:	f001 f889 	bl	80023a0 <BSP_QSPI_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <flashRead+0x58>
 8001294:	f000 fe5a 	bl	8001f4c <Error_Handler>

		// Print the label of the current sample
		char task_dsc[40] = "";
 8001298:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800129c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2224      	movs	r2, #36	; 0x24
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00d ff8e 	bl	800f1cc <memset>
		sprintf(task_dsc, "\r\n%s\r\n", output_labels[current_label-1]);
 80012b0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	4613      	mov	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <flashRead+0x16c>)
 80012c0:	441a      	add	r2, r3
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	493a      	ldr	r1, [pc, #232]	; (80013b0 <flashRead+0x170>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00e fce2 	bl	800fc90 <siprintf>
		HAL_UART_Transmit(&huart1, task_dsc, sizeof(task_dsc), HAL_MAX_DELAY);
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	4837      	ldr	r0, [pc, #220]	; (80013b4 <flashRead+0x174>)
 80012d6:	f006 fbc5 	bl	8007a64 <HAL_UART_Transmit>

		// Print each line of the sample array
		for (int j=0; j<288/3; ++j)
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80012e0:	e040      	b.n	8001364 <flashRead+0x124>
		{
			char current_line[20] = "";
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
			sprintf(current_line, "\r\n%d, %d, %d", arr[j*3], arr[j*3+1],arr[j*3+2]);
 80012f6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001304:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	4619      	mov	r1, r3
 800130c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	3301      	adds	r3, #1
 8001318:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800131c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	461c      	mov	r4, r3
 8001324:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	3302      	adds	r3, #2
 8001330:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001334:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4623      	mov	r3, r4
 8001342:	460a      	mov	r2, r1
 8001344:	491c      	ldr	r1, [pc, #112]	; (80013b8 <flashRead+0x178>)
 8001346:	f00e fca3 	bl	800fc90 <siprintf>
			HAL_UART_Transmit(&huart1, current_line, sizeof(current_line), HAL_MAX_DELAY);
 800134a:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	2214      	movs	r2, #20
 8001354:	4817      	ldr	r0, [pc, #92]	; (80013b4 <flashRead+0x174>)
 8001356:	f006 fb85 	bl	8007a64 <HAL_UART_Transmit>
		for (int j=0; j<288/3; ++j)
 800135a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800135e:	3301      	adds	r3, #1
 8001360:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001364:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001368:	2b5f      	cmp	r3, #95	; 0x5f
 800136a:	ddba      	ble.n	80012e2 <flashRead+0xa2>
		}

		// Print a newline character to separate samples
		char newline[2] = "\r\n";
 800136c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001370:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8001374:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2202      	movs	r2, #2
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <flashRead+0x174>)
 8001380:	f006 fb70 	bl	8007a64 <HAL_UART_Transmit>
	for (int i=1; i<=num_samples; ++i)
 8001384:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001388:	3301      	adds	r3, #1
 800138a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <flashRead+0x17c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001398:	4293      	cmp	r3, r2
 800139a:	f77f af58 	ble.w	800124e <flashRead+0xe>
	}
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000
 80013b0:	08012440 	.word	0x08012440
 80013b4:	20000eb0 	.word	0x20000eb0
 80013b8:	08012448 	.word	0x08012448
 80013bc:	20001e84 	.word	0x20001e84

080013c0 <aiInit>:
 * to the model's input/output tensors.
 *
 * @return 0 if initialization is successful, 1 if an error occurs.
 */
int aiInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  ai_error err;

  // Create and initialize the model
  const ai_handle acts[] = { activations };
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <aiInit+0x54>)
 80013c8:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 80013ca:	463b      	mov	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <aiInit+0x58>)
 80013d2:	f007 fbe7 	bl	8008ba4 <ai_network_create_and_init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {return 1;}
 80013da:	793b      	ldrb	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <aiInit+0x24>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e012      	b.n	800140a <aiInit+0x4a>

  // Receive pointers to the model's input/output tensors
  ai_input = ai_network_inputs_get(network, NULL);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <aiInit+0x58>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fc4e 	bl	8008c8c <ai_network_inputs_get>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <aiInit+0x5c>)
 80013f4:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <aiInit+0x58>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 fc5f 	bl	8008cc0 <ai_network_outputs_get>
 8001402:	4603      	mov	r3, r0
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <aiInit+0x60>)
 8001406:	6013      	str	r3, [r2, #0]

  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000f60 	.word	0x20000f60
 8001418:	20000f40 	.word	0x20000f40
 800141c:	20001be0 	.word	0x20001be0
 8001420:	20001be4 	.word	0x20001be4

08001424 <aiRun>:
 * @param in_data Pointer to the input data.
 * @param out_data Pointer to the output data.
 * @return 0 if the inference is successful, -1 if an error occurs.
 */
int aiRun(const void *in_data, void *out_data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <aiRun+0x44>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <aiRun+0x48>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <aiRun+0x4c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <aiRun+0x44>)
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <aiRun+0x48>)
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f007 fc8e 	bl	8008d6c <ai_network_run>
 8001450:	60f8      	str	r0, [r7, #12]
  if (n_batch != 1) {return -1;}
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d002      	beq.n	800145e <aiRun+0x3a>
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	e000      	b.n	8001460 <aiRun+0x3c>

  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20001be0 	.word	0x20001be0
 800146c:	20001be4 	.word	0x20001be4
 8001470:	20000f40 	.word	0x20000f40

08001474 <formatOutputFromResult>:
 * @param time_ms The time taken in milliseconds.
 * @param movement_changed Flag indicating whether the movement has changed or not.
 * @return 0 if the output is successfully formatted.
 */
int formatOutputFromResult(uint32_t classification_result, uint32_t time_ms, uint8_t movement_changed)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0aa      	sub	sp, #168	; 0xa8
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	71fb      	strb	r3, [r7, #7]
	char output_string[70] = "";
 8001482:	2300      	movs	r3, #0
 8001484:	663b      	str	r3, [r7, #96]	; 0x60
 8001486:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800148a:	2242      	movs	r2, #66	; 0x42
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00d fe9c 	bl	800f1cc <memset>
	char interbuf[70] = "";
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2242      	movs	r2, #66	; 0x42
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00d fe93 	bl	800f1cc <memset>

	if(movement_changed)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00d      	beq.n	80014c8 <formatOutputFromResult+0x54>
	{
		// Output the classification result
		sprintf(output_string, "%s", output_labels[classification_result]);
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4613      	mov	r3, r2
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <formatOutputFromResult+0xd8>)
 80014b8:	441a      	add	r2, r3
 80014ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014be:	4924      	ldr	r1, [pc, #144]	; (8001550 <formatOutputFromResult+0xdc>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00e fbe5 	bl	800fc90 <siprintf>
 80014c6:	e033      	b.n	8001530 <formatOutputFromResult+0xbc>
	}
	else
	{
		// Output the classification result and the time taken
		sprintf(output_string, "%s for %d seconds", output_labels[classification_result], time_ms/1000);
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <formatOutputFromResult+0xd8>)
 80014d4:	441a      	add	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	491e      	ldr	r1, [pc, #120]	; (8001554 <formatOutputFromResult+0xe0>)
 80014da:	fba1 1303 	umull	r1, r3, r1, r3
 80014de:	099b      	lsrs	r3, r3, #6
 80014e0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80014e4:	491c      	ldr	r1, [pc, #112]	; (8001558 <formatOutputFromResult+0xe4>)
 80014e6:	f00e fbd3 	bl	800fc90 <siprintf>

		// Clear the line before outputting the result
		char clear_line[] = "\x1B[2K\r"; // escape code to clear line
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <formatOutputFromResult+0xe8>)
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f4:	6018      	str	r0, [r3, #0]
 80014f6:	3304      	adds	r3, #4
 80014f8:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)clear_line, strlen(clear_line), HAL_MAX_DELAY);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe7e 	bl	8000200 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f107 0110 	add.w	r1, r7, #16
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4813      	ldr	r0, [pc, #76]	; (8001560 <formatOutputFromResult+0xec>)
 8001512:	f006 faa7 	bl	8007a64 <HAL_UART_Transmit>

		// Copy the classification result to a buffer
		strcpy(interbuf, output_labels[classification_result]);
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4613      	mov	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <formatOutputFromResult+0xd8>)
 8001522:	441a      	add	r2, r3
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f00e fbd0 	bl	800fcd0 <strcpy>
	}

	// Transmit the output string via UART
	HAL_UART_Transmit(&huart1, output_string, sizeof(output_string), HAL_MAX_DELAY);
 8001530:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	2246      	movs	r2, #70	; 0x46
 800153a:	4809      	ldr	r0, [pc, #36]	; (8001560 <formatOutputFromResult+0xec>)
 800153c:	f006 fa92 	bl	8007a64 <HAL_UART_Transmit>

	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	37a8      	adds	r7, #168	; 0xa8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	08012458 	.word	0x08012458
 8001554:	10624dd3 	.word	0x10624dd3
 8001558:	0801245c 	.word	0x0801245c
 800155c:	08012470 	.word	0x08012470
 8001560:	20000eb0 	.word	0x20000eb0

08001564 <getUserInput>:
 * and waits for the user's input via UART.
 *
 * @return The task number entered by the user.
 */
uint8_t getUserInput(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0aa      	sub	sp, #168	; 0xa8
 8001568:	af00      	add	r7, sp, #0
	// Initialize variables
	char prompt[40] = "", first_task[40] = "", end_prompt[40]="";
 800156a:	2300      	movs	r3, #0
 800156c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800156e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00d fe28 	bl	800f1cc <memset>
 800157c:	2300      	movs	r3, #0
 800157e:	657b      	str	r3, [r7, #84]	; 0x54
 8001580:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001584:	2224      	movs	r2, #36	; 0x24
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f00d fe1f 	bl	800f1cc <memset>
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00d fe16 	bl	800f1cc <memset>
	char response[2] = "";
 80015a0:	2300      	movs	r3, #0
 80015a2:	853b      	strh	r3, [r7, #40]	; 0x28
	int i;

	// Output prompt and first task option
	sprintf(prompt, "Enter the task number as follows:\r\n");
 80015a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015a8:	4938      	ldr	r1, [pc, #224]	; (800168c <getUserInput+0x128>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00e fb70 	bl	800fc90 <siprintf>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80015b0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	2228      	movs	r2, #40	; 0x28
 80015ba:	4835      	ldr	r0, [pc, #212]	; (8001690 <getUserInput+0x12c>)
 80015bc:	f006 fa52 	bl	8007a64 <HAL_UART_Transmit>
	sprintf(first_task, "%02d - %s\r\n", 0, "TO TRANSMIT THROUGH UART");
 80015c0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <getUserInput+0x130>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	4933      	ldr	r1, [pc, #204]	; (8001698 <getUserInput+0x134>)
 80015ca:	f00e fb61 	bl	800fc90 <siprintf>
	HAL_UART_Transmit(&huart1, first_task, sizeof(first_task), HAL_MAX_DELAY);
 80015ce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	482d      	ldr	r0, [pc, #180]	; (8001690 <getUserInput+0x12c>)
 80015da:	f006 fa43 	bl	8007a64 <HAL_UART_Transmit>

	// Output the rest of the task options
	for (i = 0; i < 14; ++i)
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80015e4:	e023      	b.n	800162e <getUserInput+0xca>
	{
		char task[40] = "";
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00d fdeb 	bl	800f1cc <memset>
		sprintf(task, "%02d - %s\r\n", i + 1, output_labels[i]);
 80015f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <getUserInput+0x138>)
 800160a:	4413      	add	r3, r2
 800160c:	4638      	mov	r0, r7
 800160e:	460a      	mov	r2, r1
 8001610:	4921      	ldr	r1, [pc, #132]	; (8001698 <getUserInput+0x134>)
 8001612:	f00e fb3d 	bl	800fc90 <siprintf>
		HAL_UART_Transmit(&huart1, task, sizeof(task), HAL_MAX_DELAY);
 8001616:	4639      	mov	r1, r7
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2228      	movs	r2, #40	; 0x28
 800161e:	481c      	ldr	r0, [pc, #112]	; (8001690 <getUserInput+0x12c>)
 8001620:	f006 fa20 	bl	8007a64 <HAL_UART_Transmit>
	for (i = 0; i < 14; ++i)
 8001624:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001628:	3301      	adds	r3, #1
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800162e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001632:	2b0d      	cmp	r3, #13
 8001634:	ddd7      	ble.n	80015e6 <getUserInput+0x82>
	}

	//Output final option
	sprintf(end_prompt, "%02d - %s\r\n", 15, "TO ERASE FLASH");
 8001636:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <getUserInput+0x13c>)
 800163c:	220f      	movs	r2, #15
 800163e:	4916      	ldr	r1, [pc, #88]	; (8001698 <getUserInput+0x134>)
 8001640:	f00e fb26 	bl	800fc90 <siprintf>
	HAL_UART_Transmit(&huart1, end_prompt, sizeof(end_prompt), HAL_MAX_DELAY);
 8001644:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	2228      	movs	r2, #40	; 0x28
 800164e:	4810      	ldr	r0, [pc, #64]	; (8001690 <getUserInput+0x12c>)
 8001650:	f006 fa08 	bl	8007a64 <HAL_UART_Transmit>

	// Wait for the user's input via UART
	HAL_UART_Receive(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8001654:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	2202      	movs	r2, #2
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <getUserInput+0x12c>)
 8001660:	f006 fa97 	bl	8007b92 <HAL_UART_Receive>

	// Transmit the user's input via UART
	HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8001664:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2202      	movs	r2, #2
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <getUserInput+0x12c>)
 8001670:	f006 f9f8 	bl	8007a64 <HAL_UART_Transmit>

	// Convert the user's input to an integer and return it
	return atoi(response);
 8001674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001678:	4618      	mov	r0, r3
 800167a:	f00d fd63 	bl	800f144 <atoi>
 800167e:	4603      	mov	r3, r0
 8001680:	b2db      	uxtb	r3, r3
}
 8001682:	4618      	mov	r0, r3
 8001684:	37a8      	adds	r7, #168	; 0xa8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	08012478 	.word	0x08012478
 8001690:	20000eb0 	.word	0x20000eb0
 8001694:	0801249c 	.word	0x0801249c
 8001698:	080124b8 	.word	0x080124b8
 800169c:	20000000 	.word	0x20000000
 80016a0:	080124c4 	.word	0x080124c4

080016a4 <resetFlash>:
 * @brief This function sets the number of samples to zero, so we can overwrite old samples
 * @param None
 * @retval None
 */
void resetFlash()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
	char info[20], ack[20];

	// Inform erase procedure
	sprintf(info, "\r\nERASING");
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4914      	ldr	r1, [pc, #80]	; (8001700 <resetFlash+0x5c>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00e faed 	bl	800fc90 <siprintf>
	HAL_UART_Transmit(&huart1, info, sizeof(info), HAL_MAX_DELAY);
 80016b6:	f107 0114 	add.w	r1, r7, #20
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	2214      	movs	r2, #20
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <resetFlash+0x60>)
 80016c2:	f006 f9cf 	bl	8007a64 <HAL_UART_Transmit>

	// Reset number of samples to zero
	num_samples = 0;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <resetFlash+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]

	// Write 0 to address of sample count
	if(BSP_QSPI_Write(&num_samples, 0x00, sizeof(num_samples)) != QSPI_OK) {
 80016cc:	2201      	movs	r2, #1
 80016ce:	2100      	movs	r1, #0
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <resetFlash+0x64>)
 80016d2:	f000 feb7 	bl	8002444 <BSP_QSPI_Write>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <resetFlash+0x3c>
			Error_Handler();
 80016dc:	f000 fc36 	bl	8001f4c <Error_Handler>
	}

	// Acknowledge erase
	sprintf(ack, "\r\nERASED\r\n");
 80016e0:	463b      	mov	r3, r7
 80016e2:	490a      	ldr	r1, [pc, #40]	; (800170c <resetFlash+0x68>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00e fad3 	bl	800fc90 <siprintf>
	HAL_UART_Transmit(&huart1, ack, sizeof(ack), HAL_MAX_DELAY);
 80016ea:	4639      	mov	r1, r7
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	2214      	movs	r2, #20
 80016f2:	4804      	ldr	r0, [pc, #16]	; (8001704 <resetFlash+0x60>)
 80016f4:	f006 f9b6 	bl	8007a64 <HAL_UART_Transmit>
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	080124d4 	.word	0x080124d4
 8001704:	20000eb0 	.word	0x20000eb0
 8001708:	20001e84 	.word	0x20001e84
 800170c:	080124e0 	.word	0x080124e0

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b09e      	sub	sp, #120	; 0x78
 8001714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f001 fe33 	bl	8003380 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_fir_init_f32(&x_instance, WINDOW_SIZE, coeff, x_state, 1);
 800171a:	2301      	movs	r3, #1
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <main+0x1c4>)
 8001720:	4a6d      	ldr	r2, [pc, #436]	; (80018d8 <main+0x1c8>)
 8001722:	2101      	movs	r1, #1
 8001724:	486d      	ldr	r0, [pc, #436]	; (80018dc <main+0x1cc>)
 8001726:	f00d fa7d 	bl	800ec24 <arm_fir_init_f32>
  arm_fir_init_f32(&y_instance, WINDOW_SIZE, coeff, y_state, 1);
 800172a:	2301      	movs	r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <main+0x1d0>)
 8001730:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <main+0x1c8>)
 8001732:	2101      	movs	r1, #1
 8001734:	486b      	ldr	r0, [pc, #428]	; (80018e4 <main+0x1d4>)
 8001736:	f00d fa75 	bl	800ec24 <arm_fir_init_f32>
  arm_fir_init_f32(&z_instance, WINDOW_SIZE, coeff, z_state, 1);
 800173a:	2301      	movs	r3, #1
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <main+0x1d8>)
 8001740:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <main+0x1c8>)
 8001742:	2101      	movs	r1, #1
 8001744:	4869      	ldr	r0, [pc, #420]	; (80018ec <main+0x1dc>)
 8001746:	f00d fa6d 	bl	800ec24 <arm_fir_init_f32>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f8ed 	bl	8001928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 fa67 	bl	8001c20 <MX_GPIO_Init>
  MX_CRC_Init();
 8001752:	f000 f93b 	bl	80019cc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001756:	f000 fa17 	bl	8001b88 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800175a:	f000 f9ef 	bl	8001b3c <MX_TIM17_Init>
  MX_I2C2_Init();
 800175e:	f000 f957 	bl	8001a10 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001762:	f000 f995 	bl	8001a90 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize different drivers
  aiInit();
 8001766:	f7ff fe2b 	bl	80013c0 <aiInit>
  BSP_ACCELERO_Init();
 800176a:	f000 fd45 	bl	80021f8 <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 800176e:	f000 fd99 	bl	80022a4 <BSP_QSPI_Init>

  // On startup, read from the first block to know where the processor left off
  if(BSP_QSPI_Read(&num_samples, 0x00, sizeof(num_samples))!= QSPI_OK) Error_Handler();
 8001772:	2201      	movs	r2, #1
 8001774:	2100      	movs	r1, #0
 8001776:	485e      	ldr	r0, [pc, #376]	; (80018f0 <main+0x1e0>)
 8001778:	f000 fe12 	bl	80023a0 <BSP_QSPI_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <main+0x76>
 8001782:	f000 fbe3 	bl	8001f4c <Error_Handler>

  // Start accelerometer sampling timer
  HAL_TIM_Base_Start_IT(&htim17);
 8001786:	485b      	ldr	r0, [pc, #364]	; (80018f4 <main+0x1e4>)
 8001788:	f005 fe7e 	bl	8007488 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	// If the timer interrupt signals that the array is full, stop the sampling timer. Copy the
	// current samples into a buffer, give permission to the interrupt to restart sampling, and
	// start the sampling timer.
    if (array_ready)
 800178c:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <main+0x1e8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d014      	beq.n	80017c0 <main+0xb0>
    {
    	HAL_TIM_Base_Stop_IT(&htim17);
 8001796:	4857      	ldr	r0, [pc, #348]	; (80018f4 <main+0x1e4>)
 8001798:	f005 fee6 	bl	8007568 <HAL_TIM_Base_Stop_IT>
    	memcpy(copied_Data, current_Data, 288);
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <main+0x1ec>)
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <main+0x1f0>)
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80017a8:	461a      	mov	r2, r3
 80017aa:	f00d fd01 	bl	800f1b0 <memcpy>
    	array_idx = 0;
 80017ae:	4b55      	ldr	r3, [pc, #340]	; (8001904 <main+0x1f4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
    	array_ready = 0;
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <main+0x1e8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim17);
 80017ba:	484e      	ldr	r0, [pc, #312]	; (80018f4 <main+0x1e4>)
 80017bc:	f005 fe64 	bl	8007488 <HAL_TIM_Base_Start_IT>
    }

    if (mode == SAMPLE)
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <main+0x1f8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d14b      	bne.n	8001862 <main+0x152>
    {
    	// Prompt the user to enter what kind of motion they were doing. If they enter 0, then
    	// print the contents of flash memory to get extra training data
    	uint8_t userVal = getUserInput();
 80017ca:	f7ff fecb 	bl	8001564 <getUserInput>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    	if (userVal == 0)
 80017d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <main+0xd2>
    	{
    		flashRead();
 80017dc:	f7ff fd30 	bl	8001240 <flashRead>
 80017e0:	e7d4      	b.n	800178c <main+0x7c>
    	}
    	else if (userVal == 15)
 80017e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d102      	bne.n	80017f0 <main+0xe0>
    	{
    		resetFlash();
 80017ea:	f7ff ff5b 	bl	80016a4 <resetFlash>
 80017ee:	e7cd      	b.n	800178c <main+0x7c>
    	}
    	else
    	{
    		// If a nonzero value is entered in the prompt, save the current buffer along with
    		// the given label.
    	char ack[70] = "";
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f8:	2242      	movs	r2, #66	; 0x42
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00d fce5 	bl	800f1cc <memset>
    	sprintf(ack, "\r\nSaving last 3 seconds with label: %02d\r\n", userVal);
 8001802:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180a:	4940      	ldr	r1, [pc, #256]	; (800190c <main+0x1fc>)
 800180c:	4618      	mov	r0, r3
 800180e:	f00e fa3f 	bl	800fc90 <siprintf>
			HAL_UART_Transmit(&huart1, ack, sizeof(ack), HAL_MAX_DELAY);
 8001812:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	2246      	movs	r2, #70	; 0x46
 800181c:	483c      	ldr	r0, [pc, #240]	; (8001910 <main+0x200>)
 800181e:	f006 f921 	bl	8007a64 <HAL_UART_Transmit>
			flashWrite(copied_Data, 288, userVal);
 8001822:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001826:	461a      	mov	r2, r3
 8001828:	f44f 7190 	mov.w	r1, #288	; 0x120
 800182c:	4833      	ldr	r0, [pc, #204]	; (80018fc <main+0x1ec>)
 800182e:	f7ff fc83 	bl	8001138 <flashWrite>
			char fin[40] = "";
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2224      	movs	r2, #36	; 0x24
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f00d fcc5 	bl	800f1cc <memset>
			sprintf(fin, "\r\nDone!\n");
 8001842:	463b      	mov	r3, r7
 8001844:	4933      	ldr	r1, [pc, #204]	; (8001914 <main+0x204>)
 8001846:	4618      	mov	r0, r3
 8001848:	f00e fa22 	bl	800fc90 <siprintf>
			HAL_UART_Transmit(&huart1, fin, sizeof(fin), HAL_MAX_DELAY);
 800184c:	4639      	mov	r1, r7
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	482e      	ldr	r0, [pc, #184]	; (8001910 <main+0x200>)
 8001856:	f006 f905 	bl	8007a64 <HAL_UART_Transmit>
			mode = INFER;
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <main+0x1f8>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e794      	b.n	800178c <main+0x7c>
    }
    else
    {
    	// Do inference
    	float out_data[14];
    	aiRun(copied_Data, out_data);
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	4619      	mov	r1, r3
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <main+0x1ec>)
 800186a:	f7ff fddb 	bl	8001424 <aiRun>

    	// Get the index of the maximum of the final activation layer
    	arm_max_f32(out_data, 14, NULL, &current_movement);
 800186e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <main+0x208>)
 8001874:	2200      	movs	r2, #0
 8001876:	210e      	movs	r1, #14
 8001878:	f00d f968 	bl	800eb4c <arm_max_f32>

    	// Keep track of how long the user has made the last motion. If the motion has changed,
    	// reset it.
    	uint8_t movement_changed = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    	if (current_movement == previous_movement)
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <main+0x208>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <main+0x20c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d10b      	bne.n	80018a6 <main+0x196>
    	{
    		current_movement_duration = (HAL_GetTick() - movement_started);
 800188e:	f001 fda3 	bl	80033d8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <main+0x210>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <main+0x214>)
 800189c:	6013      	str	r3, [r2, #0]
    		movement_changed = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80018a4:	e00b      	b.n	80018be <main+0x1ae>
    	}
    	else
    	{
    		previous_movement = current_movement;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <main+0x208>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <main+0x20c>)
 80018ac:	6013      	str	r3, [r2, #0]
    		movement_started = HAL_GetTick();
 80018ae:	f001 fd93 	bl	80033d8 <HAL_GetTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <main+0x210>)
 80018b6:	6013      	str	r3, [r2, #0]
    		movement_changed = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    	}

    	// Pass the classification result and movement timer to the UART UI function
    	formatOutputFromResult(current_movement, current_movement_duration, movement_changed);
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <main+0x208>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <main+0x214>)
 80018c4:	6811      	ldr	r1, [r2, #0]
 80018c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fdd2 	bl	8001474 <formatOutputFromResult>
    if (array_ready)
 80018d0:	e75c      	b.n	800178c <main+0x7c>
 80018d2:	bf00      	nop
 80018d4:	20001bec 	.word	0x20001bec
 80018d8:	200001a4 	.word	0x200001a4
 80018dc:	20001e40 	.word	0x20001e40
 80018e0:	20001bf0 	.word	0x20001bf0
 80018e4:	20001e4c 	.word	0x20001e4c
 80018e8:	20001bf4 	.word	0x20001bf4
 80018ec:	20001e58 	.word	0x20001e58
 80018f0:	20001e84 	.word	0x20001e84
 80018f4:	20000e64 	.word	0x20000e64
 80018f8:	20001bfc 	.word	0x20001bfc
 80018fc:	20001d20 	.word	0x20001d20
 8001900:	20001c00 	.word	0x20001c00
 8001904:	20001bf8 	.word	0x20001bf8
 8001908:	20001be8 	.word	0x20001be8
 800190c:	080124ec 	.word	0x080124ec
 8001910:	20000eb0 	.word	0x20000eb0
 8001914:	08012518 	.word	0x08012518
 8001918:	200001a8 	.word	0x200001a8
 800191c:	200001ac 	.word	0x200001ac
 8001920:	20001e64 	.word	0x20001e64
 8001924:	20001e68 	.word	0x20001e68

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b096      	sub	sp, #88	; 0x58
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2244      	movs	r2, #68	; 0x44
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f00d fc48 	bl	800f1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800194a:	2000      	movs	r0, #0
 800194c:	f004 f87e 	bl	8005a4c <HAL_PWREx_ControlVoltageScaling>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001956:	f000 faf9 	bl	8001f4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800195a:	2310      	movs	r3, #16
 800195c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195e:	2301      	movs	r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196a:	2302      	movs	r3, #2
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800196e:	2301      	movs	r3, #1
 8001970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001976:	233c      	movs	r3, #60	; 0x3c
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800197a:	2302      	movs	r3, #2
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4618      	mov	r0, r3
 800198c:	f004 f902 	bl	8005b94 <HAL_RCC_OscConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001996:	f000 fad9 	bl	8001f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199a:	230f      	movs	r3, #15
 800199c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199e:	2303      	movs	r3, #3
 80019a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	2105      	movs	r1, #5
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fd08 	bl	80063c8 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019be:	f000 fac5 	bl	8001f4c <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3758      	adds	r7, #88	; 0x58
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <MX_CRC_Init+0x40>)
 80019d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019f6:	f001 fddd 	bl	80035b4 <HAL_CRC_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a00:	f000 faa4 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000d9c 	.word	0x20000d9c
 8001a0c:	40023000 	.word	0x40023000

08001a10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_I2C2_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_I2C2_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a4c:	f002 f938 	bl	8003cc0 <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 fa79 	bl	8001f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a5e:	f002 fec1 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 fa70 	bl	8001f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_I2C2_Init+0x74>)
 8001a70:	f002 ff03 	bl	800487a <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 fa67 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000dc0 	.word	0x20000dc0
 8001a88:	40005800 	.word	0x40005800
 8001a8c:	307075b1 	.word	0x307075b1

08001a90 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <MX_OCTOSPI1_Init+0xa8>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001af0:	2208      	movs	r2, #8
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001af4:	480f      	ldr	r0, [pc, #60]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001af6:	f002 ff0d 	bl	8004914 <HAL_OSPI_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001b00:	f000 fa24 	bl	8001f4c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001b0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001b10:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_OCTOSPI1_Init+0xa4>)
 8001b1c:	f003 f9f8 	bl	8004f10 <HAL_OSPIM_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001b26:	f000 fa11 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000e14 	.word	0x20000e14
 8001b38:	a0001000 	.word	0xa0001000

08001b3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <MX_TIM17_Init+0x48>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 120;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b48:	2278      	movs	r2, #120	; 0x78
 8001b4a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 3124;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b54:	f640 4234 	movw	r2, #3124	; 0xc34
 8001b58:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_TIM17_Init+0x44>)
 8001b6e:	f005 fc33 	bl	80073d8 <HAL_TIM_Base_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001b78:	f000 f9e8 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000e64 	.word	0x20000e64
 8001b84:	40014800 	.word	0x40014800

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b8e:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <MX_USART1_UART_Init+0x94>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bd2:	f005 fef7 	bl	80079c4 <HAL_UART_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f000 f9b6 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001be4:	f006 fd94 	bl	8008710 <HAL_UARTEx_SetTxFifoThreshold>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bee:	f000 f9ad 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001bf6:	f006 fdc9 	bl	800878c <HAL_UARTEx_SetRxFifoThreshold>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f000 f9a4 	bl	8001f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_USART1_UART_Init+0x90>)
 8001c06:	f006 fd4a 	bl	800869e <HAL_UARTEx_DisableFifoMode>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f000 f99c 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000eb0 	.word	0x20000eb0
 8001c1c:	40013800 	.word	0x40013800

08001c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c54:	f043 0310 	orr.w	r3, r3, #16
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_GPIO_Init+0x94>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <MX_GPIO_Init+0x98>)
 8001c96:	f001 fd77 	bl	8003788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2028      	movs	r0, #40	; 0x28
 8001ca0:	f001 fc5e 	bl	8003560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca4:	2028      	movs	r0, #40	; 0x28
 8001ca6:	f001 fc77 	bl	8003598 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800

08001cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM17) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f040 80f3 	bne.w	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x1fa>
		int16_t temp_buffer[3];

		// Get raw accelerometer data and scale it according
		// to the formula given in the ADL dataset
		BSP_ACCELERO_AccGetXYZ(temp_buffer);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 facd 	bl	8002274 <BSP_ACCELERO_AccGetXYZ>
		xRaw = ratio * (temp_buffer[0] + 1500.0f);
 8001cda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cee:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	4b77      	ldr	r3, [pc, #476]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
		yRaw = ratio * (temp_buffer[1] + 1500.0f);
 8001cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
		zRaw = ratio * (temp_buffer[2] + 1500.0f);
 8001d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d42:	edc3 7a00 	vstr	s15, [r3]

		// Apply FIR filter (maybe customize the filter coeffs later?)
		arm_fir_f32(&x_instance, &xRaw, &xCurrent, 1);
 8001d46:	2301      	movs	r3, #1
 8001d48:	4a66      	ldr	r2, [pc, #408]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d4a:	4963      	ldr	r1, [pc, #396]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d4c:	4866      	ldr	r0, [pc, #408]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d4e:	f00c ff79 	bl	800ec44 <arm_fir_f32>
		arm_fir_f32(&y_instance, &yRaw, &yCurrent, 1);
 8001d52:	2301      	movs	r3, #1
 8001d54:	4a65      	ldr	r2, [pc, #404]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d56:	4961      	ldr	r1, [pc, #388]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d58:	4865      	ldr	r0, [pc, #404]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001d5a:	f00c ff73 	bl	800ec44 <arm_fir_f32>
		arm_fir_f32(&z_instance, &zRaw, &zCurrent, 1);
 8001d5e:	2301      	movs	r3, #1
 8001d60:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d62:	495f      	ldr	r1, [pc, #380]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d64:	4864      	ldr	r0, [pc, #400]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d66:	f00c ff6d 	bl	800ec44 <arm_fir_f32>

		// Clip, round and cast the filtered accelerometer data to fit the
		// network's specified input range
		if(xCurrent > 63) xCurrent = 63;
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001efc <HAL_TIM_PeriodElapsedCallback+0x240>
 8001d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd02      	ble.n	8001d84 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d80:	4a5f      	ldr	r2, [pc, #380]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d82:	601a      	str	r2, [r3, #0]
		if(xCurrent < 0) xCurrent = 0;
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d503      	bpl.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
		if(yCurrent > 63) yCurrent = 63;
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001efc <HAL_TIM_PeriodElapsedCallback+0x240>
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd02      	ble.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8001db0:	4b4e      	ldr	r3, [pc, #312]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001db2:	4a53      	ldr	r2, [pc, #332]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001db4:	601a      	str	r2, [r3, #0]
		if(yCurrent < 0) yCurrent = 0;
 8001db6:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	d503      	bpl.n	8001dce <HAL_TIM_PeriodElapsedCallback+0x112>
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
		if(zCurrent > 63) zCurrent = 63;
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001efc <HAL_TIM_PeriodElapsedCallback+0x240>
 8001dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	dd02      	ble.n	8001de8 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001de4:	4a46      	ldr	r2, [pc, #280]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001de6:	601a      	str	r2, [r3, #0]
		if(zCurrent < 0) zCurrent = 0;
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d503      	bpl.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001df8:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
		uint8_t xRounded = round(xCurrent);
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fbb7 	bl	8000578 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b10 	vmov	d0, r2, r3
 8001e12:	f010 f941 	bl	8012098 <round>
 8001e16:	ec53 2b10 	vmov	r2, r3, d0
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fedb 	bl	8000bd8 <__aeabi_d2uiz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]
		uint8_t yRounded = round(yCurrent);
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fba4 	bl	8000578 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	ec43 2b10 	vmov	d0, r2, r3
 8001e38:	f010 f92e 	bl	8012098 <round>
 8001e3c:	ec53 2b10 	vmov	r2, r3, d0
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fec8 	bl	8000bd8 <__aeabi_d2uiz>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75bb      	strb	r3, [r7, #22]
		uint8_t zRounded = round(zCurrent);
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb91 	bl	8000578 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b10 	vmov	d0, r2, r3
 8001e5e:	f010 f91b 	bl	8012098 <round>
 8001e62:	ec53 2b10 	vmov	r2, r3, d0
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe feb5 	bl	8000bd8 <__aeabi_d2uiz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	757b      	strb	r3, [r7, #21]

		// If the array is not yet full, write top it and increment the array
		// pointer by 3. If it is full, flag that the array is ready and wait
		// for write permission from the main loop (i.e. wait until array_idx
		// is cleared.
		if(array_idx <= 285)
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8001e7a:	da19      	bge.n	8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
		{
			array_ready = 0;
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
			current_Data[array_idx] = xRounded;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4921      	ldr	r1, [pc, #132]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e88:	7dfa      	ldrb	r2, [r7, #23]
 8001e8a:	54ca      	strb	r2, [r1, r3]
			current_Data[array_idx+1] = yRounded;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	491e      	ldr	r1, [pc, #120]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e94:	7dba      	ldrb	r2, [r7, #22]
 8001e96:	54ca      	strb	r2, [r1, r3]
			current_Data[array_idx+2] = zRounded;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	491b      	ldr	r1, [pc, #108]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ea0:	7d7a      	ldrb	r2, [r7, #21]
 8001ea2:	54ca      	strb	r2, [r1, r3]
			array_idx += 3;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e002      	b.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x1fa>
		}else{
			array_ready = 1;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
		}
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0x208>
    HAL_IncTick();
 8001ec0:	f001 fa76 	bl	80033b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40014800 	.word	0x40014800
 8001ed0:	44bb8000 	.word	0x44bb8000
 8001ed4:	200001b0 	.word	0x200001b0
 8001ed8:	20001e78 	.word	0x20001e78
 8001edc:	20001e7c 	.word	0x20001e7c
 8001ee0:	20001e80 	.word	0x20001e80
 8001ee4:	20001e6c 	.word	0x20001e6c
 8001ee8:	20001e40 	.word	0x20001e40
 8001eec:	20001e70 	.word	0x20001e70
 8001ef0:	20001e4c 	.word	0x20001e4c
 8001ef4:	20001e74 	.word	0x20001e74
 8001ef8:	20001e58 	.word	0x20001e58
 8001efc:	427c0000 	.word	0x427c0000
 8001f00:	427c0000 	.word	0x427c0000
 8001f04:	20001bf8 	.word	0x20001bf8
 8001f08:	20001bfc 	.word	0x20001bfc
 8001f0c:	20001c00 	.word	0x20001c00
 8001f10:	40001000 	.word	0x40001000

08001f14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d10a      	bne.n	8001f3c <HAL_GPIO_EXTI_Callback+0x28>
	{
		mode = !mode;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f3a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20001be8 	.word	0x20001be8

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <Error_Handler+0x8>
	...

08001f58 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f7e:	2312      	movs	r3, #18
 8001f80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	481b      	ldr	r0, [pc, #108]	; (8002004 <I2Cx_MspInit+0xac>)
 8001f96:	f001 fbf7 	bl	8003788 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4818      	ldr	r0, [pc, #96]	; (8002004 <I2Cx_MspInit+0xac>)
 8001fa2:	f001 fbf1 	bl	8003788 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <I2Cx_MspInit+0xa8>)
 8001fd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fd4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	210f      	movs	r1, #15
 8001fda:	2021      	movs	r0, #33	; 0x21
 8001fdc:	f001 fac0 	bl	8003560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001fe0:	2021      	movs	r0, #33	; 0x21
 8001fe2:	f001 fad9 	bl	8003598 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	210f      	movs	r1, #15
 8001fea:	2022      	movs	r0, #34	; 0x22
 8001fec:	f001 fab8 	bl	8003560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001ff0:	2022      	movs	r0, #34	; 0x22
 8001ff2:	f001 fad1 	bl	8003598 <HAL_NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	48000400 	.word	0x48000400

08002008 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <I2Cx_Init+0x54>)
 8002014:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <I2Cx_Init+0x58>)
 800201a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff89 	bl	8001f58 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f001 fe3a 	bl	8003cc0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f002 fbc8 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40005800 	.word	0x40005800
 8002060:	00702681 	.word	0x00702681

08002064 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af04      	add	r7, sp, #16
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4603      	mov	r3, r0
 8002074:	72fb      	strb	r3, [r7, #11]
 8002076:	460b      	mov	r3, r1
 8002078:	813b      	strh	r3, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	b299      	uxth	r1, r3
 8002086:	88f8      	ldrh	r0, [r7, #6]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4603      	mov	r3, r0
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f001 ffe2 	bl	8004064 <HAL_I2C_Mem_Read>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	4619      	mov	r1, r3
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f832 	bl	8002118 <I2Cx_Error>
  }
  return status;
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	; 0x28
 80020c2:	af04      	add	r7, sp, #16
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	4608      	mov	r0, r1
 80020c8:	4611      	mov	r1, r2
 80020ca:	461a      	mov	r2, r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	72fb      	strb	r3, [r7, #11]
 80020d0:	460b      	mov	r3, r1
 80020d2:	813b      	strh	r3, [r7, #8]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	b299      	uxth	r1, r3
 80020e0:	88f8      	ldrh	r0, [r7, #6]
 80020e2:	893a      	ldrh	r2, [r7, #8]
 80020e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4603      	mov	r3, r0
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f001 fea1 	bl	8003e3c <HAL_I2C_Mem_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f805 	bl	8002118 <I2Cx_Error>
  }
  return status;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 fe5a 	bl	8003dde <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff6c 	bl	8002008 <I2Cx_Init>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <SENSOR_IO_Init+0x10>)
 800213e:	f7ff ff63 	bl	8002008 <I2Cx_Init>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20001e88 	.word	0x20001e88

0800214c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	b29a      	uxth	r2, r3
 8002162:	79f9      	ldrb	r1, [r7, #7]
 8002164:	2301      	movs	r3, #1
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	1d7b      	adds	r3, r7, #5
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <SENSOR_IO_Write+0x30>)
 8002170:	f7ff ffa5 	bl	80020be <I2Cx_WriteMultiple>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20001e88 	.word	0x20001e88

08002180 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	b29a      	uxth	r2, r3
 8002198:	79f9      	ldrb	r1, [r7, #7]
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	f107 030f 	add.w	r3, r7, #15
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <SENSOR_IO_Read+0x38>)
 80021a8:	f7ff ff5c 	bl	8002064 <I2Cx_ReadMultiple>

  return read_value;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001e88 	.word	0x20001e88

080021bc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	603a      	str	r2, [r7, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	460b      	mov	r3, r1
 80021cc:	71bb      	strb	r3, [r7, #6]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	79f9      	ldrb	r1, [r7, #7]
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2301      	movs	r3, #1
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <SENSOR_IO_ReadMultiple+0x38>)
 80021e4:	f7ff ff3e 	bl	8002064 <I2Cx_ReadMultiple>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29b      	uxth	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20001e88 	.word	0x20001e88

080021f8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002202:	2300      	movs	r3, #0
 8002204:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <BSP_ACCELERO_Init+0x74>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4798      	blx	r3
 800220c:	4603      	mov	r3, r0
 800220e:	2b6a      	cmp	r3, #106	; 0x6a
 8002210:	d002      	beq.n	8002218 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e024      	b.n	8002262 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <BSP_ACCELERO_Init+0x78>)
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <BSP_ACCELERO_Init+0x74>)
 800221c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800221e:	2330      	movs	r3, #48	; 0x30
 8002220:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002226:	2300      	movs	r3, #0
 8002228:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002236:	797a      	ldrb	r2, [r7, #5]
 8002238:	7abb      	ldrb	r3, [r7, #10]
 800223a:	4313      	orrs	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002240:	7a3b      	ldrb	r3, [r7, #8]
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	b2db      	uxtb	r3, r3
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	b21b      	sxth	r3, r3
 8002254:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <BSP_ACCELERO_Init+0x78>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	89ba      	ldrh	r2, [r7, #12]
 800225e:	4610      	mov	r0, r2
 8002260:	4798      	blx	r3
  }  

  return ret;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200001bc 	.word	0x200001bc
 8002270:	20001edc 	.word	0x20001edc

08002274 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
    }
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20001edc 	.word	0x20001edc

080022a4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <BSP_QSPI_Init+0xf4>)
 80022ac:	4a3b      	ldr	r2, [pc, #236]	; (800239c <BSP_QSPI_Init+0xf8>)
 80022ae:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80022b0:	4839      	ldr	r0, [pc, #228]	; (8002398 <BSP_QSPI_Init+0xf4>)
 80022b2:	f002 fbd9 	bl	8004a68 <HAL_OSPI_DeInit>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e067      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }

  /* System level initialization */
  BSP_QSPI_MspInit();
 80022c0:	f000 f990 	bl	80025e4 <BSP_QSPI_MspInit>

  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <BSP_QSPI_Init+0xf4>)
 80022c6:	2204      	movs	r2, #4
 80022c8:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <BSP_QSPI_Init+0xf4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <BSP_QSPI_Init+0xf4>)
 80022d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022dc:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002300:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002304:	2201      	movs	r2, #1
 8002306:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <BSP_QSPI_Init+0xf4>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002316:	2204      	movs	r2, #4
 8002318:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <BSP_QSPI_Init+0xf4>)
 800231c:	2200      	movs	r2, #0
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <BSP_QSPI_Init+0xf4>)
 800232a:	2200      	movs	r2, #0
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002334:	4818      	ldr	r0, [pc, #96]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002336:	f002 faed 	bl	8004914 <HAL_OSPI_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e025      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8002344:	4814      	ldr	r0, [pc, #80]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002346:	f000 f98d 	bl	8002664 <QSPI_ResetMemory>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002350:	2304      	movs	r3, #4
 8002352:	e01d      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }

  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002354:	2101      	movs	r1, #1
 8002356:	4810      	ldr	r0, [pc, #64]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002358:	f000 fa72 	bl	8002840 <QSPI_QuadMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e014      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }

  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8002366:	2101      	movs	r1, #1
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <BSP_QSPI_Init+0xf4>)
 800236a:	f000 fb15 	bl	8002998 <QSPI_HighPerfMode>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00b      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <BSP_QSPI_Init+0xf4>)
 800237a:	2202      	movs	r2, #2
 800237c:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <BSP_QSPI_Init+0xf4>)
 8002380:	f002 fac8 	bl	8004914 <HAL_OSPI_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20001ee0 	.word	0x20001ee0
 800239c:	a0001000 	.word	0xa0001000

080023a0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b098      	sub	sp, #96	; 0x60
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80023b4:	23eb      	movs	r3, #235	; 0xeb
 80023b6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80023c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 80023ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80023d8:	23aa      	movs	r3, #170	; 0xaa
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80023dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 80023e2:	2300      	movs	r3, #0
 80023e4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80023ea:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80023f8:	2304      	movs	r3, #4
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002400:	2300      	movs	r3, #0
 8002402:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4619      	mov	r1, r3
 800240e:	480c      	ldr	r0, [pc, #48]	; (8002440 <BSP_QSPI_Read+0xa0>)
 8002410:	f002 fb51 	bl	8004ab6 <HAL_OSPI_Command>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00b      	b.n	8002436 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <BSP_QSPI_Read+0xa0>)
 8002426:	f002 fc3a 	bl	8004c9e <HAL_OSPI_Receive>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3760      	adds	r7, #96	; 0x60
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20001ee0 	.word	0x20001ee0

08002444 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09c      	sub	sp, #112	; 0x70
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002458:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800245a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d901      	bls.n	8002466 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800247a:	2338      	movs	r3, #56	; 0x38
 800247c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800247e:	2301      	movs	r3, #1
 8002480:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800248a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8002490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800249a:	2300      	movs	r3, #0
 800249c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800249e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80024b0:	2300      	movs	r3, #0
 80024b2:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80024b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80024bc:	4823      	ldr	r0, [pc, #140]	; (800254c <BSP_QSPI_Write+0x108>)
 80024be:	f000 f918 	bl	80026f2 <QSPI_WriteEnable>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e03b      	b.n	8002544 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4619      	mov	r1, r3
 80024d6:	481d      	ldr	r0, [pc, #116]	; (800254c <BSP_QSPI_Write+0x108>)
 80024d8:	f002 faed 	bl	8004ab6 <HAL_OSPI_Command>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e02e      	b.n	8002544 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	4817      	ldr	r0, [pc, #92]	; (800254c <BSP_QSPI_Write+0x108>)
 80024ee:	f002 fb63 	bl	8004bb8 <HAL_OSPI_Transmit>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e023      	b.n	8002544 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80024fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8002500:	4812      	ldr	r0, [pc, #72]	; (800254c <BSP_QSPI_Write+0x108>)
 8002502:	f000 f952 	bl	80027aa <QSPI_AutoPollingMemReady>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e019      	b.n	8002544 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002514:	4413      	add	r3, r2
 8002516:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251c:	4413      	add	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8002520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002522:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002526:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002528:	429a      	cmp	r2, r3
 800252a:	d203      	bcs.n	8002534 <BSP_QSPI_Write+0xf0>
 800252c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800252e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	e001      	b.n	8002538 <BSP_QSPI_Write+0xf4>
 8002534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002538:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800253a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253e:	429a      	cmp	r2, r3
 8002540:	d3b8      	bcc.n	80024b4 <BSP_QSPI_Write+0x70>

  return QSPI_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3770      	adds	r7, #112	; 0x70
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20001ee0 	.word	0x20001ee0

08002550 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress : Block address to erase
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b096      	sub	sp, #88	; 0x58
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8002560:	23d8      	movs	r3, #216	; 0xd8
 8002562:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002564:	2301      	movs	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800257a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002594:	2300      	movs	r3, #0
 8002596:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8002598:	4811      	ldr	r0, [pc, #68]	; (80025e0 <BSP_QSPI_Erase_Block+0x90>)
 800259a:	f000 f8aa 	bl	80026f2 <QSPI_WriteEnable>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e017      	b.n	80025d8 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4619      	mov	r1, r3
 80025b2:	480b      	ldr	r0, [pc, #44]	; (80025e0 <BSP_QSPI_Erase_Block+0x90>)
 80025b4:	f002 fa7f 	bl	8004ab6 <HAL_OSPI_Command>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00a      	b.n	80025d8 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80025c2:	f640 51ac 	movw	r1, #3500	; 0xdac
 80025c6:	4806      	ldr	r0, [pc, #24]	; (80025e0 <BSP_QSPI_Erase_Block+0x90>)
 80025c8:	f000 f8ef 	bl	80027aa <QSPI_AutoPollingMemReady>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3758      	adds	r7, #88	; 0x58
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20001ee0 	.word	0x20001ee0

080025e4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <BSP_QSPI_MspInit+0x78>)
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	4a1b      	ldr	r2, [pc, #108]	; (800265c <BSP_QSPI_MspInit+0x78>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6513      	str	r3, [r2, #80]	; 0x50
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <BSP_QSPI_MspInit+0x78>)
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002618:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <BSP_QSPI_MspInit+0x78>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <BSP_QSPI_MspInit+0x78>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8002632:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002636:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002644:	230a      	movs	r3, #10
 8002646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	4619      	mov	r1, r3
 800264e:	4804      	ldr	r0, [pc, #16]	; (8002660 <BSP_QSPI_MspInit+0x7c>)
 8002650:	f001 f89a 	bl	8003788 <HAL_GPIO_Init>
}
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	48001000 	.word	0x48001000

08002664 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b096      	sub	sp, #88	; 0x58
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8002674:	2366      	movs	r3, #102	; 0x66
 8002676:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002678:	2301      	movs	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800268c:	2300      	movs	r3, #0
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002698:	2300      	movs	r3, #0
 800269a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4619      	mov	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f002 fa05 	bl	8004ab6 <HAL_OSPI_Command>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e019      	b.n	80026ea <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80026b6:	2399      	movs	r3, #153	; 0x99
 80026b8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f002 f9f6 	bl	8004ab6 <HAL_OSPI_Command>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e00a      	b.n	80026ea <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80026d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f866 	bl	80027aa <QSPI_AutoPollingMemReady>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3758      	adds	r7, #88	; 0x58
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b09c      	sub	sp, #112	; 0x70
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8002702:	2306      	movs	r3, #6
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002706:	2301      	movs	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002726:	2300      	movs	r3, #0
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800272a:	f107 0320 	add.w	r3, r7, #32
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f002 f9be 	bl	8004ab6 <HAL_OSPI_Command>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e02e      	b.n	80027a2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match         = MX25R6435F_SR_WEL;
 8002744:	2302      	movs	r3, #2
 8002746:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8002748:	2302      	movs	r3, #2
 800274a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8002750:	2310      	movs	r3, #16
 8002752:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002758:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800275a:	2305      	movs	r3, #5
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800275e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002762:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8002764:	2301      	movs	r3, #1
 8002766:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f002 f99d 	bl	8004ab6 <HAL_OSPI_Command>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00d      	b.n	80027a2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f002 fb27 	bl	8004de4 <HAL_OSPI_AutoPolling>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3770      	adds	r7, #112	; 0x70
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b09c      	sub	sp, #112	; 0x70
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80027bc:	2305      	movs	r3, #5
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80027d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80027ea:	2300      	movs	r3, #0
 80027ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80027fa:	2310      	movs	r3, #16
 80027fc:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80027fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002802:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002804:	f107 0320 	add.w	r3, r7, #32
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f002 f951 	bl	8004ab6 <HAL_OSPI_Command>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00c      	b.n	8002838 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f002 fadc 	bl	8004de4 <HAL_OSPI_AutoPolling>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3770      	adds	r7, #112	; 0x70
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b098      	sub	sp, #96	; 0x60
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002854:	2305      	movs	r3, #5
 8002856:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002858:	2301      	movs	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002868:	2300      	movs	r3, #0
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800286c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002882:	2300      	movs	r3, #0
 8002884:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f002 f910 	bl	8004ab6 <HAL_OSPI_Command>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e077      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028a0:	f107 030f 	add.w	r3, r7, #15
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f002 f9f7 	bl	8004c9e <HAL_OSPI_Receive>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06a      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff19 	bl	80026f2 <QSPI_WriteEnable>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e062      	b.n	8002990 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e004      	b.n	80028e6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f002 f8de 	bl	8004ab6 <HAL_OSPI_Command>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e045      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002904:	f107 030f 	add.w	r3, r7, #15
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f002 f952 	bl	8004bb8 <HAL_OSPI_Transmit>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e038      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800291e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff41 	bl	80027aa <QSPI_AutoPollingMemReady>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02e      	b.n	8002990 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8002932:	2305      	movs	r3, #5
 8002934:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f002 f8b8 	bl	8004ab6 <HAL_OSPI_Command>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e01f      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002950:	f107 030f 	add.w	r3, r7, #15
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f002 f99f 	bl	8004c9e <HAL_OSPI_Receive>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e012      	b.n	8002990 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <QSPI_QuadMode+0x13a>
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d007      	beq.n	800298a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3760      	adds	r7, #96	; 0x60
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b098      	sub	sp, #96	; 0x60
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80029ac:	2305      	movs	r3, #5
 80029ae:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80029da:	2300      	movs	r3, #0
 80029dc:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f002 f864 	bl	8004ab6 <HAL_OSPI_Command>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e09a      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f002 f94b 	bl	8004c9e <HAL_OSPI_Receive>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e08d      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002a12:	2315      	movs	r3, #21
 8002a14:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002a16:	2302      	movs	r3, #2
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f002 f846 	bl	8004ab6 <HAL_OSPI_Command>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e07c      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f002 f92c 	bl	8004c9e <HAL_OSPI_Receive>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e06e      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe4e 	bl	80026f2 <QSPI_WriteEnable>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e066      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	73bb      	strb	r3, [r7, #14]
 8002a70:	e004      	b.n	8002a7c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a72:	7bbb      	ldrb	r3, [r7, #14]
 8002a74:	f023 0302 	bic.w	r3, r3, #2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8002a80:	2303      	movs	r3, #3
 8002a82:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f002 f811 	bl	8004ab6 <HAL_OSPI_Command>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e047      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f002 f885 	bl	8004bb8 <HAL_OSPI_Transmit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e03a      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002ab8:	f241 3188 	movw	r1, #5000	; 0x1388
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fe74 	bl	80027aa <QSPI_AutoPollingMemReady>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e030      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002acc:	2315      	movs	r3, #21
 8002ace:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f001 ffe9 	bl	8004ab6 <HAL_OSPI_Command>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01f      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f002 f8d0 	bl	8004c9e <HAL_OSPI_Receive>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e012      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002b08:	7b7b      	ldrb	r3, [r7, #13]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <QSPI_HighPerfMode+0x180>
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d007      	beq.n	8002b28 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002b18:	7b7b      	ldrb	r3, [r7, #13]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3760      	adds	r7, #96	; 0x60
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_MspInit+0x44>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <HAL_MspInit+0x44>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_MspInit+0x44>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_MspInit+0x44>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_MspInit+0x44>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_MspInit+0x44>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_CRC_MspInit+0x38>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10b      	bne.n	8002baa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_CRC_MspInit+0x3c>)
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_CRC_MspInit+0x3c>)
 8002b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b9c:	6493      	str	r3, [r2, #72]	; 0x48
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_CRC_MspInit+0x3c>)
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023000 	.word	0x40023000
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0ae      	sub	sp, #184	; 0xb8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	2294      	movs	r2, #148	; 0x94
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f00c faf3 	bl	800f1cc <memset>
  if(hi2c->Instance==I2C2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_I2C_MspInit+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d13b      	bne.n	8002c68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fed3 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c08:	f7ff f9a0 	bl	8001f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c12:	f043 0302 	orr.w	r3, r3, #2
 8002c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c2c:	2312      	movs	r3, #18
 8002c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480b      	ldr	r0, [pc, #44]	; (8002c78 <HAL_I2C_MspInit+0xb8>)
 8002c4c:	f000 fd9c 	bl	8003788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_I2C_MspInit+0xb4>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	37b8      	adds	r7, #184	; 0xb8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40005800 	.word	0x40005800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	48000400 	.word	0x48000400

08002c7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <HAL_I2C_MspDeInit+0x3c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10f      	bne.n	8002cae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_I2C_MspDeInit+0x40>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_I2C_MspDeInit+0x40>)
 8002c94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c9e:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <HAL_I2C_MspDeInit+0x44>)
 8002ca0:	f000 ff04 	bl	8003aac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <HAL_I2C_MspDeInit+0x44>)
 8002caa:	f000 feff 	bl	8003aac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40005800 	.word	0x40005800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	48000400 	.word	0x48000400

08002cc4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0b0      	sub	sp, #192	; 0xc0
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cdc:	f107 0318 	add.w	r3, r7, #24
 8002ce0:	2294      	movs	r2, #148	; 0x94
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00c fa71 	bl	800f1cc <memset>
  if(hospi->Instance==OCTOSPI1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_OSPI_MspInit+0xcc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d149      	bne.n	8002d88 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fe4f 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002d10:	f7ff f91c 	bl	8001f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6513      	str	r3, [r2, #80]	; 0x50
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_OSPI_MspInit+0xd0>)
 8002d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002d5c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002d76:	230a      	movs	r3, #10
 8002d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d80:	4619      	mov	r1, r3
 8002d82:	4805      	ldr	r0, [pc, #20]	; (8002d98 <HAL_OSPI_MspInit+0xd4>)
 8002d84:	f000 fd00 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002d88:	bf00      	nop
 8002d8a:	37c0      	adds	r7, #192	; 0xc0
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	a0001000 	.word	0xa0001000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	48001000 	.word	0x48001000

08002d9c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_OSPI_MspDeInit+0x3c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d110      	bne.n	8002dd0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_OSPI_MspDeInit+0x40>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_OSPI_MspDeInit+0x40>)
 8002db4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002db8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_OSPI_MspDeInit+0x40>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_OSPI_MspDeInit+0x40>)
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002dc6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <HAL_OSPI_MspDeInit+0x44>)
 8002dcc:	f000 fe6e 	bl	8003aac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	a0001000 	.word	0xa0001000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	48001000 	.word	0x48001000

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_TIM_Base_MspInit+0x44>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d113      	bne.n	8002e1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6613      	str	r3, [r2, #96]	; 0x60
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	201a      	movs	r0, #26
 8002e14:	f000 fba4 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002e18:	201a      	movs	r0, #26
 8002e1a:	f000 fbbd 	bl	8003598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0ae      	sub	sp, #184	; 0xb8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	2294      	movs	r2, #148	; 0x94
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00c f9bb 	bl	800f1cc <memset>
  if(huart->Instance==USART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <HAL_UART_MspInit+0xb0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d13a      	bne.n	8002ed6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002e64:	2301      	movs	r3, #1
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fd9b 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e78:	f7ff f868 	bl	8001f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e86:	6613      	str	r3, [r2, #96]	; 0x60
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_UART_MspInit+0xb4>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <HAL_UART_MspInit+0xb8>)
 8002ed2:	f000 fc59 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	37b8      	adds	r7, #184	; 0xb8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	48000400 	.word	0x48000400

08002eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_InitTick+0xe0>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <HAL_InitTick+0xe0>)
 8002f00:	f043 0310 	orr.w	r3, r3, #16
 8002f04:	6593      	str	r3, [r2, #88]	; 0x58
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_InitTick+0xe0>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f12:	f107 0210 	add.w	r2, r7, #16
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 fc51 	bl	80067c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f003 fc1e 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 8002f30:	6378      	str	r0, [r7, #52]	; 0x34
 8002f32:	e004      	b.n	8002f3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f34:	f003 fc1a 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_InitTick+0xe4>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <HAL_InitTick+0xec>)
 8002f50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f72:	4818      	ldr	r0, [pc, #96]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f74:	f004 fa30 	bl	80073d8 <HAL_TIM_Base_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11b      	bne.n	8002fbe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f86:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f88:	f004 fa7e 	bl	8007488 <HAL_TIM_Base_Start_IT>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f9a:	2036      	movs	r0, #54	; 0x36
 8002f9c:	f000 fafc 	bl	8003598 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d808      	bhi.n	8002fb8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	2036      	movs	r0, #54	; 0x36
 8002fac:	f000 fad8 	bl	8003560 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_InitTick+0xf0>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e002      	b.n	8002fbe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3738      	adds	r7, #56	; 0x38
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	20001f30 	.word	0x20001f30
 8002fd8:	40001000 	.word	0x40001000
 8002fdc:	200001f0 	.word	0x200001f0

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <NMI_Handler+0x4>

08002fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <BusFault_Handler+0x4>

08002ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <UsageFault_Handler+0x4>

08002ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800303e:	f004 fac2 	bl	80075c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000e64 	.word	0x20000e64

0800304c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003050:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003054:	f000 fe1c 	bl	8003c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <TIM6_DAC_IRQHandler+0x10>)
 8003062:	f004 fab0 	bl	80075c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001f30 	.word	0x20001f30

08003070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <_sbrk+0x5c>)
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <_sbrk+0x60>)
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <_sbrk+0x64>)
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <_sbrk+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d207      	bcs.n	80030b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a0:	f00c f854 	bl	800f14c <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	220c      	movs	r2, #12
 80030a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e009      	b.n	80030c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_sbrk+0x64>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <_sbrk+0x64>)
 80030c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200a0000 	.word	0x200a0000
 80030d0:	00000800 	.word	0x00000800
 80030d4:	20001f7c 	.word	0x20001f7c
 80030d8:	20002040 	.word	0x20002040

080030dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <SystemInit+0x20>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <SystemInit+0x20>)
 80030e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
 }
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <Reset_Handler>:
 8003100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003138 <LoopForever+0x2>
 8003104:	f7ff ffea 	bl	80030dc <SystemInit>
 8003108:	480c      	ldr	r0, [pc, #48]	; (800313c <LoopForever+0x6>)
 800310a:	490d      	ldr	r1, [pc, #52]	; (8003140 <LoopForever+0xa>)
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <LoopForever+0xe>)
 800310e:	2300      	movs	r3, #0
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:
 8003112:	58d4      	ldr	r4, [r2, r3]
 8003114:	50c4      	str	r4, [r0, r3]
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:
 8003118:	18c4      	adds	r4, r0, r3
 800311a:	428c      	cmp	r4, r1
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <LoopForever+0x12>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <LoopForever+0x16>)
 8003122:	2300      	movs	r3, #0
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:
 800312a:	42a2      	cmp	r2, r4
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>
 800312e:	f00c f813 	bl	800f158 <__libc_init_array>
 8003132:	f7fe faed 	bl	8001710 <main>

08003136 <LoopForever>:
 8003136:	e7fe      	b.n	8003136 <LoopForever>
 8003138:	200a0000 	.word	0x200a0000
 800313c:	20000000 	.word	0x20000000
 8003140:	20000d7c 	.word	0x20000d7c
 8003144:	08146864 	.word	0x08146864
 8003148:	20000d80 	.word	0x20000d80
 800314c:	2000203c 	.word	0x2000203c

08003150 <ADC1_IRQHandler>:
 8003150:	e7fe      	b.n	8003150 <ADC1_IRQHandler>

08003152 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003160:	2110      	movs	r1, #16
 8003162:	20d4      	movs	r0, #212	; 0xd4
 8003164:	f7ff f80c 	bl	8002180 <SENSOR_IO_Read>
 8003168:	4603      	mov	r3, r0
 800316a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003178:	7bba      	ldrb	r2, [r7, #14]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4313      	orrs	r3, r2
 800317e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003180:	7bbb      	ldrb	r3, [r7, #14]
 8003182:	461a      	mov	r2, r3
 8003184:	2110      	movs	r1, #16
 8003186:	20d4      	movs	r0, #212	; 0xd4
 8003188:	f7fe ffe0 	bl	800214c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800318c:	2112      	movs	r1, #18
 800318e:	20d4      	movs	r0, #212	; 0xd4
 8003190:	f7fe fff6 	bl	8002180 <SENSOR_IO_Read>
 8003194:	4603      	mov	r3, r0
 8003196:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b29b      	uxth	r3, r3
 800319e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80031a6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80031a8:	7bba      	ldrb	r2, [r7, #14]
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	461a      	mov	r2, r3
 80031b4:	2112      	movs	r1, #18
 80031b6:	20d4      	movs	r0, #212	; 0xd4
 80031b8:	f7fe ffc8 	bl	800214c <SENSOR_IO_Write>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80031ca:	2300      	movs	r3, #0
 80031cc:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031ce:	2110      	movs	r1, #16
 80031d0:	20d4      	movs	r0, #212	; 0xd4
 80031d2:	f7fe ffd5 	bl	8002180 <SENSOR_IO_Read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	461a      	mov	r2, r3
 80031e6:	2110      	movs	r1, #16
 80031e8:	20d4      	movs	r0, #212	; 0xd4
 80031ea:	f7fe ffaf 	bl	800214c <SENSOR_IO_Write>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80031fa:	f7fe ff9d 	bl	8002138 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80031fe:	210f      	movs	r1, #15
 8003200:	20d4      	movs	r0, #212	; 0xd4
 8003202:	f7fe ffbd 	bl	8002180 <SENSOR_IO_Read>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}

0800320c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800321a:	2115      	movs	r1, #21
 800321c:	20d4      	movs	r0, #212	; 0xd4
 800321e:	f7fe ffaf 	bl	8002180 <SENSOR_IO_Read>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	f023 0310 	bic.w	r3, r3, #16
 800322c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	461a      	mov	r2, r3
 8003240:	2115      	movs	r1, #21
 8003242:	20d4      	movs	r0, #212	; 0xd4
 8003244:	f7fe ff82 	bl	800214c <SENSOR_IO_Write>
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003266:	2110      	movs	r1, #16
 8003268:	20d4      	movs	r0, #212	; 0xd4
 800326a:	f7fe ff89 	bl	8002180 <SENSOR_IO_Read>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003272:	f107 0208 	add.w	r2, r7, #8
 8003276:	2306      	movs	r3, #6
 8003278:	2128      	movs	r1, #40	; 0x28
 800327a:	20d4      	movs	r0, #212	; 0xd4
 800327c:	f7fe ff9e 	bl	80021bc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e01c      	b.n	80032c0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	3301      	adds	r3, #1
 800328c:	3320      	adds	r3, #32
 800328e:	443b      	add	r3, r7
 8003290:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003294:	b29b      	uxth	r3, r3
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b29a      	uxth	r2, r3
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	3320      	adds	r3, #32
 80032a0:	443b      	add	r3, r7
 80032a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
 80032ae:	b212      	sxth	r2, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	3320      	adds	r3, #32
 80032b4:	443b      	add	r3, r7
 80032b6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	3301      	adds	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d9df      	bls.n	8003286 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d829      	bhi.n	8003324 <LSM6DSL_AccReadXYZ+0xd4>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <LSM6DSL_AccReadXYZ+0x88>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	08003325 	.word	0x08003325
 80032e0:	08003325 	.word	0x08003325
 80032e4:	08003325 	.word	0x08003325
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	08003325 	.word	0x08003325
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003313 	.word	0x08003313
 80032fc:	08003325 	.word	0x08003325
 8003300:	08003325 	.word	0x08003325
 8003304:	08003325 	.word	0x08003325
 8003308:	08003319 	.word	0x08003319
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <LSM6DSL_AccReadXYZ+0x120>)
 800330e:	61bb      	str	r3, [r7, #24]
    break;
 8003310:	e008      	b.n	8003324 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <LSM6DSL_AccReadXYZ+0x124>)
 8003314:	61bb      	str	r3, [r7, #24]
    break;
 8003316:	e005      	b.n	8003324 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <LSM6DSL_AccReadXYZ+0x128>)
 800331a:	61bb      	str	r3, [r7, #24]
    break;
 800331c:	e002      	b.n	8003324 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <LSM6DSL_AccReadXYZ+0x12c>)
 8003320:	61bb      	str	r3, [r7, #24]
    break;    
 8003322:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e01a      	b.n	8003360 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800332a:	7ffb      	ldrb	r3, [r7, #31]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3320      	adds	r3, #32
 8003330:	443b      	add	r3, r7
 8003332:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003352:	ee17 2a90 	vmov	r2, s15
 8003356:	b212      	sxth	r2, r2
 8003358:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	3301      	adds	r3, #1
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	7ffb      	ldrb	r3, [r7, #31]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d9e1      	bls.n	800332a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	3d79db23 	.word	0x3d79db23
 8003374:	3df9db23 	.word	0x3df9db23
 8003378:	3e79db23 	.word	0x3e79db23
 800337c:	3ef9db23 	.word	0x3ef9db23

08003380 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800338a:	2003      	movs	r0, #3
 800338c:	f000 f8dd 	bl	800354a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003390:	200f      	movs	r0, #15
 8003392:	f7ff fdab 	bl	8002eec <HAL_InitTick>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	e001      	b.n	80033a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a2:	f7ff fbc9 	bl	8002b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_IncTick+0x20>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_IncTick+0x24>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4413      	add	r3, r2
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_IncTick+0x24>)
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	200001f4 	.word	0x200001f4
 80033d4:	20001f80 	.word	0x20001f80

080033d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return uwTick;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_GetTick+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20001f80 	.word	0x20001f80

080033f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800341c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <__NVIC_GetPriorityGrouping+0x18>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0307 	and.w	r3, r3, #7
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db0b      	blt.n	800347e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <__NVIC_EnableIRQ+0x38>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2001      	movs	r0, #1
 8003476:	fa00 f202 	lsl.w	r2, r0, r2
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff4c 	bl	80033f0 <__NVIC_SetPriorityGrouping>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003572:	f7ff ff61 	bl	8003438 <__NVIC_GetPriorityGrouping>
 8003576:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7ff ffb1 	bl	80034e4 <NVIC_EncodePriority>
 8003582:	4602      	mov	r2, r0
 8003584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff80 	bl	8003490 <__NVIC_SetPriority>
}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff54 	bl	8003454 <__NVIC_EnableIRQ>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e054      	b.n	8003670 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7f5b      	ldrb	r3, [r3, #29]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fad2 	bl	8002b80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_CRC_Init+0xc4>)
 80035f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0218 	bic.w	r2, r2, #24
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	e00c      	b.n	800361e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f834 	bl	800367c <HAL_CRCEx_Polynomial_Set>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e028      	b.n	8003670 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	795b      	ldrb	r3, [r3, #5]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f04f 32ff 	mov.w	r2, #4294967295
 800362e:	611a      	str	r2, [r3, #16]
 8003630:	e004      	b.n	800363c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	04c11db7 	.word	0x04c11db7

0800367c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800368c:	231f      	movs	r3, #31
 800368e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003690:	bf00      	nop
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1e5a      	subs	r2, r3, #1
 8003696:	613a      	str	r2, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b18      	cmp	r3, #24
 80036b4:	d846      	bhi.n	8003744 <HAL_CRCEx_Polynomial_Set+0xc8>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	0800374b 	.word	0x0800374b
 80036c0:	08003745 	.word	0x08003745
 80036c4:	08003745 	.word	0x08003745
 80036c8:	08003745 	.word	0x08003745
 80036cc:	08003745 	.word	0x08003745
 80036d0:	08003745 	.word	0x08003745
 80036d4:	08003745 	.word	0x08003745
 80036d8:	08003745 	.word	0x08003745
 80036dc:	08003739 	.word	0x08003739
 80036e0:	08003745 	.word	0x08003745
 80036e4:	08003745 	.word	0x08003745
 80036e8:	08003745 	.word	0x08003745
 80036ec:	08003745 	.word	0x08003745
 80036f0:	08003745 	.word	0x08003745
 80036f4:	08003745 	.word	0x08003745
 80036f8:	08003745 	.word	0x08003745
 80036fc:	0800372d 	.word	0x0800372d
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003745 	.word	0x08003745
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003745 	.word	0x08003745
 800371c:	08003721 	.word	0x08003721
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b06      	cmp	r3, #6
 8003724:	d913      	bls.n	800374e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800372a:	e010      	b.n	800374e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b07      	cmp	r3, #7
 8003730:	d90f      	bls.n	8003752 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003736:	e00c      	b.n	8003752 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d90b      	bls.n	8003756 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003742:	e008      	b.n	8003756 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	75fb      	strb	r3, [r7, #23]
      break;
 8003748:	e006      	b.n	8003758 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800374a:	bf00      	nop
 800374c:	e004      	b.n	8003758 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003756:	bf00      	nop
  }
  if (status == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10d      	bne.n	800377a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 0118 	bic.w	r1, r3, #24
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	e166      	b.n	8003a66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8158 	beq.w	8003a60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d005      	beq.n	80037c8 <HAL_GPIO_Init+0x40>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d130      	bne.n	800382a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037fe:	2201      	movs	r2, #1
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 0201 	and.w	r2, r3, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b03      	cmp	r3, #3
 8003834:	d017      	beq.n	8003866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d123      	bne.n	80038ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	08da      	lsrs	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3208      	adds	r2, #8
 800387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	6939      	ldr	r1, [r7, #16]
 80038b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80b2 	beq.w	8003a60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fc:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <HAL_GPIO_Init+0x2fc>)
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	4a60      	ldr	r2, [pc, #384]	; (8003a84 <HAL_GPIO_Init+0x2fc>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6613      	str	r3, [r2, #96]	; 0x60
 8003908:	4b5e      	ldr	r3, [pc, #376]	; (8003a84 <HAL_GPIO_Init+0x2fc>)
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_GPIO_Init+0x300>)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	220f      	movs	r2, #15
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800393e:	d02b      	beq.n	8003998 <HAL_GPIO_Init+0x210>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d025      	beq.n	8003994 <HAL_GPIO_Init+0x20c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a51      	ldr	r2, [pc, #324]	; (8003a90 <HAL_GPIO_Init+0x308>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01f      	beq.n	8003990 <HAL_GPIO_Init+0x208>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a50      	ldr	r2, [pc, #320]	; (8003a94 <HAL_GPIO_Init+0x30c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d019      	beq.n	800398c <HAL_GPIO_Init+0x204>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a4f      	ldr	r2, [pc, #316]	; (8003a98 <HAL_GPIO_Init+0x310>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_GPIO_Init+0x200>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a4e      	ldr	r2, [pc, #312]	; (8003a9c <HAL_GPIO_Init+0x314>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00d      	beq.n	8003984 <HAL_GPIO_Init+0x1fc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a4d      	ldr	r2, [pc, #308]	; (8003aa0 <HAL_GPIO_Init+0x318>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <HAL_GPIO_Init+0x1f8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a4c      	ldr	r2, [pc, #304]	; (8003aa4 <HAL_GPIO_Init+0x31c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_GPIO_Init+0x1f4>
 8003978:	2307      	movs	r3, #7
 800397a:	e00e      	b.n	800399a <HAL_GPIO_Init+0x212>
 800397c:	2308      	movs	r3, #8
 800397e:	e00c      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003980:	2306      	movs	r3, #6
 8003982:	e00a      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003984:	2305      	movs	r3, #5
 8003986:	e008      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003988:	2304      	movs	r3, #4
 800398a:	e006      	b.n	800399a <HAL_GPIO_Init+0x212>
 800398c:	2303      	movs	r3, #3
 800398e:	e004      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003990:	2302      	movs	r3, #2
 8003992:	e002      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_GPIO_Init+0x212>
 8003998:	2300      	movs	r3, #0
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	f002 0203 	and.w	r2, r2, #3
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	4093      	lsls	r3, r2
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039aa:	4937      	ldr	r1, [pc, #220]	; (8003a88 <HAL_GPIO_Init+0x300>)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039dc:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a06:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a0c:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a30:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_GPIO_Init+0x320>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f ae91 	bne.w	8003798 <HAL_GPIO_Init+0x10>
  }
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	48000400 	.word	0x48000400
 8003a90:	48000800 	.word	0x48000800
 8003a94:	48000c00 	.word	0x48000c00
 8003a98:	48001000 	.word	0x48001000
 8003a9c:	48001400 	.word	0x48001400
 8003aa0:	48001800 	.word	0x48001800
 8003aa4:	48001c00 	.word	0x48001c00
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003aba:	e0c9      	b.n	8003c50 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003abc:	2201      	movs	r2, #1
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80bc 	beq.w	8003c4a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ad2:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_GPIO_DeInit+0x1c0>)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ade:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003afa:	d02b      	beq.n	8003b54 <HAL_GPIO_DeInit+0xa8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <HAL_GPIO_DeInit+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d025      	beq.n	8003b50 <HAL_GPIO_DeInit+0xa4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a5b      	ldr	r2, [pc, #364]	; (8003c74 <HAL_GPIO_DeInit+0x1c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d01f      	beq.n	8003b4c <HAL_GPIO_DeInit+0xa0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a5a      	ldr	r2, [pc, #360]	; (8003c78 <HAL_GPIO_DeInit+0x1cc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d019      	beq.n	8003b48 <HAL_GPIO_DeInit+0x9c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a59      	ldr	r2, [pc, #356]	; (8003c7c <HAL_GPIO_DeInit+0x1d0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_GPIO_DeInit+0x98>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_GPIO_DeInit+0x1d4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00d      	beq.n	8003b40 <HAL_GPIO_DeInit+0x94>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a57      	ldr	r2, [pc, #348]	; (8003c84 <HAL_GPIO_DeInit+0x1d8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <HAL_GPIO_DeInit+0x90>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a56      	ldr	r2, [pc, #344]	; (8003c88 <HAL_GPIO_DeInit+0x1dc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_GPIO_DeInit+0x8c>
 8003b34:	2307      	movs	r3, #7
 8003b36:	e00e      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	e00c      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	e00a      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b40:	2305      	movs	r3, #5
 8003b42:	e008      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e006      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e004      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e002      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_GPIO_DeInit+0xaa>
 8003b54:	2300      	movs	r3, #0
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	f002 0203 	and.w	r2, r2, #3
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	4093      	lsls	r3, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d132      	bne.n	8003bcc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b66:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	4947      	ldr	r1, [pc, #284]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003b74:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	4943      	ldr	r1, [pc, #268]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	4940      	ldr	r1, [pc, #256]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	493c      	ldr	r1, [pc, #240]	; (8003c8c <HAL_GPIO_DeInit+0x1e0>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <HAL_GPIO_DeInit+0x1c0>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	482b      	ldr	r0, [pc, #172]	; (8003c6c <HAL_GPIO_DeInit+0x1c0>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	08d2      	lsrs	r2, r2, #3
 8003c00:	4019      	ands	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2103      	movs	r1, #3
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	2101      	movs	r1, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	401a      	ands	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	401a      	ands	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af2f 	bne.w	8003abc <HAL_GPIO_DeInit+0x10>
  }
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	48001800 	.word	0x48001800
 8003c88:	48001c00 	.word	0x48001c00
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe f930 	bl	8001f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e081      	b.n	8003dd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe ff6a 	bl	8002bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e006      	b.n	8003d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d104      	bne.n	8003d5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69d9      	ldr	r1, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e021      	b.n	8003e34 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fe ff37 	bl	8002c7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	f040 80f9 	bne.w	8004056 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x34>
 8003e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ed      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x4e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0e6      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e92:	f7ff faa1 	bl	80033d8 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fac3 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0d1      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2221      	movs	r2, #33	; 0x21
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2240      	movs	r2, #64	; 0x40
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003edc:	88f8      	ldrh	r0, [r7, #6]
 8003ede:	893a      	ldrh	r2, [r7, #8]
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4603      	mov	r3, r0
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f9d3 	bl	8004298 <I2C_RequestMemoryWrite>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0a9      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2bff      	cmp	r3, #255	; 0xff
 8003f0c:	d90e      	bls.n	8003f2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fc2b 	bl	8004780 <I2C_TransferConfig>
 8003f2a:	e00f      	b.n	8003f4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fc1a 	bl	8004780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 faad 	bl	80044b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e07b      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d034      	beq.n	8004004 <HAL_I2C_Mem_Write+0x1c8>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d130      	bne.n	8004004 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa3f 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04d      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2bff      	cmp	r3, #255	; 0xff
 8003fc4:	d90e      	bls.n	8003fe4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	8979      	ldrh	r1, [r7, #10]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fbcf 	bl	8004780 <I2C_TransferConfig>
 8003fe2:	e00f      	b.n	8004004 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	8979      	ldrh	r1, [r7, #10]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fbbe 	bl	8004780 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d19e      	bne.n	8003f4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fa8c 	bl	8004530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e01a      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2220      	movs	r2, #32
 8004028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_I2C_Mem_Write+0x224>)
 8004036:	400b      	ands	r3, r1
 8004038:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	fe00e800 	.word	0xfe00e800

08004064 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 80fd 	bne.w	8004286 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2C_Mem_Read+0x34>
 8004092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0f1      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x4e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0ea      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ba:	f7ff f98d 	bl	80033d8 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2319      	movs	r3, #25
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f9af 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0d5      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2222      	movs	r2, #34	; 0x22
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	893a      	ldrh	r2, [r7, #8]
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f913 	bl	8004340 <I2C_RequestMemoryRead>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0ad      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2bff      	cmp	r3, #255	; 0xff
 8004134:	d90e      	bls.n	8004154 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_I2C_Mem_Read+0x22c>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fb17 	bl	8004780 <I2C_TransferConfig>
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	4b4a      	ldr	r3, [pc, #296]	; (8004290 <HAL_I2C_Mem_Read+0x22c>)
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fb06 	bl	8004780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	2200      	movs	r2, #0
 800417c:	2104      	movs	r1, #4
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f956 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07c      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d034      	beq.n	8004234 <HAL_I2C_Mem_Read+0x1d0>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d130      	bne.n	8004234 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f927 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04d      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2bff      	cmp	r3, #255	; 0xff
 80041f4:	d90e      	bls.n	8004214 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fab7 	bl	8004780 <I2C_TransferConfig>
 8004212:	e00f      	b.n	8004234 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	b2da      	uxtb	r2, r3
 8004224:	8979      	ldrh	r1, [r7, #10]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 faa6 	bl	8004780 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d19a      	bne.n	8004174 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f974 	bl	8004530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e01a      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_I2C_Mem_Read+0x230>)
 8004266:	400b      	ands	r3, r1
 8004268:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	80002400 	.word	0x80002400
 8004294:	fe00e800 	.word	0xfe00e800

08004298 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	817b      	strh	r3, [r7, #10]
 80042aa:	460b      	mov	r3, r1
 80042ac:	813b      	strh	r3, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	8979      	ldrh	r1, [r7, #10]
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <I2C_RequestMemoryWrite+0xa4>)
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa5d 	bl	8004780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8f0 	bl	80044b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e02c      	b.n	8004334 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e0:	893b      	ldrh	r3, [r7, #8]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28
 80042ea:	e015      	b.n	8004318 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f8d6 	bl	80044b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e012      	b.n	8004334 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f884 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	80002000 	.word	0x80002000

08004340 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	461a      	mov	r2, r3
 800434e:	4603      	mov	r3, r0
 8004350:	817b      	strh	r3, [r7, #10]
 8004352:	460b      	mov	r3, r1
 8004354:	813b      	strh	r3, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <I2C_RequestMemoryRead+0xa4>)
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fa0a 	bl	8004780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	69b9      	ldr	r1, [r7, #24]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f89d 	bl	80044b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e02c      	b.n	80043da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
 8004390:	e015      	b.n	80043be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004392:	893b      	ldrh	r3, [r7, #8]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	b29b      	uxth	r3, r3
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f883 	bl	80044b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e012      	b.n	80043da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f831 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	80002000 	.word	0x80002000

080043e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d103      	bne.n	8004406 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d007      	beq.n	8004424 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	619a      	str	r2, [r3, #24]
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004440:	e022      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d01e      	beq.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe ffc5 	bl	80033d8 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e00f      	b.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d0cd      	beq.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044bc:	e02c      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f870 	bl	80045a8 <I2C_IsErrorOccurred>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02a      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d01e      	beq.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe ff7d 	bl	80033d8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d1cb      	bne.n	80044be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453c:	e028      	b.n	8004590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f830 	bl	80045a8 <I2C_IsErrorOccurred>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e026      	b.n	80045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe ff41 	bl	80033d8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f043 0220 	orr.w	r2, r3, #32
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e007      	b.n	80045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d1cf      	bne.n	800453e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d075      	beq.n	80046c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2210      	movs	r2, #16
 80045da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045dc:	e056      	b.n	800468c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d052      	beq.n	800468c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe fef7 	bl	80033d8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_IsErrorOccurred+0x54>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d147      	bne.n	800468c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800460e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461e:	d12e      	bne.n	800467e <I2C_IsErrorOccurred+0xd6>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004626:	d02a      	beq.n	800467e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b20      	cmp	r3, #32
 800462c:	d027      	beq.n	800467e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800463e:	f7fe fecb 	bl	80033d8 <HAL_GetTick>
 8004642:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004644:	e01b      	b.n	800467e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004646:	f7fe fec7 	bl	80033d8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b19      	cmp	r3, #25
 8004652:	d914      	bls.n	800467e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d1dc      	bne.n	8004646 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d003      	beq.n	80046a2 <I2C_IsErrorOccurred+0xfa>
 800469a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d09d      	beq.n	80045de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2220      	movs	r2, #32
 80046b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0308 	orr.w	r3, r3, #8
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800472e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01c      	beq.n	8004770 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fe56 	bl	80043e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <I2C_IsErrorOccurred+0x1d4>)
 8004748:	400b      	ands	r3, r1
 800474a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	431a      	orrs	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	fe00e800 	.word	0xfe00e800

08004780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	4613      	mov	r3, r2
 8004790:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004798:	7a7b      	ldrb	r3, [r7, #9]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	0d5b      	lsrs	r3, r3, #21
 80047ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <I2C_TransferConfig+0x60>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	43db      	mvns	r3, r3
 80047c4:	ea02 0103 	and.w	r1, r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	03ff63ff 	.word	0x03ff63ff

080047e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d138      	bne.n	800486c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d139      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800489a:	2302      	movs	r3, #2
 800489c:	e033      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2224      	movs	r2, #36	; 0x24
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004920:	f7fe fd5a 	bl	80033d8 <HAL_GetTick>
 8004924:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e092      	b.n	8004a58 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 808b 	bne.w	8004a58 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe f9be 	bl	8002cc4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004948:	f241 3188 	movw	r1, #5000	; 0x1388
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fad0 	bl	8004ef2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_OSPI_Init+0x150>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68d1      	ldr	r1, [r2, #12]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6912      	ldr	r2, [r2, #16]
 8004964:	3a01      	subs	r2, #1
 8004966:	0412      	lsls	r2, r2, #16
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6952      	ldr	r2, [r2, #20]
 800496e:	3a01      	subs	r2, #1
 8004970:	0212      	lsls	r2, r2, #8
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	69d2      	ldr	r2, [r2, #28]
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	430b      	orrs	r3, r1
 8004986:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0412      	lsls	r2, r2, #16
 8004992:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2120      	movs	r1, #32
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fddc 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d146      	bne.n	8004a58 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a00:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d107      	bne.n	8004a40 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0202 	orr.w	r2, r2, #2
 8004a3e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a48:	d103      	bne.n	8004a52 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8004a50:	e002      	b.n	8004a58 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	f8e0f8f4 	.word	0xf8e0f8f4

08004a68 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	e015      	b.n	8004aac <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0202 	bic.w	r2, r2, #2
 8004a9e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fe f97b 	bl	8002d9c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b08a      	sub	sp, #40	; 0x28
 8004aba:	af02      	add	r7, sp, #8
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004ac2:	f7fe fc89 	bl	80033d8 <HAL_GetTick>
 8004ac6:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d104      	bne.n	8004ae4 <HAL_OSPI_Command+0x2e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ae2:	d10d      	bne.n	8004b00 <HAL_OSPI_Command+0x4a>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b14      	cmp	r3, #20
 8004ae8:	d103      	bne.n	8004af2 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d006      	beq.n	8004b00 <HAL_OSPI_Command+0x4a>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b24      	cmp	r3, #36	; 0x24
 8004af6:	d153      	bne.n	8004ba0 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d14f      	bne.n	8004ba0 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2120      	movs	r1, #32
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fd34 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004b14:	7ffb      	ldrb	r3, [r7, #31]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d148      	bne.n	8004bac <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fd60 	bl	80055e8 <OSPI_ConfigCmd>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13c      	bne.n	8004bac <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10e      	bne.n	8004b58 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2201      	movs	r2, #1
 8004b42:	2102      	movs	r1, #2
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fd17 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2202      	movs	r2, #2
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004b56:	e029      	b.n	8004bac <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2204      	movs	r2, #4
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b66:	e021      	b.n	8004bac <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10b      	bne.n	8004b88 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	2b24      	cmp	r3, #36	; 0x24
 8004b76:	d103      	bne.n	8004b80 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b7e:	e015      	b.n	8004bac <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2214      	movs	r2, #20
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b86:	e011      	b.n	8004bac <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	2b14      	cmp	r3, #20
 8004b8e:	d103      	bne.n	8004b98 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2204      	movs	r2, #4
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b96:	e009      	b.n	8004bac <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004b9e:	e005      	b.n	8004bac <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	649a      	str	r2, [r3, #72]	; 0x48
 8004baa:	e000      	b.n	8004bae <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8004bac:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004bc4:	f7fe fc08 	bl	80033d8 <HAL_GetTick>
 8004bc8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3350      	adds	r3, #80	; 0x50
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2208      	movs	r2, #8
 8004be0:	649a      	str	r2, [r3, #72]	; 0x48
 8004be2:	e057      	b.n	8004c94 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d14e      	bne.n	8004c8a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c14:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2104      	movs	r1, #4
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fca9 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1df      	bne.n	8004c16 <HAL_OSPI_Transmit+0x5e>
 8004c56:	e000      	b.n	8004c5a <HAL_OSPI_Transmit+0xa2>
          break;
 8004c58:	bf00      	nop

      if (status == HAL_OK)
 8004c5a:	7ffb      	ldrb	r3, [r7, #31]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d119      	bne.n	8004c94 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2201      	movs	r2, #1
 8004c68:	2102      	movs	r1, #2
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fc84 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2202      	movs	r2, #2
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
 8004c88:	e004      	b.n	8004c94 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2210      	movs	r2, #16
 8004c92:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08c      	sub	sp, #48	; 0x30
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004caa:	f7fe fb95 	bl	80033d8 <HAL_GetTick>
 8004cae:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3350      	adds	r3, #80	; 0x50
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	649a      	str	r2, [r3, #72]	; 0x48
 8004cdc:	e07c      	b.n	8004dd8 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d172      	bne.n	8004dcc <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d1c:	d104      	bne.n	8004d28 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	649a      	str	r2, [r3, #72]	; 0x48
 8004d26:	e011      	b.n	8004d4c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	649a      	str	r2, [r3, #72]	; 0x48
 8004d40:	e004      	b.n	8004d4c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2201      	movs	r2, #1
 8004d54:	2106      	movs	r1, #6
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fc0e 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8004d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d114      	bne.n	8004d94 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1dc      	bne.n	8004d4c <HAL_OSPI_Receive+0xae>
 8004d92:	e000      	b.n	8004d96 <HAL_OSPI_Receive+0xf8>
          break;
 8004d94:	bf00      	nop

      if (status == HAL_OK)
 8004d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2201      	movs	r2, #1
 8004da6:	2102      	movs	r1, #2
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fbe5 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8004db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8004dca:	e005      	b.n	8004dd8 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3728      	adds	r7, #40	; 0x28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7fe faf2 	bl	80033d8 <HAL_GetTick>
 8004df4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfc:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004e06:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d164      	bne.n	8004eda <HAL_OSPI_AutoPolling+0xf6>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e18:	d15f      	bne.n	8004eda <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2120      	movs	r1, #32
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fba7 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004e2e:	7ffb      	ldrb	r3, [r7, #31]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d158      	bne.n	8004ee6 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	6852      	ldr	r2, [r2, #4]
 8004e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6912      	ldr	r2, [r2, #16]
 8004e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004e76:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e80:	d104      	bne.n	8004e8c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	649a      	str	r2, [r3, #72]	; 0x48
 8004e8a:	e011      	b.n	8004eb0 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	649a      	str	r2, [r3, #72]	; 0x48
 8004ea4:	e004      	b.n	8004eb0 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2108      	movs	r1, #8
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb5c 	bl	8005578 <OSPI_WaitFlagStateUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2208      	movs	r2, #8
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004ed8:	e005      	b.n	8004ee6 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	649a      	str	r2, [r3, #72]	; 0x48
 8004ee4:	e000      	b.n	8004ee8 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8004ee6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b092      	sub	sp, #72	; 0x48
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <HAL_OSPIM_Config+0x40>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d105      	bne.n	8004f3e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004f3c:	e004      	b.n	8004f48 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f4e:	e01f      	b.n	8004f90 <HAL_OSPIM_Config+0x80>
 8004f50:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004f54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f58:	3301      	adds	r3, #1
 8004f5a:	b2d8      	uxtb	r0, r3
 8004f5c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004f60:	f107 0114 	add.w	r1, r7, #20
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f000 fc9c 	bl	80058ac <OSPIM_GetConfig>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2208      	movs	r2, #8
 8004f84:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004f86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d9dd      	bls.n	8004f54 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004f98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 82de 	bne.w	800555e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004fa2:	4bc6      	ldr	r3, [pc, #792]	; (80052bc <HAL_OSPIM_Config+0x3ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004fae:	4bc3      	ldr	r3, [pc, #780]	; (80052bc <HAL_OSPIM_Config+0x3ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4ac2      	ldr	r2, [pc, #776]	; (80052bc <HAL_OSPIM_Config+0x3ac>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004fba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004fc6:	4bbe      	ldr	r3, [pc, #760]	; (80052c0 <HAL_OSPIM_Config+0x3b0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004fd2:	4bbb      	ldr	r3, [pc, #748]	; (80052c0 <HAL_OSPIM_Config+0x3b0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4aba      	ldr	r2, [pc, #744]	; (80052c0 <HAL_OSPIM_Config+0x3b0>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004fde:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004fea:	49b6      	ldr	r1, [pc, #728]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8004fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	3348      	adds	r3, #72	; 0x48
 8004ff8:	443b      	add	r3, r7
 8004ffa:	3b2c      	subs	r3, #44	; 0x2c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	48af      	ldr	r0, [pc, #700]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	3348      	adds	r3, #72	; 0x48
 8005014:	443b      	add	r3, r7
 8005016:	3b2c      	subs	r3, #44	; 0x2c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3b01      	subs	r3, #1
 800501c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4403      	add	r3, r0
 8005024:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	3348      	adds	r3, #72	; 0x48
 8005032:	443b      	add	r3, r7
 8005034:	3b34      	subs	r3, #52	; 0x34
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a1 	beq.w	8005180 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800503e:	49a1      	ldr	r1, [pc, #644]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005040:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	3348      	adds	r3, #72	; 0x48
 800504c:	443b      	add	r3, r7
 800504e:	3b34      	subs	r3, #52	; 0x34
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3b01      	subs	r3, #1
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	489a      	ldr	r0, [pc, #616]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 800505c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	3348      	adds	r3, #72	; 0x48
 8005068:	443b      	add	r3, r7
 800506a:	3b34      	subs	r3, #52	; 0x34
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	f021 0201 	bic.w	r2, r1, #1
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4403      	add	r3, r0
 8005078:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800507a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	3348      	adds	r3, #72	; 0x48
 8005086:	443b      	add	r3, r7
 8005088:	3b30      	subs	r3, #48	; 0x30
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01d      	beq.n	80050cc <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005090:	498c      	ldr	r1, [pc, #560]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	3348      	adds	r3, #72	; 0x48
 800509e:	443b      	add	r3, r7
 80050a0:	3b30      	subs	r3, #48	; 0x30
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	4885      	ldr	r0, [pc, #532]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 80050ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3348      	adds	r3, #72	; 0x48
 80050ba:	443b      	add	r3, r7
 80050bc:	3b30      	subs	r3, #48	; 0x30
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	f021 0210 	bic.w	r2, r1, #16
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4403      	add	r3, r0
 80050ca:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80050cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	3348      	adds	r3, #72	; 0x48
 80050d8:	443b      	add	r3, r7
 80050da:	3b28      	subs	r3, #40	; 0x28
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d021      	beq.n	8005126 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80050e2:	4978      	ldr	r1, [pc, #480]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 80050e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3348      	adds	r3, #72	; 0x48
 80050f0:	443b      	add	r3, r7
 80050f2:	3b28      	subs	r3, #40	; 0x28
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	4870      	ldr	r0, [pc, #448]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	3348      	adds	r3, #72	; 0x48
 8005110:	443b      	add	r3, r7
 8005112:	3b28      	subs	r3, #40	; 0x28
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4403      	add	r3, r0
 8005124:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	3348      	adds	r3, #72	; 0x48
 8005132:	443b      	add	r3, r7
 8005134:	3b24      	subs	r3, #36	; 0x24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d021      	beq.n	8005180 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800513c:	4961      	ldr	r1, [pc, #388]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 800513e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	3348      	adds	r3, #72	; 0x48
 800514a:	443b      	add	r3, r7
 800514c:	3b24      	subs	r3, #36	; 0x24
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	4859      	ldr	r0, [pc, #356]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 800515e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	3348      	adds	r3, #72	; 0x48
 800516a:	443b      	add	r3, r7
 800516c:	3b24      	subs	r3, #36	; 0x24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4403      	add	r3, r0
 800517e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3348      	adds	r3, #72	; 0x48
 8005192:	443b      	add	r3, r7
 8005194:	3b34      	subs	r3, #52	; 0x34
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4299      	cmp	r1, r3
 800519a:	d038      	beq.n	800520e <HAL_OSPIM_Config+0x2fe>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3348      	adds	r3, #72	; 0x48
 80051ae:	443b      	add	r3, r7
 80051b0:	3b30      	subs	r3, #48	; 0x30
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d02a      	beq.n	800520e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	3348      	adds	r3, #72	; 0x48
 80051ca:	443b      	add	r3, r7
 80051cc:	3b2c      	subs	r3, #44	; 0x2c
 80051ce:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80051d0:	4299      	cmp	r1, r3
 80051d2:	d01c      	beq.n	800520e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	68d9      	ldr	r1, [r3, #12]
 80051d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	3348      	adds	r3, #72	; 0x48
 80051e6:	443b      	add	r3, r7
 80051e8:	3b28      	subs	r3, #40	; 0x28
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4299      	cmp	r1, r3
 80051ee:	d00e      	beq.n	800520e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6919      	ldr	r1, [r3, #16]
 80051f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	3348      	adds	r3, #72	; 0x48
 8005202:	443b      	add	r3, r7
 8005204:	3b24      	subs	r3, #36	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005208:	4299      	cmp	r1, r3
 800520a:	f040 80d3 	bne.w	80053b4 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800520e:	492d      	ldr	r1, [pc, #180]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005210:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	3348      	adds	r3, #72	; 0x48
 800521e:	443b      	add	r3, r7
 8005220:	3b34      	subs	r3, #52	; 0x34
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3b01      	subs	r3, #1
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	4825      	ldr	r0, [pc, #148]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 800522e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	3348      	adds	r3, #72	; 0x48
 800523c:	443b      	add	r3, r7
 800523e:	3b34      	subs	r3, #52	; 0x34
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3b01      	subs	r3, #1
 8005244:	f021 0201 	bic.w	r2, r1, #1
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4403      	add	r3, r0
 800524c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800524e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	3348      	adds	r3, #72	; 0x48
 800525c:	443b      	add	r3, r7
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01f      	beq.n	80052a6 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005266:	4917      	ldr	r1, [pc, #92]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005268:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	3348      	adds	r3, #72	; 0x48
 8005276:	443b      	add	r3, r7
 8005278:	3b30      	subs	r3, #48	; 0x30
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3b01      	subs	r3, #1
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	480f      	ldr	r0, [pc, #60]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 8005286:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	3348      	adds	r3, #72	; 0x48
 8005294:	443b      	add	r3, r7
 8005296:	3b30      	subs	r3, #48	; 0x30
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	f021 0210 	bic.w	r2, r1, #16
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4403      	add	r3, r0
 80052a4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80052a6:	4907      	ldr	r1, [pc, #28]	; (80052c4 <HAL_OSPIM_Config+0x3b4>)
 80052a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	3348      	adds	r3, #72	; 0x48
 80052b6:	443b      	add	r3, r7
 80052b8:	3b2c      	subs	r3, #44	; 0x2c
 80052ba:	e005      	b.n	80052c8 <HAL_OSPIM_Config+0x3b8>
 80052bc:	a0001000 	.word	0xa0001000
 80052c0:	a0001400 	.word	0xa0001400
 80052c4:	50061c00 	.word	0x50061c00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	48a6      	ldr	r0, [pc, #664]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80052d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	3348      	adds	r3, #72	; 0x48
 80052e2:	443b      	add	r3, r7
 80052e4:	3b2c      	subs	r3, #44	; 0x2c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4403      	add	r3, r0
 80052f2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80052f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3348      	adds	r3, #72	; 0x48
 8005302:	443b      	add	r3, r7
 8005304:	3b28      	subs	r3, #40	; 0x28
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800530c:	4997      	ldr	r1, [pc, #604]	; (800556c <HAL_OSPIM_Config+0x65c>)
 800530e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	3348      	adds	r3, #72	; 0x48
 800531c:	443b      	add	r3, r7
 800531e:	3b28      	subs	r3, #40	; 0x28
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3b01      	subs	r3, #1
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	488f      	ldr	r0, [pc, #572]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005330:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	3348      	adds	r3, #72	; 0x48
 800533e:	443b      	add	r3, r7
 8005340:	3b28      	subs	r3, #40	; 0x28
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4403      	add	r3, r0
 8005352:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005354:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	3348      	adds	r3, #72	; 0x48
 8005362:	443b      	add	r3, r7
 8005364:	3b24      	subs	r3, #36	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800536c:	497f      	ldr	r1, [pc, #508]	; (800556c <HAL_OSPIM_Config+0x65c>)
 800536e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	3348      	adds	r3, #72	; 0x48
 800537c:	443b      	add	r3, r7
 800537e:	3b24      	subs	r3, #36	; 0x24
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3b01      	subs	r3, #1
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	4877      	ldr	r0, [pc, #476]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005390:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	3348      	adds	r3, #72	; 0x48
 800539e:	443b      	add	r3, r7
 80053a0:	3b24      	subs	r3, #36	; 0x24
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4403      	add	r3, r0
 80053b2:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80053b4:	4a6d      	ldr	r2, [pc, #436]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	025b      	lsls	r3, r3, #9
 80053ca:	431a      	orrs	r2, r3
 80053cc:	4967      	ldr	r1, [pc, #412]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80053de:	4a63      	ldr	r2, [pc, #396]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f023 0203 	bic.w	r2, r3, #3
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	431a      	orrs	r2, r3
 80053f6:	495d      	ldr	r1, [pc, #372]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d014      	beq.n	800543a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005410:	4a56      	ldr	r2, [pc, #344]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	3b01      	subs	r3, #1
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005424:	015b      	lsls	r3, r3, #5
 8005426:	431a      	orrs	r2, r3
 8005428:	4950      	ldr	r1, [pc, #320]	; (800556c <HAL_OSPIM_Config+0x65c>)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	3b01      	subs	r3, #1
 8005430:	f042 0210 	orr.w	r2, r2, #16
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d019      	beq.n	800547a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005446:	4a49      	ldr	r2, [pc, #292]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	3b01      	subs	r3, #1
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	049b      	lsls	r3, r3, #18
 8005460:	431a      	orrs	r2, r3
 8005462:	4942      	ldr	r1, [pc, #264]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	3b01      	subs	r3, #1
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	605a      	str	r2, [r3, #4]
 8005478:	e01c      	b.n	80054b4 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005482:	4a3a      	ldr	r2, [pc, #232]	; (800556c <HAL_OSPIM_Config+0x65c>)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	3b01      	subs	r3, #1
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549a:	069b      	lsls	r3, r3, #26
 800549c:	431a      	orrs	r2, r3
 800549e:	4933      	ldr	r1, [pc, #204]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	049b      	lsls	r3, r3, #18
 80054da:	431a      	orrs	r2, r3
 80054dc:	4923      	ldr	r1, [pc, #140]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	e01c      	b.n	800552e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d018      	beq.n	800552e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80054fc:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_OSPIM_Config+0x65c>)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	3b01      	subs	r3, #1
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005514:	069b      	lsls	r3, r3, #26
 8005516:	431a      	orrs	r2, r3
 8005518:	4914      	ldr	r1, [pc, #80]	; (800556c <HAL_OSPIM_Config+0x65c>)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	3b01      	subs	r3, #1
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800552e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <HAL_OSPIM_Config+0x660>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <HAL_OSPIM_Config+0x660>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005546:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_OSPIM_Config+0x664>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a07      	ldr	r2, [pc, #28]	; (8005574 <HAL_OSPIM_Config+0x664>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800555e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005562:	4618      	mov	r0, r3
 8005564:	3748      	adds	r7, #72	; 0x48
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	50061c00 	.word	0x50061c00
 8005570:	a0001000 	.word	0xa0001000
 8005574:	a0001400 	.word	0xa0001400

08005578 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005588:	e01a      	b.n	80055c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d016      	beq.n	80055c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fd ff21 	bl	80033d8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e00e      	b.n	80055de <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1d6      	bne.n	800558a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005604:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d114      	bne.n	8005656 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005634:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800563e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005648:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e013      	b.n	800567e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800565e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005668:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005672:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800567c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	431a      	orrs	r2, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	4319      	orrs	r1, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	430b      	orrs	r3, r1
 80056b4:	431a      	orrs	r2, r3
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 021f 	bic.w	r2, r3, #31
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	431a      	orrs	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3a01      	subs	r2, #1
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8099 	beq.w	8005824 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d055      	beq.n	80057a6 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01e      	beq.n	8005740 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <OSPI_ConfigCmd+0x2c0>)
 8005708:	4013      	ands	r3, r2
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68d1      	ldr	r1, [r2, #12]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	6952      	ldr	r2, [r2, #20]
 8005712:	4311      	orrs	r1, r2
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	6912      	ldr	r2, [r2, #16]
 8005718:	4311      	orrs	r1, r2
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	69d2      	ldr	r2, [r2, #28]
 800571e:	4311      	orrs	r1, r2
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005724:	4311      	orrs	r1, r2
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	6a12      	ldr	r2, [r2, #32]
 800572a:	4311      	orrs	r1, r2
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005730:	4311      	orrs	r1, r2
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005736:	430a      	orrs	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e028      	b.n	8005792 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	68d1      	ldr	r1, [r2, #12]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	6952      	ldr	r2, [r2, #20]
 8005754:	4311      	orrs	r1, r2
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	6912      	ldr	r2, [r2, #16]
 800575a:	4311      	orrs	r1, r2
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	69d2      	ldr	r2, [r2, #28]
 8005760:	4311      	orrs	r1, r2
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005766:	4311      	orrs	r1, r2
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	6a12      	ldr	r2, [r2, #32]
 800576c:	430a      	orrs	r2, r1
 800576e:	431a      	orrs	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800577c:	d109      	bne.n	8005792 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005782:	2b08      	cmp	r3, #8
 8005784:	d105      	bne.n	8005792 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	6992      	ldr	r2, [r2, #24]
 80057a2:	649a      	str	r2, [r3, #72]	; 0x48
 80057a4:	e078      	b.n	8005898 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d017      	beq.n	80057de <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80057b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68d1      	ldr	r1, [r2, #12]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	6952      	ldr	r2, [r2, #20]
 80057c2:	4311      	orrs	r1, r2
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	6912      	ldr	r2, [r2, #16]
 80057c8:	4311      	orrs	r1, r2
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ce:	4311      	orrs	r1, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057d4:	430a      	orrs	r2, r1
 80057d6:	431a      	orrs	r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e01d      	b.n	800581a <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68d9      	ldr	r1, [r3, #12]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4319      	orrs	r1, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	431a      	orrs	r2, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005804:	d109      	bne.n	800581a <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800580a:	2b08      	cmp	r3, #8
 800580c:	d105      	bne.n	800581a <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e039      	b.n	8005898 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d030      	beq.n	800588e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800583c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	69d1      	ldr	r1, [r2, #28]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005848:	4311      	orrs	r1, r2
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	6a12      	ldr	r2, [r2, #32]
 800584e:	4311      	orrs	r1, r2
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005854:	4311      	orrs	r1, r2
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800585a:	430a      	orrs	r2, r1
 800585c:	431a      	orrs	r2, r3
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e00e      	b.n	8005882 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	69d9      	ldr	r1, [r3, #28]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	4319      	orrs	r1, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	430b      	orrs	r3, r1
 800587c:	431a      	orrs	r2, r3
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	6992      	ldr	r2, [r2, #24]
 800588a:	649a      	str	r2, [r3, #72]	; 0x48
 800588c:	e004      	b.n	8005898 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8005898:	7ffb      	ldrb	r3, [r7, #31]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	f0ffc0c0 	.word	0xf0ffc0c0

080058ac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <OSPIM_GetConfig+0x26>
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d802      	bhi.n	80058d2 <OSPIM_GetConfig+0x26>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
 80058d6:	e08e      	b.n	80059f6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2200      	movs	r2, #0
 80058e2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2200      	movs	r2, #0
 80058ee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d101      	bne.n	8005900 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80058fc:	4b41      	ldr	r3, [pc, #260]	; (8005a04 <OSPIM_GetConfig+0x158>)
 80058fe:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e074      	b.n	80059f0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005906:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <OSPIM_GetConfig+0x15c>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4053      	eors	r3, r2
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4053      	eors	r3, r2
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4053      	eors	r3, r2
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d018      	beq.n	80059ae <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4053      	eors	r3, r2
 8005982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d111      	bne.n	80059ae <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e005      	b.n	80059ae <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4053      	eors	r3, r2
 80059be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d111      	bne.n	80059ea <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	e005      	b.n	80059ea <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d987      	bls.n	8005906 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	04040222 	.word	0x04040222
 8005a08:	50061c00 	.word	0x50061c00

08005a0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a10:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1c:	d102      	bne.n	8005a24 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a22:	e00b      	b.n	8005a3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a32:	d102      	bne.n	8005a3a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a38:	e000      	b.n	8005a3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005a3a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40007000 	.word	0x40007000

08005a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d141      	bne.n	8005ade <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d131      	bne.n	8005acc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a68:	4b47      	ldr	r3, [pc, #284]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6e:	4a46      	ldr	r2, [pc, #280]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a78:	4b43      	ldr	r3, [pc, #268]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a80:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005a88:	4b40      	ldr	r3, [pc, #256]	; (8005b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2232      	movs	r2, #50	; 0x32
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	4a3f      	ldr	r2, [pc, #252]	; (8005b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	0c9b      	lsrs	r3, r3, #18
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a9e:	e002      	b.n	8005aa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aa6:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d102      	bne.n	8005aba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f2      	bne.n	8005aa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aba:	4b33      	ldr	r3, [pc, #204]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac6:	d158      	bne.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e057      	b.n	8005b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005acc:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad2:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005adc:	e04d      	b.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d141      	bne.n	8005b6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ae6:	4b28      	ldr	r3, [pc, #160]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d131      	bne.n	8005b58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afa:	4a23      	ldr	r2, [pc, #140]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b04:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b0c:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2232      	movs	r2, #50	; 0x32
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	0c9b      	lsrs	r3, r3, #18
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2a:	e002      	b.n	8005b32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3e:	d102      	bne.n	8005b46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f2      	bne.n	8005b2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d112      	bne.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e011      	b.n	8005b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b68:	e007      	b.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b78:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40007000 	.word	0x40007000
 8005b8c:	200001b8 	.word	0x200001b8
 8005b90:	431bde83 	.word	0x431bde83

08005b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f000 bc08 	b.w	80063b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba8:	4b96      	ldr	r3, [pc, #600]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb2:	4b94      	ldr	r3, [pc, #592]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80e4 	beq.w	8005d92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HAL_RCC_OscConfig+0x4c>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	f040 808b 	bne.w	8005cee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	f040 8087 	bne.w	8005cee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005be0:	4b88      	ldr	r3, [pc, #544]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x64>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e3df      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	4b81      	ldr	r3, [pc, #516]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <HAL_RCC_OscConfig+0x7e>
 8005c08:	4b7e      	ldr	r3, [pc, #504]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c10:	e005      	b.n	8005c1e <HAL_RCC_OscConfig+0x8a>
 8005c12:	4b7c      	ldr	r3, [pc, #496]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d223      	bcs.n	8005c6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fdfe 	bl	8006828 <RCC_SetFlashLatencyFromMSIRange>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e3c0      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c36:	4b73      	ldr	r3, [pc, #460]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a72      	ldr	r2, [pc, #456]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b70      	ldr	r3, [pc, #448]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	496d      	ldr	r1, [pc, #436]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c54:	4b6b      	ldr	r3, [pc, #428]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	4968      	ldr	r1, [pc, #416]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
 8005c68:	e025      	b.n	8005cb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c6a:	4b66      	ldr	r3, [pc, #408]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a65      	ldr	r2, [pc, #404]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b63      	ldr	r3, [pc, #396]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4960      	ldr	r1, [pc, #384]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c88:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	495b      	ldr	r1, [pc, #364]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fdbe 	bl	8006828 <RCC_SetFlashLatencyFromMSIRange>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e380      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cb6:	f000 fcc1 	bl	800663c <HAL_RCC_GetSysClockFreq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b51      	ldr	r3, [pc, #324]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4950      	ldr	r1, [pc, #320]	; (8005e08 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	4a4e      	ldr	r2, [pc, #312]	; (8005e0c <HAL_RCC_OscConfig+0x278>)
 8005cd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fd f906 	bl	8002eec <HAL_InitTick>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d052      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	e364      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d032      	beq.n	8005d5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cf6:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a42      	ldr	r2, [pc, #264]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d02:	f7fd fb69 	bl	80033d8 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d0a:	f7fd fb65 	bl	80033d8 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e34d      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d1c:	4b39      	ldr	r3, [pc, #228]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d28:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a35      	ldr	r2, [pc, #212]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d2e:	f043 0308 	orr.w	r3, r3, #8
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b33      	ldr	r3, [pc, #204]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4930      	ldr	r1, [pc, #192]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d46:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	492b      	ldr	r1, [pc, #172]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
 8005d5a:	e01a      	b.n	8005d92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d5c:	4b29      	ldr	r3, [pc, #164]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d68:	f7fd fb36 	bl	80033d8 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d70:	f7fd fb32 	bl	80033d8 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e31a      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d82:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1dc>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d073      	beq.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_OscConfig+0x21c>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d10e      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d063      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d15f      	bne.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e2f7      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCC_OscConfig+0x24c>
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a0b      	ldr	r2, [pc, #44]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e025      	b.n	8005e2c <HAL_RCC_OscConfig+0x298>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de8:	d114      	bne.n	8005e14 <HAL_RCC_OscConfig+0x280>
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a02      	ldr	r2, [pc, #8]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e013      	b.n	8005e2c <HAL_RCC_OscConfig+0x298>
 8005e04:	40021000 	.word	0x40021000
 8005e08:	08012554 	.word	0x08012554
 8005e0c:	200001b8 	.word	0x200001b8
 8005e10:	200001f0 	.word	0x200001f0
 8005e14:	4ba0      	ldr	r3, [pc, #640]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a9f      	ldr	r2, [pc, #636]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b9d      	ldr	r3, [pc, #628]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a9c      	ldr	r2, [pc, #624]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd fad0 	bl	80033d8 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fd facc 	bl	80033d8 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e2b4      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e4e:	4b92      	ldr	r3, [pc, #584]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f0      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2a8>
 8005e5a:	e014      	b.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fd fabc 	bl	80033d8 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fd fab8 	bl	80033d8 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	; 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e2a0      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e76:	4b88      	ldr	r3, [pc, #544]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x2d0>
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d060      	beq.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x310>
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d119      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d116      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea4:	4b7c      	ldr	r3, [pc, #496]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_OscConfig+0x328>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e27d      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b76      	ldr	r3, [pc, #472]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	4973      	ldr	r1, [pc, #460]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	e040      	b.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d023      	beq.n	8005f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eda:	4b6f      	ldr	r3, [pc, #444]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6e      	ldr	r2, [pc, #440]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee6:	f7fd fa77 	bl	80033d8 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eee:	f7fd fa73 	bl	80033d8 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e25b      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f00:	4b65      	ldr	r3, [pc, #404]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0c:	4b62      	ldr	r3, [pc, #392]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	061b      	lsls	r3, r3, #24
 8005f1a:	495f      	ldr	r1, [pc, #380]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]
 8005f20:	e018      	b.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f22:	4b5d      	ldr	r3, [pc, #372]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5c      	ldr	r2, [pc, #368]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f7fd fa53 	bl	80033d8 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fd fa4f 	bl	80033d8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e237      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f48:	4b53      	ldr	r3, [pc, #332]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d03c      	beq.n	8005fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01c      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f68:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fd fa2e 	bl	80033d8 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f80:	f7fd fa2a 	bl	80033d8 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e212      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f92:	4b41      	ldr	r3, [pc, #260]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ef      	beq.n	8005f80 <HAL_RCC_OscConfig+0x3ec>
 8005fa0:	e01b      	b.n	8005fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa2:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa8:	4a3b      	ldr	r2, [pc, #236]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fd fa11 	bl	80033d8 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fd fa0d 	bl	80033d8 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e1f5      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fcc:	4b32      	ldr	r3, [pc, #200]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1ef      	bne.n	8005fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80a6 	beq.w	8006134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fec:	4b2a      	ldr	r3, [pc, #168]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff8:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	4a26      	ldr	r2, [pc, #152]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006002:	6593      	str	r3, [r2, #88]	; 0x58
 8006004:	4b24      	ldr	r3, [pc, #144]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006010:	2301      	movs	r3, #1
 8006012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006014:	4b21      	ldr	r3, [pc, #132]	; (800609c <HAL_RCC_OscConfig+0x508>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d118      	bne.n	8006052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006020:	4b1e      	ldr	r3, [pc, #120]	; (800609c <HAL_RCC_OscConfig+0x508>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1d      	ldr	r2, [pc, #116]	; (800609c <HAL_RCC_OscConfig+0x508>)
 8006026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800602c:	f7fd f9d4 	bl	80033d8 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006034:	f7fd f9d0 	bl	80033d8 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1b8      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCC_OscConfig+0x508>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d108      	bne.n	800606c <HAL_RCC_OscConfig+0x4d8>
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800606a:	e029      	b.n	80060c0 <HAL_RCC_OscConfig+0x52c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b05      	cmp	r3, #5
 8006072:	d115      	bne.n	80060a0 <HAL_RCC_OscConfig+0x50c>
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	4a03      	ldr	r2, [pc, #12]	; (8006098 <HAL_RCC_OscConfig+0x504>)
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006094:	e014      	b.n	80060c0 <HAL_RCC_OscConfig+0x52c>
 8006096:	bf00      	nop
 8006098:	40021000 	.word	0x40021000
 800609c:	40007000 	.word	0x40007000
 80060a0:	4b9d      	ldr	r3, [pc, #628]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	4a9c      	ldr	r2, [pc, #624]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060b0:	4b99      	ldr	r3, [pc, #612]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	4a98      	ldr	r2, [pc, #608]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d016      	beq.n	80060f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c8:	f7fd f986 	bl	80033d8 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ce:	e00a      	b.n	80060e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d0:	f7fd f982 	bl	80033d8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	; 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e168      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e6:	4b8c      	ldr	r3, [pc, #560]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ed      	beq.n	80060d0 <HAL_RCC_OscConfig+0x53c>
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fd f96f 	bl	80033d8 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fd f96b 	bl	80033d8 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e151      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006114:	4b80      	ldr	r3, [pc, #512]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ed      	bne.n	80060fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d105      	bne.n	8006134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006128:	4b7b      	ldr	r3, [pc, #492]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	4a7a      	ldr	r2, [pc, #488]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 800612e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006132:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d03c      	beq.n	80061ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006148:	4b73      	ldr	r3, [pc, #460]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 800614a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614e:	4a72      	ldr	r2, [pc, #456]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fd f93e 	bl	80033d8 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006160:	f7fd f93a 	bl	80033d8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e122      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006172:	4b69      	ldr	r3, [pc, #420]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <HAL_RCC_OscConfig+0x5cc>
 8006180:	e01b      	b.n	80061ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006182:	4b65      	ldr	r3, [pc, #404]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006188:	4a63      	ldr	r2, [pc, #396]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006192:	f7fd f921 	bl	80033d8 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800619a:	f7fd f91d 	bl	80033d8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e105      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061ac:	4b5a      	ldr	r3, [pc, #360]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80061ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ef      	bne.n	800619a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80f9 	beq.w	80063b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	f040 80cf 	bne.w	800636c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80061ce:	4b52      	ldr	r3, [pc, #328]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f003 0203 	and.w	r2, r3, #3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	429a      	cmp	r2, r3
 80061e0:	d12c      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	3b01      	subs	r3, #1
 80061ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d123      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d11b      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006210:	429a      	cmp	r2, r3
 8006212:	d113      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	3b01      	subs	r3, #1
 8006222:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d109      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	3b01      	subs	r3, #1
 8006236:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d071      	beq.n	8006320 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d068      	beq.n	8006314 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800624e:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e0ac      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800625e:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2d      	ldr	r2, [pc, #180]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006268:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800626a:	f7fd f8b5 	bl	80033d8 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006272:	f7fd f8b1 	bl	80033d8 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e099      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006284:	4b24      	ldr	r3, [pc, #144]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <HAL_RCC_OscConfig+0x788>)
 8006296:	4013      	ands	r3, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062a0:	3a01      	subs	r2, #1
 80062a2:	0112      	lsls	r2, r2, #4
 80062a4:	4311      	orrs	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062aa:	0212      	lsls	r2, r2, #8
 80062ac:	4311      	orrs	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062b2:	0852      	lsrs	r2, r2, #1
 80062b4:	3a01      	subs	r2, #1
 80062b6:	0552      	lsls	r2, r2, #21
 80062b8:	4311      	orrs	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062be:	0852      	lsrs	r2, r2, #1
 80062c0:	3a01      	subs	r2, #1
 80062c2:	0652      	lsls	r2, r2, #25
 80062c4:	4311      	orrs	r1, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062ca:	06d2      	lsls	r2, r2, #27
 80062cc:	430a      	orrs	r2, r1
 80062ce:	4912      	ldr	r1, [pc, #72]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a0f      	ldr	r2, [pc, #60]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80062da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 80062e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062ec:	f7fd f874 	bl	80033d8 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fd f870 	bl	80033d8 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e058      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006306:	4b04      	ldr	r3, [pc, #16]	; (8006318 <HAL_RCC_OscConfig+0x784>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006312:	e050      	b.n	80063b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e04f      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
 8006318:	40021000 	.word	0x40021000
 800631c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d144      	bne.n	80063b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006336:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 800633e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006342:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006344:	f7fd f848 	bl	80033d8 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634c:	f7fd f844 	bl	80033d8 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e02c      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800635e:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0x7b8>
 800636a:	e024      	b.n	80063b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b0c      	cmp	r3, #12
 8006370:	d01f      	beq.n	80063b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 8006378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fd f82b 	bl	80033d8 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006386:	f7fd f827 	bl	80033d8 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e00f      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	4905      	ldr	r1, [pc, #20]	; (80063c0 <HAL_RCC_OscConfig+0x82c>)
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCC_OscConfig+0x830>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	60cb      	str	r3, [r1, #12]
 80063b0:	e001      	b.n	80063b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40021000 	.word	0x40021000
 80063c4:	feeefffc 	.word	0xfeeefffc

080063c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e11d      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b90      	ldr	r3, [pc, #576]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d910      	bls.n	8006410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b8d      	ldr	r3, [pc, #564]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 020f 	bic.w	r2, r3, #15
 80063f6:	498b      	ldr	r1, [pc, #556]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e105      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d010      	beq.n	800643e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	4b81      	ldr	r3, [pc, #516]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006428:	429a      	cmp	r2, r3
 800642a:	d908      	bls.n	800643e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800642c:	4b7e      	ldr	r3, [pc, #504]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	497b      	ldr	r1, [pc, #492]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d079      	beq.n	800653e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b03      	cmp	r3, #3
 8006450:	d11e      	bne.n	8006490 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006452:	4b75      	ldr	r3, [pc, #468]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e0dc      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006462:	f000 fa3b 	bl	80068dc <RCC_GetSysClockFreqFromPLLSource>
 8006466:	4603      	mov	r3, r0
 8006468:	4a70      	ldr	r2, [pc, #448]	; (800662c <HAL_RCC_ClockConfig+0x264>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d946      	bls.n	80064fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800646e:	4b6e      	ldr	r3, [pc, #440]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d140      	bne.n	80064fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800647a:	4b6b      	ldr	r3, [pc, #428]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006482:	4a69      	ldr	r2, [pc, #420]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e035      	b.n	80064fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006498:	4b63      	ldr	r3, [pc, #396]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d115      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b9      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064b0:	4b5d      	ldr	r3, [pc, #372]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0ad      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0a5      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80064d0:	f000 f8b4 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80064d4:	4603      	mov	r3, r0
 80064d6:	4a55      	ldr	r2, [pc, #340]	; (800662c <HAL_RCC_ClockConfig+0x264>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d90f      	bls.n	80064fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80064dc:	4b52      	ldr	r3, [pc, #328]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064e8:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f0:	4a4d      	ldr	r2, [pc, #308]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064fc:	4b4a      	ldr	r3, [pc, #296]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0203 	bic.w	r2, r3, #3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4947      	ldr	r1, [pc, #284]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800650a:	4313      	orrs	r3, r2
 800650c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650e:	f7fc ff63 	bl	80033d8 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006514:	e00a      	b.n	800652c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006516:	f7fc ff5f 	bl	80033d8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e077      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652c:	4b3e      	ldr	r3, [pc, #248]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 020c 	and.w	r2, r3, #12
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	429a      	cmp	r2, r3
 800653c:	d1eb      	bne.n	8006516 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d105      	bne.n	8006550 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006544:	4b38      	ldr	r3, [pc, #224]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800654a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800654e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d010      	beq.n	800657e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	4b31      	ldr	r3, [pc, #196]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006568:	429a      	cmp	r2, r3
 800656a:	d208      	bcs.n	800657e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800656c:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	492b      	ldr	r1, [pc, #172]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800657e:	4b29      	ldr	r3, [pc, #164]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d210      	bcs.n	80065ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f023 020f 	bic.w	r2, r3, #15
 8006594:	4923      	ldr	r1, [pc, #140]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659c:	4b21      	ldr	r3, [pc, #132]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d001      	beq.n	80065ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e036      	b.n	800661c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d008      	beq.n	80065cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ba:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	4918      	ldr	r1, [pc, #96]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	4910      	ldr	r1, [pc, #64]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ec:	f000 f826 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	490c      	ldr	r1, [pc, #48]	; (8006630 <HAL_RCC_ClockConfig+0x268>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <HAL_RCC_ClockConfig+0x26c>)
 800660a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <HAL_RCC_ClockConfig+0x270>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fc fc6b 	bl	8002eec <HAL_InitTick>
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40022000 	.word	0x40022000
 8006628:	40021000 	.word	0x40021000
 800662c:	04c4b400 	.word	0x04c4b400
 8006630:	08012554 	.word	0x08012554
 8006634:	200001b8 	.word	0x200001b8
 8006638:	200001f0 	.word	0x200001f0

0800663c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800664a:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006654:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x34>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d121      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d11e      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006670:	4b34      	ldr	r3, [pc, #208]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d107      	bne.n	800668c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800667c:	4b31      	ldr	r3, [pc, #196]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 800667e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e005      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006698:	4a2b      	ldr	r2, [pc, #172]	; (8006748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066ac:	e00a      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d102      	bne.n	80066ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <HAL_RCC_GetSysClockFreq+0x110>)
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e004      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066c0:	4b23      	ldr	r3, [pc, #140]	; (8006750 <HAL_RCC_GetSysClockFreq+0x114>)
 80066c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d134      	bne.n	8006734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ca:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d003      	beq.n	80066e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d003      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0xac>
 80066e0:	e005      	b.n	80066ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80066e2:	4b1a      	ldr	r3, [pc, #104]	; (800674c <HAL_RCC_GetSysClockFreq+0x110>)
 80066e4:	617b      	str	r3, [r7, #20]
      break;
 80066e6:	e005      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066e8:	4b19      	ldr	r3, [pc, #100]	; (8006750 <HAL_RCC_GetSysClockFreq+0x114>)
 80066ea:	617b      	str	r3, [r7, #20]
      break;
 80066ec:	e002      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	617b      	str	r3, [r7, #20]
      break;
 80066f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	3301      	adds	r3, #1
 8006700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	fb03 f202 	mul.w	r2, r3, r2
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	fbb2 f3f3 	udiv	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <HAL_RCC_GetSysClockFreq+0x108>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	0e5b      	lsrs	r3, r3, #25
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	3301      	adds	r3, #1
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006734:	69bb      	ldr	r3, [r7, #24]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3724      	adds	r7, #36	; 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40021000 	.word	0x40021000
 8006748:	0801256c 	.word	0x0801256c
 800674c:	00f42400 	.word	0x00f42400
 8006750:	007a1200 	.word	0x007a1200

08006754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <HAL_RCC_GetHCLKFreq+0x14>)
 800675a:	681b      	ldr	r3, [r3, #0]
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	200001b8 	.word	0x200001b8

0800676c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006770:	f7ff fff0 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 8006774:	4602      	mov	r2, r0
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	4904      	ldr	r1, [pc, #16]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006782:	5ccb      	ldrb	r3, [r1, r3]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40021000 	.word	0x40021000
 8006794:	08012564 	.word	0x08012564

08006798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800679c:	f7ff ffda 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 80067a0:	4602      	mov	r2, r0
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	0adb      	lsrs	r3, r3, #11
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	4904      	ldr	r1, [pc, #16]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067ae:	5ccb      	ldrb	r3, [r1, r3]
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40021000 	.word	0x40021000
 80067c0:	08012564 	.word	0x08012564

080067c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220f      	movs	r2, #15
 80067d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0203 	and.w	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	08db      	lsrs	r3, r3, #3
 80067fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_RCC_GetClockConfig+0x60>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	40022000 	.word	0x40022000

08006828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006840:	f7ff f8e4 	bl	8005a0c <HAL_PWREx_GetVoltageRange>
 8006844:	6178      	str	r0, [r7, #20]
 8006846:	e014      	b.n	8006872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006848:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	6593      	str	r3, [r2, #88]	; 0x58
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006860:	f7ff f8d4 	bl	8005a0c <HAL_PWREx_GetVoltageRange>
 8006864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006866:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800686c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006878:	d10b      	bne.n	8006892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d913      	bls.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2ba0      	cmp	r3, #160	; 0xa0
 8006884:	d902      	bls.n	800688c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006886:	2302      	movs	r3, #2
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	e00d      	b.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800688c:	2301      	movs	r3, #1
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e00a      	b.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d902      	bls.n	800689e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006898:	2302      	movs	r3, #2
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	e004      	b.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b70      	cmp	r3, #112	; 0x70
 80068a2:	d101      	bne.n	80068a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068a4:	2301      	movs	r3, #1
 80068a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 020f 	bic.w	r2, r3, #15
 80068b0:	4909      	ldr	r1, [pc, #36]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40022000 	.word	0x40022000

080068dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068e2:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d00b      	beq.n	800690a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d825      	bhi.n	8006944 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d008      	beq.n	8006910 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d11f      	bne.n	8006944 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006904:	4b25      	ldr	r3, [pc, #148]	; (800699c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006906:	613b      	str	r3, [r7, #16]
    break;
 8006908:	e01f      	b.n	800694a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800690a:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800690c:	613b      	str	r3, [r7, #16]
    break;
 800690e:	e01c      	b.n	800694a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006910:	4b21      	ldr	r3, [pc, #132]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d107      	bne.n	800692c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800691c:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800691e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e005      	b.n	8006938 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006940:	613b      	str	r3, [r7, #16]
    break;
 8006942:	e002      	b.n	800694a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]
    break;
 8006948:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	3301      	adds	r3, #1
 8006956:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	fb03 f202 	mul.w	r2, r3, r2
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006970:	4b09      	ldr	r3, [pc, #36]	; (8006998 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	0e5b      	lsrs	r3, r3, #25
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	3301      	adds	r3, #1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800698a:	683b      	ldr	r3, [r7, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40021000 	.word	0x40021000
 800699c:	00f42400 	.word	0x00f42400
 80069a0:	007a1200 	.word	0x007a1200
 80069a4:	0801256c 	.word	0x0801256c

080069a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069b0:	2300      	movs	r3, #0
 80069b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069b4:	2300      	movs	r3, #0
 80069b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d040      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d02a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d825      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069d0:	2b60      	cmp	r3, #96	; 0x60
 80069d2:	d026      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069d4:	2b60      	cmp	r3, #96	; 0x60
 80069d6:	d821      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d006      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d81d      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d010      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80069e8:	e018      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069ea:	4b89      	ldr	r3, [pc, #548]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4a88      	ldr	r2, [pc, #544]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069f6:	e015      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fb02 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a08:	e00c      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3320      	adds	r3, #32
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fbed 	bl	80071f0 <RCCEx_PLLSAI2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	74fb      	strb	r3, [r7, #19]
      break;
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a24:	7cfb      	ldrb	r3, [r7, #19]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a2a:	4b79      	ldr	r3, [pc, #484]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a30:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a38:	4975      	ldr	r1, [pc, #468]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006a40:	e001      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d047      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d030      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d82a      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a66:	d02a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6c:	d824      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a72:	d008      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a78:	d81e      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d010      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a84:	e018      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a86:	4b62      	ldr	r3, [pc, #392]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4a61      	ldr	r2, [pc, #388]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a90:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a92:	e015      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fab4 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006aa4:	e00c      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3320      	adds	r3, #32
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fb9f 	bl	80071f0 <RCCEx_PLLSAI2_Config>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	74fb      	strb	r3, [r7, #19]
      break;
 8006abc:	e000      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ac6:	4b52      	ldr	r3, [pc, #328]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad4:	494e      	ldr	r1, [pc, #312]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006adc:	e001      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 809f 	beq.w	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af0:	2300      	movs	r3, #0
 8006af2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006af4:	4b46      	ldr	r3, [pc, #280]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0a:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b14:	6593      	str	r3, [r2, #88]	; 0x58
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	60bb      	str	r3, [r7, #8]
 8006b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b22:	2301      	movs	r3, #1
 8006b24:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b26:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a3a      	ldr	r2, [pc, #232]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b32:	f7fc fc51 	bl	80033d8 <HAL_GetTick>
 8006b36:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b38:	e009      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3a:	f7fc fc4d 	bl	80033d8 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d902      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	74fb      	strb	r3, [r7, #19]
        break;
 8006b4c:	e005      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b4e:	4b31      	ldr	r3, [pc, #196]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ef      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006b5a:	7cfb      	ldrb	r3, [r7, #19]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d15b      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01f      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d019      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b8a:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b90:	4a1f      	ldr	r2, [pc, #124]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006baa:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d016      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fc fc0c 	bl	80033d8 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bc2:	e00b      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc4:	f7fc fc08 	bl	80033d8 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d902      	bls.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	74fb      	strb	r3, [r7, #19]
            break;
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ec      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006bea:	7cfb      	ldrb	r3, [r7, #19]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c00:	4903      	ldr	r1, [pc, #12]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c08:	e008      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c0a:	7cfb      	ldrb	r3, [r7, #19]
 8006c0c:	74bb      	strb	r3, [r7, #18]
 8006c0e:	e005      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006c10:	40021000 	.word	0x40021000
 8006c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c1c:	7c7b      	ldrb	r3, [r7, #17]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c22:	4ba0      	ldr	r3, [pc, #640]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c26:	4a9f      	ldr	r2, [pc, #636]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c3a:	4b9a      	ldr	r3, [pc, #616]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c40:	f023 0203 	bic.w	r2, r3, #3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	4996      	ldr	r1, [pc, #600]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c5c:	4b91      	ldr	r3, [pc, #580]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	f023 020c 	bic.w	r2, r3, #12
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	498e      	ldr	r1, [pc, #568]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c7e:	4b89      	ldr	r3, [pc, #548]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8c:	4985      	ldr	r1, [pc, #532]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ca0:	4b80      	ldr	r3, [pc, #512]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	497d      	ldr	r1, [pc, #500]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cc2:	4b78      	ldr	r3, [pc, #480]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	4974      	ldr	r1, [pc, #464]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ce4:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	496c      	ldr	r1, [pc, #432]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d06:	4b67      	ldr	r3, [pc, #412]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d14:	4963      	ldr	r1, [pc, #396]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d28:	4b5e      	ldr	r3, [pc, #376]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d36:	495b      	ldr	r1, [pc, #364]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d4a:	4b56      	ldr	r3, [pc, #344]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	4952      	ldr	r1, [pc, #328]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d6c:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7a:	494a      	ldr	r1, [pc, #296]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d8e:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9c:	4941      	ldr	r1, [pc, #260]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006db0:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db6:	f023 0203 	bic.w	r2, r3, #3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbe:	4939      	ldr	r1, [pc, #228]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d028      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dd2:	4b34      	ldr	r3, [pc, #208]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de0:	4930      	ldr	r1, [pc, #192]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df0:	d106      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df2:	4b2c      	ldr	r3, [pc, #176]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dfc:	60d3      	str	r3, [r2, #12]
 8006dfe:	e011      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f8f9 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006e20:	7cfb      	ldrb	r3, [r7, #19]
 8006e22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d04d      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e4a:	e012      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e52:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	490e      	ldr	r1, [pc, #56]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e86:	60d3      	str	r3, [r2, #12]
 8006e88:	e020      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e92:	d109      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a02      	ldr	r2, [pc, #8]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9e:	60d3      	str	r3, [r2, #12]
 8006ea0:	e014      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f8a5 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ec2:	7cfb      	ldrb	r3, [r7, #19]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006ec8:	7cfb      	ldrb	r3, [r7, #19]
 8006eca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d028      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed8:	4b4a      	ldr	r3, [pc, #296]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee6:	4947      	ldr	r1, [pc, #284]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef8:	4b42      	ldr	r3, [pc, #264]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a41      	ldr	r2, [pc, #260]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f02:	60d3      	str	r3, [r2, #12]
 8006f04:	e011      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f0e:	d10c      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	2101      	movs	r1, #1
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f876 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006f26:	7cfb      	ldrb	r3, [r7, #19]
 8006f28:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01e      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f36:	4b33      	ldr	r3, [pc, #204]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f46:	492f      	ldr	r1, [pc, #188]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f851 	bl	8007008 <RCCEx_PLLSAI1_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f6a:	7cfb      	ldrb	r3, [r7, #19]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f80:	4b20      	ldr	r3, [pc, #128]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f86:	f023 0204 	bic.w	r2, r3, #4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f90:	491c      	ldr	r1, [pc, #112]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006fa4:	4b17      	ldr	r3, [pc, #92]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006faa:	f023 0218 	bic.w	r2, r3, #24
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb4:	4913      	ldr	r1, [pc, #76]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd8:	490a      	ldr	r1, [pc, #40]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a04      	ldr	r2, [pc, #16]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40021000 	.word	0x40021000

08007008 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007016:	4b72      	ldr	r3, [pc, #456]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007022:	4b6f      	ldr	r3, [pc, #444]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f003 0203 	and.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d103      	bne.n	800703a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
       ||
 8007036:	2b00      	cmp	r3, #0
 8007038:	d142      	bne.n	80070c0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
 800703e:	e03f      	b.n	80070c0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d018      	beq.n	800707a <RCCEx_PLLSAI1_Config+0x72>
 8007048:	2b03      	cmp	r3, #3
 800704a:	d825      	bhi.n	8007098 <RCCEx_PLLSAI1_Config+0x90>
 800704c:	2b01      	cmp	r3, #1
 800704e:	d002      	beq.n	8007056 <RCCEx_PLLSAI1_Config+0x4e>
 8007050:	2b02      	cmp	r3, #2
 8007052:	d009      	beq.n	8007068 <RCCEx_PLLSAI1_Config+0x60>
 8007054:	e020      	b.n	8007098 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007056:	4b62      	ldr	r3, [pc, #392]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11d      	bne.n	800709e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007066:	e01a      	b.n	800709e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007068:	4b5d      	ldr	r3, [pc, #372]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d116      	bne.n	80070a2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007078:	e013      	b.n	80070a2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800707a:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007086:	4b56      	ldr	r3, [pc, #344]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007096:	e006      	b.n	80070a6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	e004      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800709e:	bf00      	nop
 80070a0:	e002      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80070a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d108      	bne.n	80070c0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80070ae:	4b4c      	ldr	r3, [pc, #304]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f023 0203 	bic.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4949      	ldr	r1, [pc, #292]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 8086 	bne.w	80071d4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80070c8:	4b45      	ldr	r3, [pc, #276]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a44      	ldr	r2, [pc, #272]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d4:	f7fc f980 	bl	80033d8 <HAL_GetTick>
 80070d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070da:	e009      	b.n	80070f0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070dc:	f7fc f97c 	bl	80033d8 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d902      	bls.n	80070f0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
        break;
 80070ee:	e005      	b.n	80070fc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070f0:	4b3b      	ldr	r3, [pc, #236]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1ef      	bne.n	80070dc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d168      	bne.n	80071d4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d113      	bne.n	8007130 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007108:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	4b35      	ldr	r3, [pc, #212]	; (80071e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800710e:	4013      	ands	r3, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6892      	ldr	r2, [r2, #8]
 8007114:	0211      	lsls	r1, r2, #8
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68d2      	ldr	r2, [r2, #12]
 800711a:	06d2      	lsls	r2, r2, #27
 800711c:	4311      	orrs	r1, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6852      	ldr	r2, [r2, #4]
 8007122:	3a01      	subs	r2, #1
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	430a      	orrs	r2, r1
 8007128:	492d      	ldr	r1, [pc, #180]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	610b      	str	r3, [r1, #16]
 800712e:	e02d      	b.n	800718c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d115      	bne.n	8007162 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007136:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6892      	ldr	r2, [r2, #8]
 8007142:	0211      	lsls	r1, r2, #8
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6912      	ldr	r2, [r2, #16]
 8007148:	0852      	lsrs	r2, r2, #1
 800714a:	3a01      	subs	r2, #1
 800714c:	0552      	lsls	r2, r2, #21
 800714e:	4311      	orrs	r1, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6852      	ldr	r2, [r2, #4]
 8007154:	3a01      	subs	r2, #1
 8007156:	0112      	lsls	r2, r2, #4
 8007158:	430a      	orrs	r2, r1
 800715a:	4921      	ldr	r1, [pc, #132]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800715c:	4313      	orrs	r3, r2
 800715e:	610b      	str	r3, [r1, #16]
 8007160:	e014      	b.n	800718c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007162:	4b1f      	ldr	r3, [pc, #124]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	4b21      	ldr	r3, [pc, #132]	; (80071ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007168:	4013      	ands	r3, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6892      	ldr	r2, [r2, #8]
 800716e:	0211      	lsls	r1, r2, #8
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6952      	ldr	r2, [r2, #20]
 8007174:	0852      	lsrs	r2, r2, #1
 8007176:	3a01      	subs	r2, #1
 8007178:	0652      	lsls	r2, r2, #25
 800717a:	4311      	orrs	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6852      	ldr	r2, [r2, #4]
 8007180:	3a01      	subs	r2, #1
 8007182:	0112      	lsls	r2, r2, #4
 8007184:	430a      	orrs	r2, r1
 8007186:	4916      	ldr	r1, [pc, #88]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007188:	4313      	orrs	r3, r2
 800718a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800718c:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007198:	f7fc f91e 	bl	80033d8 <HAL_GetTick>
 800719c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800719e:	e009      	b.n	80071b4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071a0:	f7fc f91a 	bl	80033d8 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d902      	bls.n	80071b4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	73fb      	strb	r3, [r7, #15]
          break;
 80071b2:	e005      	b.n	80071c0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071b4:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ef      	beq.n	80071a0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	4904      	ldr	r1, [pc, #16]	; (80071e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40021000 	.word	0x40021000
 80071e4:	07ff800f 	.word	0x07ff800f
 80071e8:	ff9f800f 	.word	0xff9f800f
 80071ec:	f9ff800f 	.word	0xf9ff800f

080071f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071fe:	4b72      	ldr	r3, [pc, #456]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00e      	beq.n	8007228 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800720a:	4b6f      	ldr	r3, [pc, #444]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0203 	and.w	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d103      	bne.n	8007222 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
       ||
 800721e:	2b00      	cmp	r3, #0
 8007220:	d142      	bne.n	80072a8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	e03f      	b.n	80072a8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d018      	beq.n	8007262 <RCCEx_PLLSAI2_Config+0x72>
 8007230:	2b03      	cmp	r3, #3
 8007232:	d825      	bhi.n	8007280 <RCCEx_PLLSAI2_Config+0x90>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d002      	beq.n	800723e <RCCEx_PLLSAI2_Config+0x4e>
 8007238:	2b02      	cmp	r3, #2
 800723a:	d009      	beq.n	8007250 <RCCEx_PLLSAI2_Config+0x60>
 800723c:	e020      	b.n	8007280 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800723e:	4b62      	ldr	r3, [pc, #392]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d11d      	bne.n	8007286 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800724e:	e01a      	b.n	8007286 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007250:	4b5d      	ldr	r3, [pc, #372]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007258:	2b00      	cmp	r3, #0
 800725a:	d116      	bne.n	800728a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007260:	e013      	b.n	800728a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007262:	4b59      	ldr	r3, [pc, #356]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10f      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800726e:	4b56      	ldr	r3, [pc, #344]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800727e:	e006      	b.n	800728e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e004      	b.n	8007290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800728e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d108      	bne.n	80072a8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007296:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f023 0203 	bic.w	r2, r3, #3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4949      	ldr	r1, [pc, #292]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 8086 	bne.w	80073bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80072b0:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a44      	ldr	r2, [pc, #272]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072bc:	f7fc f88c 	bl	80033d8 <HAL_GetTick>
 80072c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072c2:	e009      	b.n	80072d8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072c4:	f7fc f888 	bl	80033d8 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d902      	bls.n	80072d8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	73fb      	strb	r3, [r7, #15]
        break;
 80072d6:	e005      	b.n	80072e4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072d8:	4b3b      	ldr	r3, [pc, #236]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1ef      	bne.n	80072c4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d168      	bne.n	80073bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d113      	bne.n	8007318 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072f0:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	4b35      	ldr	r3, [pc, #212]	; (80073cc <RCCEx_PLLSAI2_Config+0x1dc>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6892      	ldr	r2, [r2, #8]
 80072fc:	0211      	lsls	r1, r2, #8
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	68d2      	ldr	r2, [r2, #12]
 8007302:	06d2      	lsls	r2, r2, #27
 8007304:	4311      	orrs	r1, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6852      	ldr	r2, [r2, #4]
 800730a:	3a01      	subs	r2, #1
 800730c:	0112      	lsls	r2, r2, #4
 800730e:	430a      	orrs	r2, r1
 8007310:	492d      	ldr	r1, [pc, #180]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007312:	4313      	orrs	r3, r2
 8007314:	614b      	str	r3, [r1, #20]
 8007316:	e02d      	b.n	8007374 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d115      	bne.n	800734a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800731e:	4b2a      	ldr	r3, [pc, #168]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	4b2b      	ldr	r3, [pc, #172]	; (80073d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007324:	4013      	ands	r3, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6892      	ldr	r2, [r2, #8]
 800732a:	0211      	lsls	r1, r2, #8
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6912      	ldr	r2, [r2, #16]
 8007330:	0852      	lsrs	r2, r2, #1
 8007332:	3a01      	subs	r2, #1
 8007334:	0552      	lsls	r2, r2, #21
 8007336:	4311      	orrs	r1, r2
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6852      	ldr	r2, [r2, #4]
 800733c:	3a01      	subs	r2, #1
 800733e:	0112      	lsls	r2, r2, #4
 8007340:	430a      	orrs	r2, r1
 8007342:	4921      	ldr	r1, [pc, #132]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007344:	4313      	orrs	r3, r2
 8007346:	614b      	str	r3, [r1, #20]
 8007348:	e014      	b.n	8007374 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800734a:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6892      	ldr	r2, [r2, #8]
 8007356:	0211      	lsls	r1, r2, #8
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6952      	ldr	r2, [r2, #20]
 800735c:	0852      	lsrs	r2, r2, #1
 800735e:	3a01      	subs	r2, #1
 8007360:	0652      	lsls	r2, r2, #25
 8007362:	4311      	orrs	r1, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6852      	ldr	r2, [r2, #4]
 8007368:	3a01      	subs	r2, #1
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	430a      	orrs	r2, r1
 800736e:	4916      	ldr	r1, [pc, #88]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007370:	4313      	orrs	r3, r2
 8007372:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007374:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007380:	f7fc f82a 	bl	80033d8 <HAL_GetTick>
 8007384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007386:	e009      	b.n	800739c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007388:	f7fc f826 	bl	80033d8 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d902      	bls.n	800739c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
          break;
 800739a:	e005      	b.n	80073a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ef      	beq.n	8007388 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	4904      	ldr	r1, [pc, #16]	; (80073c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	07ff800f 	.word	0x07ff800f
 80073d0:	ff9f800f 	.word	0xff9f800f
 80073d4:	f9ff800f 	.word	0xf9ff800f

080073d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e049      	b.n	800747e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fb fcf0 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f000 fa1c 	bl	8007854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d001      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e04f      	b.n	8007540 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a23      	ldr	r2, [pc, #140]	; (800754c <HAL_TIM_Base_Start_IT+0xc4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01d      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d018      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <HAL_TIM_Base_Start_IT+0xc8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <HAL_TIM_Base_Start_IT+0xcc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00e      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <HAL_TIM_Base_Start_IT+0xd0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1b      	ldr	r2, [pc, #108]	; (800755c <HAL_TIM_Base_Start_IT+0xd4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_TIM_Base_Start_IT+0x76>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_TIM_Base_Start_IT+0xd8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d115      	bne.n	800752a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <HAL_TIM_Base_Start_IT+0xdc>)
 8007506:	4013      	ands	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b06      	cmp	r3, #6
 800750e:	d015      	beq.n	800753c <HAL_TIM_Base_Start_IT+0xb4>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007516:	d011      	beq.n	800753c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007528:	e008      	b.n	800753c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0201 	orr.w	r2, r2, #1
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e000      	b.n	800753e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40013400 	.word	0x40013400
 8007560:	40014000 	.word	0x40014000
 8007564:	00010007 	.word	0x00010007

08007568 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1a      	ldr	r2, [r3, #32]
 8007586:	f241 1311 	movw	r3, #4369	; 0x1111
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10f      	bne.n	80075b0 <HAL_TIM_Base_Stop_IT+0x48>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	f240 4344 	movw	r3, #1092	; 0x444
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <HAL_TIM_Base_Stop_IT+0x48>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d122      	bne.n	8007622 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d11b      	bne.n	8007622 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0202 	mvn.w	r2, #2
 80075f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f905 	bl	8007818 <HAL_TIM_IC_CaptureCallback>
 800760e:	e005      	b.n	800761c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f8f7 	bl	8007804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f908 	bl	800782c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b04      	cmp	r3, #4
 800762e:	d122      	bne.n	8007676 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d11b      	bne.n	8007676 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f06f 0204 	mvn.w	r2, #4
 8007646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f8db 	bl	8007818 <HAL_TIM_IC_CaptureCallback>
 8007662:	e005      	b.n	8007670 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f8cd 	bl	8007804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8de 	bl	800782c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b08      	cmp	r3, #8
 8007682:	d122      	bne.n	80076ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b08      	cmp	r3, #8
 8007690:	d11b      	bne.n	80076ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f06f 0208 	mvn.w	r2, #8
 800769a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2204      	movs	r2, #4
 80076a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f8b1 	bl	8007818 <HAL_TIM_IC_CaptureCallback>
 80076b6:	e005      	b.n	80076c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8a3 	bl	8007804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8b4 	bl	800782c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d122      	bne.n	800771e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d11b      	bne.n	800771e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f06f 0210 	mvn.w	r2, #16
 80076ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2208      	movs	r2, #8
 80076f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f887 	bl	8007818 <HAL_TIM_IC_CaptureCallback>
 800770a:	e005      	b.n	8007718 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f879 	bl	8007804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f88a 	bl	800782c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10e      	bne.n	800774a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b01      	cmp	r3, #1
 8007738:	d107      	bne.n	800774a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f06f 0201 	mvn.w	r2, #1
 8007742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fa fab9 	bl	8001cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d10e      	bne.n	8007776 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b80      	cmp	r3, #128	; 0x80
 8007764:	d107      	bne.n	8007776 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800776e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f913 	bl	800799c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	d10e      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d107      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f906 	bl	80079b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d10e      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d107      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f838 	bl	8007840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d10e      	bne.n	80077fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d107      	bne.n	80077fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0220 	mvn.w	r2, #32
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8c6 	bl	8007988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a40      	ldr	r2, [pc, #256]	; (8007968 <TIM_Base_SetConfig+0x114>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007872:	d00f      	beq.n	8007894 <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a3d      	ldr	r2, [pc, #244]	; (800796c <TIM_Base_SetConfig+0x118>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a3c      	ldr	r2, [pc, #240]	; (8007970 <TIM_Base_SetConfig+0x11c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3b      	ldr	r2, [pc, #236]	; (8007974 <TIM_Base_SetConfig+0x120>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3a      	ldr	r2, [pc, #232]	; (8007978 <TIM_Base_SetConfig+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d108      	bne.n	80078a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2f      	ldr	r2, [pc, #188]	; (8007968 <TIM_Base_SetConfig+0x114>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d01f      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b4:	d01b      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2c      	ldr	r2, [pc, #176]	; (800796c <TIM_Base_SetConfig+0x118>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d017      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	; (8007970 <TIM_Base_SetConfig+0x11c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <TIM_Base_SetConfig+0x120>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00f      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a29      	ldr	r2, [pc, #164]	; (8007978 <TIM_Base_SetConfig+0x124>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00b      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a28      	ldr	r2, [pc, #160]	; (800797c <TIM_Base_SetConfig+0x128>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d007      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a27      	ldr	r2, [pc, #156]	; (8007980 <TIM_Base_SetConfig+0x12c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_Base_SetConfig+0x9a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a26      	ldr	r2, [pc, #152]	; (8007984 <TIM_Base_SetConfig+0x130>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d108      	bne.n	8007900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a10      	ldr	r2, [pc, #64]	; (8007968 <TIM_Base_SetConfig+0x114>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_Base_SetConfig+0xf8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a12      	ldr	r2, [pc, #72]	; (8007978 <TIM_Base_SetConfig+0x124>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_Base_SetConfig+0xf8>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a11      	ldr	r2, [pc, #68]	; (800797c <TIM_Base_SetConfig+0x128>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_Base_SetConfig+0xf8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a10      	ldr	r2, [pc, #64]	; (8007980 <TIM_Base_SetConfig+0x12c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_Base_SetConfig+0xf8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a0f      	ldr	r2, [pc, #60]	; (8007984 <TIM_Base_SetConfig+0x130>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d103      	bne.n	8007954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	615a      	str	r2, [r3, #20]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800
 8007974:	40000c00 	.word	0x40000c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e042      	b.n	8007a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d106      	bne.n	80079ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fb fa21 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	; 0x24
 80079f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0201 	bic.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f998 	bl	8007d3c <UART_SetConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e022      	b.n	8007a5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc88 	bl	8008334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fd0f 	bl	8008478 <UART_CheckIdleState>
 8007a5a:	4603      	mov	r3, r0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	f040 8084 	bne.w	8007b88 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_UART_Transmit+0x28>
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e07c      	b.n	8007b8a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_UART_Transmit+0x3a>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e075      	b.n	8007b8a <HAL_UART_Transmit+0x126>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2221      	movs	r2, #33	; 0x21
 8007ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ab6:	f7fb fc8f 	bl	80033d8 <HAL_GetTick>
 8007aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	88fa      	ldrh	r2, [r7, #6]
 8007ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d108      	bne.n	8007ae8 <HAL_UART_Transmit+0x84>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	e003      	b.n	8007af0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007af8:	e02d      	b.n	8007b56 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2180      	movs	r1, #128	; 0x80
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fd02 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e03a      	b.n	8007b8a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	881a      	ldrh	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b26:	b292      	uxth	r2, r2
 8007b28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e008      	b.n	8007b44 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b292      	uxth	r2, r2
 8007b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1cb      	bne.n	8007afa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2140      	movs	r1, #64	; 0x40
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fcce 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e006      	b.n	8007b8a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e000      	b.n	8007b8a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b08a      	sub	sp, #40	; 0x28
 8007b96:	af02      	add	r7, sp, #8
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	603b      	str	r3, [r7, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	f040 80c1 	bne.w	8007d30 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_UART_Receive+0x28>
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e0b9      	b.n	8007d32 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_UART_Receive+0x3a>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e0b2      	b.n	8007d32 <HAL_UART_Receive+0x1a0>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2222      	movs	r2, #34	; 0x22
 8007be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bea:	f7fb fbf5 	bl	80033d8 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d10e      	bne.n	8007c28 <HAL_UART_Receive+0x96>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <HAL_UART_Receive+0x8c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c1c:	e02d      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c26:	e028      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <HAL_UART_Receive+0xba>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <HAL_UART_Receive+0xb0>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c40:	e01b      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	227f      	movs	r2, #127	; 0x7f
 8007c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c4a:	e016      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c54:	d10d      	bne.n	8007c72 <HAL_UART_Receive+0xe0>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d104      	bne.n	8007c68 <HAL_UART_Receive+0xd6>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	227f      	movs	r2, #127	; 0x7f
 8007c62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c66:	e008      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	223f      	movs	r2, #63	; 0x3f
 8007c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c70:	e003      	b.n	8007c7a <HAL_UART_Receive+0xe8>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c80:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8a:	d108      	bne.n	8007c9e <HAL_UART_Receive+0x10c>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	e003      	b.n	8007ca6 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007cae:	e033      	b.n	8007d18 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2120      	movs	r1, #32
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fc27 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e033      	b.n	8007d32 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10c      	bne.n	8007cea <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	8a7b      	ldrh	r3, [r7, #18]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e00d      	b.n	8007d06 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	8a7b      	ldrh	r3, [r7, #18]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1c5      	bne.n	8007cb0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e000      	b.n	8007d32 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d40:	b08c      	sub	sp, #48	; 0x30
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4baa      	ldr	r3, [pc, #680]	; (8008014 <UART_SetConfig+0x2d8>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a9f      	ldr	r2, [pc, #636]	; (8008018 <UART_SetConfig+0x2dc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da4:	4313      	orrs	r3, r2
 8007da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007db2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	f023 010f 	bic.w	r1, r3, #15
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a90      	ldr	r2, [pc, #576]	; (800801c <UART_SetConfig+0x2e0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d125      	bne.n	8007e2c <UART_SetConfig+0xf0>
 8007de0:	4b8f      	ldr	r3, [pc, #572]	; (8008020 <UART_SetConfig+0x2e4>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d81a      	bhi.n	8007e24 <UART_SetConfig+0xe8>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0xb8>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0a:	e116      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e12:	e112      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e1a:	e10e      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e22:	e10a      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e2a:	e106      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a7c      	ldr	r2, [pc, #496]	; (8008024 <UART_SetConfig+0x2e8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d138      	bne.n	8007ea8 <UART_SetConfig+0x16c>
 8007e36:	4b7a      	ldr	r3, [pc, #488]	; (8008020 <UART_SetConfig+0x2e4>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b0c      	cmp	r3, #12
 8007e42:	d82d      	bhi.n	8007ea0 <UART_SetConfig+0x164>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <UART_SetConfig+0x110>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e81 	.word	0x08007e81
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	08007ea1 	.word	0x08007ea1
 8007e58:	08007ea1 	.word	0x08007ea1
 8007e5c:	08007e91 	.word	0x08007e91
 8007e60:	08007ea1 	.word	0x08007ea1
 8007e64:	08007ea1 	.word	0x08007ea1
 8007e68:	08007ea1 	.word	0x08007ea1
 8007e6c:	08007e89 	.word	0x08007e89
 8007e70:	08007ea1 	.word	0x08007ea1
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007e99 	.word	0x08007e99
 8007e80:	2300      	movs	r3, #0
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e86:	e0d8      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e8e:	e0d4      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e90:	2304      	movs	r3, #4
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e96:	e0d0      	b.n	800803a <UART_SetConfig+0x2fe>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e0cc      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e0c8      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a5e      	ldr	r2, [pc, #376]	; (8008028 <UART_SetConfig+0x2ec>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d125      	bne.n	8007efe <UART_SetConfig+0x1c2>
 8007eb2:	4b5b      	ldr	r3, [pc, #364]	; (8008020 <UART_SetConfig+0x2e4>)
 8007eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ebc:	2b30      	cmp	r3, #48	; 0x30
 8007ebe:	d016      	beq.n	8007eee <UART_SetConfig+0x1b2>
 8007ec0:	2b30      	cmp	r3, #48	; 0x30
 8007ec2:	d818      	bhi.n	8007ef6 <UART_SetConfig+0x1ba>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d00a      	beq.n	8007ede <UART_SetConfig+0x1a2>
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d814      	bhi.n	8007ef6 <UART_SetConfig+0x1ba>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <UART_SetConfig+0x19a>
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d008      	beq.n	8007ee6 <UART_SetConfig+0x1aa>
 8007ed4:	e00f      	b.n	8007ef6 <UART_SetConfig+0x1ba>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007edc:	e0ad      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee4:	e0a9      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eec:	e0a5      	b.n	800803a <UART_SetConfig+0x2fe>
 8007eee:	2308      	movs	r3, #8
 8007ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef4:	e0a1      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efc:	e09d      	b.n	800803a <UART_SetConfig+0x2fe>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4a      	ldr	r2, [pc, #296]	; (800802c <UART_SetConfig+0x2f0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d125      	bne.n	8007f54 <UART_SetConfig+0x218>
 8007f08:	4b45      	ldr	r3, [pc, #276]	; (8008020 <UART_SetConfig+0x2e4>)
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f12:	2bc0      	cmp	r3, #192	; 0xc0
 8007f14:	d016      	beq.n	8007f44 <UART_SetConfig+0x208>
 8007f16:	2bc0      	cmp	r3, #192	; 0xc0
 8007f18:	d818      	bhi.n	8007f4c <UART_SetConfig+0x210>
 8007f1a:	2b80      	cmp	r3, #128	; 0x80
 8007f1c:	d00a      	beq.n	8007f34 <UART_SetConfig+0x1f8>
 8007f1e:	2b80      	cmp	r3, #128	; 0x80
 8007f20:	d814      	bhi.n	8007f4c <UART_SetConfig+0x210>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <UART_SetConfig+0x1f0>
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d008      	beq.n	8007f3c <UART_SetConfig+0x200>
 8007f2a:	e00f      	b.n	8007f4c <UART_SetConfig+0x210>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e082      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e07e      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e07a      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e076      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e072      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a35      	ldr	r2, [pc, #212]	; (8008030 <UART_SetConfig+0x2f4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d12a      	bne.n	8007fb4 <UART_SetConfig+0x278>
 8007f5e:	4b30      	ldr	r3, [pc, #192]	; (8008020 <UART_SetConfig+0x2e4>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f6c:	d01a      	beq.n	8007fa4 <UART_SetConfig+0x268>
 8007f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f72:	d81b      	bhi.n	8007fac <UART_SetConfig+0x270>
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d00c      	beq.n	8007f94 <UART_SetConfig+0x258>
 8007f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f7e:	d815      	bhi.n	8007fac <UART_SetConfig+0x270>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <UART_SetConfig+0x250>
 8007f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f88:	d008      	beq.n	8007f9c <UART_SetConfig+0x260>
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x270>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f92:	e052      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f94:	2302      	movs	r3, #2
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9a:	e04e      	b.n	800803a <UART_SetConfig+0x2fe>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa2:	e04a      	b.n	800803a <UART_SetConfig+0x2fe>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e046      	b.n	800803a <UART_SetConfig+0x2fe>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e042      	b.n	800803a <UART_SetConfig+0x2fe>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <UART_SetConfig+0x2dc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d13a      	bne.n	8008034 <UART_SetConfig+0x2f8>
 8007fbe:	4b18      	ldr	r3, [pc, #96]	; (8008020 <UART_SetConfig+0x2e4>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fcc:	d01a      	beq.n	8008004 <UART_SetConfig+0x2c8>
 8007fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fd2:	d81b      	bhi.n	800800c <UART_SetConfig+0x2d0>
 8007fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd8:	d00c      	beq.n	8007ff4 <UART_SetConfig+0x2b8>
 8007fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fde:	d815      	bhi.n	800800c <UART_SetConfig+0x2d0>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <UART_SetConfig+0x2b0>
 8007fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fe8:	d008      	beq.n	8007ffc <UART_SetConfig+0x2c0>
 8007fea:	e00f      	b.n	800800c <UART_SetConfig+0x2d0>
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff2:	e022      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ffa:	e01e      	b.n	800803a <UART_SetConfig+0x2fe>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008002:	e01a      	b.n	800803a <UART_SetConfig+0x2fe>
 8008004:	2308      	movs	r3, #8
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800a:	e016      	b.n	800803a <UART_SetConfig+0x2fe>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008012:	e012      	b.n	800803a <UART_SetConfig+0x2fe>
 8008014:	cfff69f3 	.word	0xcfff69f3
 8008018:	40008000 	.word	0x40008000
 800801c:	40013800 	.word	0x40013800
 8008020:	40021000 	.word	0x40021000
 8008024:	40004400 	.word	0x40004400
 8008028:	40004800 	.word	0x40004800
 800802c:	40004c00 	.word	0x40004c00
 8008030:	40005000 	.word	0x40005000
 8008034:	2310      	movs	r3, #16
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4aae      	ldr	r2, [pc, #696]	; (80082f8 <UART_SetConfig+0x5bc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	f040 8097 	bne.w	8008174 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800804a:	2b08      	cmp	r3, #8
 800804c:	d823      	bhi.n	8008096 <UART_SetConfig+0x35a>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x318>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008079 	.word	0x08008079
 8008058:	08008097 	.word	0x08008097
 800805c:	08008081 	.word	0x08008081
 8008060:	08008097 	.word	0x08008097
 8008064:	08008087 	.word	0x08008087
 8008068:	08008097 	.word	0x08008097
 800806c:	08008097 	.word	0x08008097
 8008070:	08008097 	.word	0x08008097
 8008074:	0800808f 	.word	0x0800808f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008078:	f7fe fb78 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 800807c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800807e:	e010      	b.n	80080a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008080:	4b9e      	ldr	r3, [pc, #632]	; (80082fc <UART_SetConfig+0x5c0>)
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008084:	e00d      	b.n	80080a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008086:	f7fe fad9 	bl	800663c <HAL_RCC_GetSysClockFreq>
 800808a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800808c:	e009      	b.n	80080a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008094:	e005      	b.n	80080a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8130 	beq.w	800830a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	4a94      	ldr	r2, [pc, #592]	; (8008300 <UART_SetConfig+0x5c4>)
 80080b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	4413      	add	r3, r2
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d305      	bcc.n	80080da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d903      	bls.n	80080e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080e0:	e113      	b.n	800830a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	2200      	movs	r2, #0
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	60fa      	str	r2, [r7, #12]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	4a84      	ldr	r2, [pc, #528]	; (8008300 <UART_SetConfig+0x5c4>)
 80080f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008104:	f7f8 fe96 	bl	8000e34 <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	020b      	lsls	r3, r1, #8
 800811a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800811e:	0202      	lsls	r2, r0, #8
 8008120:	6979      	ldr	r1, [r7, #20]
 8008122:	6849      	ldr	r1, [r1, #4]
 8008124:	0849      	lsrs	r1, r1, #1
 8008126:	2000      	movs	r0, #0
 8008128:	460c      	mov	r4, r1
 800812a:	4605      	mov	r5, r0
 800812c:	eb12 0804 	adds.w	r8, r2, r4
 8008130:	eb43 0905 	adc.w	r9, r3, r5
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	469a      	mov	sl, r3
 800813c:	4693      	mov	fp, r2
 800813e:	4652      	mov	r2, sl
 8008140:	465b      	mov	r3, fp
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fe75 	bl	8000e34 <__aeabi_uldivmod>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4613      	mov	r3, r2
 8008150:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008158:	d308      	bcc.n	800816c <UART_SetConfig+0x430>
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008160:	d204      	bcs.n	800816c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e0ce      	b.n	800830a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008172:	e0ca      	b.n	800830a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	d166      	bne.n	800824c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800817e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008182:	2b08      	cmp	r3, #8
 8008184:	d827      	bhi.n	80081d6 <UART_SetConfig+0x49a>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <UART_SetConfig+0x450>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081b1 	.word	0x080081b1
 8008190:	080081b9 	.word	0x080081b9
 8008194:	080081c1 	.word	0x080081c1
 8008198:	080081d7 	.word	0x080081d7
 800819c:	080081c7 	.word	0x080081c7
 80081a0:	080081d7 	.word	0x080081d7
 80081a4:	080081d7 	.word	0x080081d7
 80081a8:	080081d7 	.word	0x080081d7
 80081ac:	080081cf 	.word	0x080081cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b0:	f7fe fadc 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 80081b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081b6:	e014      	b.n	80081e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b8:	f7fe faee 	bl	8006798 <HAL_RCC_GetPCLK2Freq>
 80081bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081be:	e010      	b.n	80081e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c0:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <UART_SetConfig+0x5c0>)
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081c4:	e00d      	b.n	80081e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081c6:	f7fe fa39 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081cc:	e009      	b.n	80081e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081d4:	e005      	b.n	80081e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8090 	beq.w	800830a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	4a44      	ldr	r2, [pc, #272]	; (8008300 <UART_SetConfig+0x5c4>)
 80081f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081fc:	005a      	lsls	r2, r3, #1
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	441a      	add	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d916      	bls.n	8008244 <UART_SetConfig+0x508>
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821c:	d212      	bcs.n	8008244 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f023 030f 	bic.w	r3, r3, #15
 8008226:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	b29b      	uxth	r3, r3
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	b29a      	uxth	r2, r3
 8008234:	8bfb      	ldrh	r3, [r7, #30]
 8008236:	4313      	orrs	r3, r2
 8008238:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	8bfa      	ldrh	r2, [r7, #30]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e062      	b.n	800830a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800824a:	e05e      	b.n	800830a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800824c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008250:	2b08      	cmp	r3, #8
 8008252:	d828      	bhi.n	80082a6 <UART_SetConfig+0x56a>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <UART_SetConfig+0x520>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	080082a7 	.word	0x080082a7
 800826c:	08008297 	.word	0x08008297
 8008270:	080082a7 	.word	0x080082a7
 8008274:	080082a7 	.word	0x080082a7
 8008278:	080082a7 	.word	0x080082a7
 800827c:	0800829f 	.word	0x0800829f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fe fa74 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008286:	e014      	b.n	80082b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fe fa86 	bl	8006798 <HAL_RCC_GetPCLK2Freq>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <UART_SetConfig+0x5c0>)
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008296:	f7fe f9d1 	bl	800663c <HAL_RCC_GetSysClockFreq>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829c:	e009      	b.n	80082b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a4:	e005      	b.n	80082b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b0:	bf00      	nop
    }

    if (pclk != 0U)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d028      	beq.n	800830a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	4a10      	ldr	r2, [pc, #64]	; (8008300 <UART_SetConfig+0x5c4>)
 80082be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c2:	461a      	mov	r2, r3
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	441a      	add	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d910      	bls.n	8008304 <UART_SetConfig+0x5c8>
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e8:	d20c      	bcs.n	8008304 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e009      	b.n	800830a <UART_SetConfig+0x5ce>
 80082f6:	bf00      	nop
 80082f8:	40008000 	.word	0x40008000
 80082fc:	00f42400 	.word	0x00f42400
 8008300:	0801259c 	.word	0x0801259c
      }
      else
      {
        ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2201      	movs	r2, #1
 800830e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2201      	movs	r2, #1
 8008316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2200      	movs	r2, #0
 800831e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2200      	movs	r2, #0
 8008324:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008326:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800832a:	4618      	mov	r0, r3
 800832c:	3730      	adds	r7, #48	; 0x30
 800832e:	46bd      	mov	sp, r7
 8008330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01a      	beq.n	800844a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008432:	d10a      	bne.n	800844a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008488:	f7fa ffa6 	bl	80033d8 <HAL_GetTick>
 800848c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0308 	and.w	r3, r3, #8
 8008498:	2b08      	cmp	r3, #8
 800849a:	d10e      	bne.n	80084ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f82f 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e025      	b.n	8008506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d10e      	bne.n	80084e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f819 	bl	800850e <UART_WaitOnFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e00f      	b.n	8008506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b09c      	sub	sp, #112	; 0x70
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	603b      	str	r3, [r7, #0]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800851e:	e0a9      	b.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	f000 80a5 	beq.w	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852a:	f7fa ff55 	bl	80033d8 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008536:	429a      	cmp	r2, r3
 8008538:	d302      	bcc.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
 800853a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800853c:	2b00      	cmp	r3, #0
 800853e:	d140      	bne.n	80085c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008554:	667b      	str	r3, [r7, #100]	; 0x64
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	663b      	str	r3, [r7, #96]	; 0x60
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008592:	64ba      	str	r2, [r7, #72]	; 0x48
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e069      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d051      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085de:	d149      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
 800860a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800860e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	66bb      	str	r3, [r7, #104]	; 0x68
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800863c:	623a      	str	r2, [r7, #32]
 800863e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	61bb      	str	r3, [r7, #24]
   return(result);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e010      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69da      	ldr	r2, [r3, #28]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4013      	ands	r3, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	429a      	cmp	r2, r3
 8008690:	f43f af46 	beq.w	8008520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3770      	adds	r7, #112	; 0x70
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800869e:	b480      	push	{r7}
 80086a0:	b085      	sub	sp, #20
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e027      	b.n	8008704 <HAL_UARTEx_DisableFifoMode+0x66>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2224      	movs	r2, #36	; 0x24
 80086c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0201 	bic.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008724:	2302      	movs	r3, #2
 8008726:	e02d      	b.n	8008784 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2224      	movs	r2, #36	; 0x24
 8008734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f84f 	bl	8008808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2220      	movs	r2, #32
 8008776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e02d      	b.n	8008800 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2224      	movs	r2, #36	; 0x24
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0201 	bic.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f811 	bl	8008808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008814:	2b00      	cmp	r3, #0
 8008816:	d108      	bne.n	800882a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008828:	e031      	b.n	800888e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800882a:	2308      	movs	r3, #8
 800882c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800882e:	2308      	movs	r3, #8
 8008830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	0e5b      	lsrs	r3, r3, #25
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	0f5b      	lsrs	r3, r3, #29
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	7b3a      	ldrb	r2, [r7, #12]
 8008856:	4911      	ldr	r1, [pc, #68]	; (800889c <UARTEx_SetNbDataToProcess+0x94>)
 8008858:	5c8a      	ldrb	r2, [r1, r2]
 800885a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800885e:	7b3a      	ldrb	r2, [r7, #12]
 8008860:	490f      	ldr	r1, [pc, #60]	; (80088a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008864:	fb93 f3f2 	sdiv	r3, r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	7b7a      	ldrb	r2, [r7, #13]
 8008874:	4909      	ldr	r1, [pc, #36]	; (800889c <UARTEx_SetNbDataToProcess+0x94>)
 8008876:	5c8a      	ldrb	r2, [r1, r2]
 8008878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800887c:	7b7a      	ldrb	r2, [r7, #13]
 800887e:	4908      	ldr	r1, [pc, #32]	; (80088a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008882:	fb93 f3f2 	sdiv	r3, r3, r2
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	080125b4 	.word	0x080125b4
 80088a0:	080125bc 	.word	0x080125bc

080088a4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	2101      	movs	r1, #1
 80088b2:	483b      	ldr	r0, [pc, #236]	; (80089a0 <network_configure_activations+0xfc>)
 80088b4:	f000 fb38 	bl	8008f28 <ai_platform_get_activations_map>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d065      	beq.n	800898a <network_configure_activations+0xe6>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 1760);
 80088be:	4b38      	ldr	r3, [pc, #224]	; (80089a0 <network_configure_activations+0xfc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80088c6:	4a37      	ldr	r2, [pc, #220]	; (80089a4 <network_configure_activations+0x100>)
 80088c8:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1760);
 80088ca:	4b35      	ldr	r3, [pc, #212]	; (80089a0 <network_configure_activations+0xfc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80088d2:	4a34      	ldr	r2, [pc, #208]	; (80089a4 <network_configure_activations+0x100>)
 80088d4:	60d3      	str	r3, [r2, #12]
    
    cast_0_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 80088d6:	4b32      	ldr	r3, [pc, #200]	; (80089a0 <network_configure_activations+0xfc>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088de:	4a32      	ldr	r2, [pc, #200]	; (80089a8 <network_configure_activations+0x104>)
 80088e0:	6093      	str	r3, [r2, #8]
    cast_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 80088e2:	4b2f      	ldr	r3, [pc, #188]	; (80089a0 <network_configure_activations+0xfc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	4a2f      	ldr	r2, [pc, #188]	; (80089a8 <network_configure_activations+0x104>)
 80088ec:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80088ee:	4b2c      	ldr	r3, [pc, #176]	; (80089a0 <network_configure_activations+0xfc>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2e      	ldr	r2, [pc, #184]	; (80089ac <network_configure_activations+0x108>)
 80088f4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80088f6:	4b2a      	ldr	r3, [pc, #168]	; (80089a0 <network_configure_activations+0xfc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a2c      	ldr	r2, [pc, #176]	; (80089ac <network_configure_activations+0x108>)
 80088fc:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80088fe:	4b28      	ldr	r3, [pc, #160]	; (80089a0 <network_configure_activations+0xfc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a2b      	ldr	r2, [pc, #172]	; (80089b0 <network_configure_activations+0x10c>)
 8008904:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008906:	4b26      	ldr	r3, [pc, #152]	; (80089a0 <network_configure_activations+0xfc>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a29      	ldr	r2, [pc, #164]	; (80089b0 <network_configure_activations+0x10c>)
 800890c:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <network_configure_activations+0xfc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008916:	4a27      	ldr	r2, [pc, #156]	; (80089b4 <network_configure_activations+0x110>)
 8008918:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 800891a:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <network_configure_activations+0xfc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	4a24      	ldr	r2, [pc, #144]	; (80089b4 <network_configure_activations+0x110>)
 8008924:	60d3      	str	r3, [r2, #12]
    
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <network_configure_activations+0xfc>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a23      	ldr	r2, [pc, #140]	; (80089b8 <network_configure_activations+0x114>)
 800892c:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800892e:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <network_configure_activations+0xfc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a21      	ldr	r2, [pc, #132]	; (80089b8 <network_configure_activations+0x114>)
 8008934:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 1032);
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <network_configure_activations+0xfc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800893e:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <network_configure_activations+0x118>)
 8008940:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1032);
 8008942:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <network_configure_activations+0xfc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800894a:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <network_configure_activations+0x118>)
 800894c:	60d3      	str	r3, [r2, #12]
    
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800894e:	4b14      	ldr	r3, [pc, #80]	; (80089a0 <network_configure_activations+0xfc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <network_configure_activations+0x11c>)
 8008954:	6093      	str	r3, [r2, #8]
    nl_3_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <network_configure_activations+0xfc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <network_configure_activations+0x11c>)
 800895c:	60d3      	str	r3, [r2, #12]
    
    dense_4_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800895e:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <network_configure_activations+0xfc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008966:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <network_configure_activations+0x120>)
 8008968:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <network_configure_activations+0xfc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008972:	4a14      	ldr	r2, [pc, #80]	; (80089c4 <network_configure_activations+0x120>)
 8008974:	60d3      	str	r3, [r2, #12]
    
    nl_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008976:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <network_configure_activations+0xfc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <network_configure_activations+0x124>)
 800897c:	6093      	str	r3, [r2, #8]
    nl_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800897e:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <network_configure_activations+0xfc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <network_configure_activations+0x124>)
 8008984:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008986:	2301      	movs	r3, #1
 8008988:	e005      	b.n	8008996 <network_configure_activations+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800898a:	2213      	movs	r2, #19
 800898c:	2130      	movs	r1, #48	; 0x30
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fbae 	bl	80090f0 <ai_platform_network_set_error>
  return false;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20001f84 	.word	0x20001f84
 80089a4:	20000218 	.word	0x20000218
 80089a8:	20000238 	.word	0x20000238
 80089ac:	20000248 	.word	0x20000248
 80089b0:	20000268 	.word	0x20000268
 80089b4:	20000278 	.word	0x20000278
 80089b8:	20000298 	.word	0x20000298
 80089bc:	200002a8 	.word	0x200002a8
 80089c0:	200002c8 	.word	0x200002c8
 80089c4:	200002d8 	.word	0x200002d8
 80089c8:	200002f8 	.word	0x200002f8

080089cc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	2101      	movs	r1, #1
 80089da:	4856      	ldr	r0, [pc, #344]	; (8008b34 <network_configure_weights+0x168>)
 80089dc:	f000 fa50 	bl	8008e80 <ai_platform_get_weights_map>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 809c 	beq.w	8008b20 <network_configure_weights+0x154>
    /* Updating weights (byte) offsets */
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80089e8:	4b53      	ldr	r3, [pc, #332]	; (8008b38 <network_configure_weights+0x16c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f0:	4a51      	ldr	r2, [pc, #324]	; (8008b38 <network_configure_weights+0x16c>)
 80089f2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80089f4:	4b4f      	ldr	r3, [pc, #316]	; (8008b34 <network_configure_weights+0x168>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a4f      	ldr	r2, [pc, #316]	; (8008b38 <network_configure_weights+0x16c>)
 80089fa:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80089fc:	4b4d      	ldr	r3, [pc, #308]	; (8008b34 <network_configure_weights+0x168>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a4d      	ldr	r2, [pc, #308]	; (8008b38 <network_configure_weights+0x16c>)
 8008a02:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a04:	4b4d      	ldr	r3, [pc, #308]	; (8008b3c <network_configure_weights+0x170>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	4a4b      	ldr	r2, [pc, #300]	; (8008b3c <network_configure_weights+0x170>)
 8008a0e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 589824);
 8008a10:	4b48      	ldr	r3, [pc, #288]	; (8008b34 <network_configure_weights+0x168>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a18:	4a48      	ldr	r2, [pc, #288]	; (8008b3c <network_configure_weights+0x170>)
 8008a1a:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 589824);
 8008a1c:	4b45      	ldr	r3, [pc, #276]	; (8008b34 <network_configure_weights+0x168>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a24:	4a45      	ldr	r2, [pc, #276]	; (8008b3c <network_configure_weights+0x170>)
 8008a26:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a28:	4b45      	ldr	r3, [pc, #276]	; (8008b40 <network_configure_weights+0x174>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a30:	4a43      	ldr	r2, [pc, #268]	; (8008b40 <network_configure_weights+0x174>)
 8008a32:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 591872);
 8008a34:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <network_configure_weights+0x168>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a40:	4a3f      	ldr	r2, [pc, #252]	; (8008b40 <network_configure_weights+0x174>)
 8008a42:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 591872);
 8008a44:	4b3b      	ldr	r3, [pc, #236]	; (8008b34 <network_configure_weights+0x168>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a50:	4a3b      	ldr	r2, [pc, #236]	; (8008b40 <network_configure_weights+0x174>)
 8008a52:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a54:	4b3b      	ldr	r3, [pc, #236]	; (8008b44 <network_configure_weights+0x178>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a5c:	4a39      	ldr	r2, [pc, #228]	; (8008b44 <network_configure_weights+0x178>)
 8008a5e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1120256);
 8008a60:	4b34      	ldr	r3, [pc, #208]	; (8008b34 <network_configure_weights+0x168>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f503 1388 	add.w	r3, r3, #1114112	; 0x110000
 8008a68:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008a6c:	4a35      	ldr	r2, [pc, #212]	; (8008b44 <network_configure_weights+0x178>)
 8008a6e:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1120256);
 8008a70:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <network_configure_weights+0x168>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f503 1388 	add.w	r3, r3, #1114112	; 0x110000
 8008a78:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008a7c:	4a31      	ldr	r2, [pc, #196]	; (8008b44 <network_configure_weights+0x178>)
 8008a7e:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a80:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <network_configure_weights+0x17c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a88:	4a2f      	ldr	r2, [pc, #188]	; (8008b48 <network_configure_weights+0x17c>)
 8008a8a:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 1121288);
 8008a8c:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <network_configure_weights+0x168>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <network_configure_weights+0x180>)
 8008a92:	4413      	add	r3, r2
 8008a94:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <network_configure_weights+0x17c>)
 8008a96:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1121288);
 8008a98:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <network_configure_weights+0x168>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b2b      	ldr	r3, [pc, #172]	; (8008b4c <network_configure_weights+0x180>)
 8008a9e:	4413      	add	r3, r2
 8008aa0:	4a29      	ldr	r2, [pc, #164]	; (8008b48 <network_configure_weights+0x17c>)
 8008aa2:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008aa4:	4b2a      	ldr	r3, [pc, #168]	; (8008b50 <network_configure_weights+0x184>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aac:	4a28      	ldr	r2, [pc, #160]	; (8008b50 <network_configure_weights+0x184>)
 8008aae:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 1253384);
 8008ab0:	4b20      	ldr	r3, [pc, #128]	; (8008b34 <network_configure_weights+0x168>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008ab8:	3308      	adds	r3, #8
 8008aba:	4a25      	ldr	r2, [pc, #148]	; (8008b50 <network_configure_weights+0x184>)
 8008abc:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1253384);
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <network_configure_weights+0x168>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	4a21      	ldr	r2, [pc, #132]	; (8008b50 <network_configure_weights+0x184>)
 8008aca:	60d3      	str	r3, [r2, #12]
    
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8008acc:	4b21      	ldr	r3, [pc, #132]	; (8008b54 <network_configure_weights+0x188>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad4:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <network_configure_weights+0x188>)
 8008ad6:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 1253896);
 8008ad8:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <network_configure_weights+0x168>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ae4:	4a1b      	ldr	r2, [pc, #108]	; (8008b54 <network_configure_weights+0x188>)
 8008ae6:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1253896);
 8008ae8:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <network_configure_weights+0x168>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008af0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008af4:	4a17      	ldr	r2, [pc, #92]	; (8008b54 <network_configure_weights+0x188>)
 8008af6:	60d3      	str	r3, [r2, #12]
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8008af8:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <network_configure_weights+0x18c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b00:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <network_configure_weights+0x18c>)
 8008b02:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 1261064);
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <network_configure_weights+0x168>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <network_configure_weights+0x190>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4a12      	ldr	r2, [pc, #72]	; (8008b58 <network_configure_weights+0x18c>)
 8008b0e:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1261064);
 8008b10:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <network_configure_weights+0x168>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <network_configure_weights+0x190>)
 8008b16:	4413      	add	r3, r2
 8008b18:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <network_configure_weights+0x18c>)
 8008b1a:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e005      	b.n	8008b2c <network_configure_weights+0x160>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008b20:	2212      	movs	r2, #18
 8008b22:	2130      	movs	r1, #48	; 0x30
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fae3 	bl	80090f0 <ai_platform_network_set_error>
  return false;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20001f88 	.word	0x20001f88
 8008b38:	200001f8 	.word	0x200001f8
 8008b3c:	20000208 	.word	0x20000208
 8008b40:	20000228 	.word	0x20000228
 8008b44:	20000258 	.word	0x20000258
 8008b48:	20000288 	.word	0x20000288
 8008b4c:	00111c08 	.word	0x00111c08
 8008b50:	200002b8 	.word	0x200002b8
 8008b54:	200002e8 	.word	0x200002e8
 8008b58:	20000308 	.word	0x20000308
 8008b5c:	00133e08 	.word	0x00133e08

08008b60 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fa53 	bl	8009014 <ai_platform_network_get_error>
 8008b6e:	4603      	mov	r3, r0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008b82:	2300      	movs	r3, #0
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	2305      	movs	r3, #5
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4a04      	ldr	r2, [pc, #16]	; (8008ba0 <ai_network_create+0x28>)
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc59 	bl	8009448 <ai_platform_network_create>
 8008b96:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20000b08 	.word	0x20000b08

08008ba4 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b096      	sub	sp, #88	; 0x58
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff ffe0 	bl	8008b78 <ai_network_create>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8008bbc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <ai_network_create_and_init+0x24>
        return err;
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc6:	e05d      	b.n	8008c84 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f8dd 	bl	8008d8c <ai_network_data_params_get>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f083 0301 	eor.w	r3, r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d008      	beq.n	8008bf0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ffbc 	bl	8008b60 <ai_network_get_error>
 8008be8:	4603      	mov	r3, r0
 8008bea:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8008bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bee:	e049      	b.n	8008c84 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d016      	beq.n	8008c24 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8008bfa:	e00e      	b.n	8008c1a <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	4413      	add	r3, r2
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	f107 0314 	add.w	r3, r7, #20
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f922 	bl	8008e58 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c16:	3301      	adds	r3, #1
 8008c18:	657b      	str	r3, [r7, #84]	; 0x54
 8008c1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c20:	4293      	cmp	r3, r2
 8008c22:	dbeb      	blt.n	8008bfc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d016      	beq.n	8008c58 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c2e:	e00e      	b.n	8008c4e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f908 	bl	8008e58 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4e:	8b7b      	ldrh	r3, [r7, #26]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c54:	4293      	cmp	r3, r2
 8008c56:	dbeb      	blt.n	8008c30 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f107 0214 	add.w	r2, r7, #20
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f846 	bl	8008cf4 <ai_network_init>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f083 0301 	eor.w	r3, r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff ff71 	bl	8008b60 <ai_network_get_error>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8008c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3758      	adds	r7, #88	; 0x58
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <ai_network_inputs_get+0x2c>)
 8008c9e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a06      	ldr	r2, [pc, #24]	; (8008cbc <ai_network_inputs_get+0x30>)
 8008ca4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa27 	bl	80090fc <ai_platform_inputs_get>
 8008cae:	4603      	mov	r3, r0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000b08 	.word	0x20000b08
 8008cbc:	a1c00100 	.word	0xa1c00100

08008cc0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <ai_network_outputs_get+0x2c>)
 8008cd2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <ai_network_outputs_get+0x30>)
 8008cd8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fae3 	bl	80092a8 <ai_platform_outputs_get>
 8008ce2:	4603      	mov	r3, r0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000b08 	.word	0x20000b08
 8008cf0:	a1c00100 	.word	0xa1c00100

08008cf4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fc77 	bl	80095f4 <ai_platform_network_init>
 8008d06:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <ai_network_init+0x1e>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e028      	b.n	8008d64 <ai_network_init+0x70>

  ai_bool ok = true;
 8008d12:	2301      	movs	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fe57 	bl	80089cc <network_configure_weights>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	7afb      	ldrb	r3, [r7, #11]
 8008d24:	4013      	ands	r3, r2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bf14      	ite	ne
 8008d2a:	2301      	movne	r3, #1
 8008d2c:	2300      	moveq	r3, #0
 8008d2e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fdb6 	bl	80088a4 <network_configure_activations>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bf14      	ite	ne
 8008d44:	2301      	movne	r3, #1
 8008d46:	2300      	moveq	r3, #0
 8008d48:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fd40 	bl	80097d0 <ai_platform_network_post_init>
 8008d50:	4603      	mov	r3, r0
 8008d52:	461a      	mov	r2, r3
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008d62:	7afb      	ldrb	r3, [r7, #11]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 fdaf 	bl	80098e0 <ai_platform_network_process>
 8008d82:	4603      	mov	r3, r0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <ai_network_data_params_get+0x12>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e016      	b.n	8008dcc <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008d9e:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <ai_network_data_params_get+0x48>)
 8008da0:	f107 0310 	add.w	r3, r7, #16
 8008da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008da8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008dac:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <ai_network_data_params_get+0x4c>)
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008db6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008dba:	f107 0210 	add.w	r2, r7, #16
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f903 	bl	8008fd0 <ai_platform_bind_network_params>
 8008dca:	4603      	mov	r3, r0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	08012544 	.word	0x08012544
 8008dd8:	0801254c 	.word	0x0801254c

08008ddc <ai_buffer_get_size>:
 8008ddc:	b378      	cbz	r0, 8008e3e <ai_buffer_get_size+0x62>
 8008dde:	b410      	push	{r4}
 8008de0:	6803      	ldr	r3, [r0, #0]
 8008de2:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <ai_buffer_get_size+0x64>)
 8008de4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008de8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d01e      	beq.n	8008e2e <ai_buffer_get_size+0x52>
 8008df0:	6984      	ldr	r4, [r0, #24]
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	7d03      	ldrb	r3, [r0, #20]
 8008df6:	6941      	ldr	r1, [r0, #20]
 8008df8:	f1a3 0301 	sub.w	r3, r3, #1
 8008dfc:	fab3 f383 	clz	r3, r3
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008e06:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8008e0a:	da0b      	bge.n	8008e24 <ai_buffer_get_size+0x48>
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d102      	bne.n	8008e16 <ai_buffer_get_size+0x3a>
 8008e10:	2802      	cmp	r0, #2
 8008e12:	d007      	beq.n	8008e24 <ai_buffer_get_size+0x48>
 8008e14:	2302      	movs	r3, #2
 8008e16:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	4298      	cmp	r0, r3
 8008e1e:	fb01 f202 	mul.w	r2, r1, r2
 8008e22:	d1f3      	bne.n	8008e0c <ai_buffer_get_size+0x30>
 8008e24:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d0de      	beq.n	8008df0 <ai_buffer_get_size+0x14>
 8008e32:	6984      	ldr	r4, [r0, #24]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	331f      	adds	r3, #31
 8008e38:	f023 021f 	bic.w	r2, r3, #31
 8008e3c:	e7da      	b.n	8008df4 <ai_buffer_get_size+0x18>
 8008e3e:	4770      	bx	lr
 8008e40:	000400c0 	.word	0x000400c0

08008e44 <ai_buffer_array_sane>:
 8008e44:	b138      	cbz	r0, 8008e56 <ai_buffer_array_sane+0x12>
 8008e46:	6843      	ldr	r3, [r0, #4]
 8008e48:	b123      	cbz	r3, 8008e54 <ai_buffer_array_sane+0x10>
 8008e4a:	8840      	ldrh	r0, [r0, #2]
 8008e4c:	3800      	subs	r0, #0
 8008e4e:	bf18      	it	ne
 8008e50:	2001      	movne	r0, #1
 8008e52:	4770      	bx	lr
 8008e54:	4618      	mov	r0, r3
 8008e56:	4770      	bx	lr

08008e58 <ai_buffer_array_item_set_address>:
 8008e58:	b150      	cbz	r0, 8008e70 <ai_buffer_array_item_set_address+0x18>
 8008e5a:	6843      	ldr	r3, [r0, #4]
 8008e5c:	b14b      	cbz	r3, 8008e72 <ai_buffer_array_item_set_address+0x1a>
 8008e5e:	8840      	ldrh	r0, [r0, #2]
 8008e60:	b900      	cbnz	r0, 8008e64 <ai_buffer_array_item_set_address+0xc>
 8008e62:	4770      	bx	lr
 8008e64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008e68:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	604a      	str	r2, [r1, #4]
 8008e70:	4770      	bx	lr
 8008e72:	4618      	mov	r0, r3
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop

08008e78 <_ai_platform_acquire_crc>:
 8008e78:	2001      	movs	r0, #1
 8008e7a:	4770      	bx	lr

08008e7c <_ai_platform_release_crc>:
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop

08008e80 <ai_platform_get_weights_map>:
 8008e80:	2a00      	cmp	r2, #0
 8008e82:	d037      	beq.n	8008ef4 <ai_platform_get_weights_map+0x74>
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	4604      	mov	r4, r0
 8008e88:	b1a0      	cbz	r0, 8008eb4 <ai_platform_get_weights_map+0x34>
 8008e8a:	460f      	mov	r7, r1
 8008e8c:	b191      	cbz	r1, 8008eb4 <ai_platform_get_weights_map+0x34>
 8008e8e:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <ai_platform_get_weights_map+0xa4>)
 8008e90:	6810      	ldr	r0, [r2, #0]
 8008e92:	4298      	cmp	r0, r3
 8008e94:	4615      	mov	r5, r2
 8008e96:	d00f      	beq.n	8008eb8 <ai_platform_get_weights_map+0x38>
 8008e98:	6855      	ldr	r5, [r2, #4]
 8008e9a:	b15d      	cbz	r5, 8008eb4 <ai_platform_get_weights_map+0x34>
 8008e9c:	682e      	ldr	r6, [r5, #0]
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	d02a      	beq.n	8008ef8 <ai_platform_get_weights_map+0x78>
 8008ea2:	f1a1 0001 	sub.w	r0, r1, #1
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	fab0 f080 	clz	r0, r0
 8008eac:	0940      	lsrs	r0, r0, #5
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	42a7      	cmp	r7, r4
 8008eb2:	d034      	beq.n	8008f1e <ai_platform_get_weights_map+0x9e>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb8:	1d10      	adds	r0, r2, #4
 8008eba:	f7ff ffc3 	bl	8008e44 <ai_buffer_array_sane>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d0f8      	beq.n	8008eb4 <ai_platform_get_weights_map+0x34>
 8008ec2:	88eb      	ldrh	r3, [r5, #6]
 8008ec4:	429f      	cmp	r7, r3
 8008ec6:	d1f5      	bne.n	8008eb4 <ai_platform_get_weights_map+0x34>
 8008ec8:	f04f 0e00 	mov.w	lr, #0
 8008ecc:	1f23      	subs	r3, r4, #4
 8008ece:	4670      	mov	r0, lr
 8008ed0:	68aa      	ldr	r2, [r5, #8]
 8008ed2:	eb02 0c0e 	add.w	ip, r2, lr
 8008ed6:	f10e 0e1c 	add.w	lr, lr, #28
 8008eda:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008ede:	b124      	cbz	r4, 8008eea <ai_platform_get_weights_map+0x6a>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	4287      	cmp	r7, r0
 8008ee4:	f843 4f04 	str.w	r4, [r3, #4]!
 8008ee8:	d1f2      	bne.n	8008ed0 <ai_platform_get_weights_map+0x50>
 8008eea:	1a38      	subs	r0, r7, r0
 8008eec:	fab0 f080 	clz	r0, r0
 8008ef0:	0940      	lsrs	r0, r0, #5
 8008ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4770      	bx	lr
 8008ef8:	1f23      	subs	r3, r4, #4
 8008efa:	4628      	mov	r0, r5
 8008efc:	2400      	movs	r4, #0
 8008efe:	e000      	b.n	8008f02 <ai_platform_get_weights_map+0x82>
 8008f00:	4614      	mov	r4, r2
 8008f02:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008f06:	42b2      	cmp	r2, r6
 8008f08:	d0d2      	beq.n	8008eb0 <ai_platform_get_weights_map+0x30>
 8008f0a:	f843 2f04 	str.w	r2, [r3, #4]!
 8008f0e:	1c62      	adds	r2, r4, #1
 8008f10:	4297      	cmp	r7, r2
 8008f12:	d1f5      	bne.n	8008f00 <ai_platform_get_weights_map+0x80>
 8008f14:	3402      	adds	r4, #2
 8008f16:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f1a:	42b3      	cmp	r3, r6
 8008f1c:	d1ca      	bne.n	8008eb4 <ai_platform_get_weights_map+0x34>
 8008f1e:	2001      	movs	r0, #1
 8008f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	a1facade 	.word	0xa1facade

08008f28 <ai_platform_get_activations_map>:
 8008f28:	2a00      	cmp	r2, #0
 8008f2a:	d038      	beq.n	8008f9e <ai_platform_get_activations_map+0x76>
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	4604      	mov	r4, r0
 8008f30:	b1a0      	cbz	r0, 8008f5c <ai_platform_get_activations_map+0x34>
 8008f32:	460f      	mov	r7, r1
 8008f34:	b191      	cbz	r1, 8008f5c <ai_platform_get_activations_map+0x34>
 8008f36:	4b25      	ldr	r3, [pc, #148]	; (8008fcc <ai_platform_get_activations_map+0xa4>)
 8008f38:	6810      	ldr	r0, [r2, #0]
 8008f3a:	4298      	cmp	r0, r3
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	d00f      	beq.n	8008f60 <ai_platform_get_activations_map+0x38>
 8008f40:	6a15      	ldr	r5, [r2, #32]
 8008f42:	b15d      	cbz	r5, 8008f5c <ai_platform_get_activations_map+0x34>
 8008f44:	682e      	ldr	r6, [r5, #0]
 8008f46:	429e      	cmp	r6, r3
 8008f48:	d02b      	beq.n	8008fa2 <ai_platform_get_activations_map+0x7a>
 8008f4a:	f1a1 0001 	sub.w	r0, r1, #1
 8008f4e:	6025      	str	r5, [r4, #0]
 8008f50:	fab0 f080 	clz	r0, r0
 8008f54:	0940      	lsrs	r0, r0, #5
 8008f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f58:	42a7      	cmp	r7, r4
 8008f5a:	d035      	beq.n	8008fc8 <ai_platform_get_activations_map+0xa0>
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f60:	f102 000c 	add.w	r0, r2, #12
 8008f64:	f7ff ff6e 	bl	8008e44 <ai_buffer_array_sane>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d0f7      	beq.n	8008f5c <ai_platform_get_activations_map+0x34>
 8008f6c:	89eb      	ldrh	r3, [r5, #14]
 8008f6e:	429f      	cmp	r7, r3
 8008f70:	d1f4      	bne.n	8008f5c <ai_platform_get_activations_map+0x34>
 8008f72:	f04f 0e00 	mov.w	lr, #0
 8008f76:	1f23      	subs	r3, r4, #4
 8008f78:	4670      	mov	r0, lr
 8008f7a:	692a      	ldr	r2, [r5, #16]
 8008f7c:	eb02 0c0e 	add.w	ip, r2, lr
 8008f80:	f10e 0e1c 	add.w	lr, lr, #28
 8008f84:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008f88:	b124      	cbz	r4, 8008f94 <ai_platform_get_activations_map+0x6c>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	4287      	cmp	r7, r0
 8008f8e:	f843 4f04 	str.w	r4, [r3, #4]!
 8008f92:	d1f2      	bne.n	8008f7a <ai_platform_get_activations_map+0x52>
 8008f94:	1a38      	subs	r0, r7, r0
 8008f96:	fab0 f080 	clz	r0, r0
 8008f9a:	0940      	lsrs	r0, r0, #5
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	4770      	bx	lr
 8008fa2:	1f23      	subs	r3, r4, #4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	2400      	movs	r4, #0
 8008fa8:	e000      	b.n	8008fac <ai_platform_get_activations_map+0x84>
 8008faa:	4614      	mov	r4, r2
 8008fac:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008fb0:	42b2      	cmp	r2, r6
 8008fb2:	d0d1      	beq.n	8008f58 <ai_platform_get_activations_map+0x30>
 8008fb4:	f843 2f04 	str.w	r2, [r3, #4]!
 8008fb8:	1c62      	adds	r2, r4, #1
 8008fba:	4297      	cmp	r7, r2
 8008fbc:	d1f5      	bne.n	8008faa <ai_platform_get_activations_map+0x82>
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008fc4:	42b3      	cmp	r3, r6
 8008fc6:	d1c9      	bne.n	8008f5c <ai_platform_get_activations_map+0x34>
 8008fc8:	2001      	movs	r0, #1
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	a1facade 	.word	0xa1facade

08008fd0 <ai_platform_bind_network_params>:
 8008fd0:	b1a0      	cbz	r0, 8008ffc <ai_platform_bind_network_params+0x2c>
 8008fd2:	b1b1      	cbz	r1, 8009002 <ai_platform_bind_network_params+0x32>
 8008fd4:	b1c2      	cbz	r2, 8009008 <ai_platform_bind_network_params+0x38>
 8008fd6:	b410      	push	{r4}
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4c0d      	ldr	r4, [pc, #52]	; (8009010 <ai_platform_bind_network_params+0x40>)
 8008fdc:	f843 4b04 	str.w	r4, [r3], #4
 8008fe0:	f100 0c0c 	add.w	ip, r0, #12
 8008fe4:	c903      	ldmia	r1, {r0, r1}
 8008fe6:	e883 0003 	stmia.w	r3, {r0, r1}
 8008fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fee:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4618      	mov	r0, r3
 8009000:	4770      	bx	lr
 8009002:	460b      	mov	r3, r1
 8009004:	4618      	mov	r0, r3
 8009006:	4770      	bx	lr
 8009008:	4613      	mov	r3, r2
 800900a:	4618      	mov	r0, r3
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	a1facade 	.word	0xa1facade

08009014 <ai_platform_network_get_error>:
 8009014:	b510      	push	{r4, lr}
 8009016:	b1f0      	cbz	r0, 8009056 <ai_platform_network_get_error+0x42>
 8009018:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <ai_platform_network_get_error+0xc4>)
 800901a:	6802      	ldr	r2, [r0, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	4604      	mov	r4, r0
 8009020:	d119      	bne.n	8009056 <ai_platform_network_get_error+0x42>
 8009022:	f7ff ff29 	bl	8008e78 <_ai_platform_acquire_crc>
 8009026:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <ai_platform_network_get_error+0xc8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800902e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009032:	d03c      	beq.n	80090ae <ai_platform_network_get_error+0x9a>
 8009034:	4a2a      	ldr	r2, [pc, #168]	; (80090e0 <ai_platform_network_get_error+0xcc>)
 8009036:	2301      	movs	r3, #1
 8009038:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800903c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1fb      	bne.n	800903c <ai_platform_network_get_error+0x28>
 8009044:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <ai_platform_network_get_error+0xd0>)
 8009046:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800904a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800904e:	4b26      	ldr	r3, [pc, #152]	; (80090e8 <ai_platform_network_get_error+0xd4>)
 8009050:	429a      	cmp	r2, r3
 8009052:	d038      	beq.n	80090c6 <ai_platform_network_get_error+0xb2>
 8009054:	e7fe      	b.n	8009054 <ai_platform_network_get_error+0x40>
 8009056:	f7ff ff0f 	bl	8008e78 <_ai_platform_acquire_crc>
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <ai_platform_network_get_error+0xc8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009066:	d010      	beq.n	800908a <ai_platform_network_get_error+0x76>
 8009068:	4a1d      	ldr	r2, [pc, #116]	; (80090e0 <ai_platform_network_get_error+0xcc>)
 800906a:	2301      	movs	r3, #1
 800906c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009070:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1fb      	bne.n	8009070 <ai_platform_network_get_error+0x5c>
 8009078:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <ai_platform_network_get_error+0xd0>)
 800907a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800907e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009082:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <ai_platform_network_get_error+0xd4>)
 8009084:	429a      	cmp	r2, r3
 8009086:	d00d      	beq.n	80090a4 <ai_platform_network_get_error+0x90>
 8009088:	e7fe      	b.n	8009088 <ai_platform_network_get_error+0x74>
 800908a:	4a18      	ldr	r2, [pc, #96]	; (80090ec <ai_platform_network_get_error+0xd8>)
 800908c:	2301      	movs	r3, #1
 800908e:	6093      	str	r3, [r2, #8]
 8009090:	6893      	ldr	r3, [r2, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1fc      	bne.n	8009090 <ai_platform_network_get_error+0x7c>
 8009096:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <ai_platform_network_get_error+0xd0>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	4b12      	ldr	r3, [pc, #72]	; (80090e8 <ai_platform_network_get_error+0xd4>)
 800909e:	429a      	cmp	r2, r3
 80090a0:	d000      	beq.n	80090a4 <ai_platform_network_get_error+0x90>
 80090a2:	e7fe      	b.n	80090a2 <ai_platform_network_get_error+0x8e>
 80090a4:	f7ff feea 	bl	8008e7c <_ai_platform_release_crc>
 80090a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	4a0f      	ldr	r2, [pc, #60]	; (80090ec <ai_platform_network_get_error+0xd8>)
 80090b0:	2301      	movs	r3, #1
 80090b2:	6093      	str	r3, [r2, #8]
 80090b4:	6893      	ldr	r3, [r2, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1fc      	bne.n	80090b4 <ai_platform_network_get_error+0xa0>
 80090ba:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <ai_platform_network_get_error+0xd0>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <ai_platform_network_get_error+0xd4>)
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d107      	bne.n	80090d6 <ai_platform_network_get_error+0xc2>
 80090c6:	f7ff fed9 	bl	8008e7c <_ai_platform_release_crc>
 80090ca:	f104 0010 	add.w	r0, r4, #16
 80090ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d2:	f000 be8d 	b.w	8009df0 <core_get_error>
 80090d6:	e7fe      	b.n	80090d6 <ai_platform_network_get_error+0xc2>
 80090d8:	a1c00100 	.word	0xa1c00100
 80090dc:	e0042000 	.word	0xe0042000
 80090e0:	58024000 	.word	0x58024000
 80090e4:	f407a5c2 	.word	0xf407a5c2
 80090e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80090ec:	40023000 	.word	0x40023000

080090f0 <ai_platform_network_set_error>:
 80090f0:	b110      	cbz	r0, 80090f8 <ai_platform_network_set_error+0x8>
 80090f2:	3010      	adds	r0, #16
 80090f4:	f000 be82 	b.w	8009dfc <core_set_error>
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop

080090fc <ai_platform_inputs_get>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	b085      	sub	sp, #20
 8009102:	9102      	str	r1, [sp, #8]
 8009104:	b1f0      	cbz	r0, 8009144 <ai_platform_inputs_get+0x48>
 8009106:	4b62      	ldr	r3, [pc, #392]	; (8009290 <ai_platform_inputs_get+0x194>)
 8009108:	6802      	ldr	r2, [r0, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	4607      	mov	r7, r0
 800910e:	d119      	bne.n	8009144 <ai_platform_inputs_get+0x48>
 8009110:	f7ff feb2 	bl	8008e78 <_ai_platform_acquire_crc>
 8009114:	4b5f      	ldr	r3, [pc, #380]	; (8009294 <ai_platform_inputs_get+0x198>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009120:	d03d      	beq.n	800919e <ai_platform_inputs_get+0xa2>
 8009122:	4a5d      	ldr	r2, [pc, #372]	; (8009298 <ai_platform_inputs_get+0x19c>)
 8009124:	2301      	movs	r3, #1
 8009126:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800912a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1fb      	bne.n	800912a <ai_platform_inputs_get+0x2e>
 8009132:	4b5a      	ldr	r3, [pc, #360]	; (800929c <ai_platform_inputs_get+0x1a0>)
 8009134:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009138:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800913c:	4b58      	ldr	r3, [pc, #352]	; (80092a0 <ai_platform_inputs_get+0x1a4>)
 800913e:	429a      	cmp	r2, r3
 8009140:	d039      	beq.n	80091b6 <ai_platform_inputs_get+0xba>
 8009142:	e7fe      	b.n	8009142 <ai_platform_inputs_get+0x46>
 8009144:	f7ff fe98 	bl	8008e78 <_ai_platform_acquire_crc>
 8009148:	4b52      	ldr	r3, [pc, #328]	; (8009294 <ai_platform_inputs_get+0x198>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009154:	d010      	beq.n	8009178 <ai_platform_inputs_get+0x7c>
 8009156:	4a50      	ldr	r2, [pc, #320]	; (8009298 <ai_platform_inputs_get+0x19c>)
 8009158:	2301      	movs	r3, #1
 800915a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800915e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1fb      	bne.n	800915e <ai_platform_inputs_get+0x62>
 8009166:	4b4d      	ldr	r3, [pc, #308]	; (800929c <ai_platform_inputs_get+0x1a0>)
 8009168:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800916c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009170:	4b4b      	ldr	r3, [pc, #300]	; (80092a0 <ai_platform_inputs_get+0x1a4>)
 8009172:	429a      	cmp	r2, r3
 8009174:	d00d      	beq.n	8009192 <ai_platform_inputs_get+0x96>
 8009176:	e7fe      	b.n	8009176 <ai_platform_inputs_get+0x7a>
 8009178:	4a4a      	ldr	r2, [pc, #296]	; (80092a4 <ai_platform_inputs_get+0x1a8>)
 800917a:	2301      	movs	r3, #1
 800917c:	6093      	str	r3, [r2, #8]
 800917e:	6893      	ldr	r3, [r2, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1fc      	bne.n	800917e <ai_platform_inputs_get+0x82>
 8009184:	4b45      	ldr	r3, [pc, #276]	; (800929c <ai_platform_inputs_get+0x1a0>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	4b45      	ldr	r3, [pc, #276]	; (80092a0 <ai_platform_inputs_get+0x1a4>)
 800918c:	429a      	cmp	r2, r3
 800918e:	d000      	beq.n	8009192 <ai_platform_inputs_get+0x96>
 8009190:	e7fe      	b.n	8009190 <ai_platform_inputs_get+0x94>
 8009192:	f7ff fe73 	bl	8008e7c <_ai_platform_release_crc>
 8009196:	2000      	movs	r0, #0
 8009198:	b005      	add	sp, #20
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	4a41      	ldr	r2, [pc, #260]	; (80092a4 <ai_platform_inputs_get+0x1a8>)
 80091a0:	2301      	movs	r3, #1
 80091a2:	6093      	str	r3, [r2, #8]
 80091a4:	6893      	ldr	r3, [r2, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1fc      	bne.n	80091a4 <ai_platform_inputs_get+0xa8>
 80091aa:	4b3c      	ldr	r3, [pc, #240]	; (800929c <ai_platform_inputs_get+0x1a0>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	6812      	ldr	r2, [r2, #0]
 80091b0:	4b3b      	ldr	r3, [pc, #236]	; (80092a0 <ai_platform_inputs_get+0x1a4>)
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d155      	bne.n	8009262 <ai_platform_inputs_get+0x166>
 80091b6:	f7ff fe61 	bl	8008e7c <_ai_platform_release_crc>
 80091ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d051      	beq.n	8009264 <ai_platform_inputs_get+0x168>
 80091c0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80091c4:	f1ba 0f00 	cmp.w	sl, #0
 80091c8:	d04c      	beq.n	8009264 <ai_platform_inputs_get+0x168>
 80091ca:	f04f 0b00 	mov.w	fp, #0
 80091ce:	465d      	mov	r5, fp
 80091d0:	9703      	str	r7, [sp, #12]
 80091d2:	e016      	b.n	8009202 <ai_platform_inputs_get+0x106>
 80091d4:	9901      	ldr	r1, [sp, #4]
 80091d6:	2301      	movs	r3, #1
 80091d8:	507b      	str	r3, [r7, r1]
 80091da:	69b1      	ldr	r1, [r6, #24]
 80091dc:	6849      	ldr	r1, [r1, #4]
 80091de:	6121      	str	r1, [r4, #16]
 80091e0:	f04f 0301 	mov.w	r3, #1
 80091e4:	7523      	strb	r3, [r4, #20]
 80091e6:	e9c4 c200 	strd	ip, r2, [r4]
 80091ea:	6962      	ldr	r2, [r4, #20]
 80091ec:	60a0      	str	r0, [r4, #8]
 80091ee:	2300      	movs	r3, #0
 80091f0:	f369 221f 	bfi	r2, r9, #8, #24
 80091f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80091f8:	60e3      	str	r3, [r4, #12]
 80091fa:	3501      	adds	r5, #1
 80091fc:	f10b 0b1c 	add.w	fp, fp, #28
 8009200:	6162      	str	r2, [r4, #20]
 8009202:	f8ba 3000 	ldrh.w	r3, [sl]
 8009206:	42ab      	cmp	r3, r5
 8009208:	b2aa      	uxth	r2, r5
 800920a:	d93a      	bls.n	8009282 <ai_platform_inputs_get+0x186>
 800920c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009210:	00e9      	lsls	r1, r5, #3
 8009212:	9101      	str	r1, [sp, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d034      	beq.n	8009282 <ai_platform_inputs_get+0x186>
 8009218:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800921c:	2e00      	cmp	r6, #0
 800921e:	d030      	beq.n	8009282 <ai_platform_inputs_get+0x186>
 8009220:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009224:	69b2      	ldr	r2, [r6, #24]
 8009226:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800922a:	6810      	ldr	r0, [r2, #0]
 800922c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009230:	68b3      	ldr	r3, [r6, #8]
 8009232:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009236:	f005 fbe3 	bl	800ea00 <ai_array_to_buffer_fmt>
 800923a:	69b1      	ldr	r1, [r6, #24]
 800923c:	4684      	mov	ip, r0
 800923e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8009242:	688a      	ldr	r2, [r1, #8]
 8009244:	445c      	add	r4, fp
 8009246:	2800      	cmp	r0, #0
 8009248:	d0c8      	beq.n	80091dc <ai_platform_inputs_get+0xe0>
 800924a:	2100      	movs	r1, #0
 800924c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8009250:	6831      	ldr	r1, [r6, #0]
 8009252:	6041      	str	r1, [r0, #4]
 8009254:	b111      	cbz	r1, 800925c <ai_platform_inputs_get+0x160>
 8009256:	8849      	ldrh	r1, [r1, #2]
 8009258:	2900      	cmp	r1, #0
 800925a:	d1bb      	bne.n	80091d4 <ai_platform_inputs_get+0xd8>
 800925c:	69b1      	ldr	r1, [r6, #24]
 800925e:	2000      	movs	r0, #0
 8009260:	e7bc      	b.n	80091dc <ai_platform_inputs_get+0xe0>
 8009262:	e7fe      	b.n	8009262 <ai_platform_inputs_get+0x166>
 8009264:	2218      	movs	r2, #24
 8009266:	2111      	movs	r1, #17
 8009268:	f107 0010 	add.w	r0, r7, #16
 800926c:	f000 fdc6 	bl	8009dfc <core_set_error>
 8009270:	2200      	movs	r2, #0
 8009272:	4610      	mov	r0, r2
 8009274:	9b02      	ldr	r3, [sp, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d08e      	beq.n	8009198 <ai_platform_inputs_get+0x9c>
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	b005      	add	sp, #20
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	9f03      	ldr	r7, [sp, #12]
 8009284:	2a00      	cmp	r2, #0
 8009286:	d0ed      	beq.n	8009264 <ai_platform_inputs_get+0x168>
 8009288:	f8da 3008 	ldr.w	r3, [sl, #8]
 800928c:	6858      	ldr	r0, [r3, #4]
 800928e:	e7f1      	b.n	8009274 <ai_platform_inputs_get+0x178>
 8009290:	a1c00100 	.word	0xa1c00100
 8009294:	e0042000 	.word	0xe0042000
 8009298:	58024000 	.word	0x58024000
 800929c:	f407a5c2 	.word	0xf407a5c2
 80092a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80092a4:	40023000 	.word	0x40023000

080092a8 <ai_platform_outputs_get>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	b085      	sub	sp, #20
 80092ae:	9102      	str	r1, [sp, #8]
 80092b0:	b1f0      	cbz	r0, 80092f0 <ai_platform_outputs_get+0x48>
 80092b2:	4b5f      	ldr	r3, [pc, #380]	; (8009430 <ai_platform_outputs_get+0x188>)
 80092b4:	6802      	ldr	r2, [r0, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	4607      	mov	r7, r0
 80092ba:	d119      	bne.n	80092f0 <ai_platform_outputs_get+0x48>
 80092bc:	f7ff fddc 	bl	8008e78 <_ai_platform_acquire_crc>
 80092c0:	4b5c      	ldr	r3, [pc, #368]	; (8009434 <ai_platform_outputs_get+0x18c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092cc:	d03d      	beq.n	800934a <ai_platform_outputs_get+0xa2>
 80092ce:	4a5a      	ldr	r2, [pc, #360]	; (8009438 <ai_platform_outputs_get+0x190>)
 80092d0:	2301      	movs	r3, #1
 80092d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1fb      	bne.n	80092d6 <ai_platform_outputs_get+0x2e>
 80092de:	4b57      	ldr	r3, [pc, #348]	; (800943c <ai_platform_outputs_get+0x194>)
 80092e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092e8:	4b55      	ldr	r3, [pc, #340]	; (8009440 <ai_platform_outputs_get+0x198>)
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d039      	beq.n	8009362 <ai_platform_outputs_get+0xba>
 80092ee:	e7fe      	b.n	80092ee <ai_platform_outputs_get+0x46>
 80092f0:	f7ff fdc2 	bl	8008e78 <_ai_platform_acquire_crc>
 80092f4:	4b4f      	ldr	r3, [pc, #316]	; (8009434 <ai_platform_outputs_get+0x18c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009300:	d010      	beq.n	8009324 <ai_platform_outputs_get+0x7c>
 8009302:	4a4d      	ldr	r2, [pc, #308]	; (8009438 <ai_platform_outputs_get+0x190>)
 8009304:	2301      	movs	r3, #1
 8009306:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800930a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1fb      	bne.n	800930a <ai_platform_outputs_get+0x62>
 8009312:	4b4a      	ldr	r3, [pc, #296]	; (800943c <ai_platform_outputs_get+0x194>)
 8009314:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009318:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800931c:	4b48      	ldr	r3, [pc, #288]	; (8009440 <ai_platform_outputs_get+0x198>)
 800931e:	429a      	cmp	r2, r3
 8009320:	d00d      	beq.n	800933e <ai_platform_outputs_get+0x96>
 8009322:	e7fe      	b.n	8009322 <ai_platform_outputs_get+0x7a>
 8009324:	4a47      	ldr	r2, [pc, #284]	; (8009444 <ai_platform_outputs_get+0x19c>)
 8009326:	2301      	movs	r3, #1
 8009328:	6093      	str	r3, [r2, #8]
 800932a:	6893      	ldr	r3, [r2, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1fc      	bne.n	800932a <ai_platform_outputs_get+0x82>
 8009330:	4b42      	ldr	r3, [pc, #264]	; (800943c <ai_platform_outputs_get+0x194>)
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	4b42      	ldr	r3, [pc, #264]	; (8009440 <ai_platform_outputs_get+0x198>)
 8009338:	429a      	cmp	r2, r3
 800933a:	d000      	beq.n	800933e <ai_platform_outputs_get+0x96>
 800933c:	e7fe      	b.n	800933c <ai_platform_outputs_get+0x94>
 800933e:	f7ff fd9d 	bl	8008e7c <_ai_platform_release_crc>
 8009342:	2000      	movs	r0, #0
 8009344:	b005      	add	sp, #20
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	4a3e      	ldr	r2, [pc, #248]	; (8009444 <ai_platform_outputs_get+0x19c>)
 800934c:	2301      	movs	r3, #1
 800934e:	6093      	str	r3, [r2, #8]
 8009350:	6893      	ldr	r3, [r2, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1fc      	bne.n	8009350 <ai_platform_outputs_get+0xa8>
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <ai_platform_outputs_get+0x194>)
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	4b38      	ldr	r3, [pc, #224]	; (8009440 <ai_platform_outputs_get+0x198>)
 800935e:	429a      	cmp	r2, r3
 8009360:	d150      	bne.n	8009404 <ai_platform_outputs_get+0x15c>
 8009362:	f7ff fd8b 	bl	8008e7c <_ai_platform_release_crc>
 8009366:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d958      	bls.n	800941e <ai_platform_outputs_get+0x176>
 800936c:	f04f 0b00 	mov.w	fp, #0
 8009370:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009374:	9703      	str	r7, [sp, #12]
 8009376:	465d      	mov	r5, fp
 8009378:	e016      	b.n	80093a8 <ai_platform_outputs_get+0x100>
 800937a:	9901      	ldr	r1, [sp, #4]
 800937c:	2301      	movs	r3, #1
 800937e:	507b      	str	r3, [r7, r1]
 8009380:	69b1      	ldr	r1, [r6, #24]
 8009382:	6849      	ldr	r1, [r1, #4]
 8009384:	6121      	str	r1, [r4, #16]
 8009386:	f04f 0301 	mov.w	r3, #1
 800938a:	7523      	strb	r3, [r4, #20]
 800938c:	e9c4 c200 	strd	ip, r2, [r4]
 8009390:	6962      	ldr	r2, [r4, #20]
 8009392:	60a0      	str	r0, [r4, #8]
 8009394:	2300      	movs	r3, #0
 8009396:	f369 221f 	bfi	r2, r9, #8, #24
 800939a:	f8c4 8018 	str.w	r8, [r4, #24]
 800939e:	60e3      	str	r3, [r4, #12]
 80093a0:	3501      	adds	r5, #1
 80093a2:	f10b 0b1c 	add.w	fp, fp, #28
 80093a6:	6162      	str	r2, [r4, #20]
 80093a8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	b2aa      	uxth	r2, r5
 80093b0:	d929      	bls.n	8009406 <ai_platform_outputs_get+0x15e>
 80093b2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80093b6:	00e9      	lsls	r1, r5, #3
 80093b8:	9101      	str	r1, [sp, #4]
 80093ba:	b323      	cbz	r3, 8009406 <ai_platform_outputs_get+0x15e>
 80093bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80093c0:	b30e      	cbz	r6, 8009406 <ai_platform_outputs_get+0x15e>
 80093c2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80093c6:	69b2      	ldr	r2, [r6, #24]
 80093c8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80093cc:	6810      	ldr	r0, [r2, #0]
 80093ce:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80093d2:	68b3      	ldr	r3, [r6, #8]
 80093d4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80093d8:	f005 fb12 	bl	800ea00 <ai_array_to_buffer_fmt>
 80093dc:	69b1      	ldr	r1, [r6, #24]
 80093de:	4684      	mov	ip, r0
 80093e0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80093e4:	688a      	ldr	r2, [r1, #8]
 80093e6:	445c      	add	r4, fp
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d0ca      	beq.n	8009382 <ai_platform_outputs_get+0xda>
 80093ec:	2100      	movs	r1, #0
 80093ee:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80093f2:	6831      	ldr	r1, [r6, #0]
 80093f4:	6041      	str	r1, [r0, #4]
 80093f6:	b111      	cbz	r1, 80093fe <ai_platform_outputs_get+0x156>
 80093f8:	8849      	ldrh	r1, [r1, #2]
 80093fa:	2900      	cmp	r1, #0
 80093fc:	d1bd      	bne.n	800937a <ai_platform_outputs_get+0xd2>
 80093fe:	69b1      	ldr	r1, [r6, #24]
 8009400:	2000      	movs	r0, #0
 8009402:	e7be      	b.n	8009382 <ai_platform_outputs_get+0xda>
 8009404:	e7fe      	b.n	8009404 <ai_platform_outputs_get+0x15c>
 8009406:	9f03      	ldr	r7, [sp, #12]
 8009408:	b14a      	cbz	r2, 800941e <ai_platform_outputs_get+0x176>
 800940a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800940e:	6858      	ldr	r0, [r3, #4]
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d096      	beq.n	8009344 <ai_platform_outputs_get+0x9c>
 8009416:	801a      	strh	r2, [r3, #0]
 8009418:	b005      	add	sp, #20
 800941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	2218      	movs	r2, #24
 8009420:	2111      	movs	r1, #17
 8009422:	f107 0010 	add.w	r0, r7, #16
 8009426:	f000 fce9 	bl	8009dfc <core_set_error>
 800942a:	2200      	movs	r2, #0
 800942c:	4610      	mov	r0, r2
 800942e:	e7ef      	b.n	8009410 <ai_platform_outputs_get+0x168>
 8009430:	a1c00100 	.word	0xa1c00100
 8009434:	e0042000 	.word	0xe0042000
 8009438:	58024000 	.word	0x58024000
 800943c:	f407a5c2 	.word	0xf407a5c2
 8009440:	b5e8b5cd 	.word	0xb5e8b5cd
 8009444:	40023000 	.word	0x40023000

08009448 <ai_platform_network_create>:
 8009448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800944c:	b083      	sub	sp, #12
 800944e:	4606      	mov	r6, r0
 8009450:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009454:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009458:	4615      	mov	r5, r2
 800945a:	461f      	mov	r7, r3
 800945c:	f7ff fd0c 	bl	8008e78 <_ai_platform_acquire_crc>
 8009460:	b188      	cbz	r0, 8009486 <ai_platform_network_create+0x3e>
 8009462:	4a5d      	ldr	r2, [pc, #372]	; (80095d8 <ai_platform_network_create+0x190>)
 8009464:	6812      	ldr	r2, [r2, #0]
 8009466:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800946a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800946e:	4603      	mov	r3, r0
 8009470:	d00e      	beq.n	8009490 <ai_platform_network_create+0x48>
 8009472:	4a5a      	ldr	r2, [pc, #360]	; (80095dc <ai_platform_network_create+0x194>)
 8009474:	2118      	movs	r1, #24
 8009476:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800947a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800947e:	2918      	cmp	r1, #24
 8009480:	d018      	beq.n	80094b4 <ai_platform_network_create+0x6c>
 8009482:	f7ff fcfb 	bl	8008e7c <_ai_platform_release_crc>
 8009486:	f244 1033 	movw	r0, #16691	; 0x4133
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009490:	4a53      	ldr	r2, [pc, #332]	; (80095e0 <ai_platform_network_create+0x198>)
 8009492:	2101      	movs	r1, #1
 8009494:	6091      	str	r1, [r2, #8]
 8009496:	2114      	movs	r1, #20
 8009498:	e001      	b.n	800949e <ai_platform_network_create+0x56>
 800949a:	3901      	subs	r1, #1
 800949c:	d002      	beq.n	80094a4 <ai_platform_network_create+0x5c>
 800949e:	6894      	ldr	r4, [r2, #8]
 80094a0:	2c00      	cmp	r4, #0
 80094a2:	d1fa      	bne.n	800949a <ai_platform_network_create+0x52>
 80094a4:	4a4e      	ldr	r2, [pc, #312]	; (80095e0 <ai_platform_network_create+0x198>)
 80094a6:	6891      	ldr	r1, [r2, #8]
 80094a8:	b911      	cbnz	r1, 80094b0 <ai_platform_network_create+0x68>
 80094aa:	6812      	ldr	r2, [r2, #0]
 80094ac:	3201      	adds	r2, #1
 80094ae:	d008      	beq.n	80094c2 <ai_platform_network_create+0x7a>
 80094b0:	4618      	mov	r0, r3
 80094b2:	e7e6      	b.n	8009482 <ai_platform_network_create+0x3a>
 80094b4:	2101      	movs	r1, #1
 80094b6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80094ba:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80094be:	2900      	cmp	r1, #0
 80094c0:	d1fb      	bne.n	80094ba <ai_platform_network_create+0x72>
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff fcda 	bl	8008e7c <_ai_platform_release_crc>
 80094c8:	f7ff fcd6 	bl	8008e78 <_ai_platform_acquire_crc>
 80094cc:	4b42      	ldr	r3, [pc, #264]	; (80095d8 <ai_platform_network_create+0x190>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d8:	d010      	beq.n	80094fc <ai_platform_network_create+0xb4>
 80094da:	4b40      	ldr	r3, [pc, #256]	; (80095dc <ai_platform_network_create+0x194>)
 80094dc:	2201      	movs	r2, #1
 80094de:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80094e2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80094e6:	2900      	cmp	r1, #0
 80094e8:	d1fb      	bne.n	80094e2 <ai_platform_network_create+0x9a>
 80094ea:	4a3e      	ldr	r2, [pc, #248]	; (80095e4 <ai_platform_network_create+0x19c>)
 80094ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80094f0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80094f4:	4b3c      	ldr	r3, [pc, #240]	; (80095e8 <ai_platform_network_create+0x1a0>)
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d00c      	beq.n	8009514 <ai_platform_network_create+0xcc>
 80094fa:	e7fe      	b.n	80094fa <ai_platform_network_create+0xb2>
 80094fc:	4a38      	ldr	r2, [pc, #224]	; (80095e0 <ai_platform_network_create+0x198>)
 80094fe:	2301      	movs	r3, #1
 8009500:	6093      	str	r3, [r2, #8]
 8009502:	6893      	ldr	r3, [r2, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1fc      	bne.n	8009502 <ai_platform_network_create+0xba>
 8009508:	4b36      	ldr	r3, [pc, #216]	; (80095e4 <ai_platform_network_create+0x19c>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	6812      	ldr	r2, [r2, #0]
 800950e:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <ai_platform_network_create+0x1a0>)
 8009510:	429a      	cmp	r2, r3
 8009512:	d122      	bne.n	800955a <ai_platform_network_create+0x112>
 8009514:	f7ff fcb2 	bl	8008e7c <_ai_platform_release_crc>
 8009518:	b38e      	cbz	r6, 800957e <ai_platform_network_create+0x136>
 800951a:	4b34      	ldr	r3, [pc, #208]	; (80095ec <ai_platform_network_create+0x1a4>)
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	6035      	str	r5, [r6, #0]
 8009520:	f000 fc64 	bl	8009dec <core_init>
 8009524:	b1d0      	cbz	r0, 800955c <ai_platform_network_create+0x114>
 8009526:	f7ff fca7 	bl	8008e78 <_ai_platform_acquire_crc>
 800952a:	4b2b      	ldr	r3, [pc, #172]	; (80095d8 <ai_platform_network_create+0x190>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009536:	d025      	beq.n	8009584 <ai_platform_network_create+0x13c>
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <ai_platform_network_create+0x194>)
 800953a:	2301      	movs	r3, #1
 800953c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009540:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1fb      	bne.n	8009540 <ai_platform_network_create+0xf8>
 8009548:	4b26      	ldr	r3, [pc, #152]	; (80095e4 <ai_platform_network_create+0x19c>)
 800954a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800954e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009552:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <ai_platform_network_create+0x1a0>)
 8009554:	429a      	cmp	r2, r3
 8009556:	d022      	beq.n	800959e <ai_platform_network_create+0x156>
 8009558:	e7fe      	b.n	8009558 <ai_platform_network_create+0x110>
 800955a:	e7fe      	b.n	800955a <ai_platform_network_create+0x112>
 800955c:	2430      	movs	r4, #48	; 0x30
 800955e:	2300      	movs	r3, #0
 8009560:	6033      	str	r3, [r6, #0]
 8009562:	2610      	movs	r6, #16
 8009564:	464a      	mov	r2, r9
 8009566:	4641      	mov	r1, r8
 8009568:	4638      	mov	r0, r7
 800956a:	f005 fa2b 	bl	800e9c4 <ai_version_get>
 800956e:	4603      	mov	r3, r0
 8009570:	2000      	movs	r0, #0
 8009572:	f364 0007 	bfi	r0, r4, #0, #8
 8009576:	64ab      	str	r3, [r5, #72]	; 0x48
 8009578:	f366 201f 	bfi	r0, r6, #8, #24
 800957c:	e785      	b.n	800948a <ai_platform_network_create+0x42>
 800957e:	f241 0010 	movw	r0, #4112	; 0x1010
 8009582:	e782      	b.n	800948a <ai_platform_network_create+0x42>
 8009584:	4a16      	ldr	r2, [pc, #88]	; (80095e0 <ai_platform_network_create+0x198>)
 8009586:	2301      	movs	r3, #1
 8009588:	6093      	str	r3, [r2, #8]
 800958a:	6893      	ldr	r3, [r2, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1fc      	bne.n	800958a <ai_platform_network_create+0x142>
 8009590:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <ai_platform_network_create+0x19c>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <ai_platform_network_create+0x1a0>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d000      	beq.n	800959e <ai_platform_network_create+0x156>
 800959c:	e7fe      	b.n	800959c <ai_platform_network_create+0x154>
 800959e:	f7ff fc6d 	bl	8008e7c <_ai_platform_release_crc>
 80095a2:	2200      	movs	r2, #0
 80095a4:	4641      	mov	r1, r8
 80095a6:	4638      	mov	r0, r7
 80095a8:	f005 fa0c 	bl	800e9c4 <ai_version_get>
 80095ac:	2200      	movs	r2, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	2105      	movs	r1, #5
 80095b2:	2001      	movs	r0, #1
 80095b4:	f005 fa06 	bl	800e9c4 <ai_version_get>
 80095b8:	4284      	cmp	r4, r0
 80095ba:	d001      	beq.n	80095c0 <ai_platform_network_create+0x178>
 80095bc:	2401      	movs	r4, #1
 80095be:	e7ce      	b.n	800955e <ai_platform_network_create+0x116>
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <ai_platform_network_create+0x1a8>)
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	a801      	add	r0, sp, #4
 80095c6:	f005 f843 	bl	800e650 <ai_check_custom_types>
 80095ca:	b110      	cbz	r0, 80095d2 <ai_platform_network_create+0x18a>
 80095cc:	2600      	movs	r6, #0
 80095ce:	4634      	mov	r4, r6
 80095d0:	e7c8      	b.n	8009564 <ai_platform_network_create+0x11c>
 80095d2:	2402      	movs	r4, #2
 80095d4:	e7c3      	b.n	800955e <ai_platform_network_create+0x116>
 80095d6:	bf00      	nop
 80095d8:	e0042000 	.word	0xe0042000
 80095dc:	58024000 	.word	0x58024000
 80095e0:	40023000 	.word	0x40023000
 80095e4:	f407a5c2 	.word	0xf407a5c2
 80095e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80095ec:	a1c00100 	.word	0xa1c00100
 80095f0:	84048403 	.word	0x84048403

080095f4 <ai_platform_network_init>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	b1f8      	cbz	r0, 800963a <ai_platform_network_init+0x46>
 80095fa:	4b6e      	ldr	r3, [pc, #440]	; (80097b4 <ai_platform_network_init+0x1c0>)
 80095fc:	6802      	ldr	r2, [r0, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	4604      	mov	r4, r0
 8009602:	d11a      	bne.n	800963a <ai_platform_network_init+0x46>
 8009604:	460e      	mov	r6, r1
 8009606:	f7ff fc37 	bl	8008e78 <_ai_platform_acquire_crc>
 800960a:	4b6b      	ldr	r3, [pc, #428]	; (80097b8 <ai_platform_network_init+0x1c4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009616:	d03d      	beq.n	8009694 <ai_platform_network_init+0xa0>
 8009618:	4a68      	ldr	r2, [pc, #416]	; (80097bc <ai_platform_network_init+0x1c8>)
 800961a:	2301      	movs	r3, #1
 800961c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009620:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1fb      	bne.n	8009620 <ai_platform_network_init+0x2c>
 8009628:	4b65      	ldr	r3, [pc, #404]	; (80097c0 <ai_platform_network_init+0x1cc>)
 800962a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800962e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009632:	4b64      	ldr	r3, [pc, #400]	; (80097c4 <ai_platform_network_init+0x1d0>)
 8009634:	429a      	cmp	r2, r3
 8009636:	d039      	beq.n	80096ac <ai_platform_network_init+0xb8>
 8009638:	e7fe      	b.n	8009638 <ai_platform_network_init+0x44>
 800963a:	f7ff fc1d 	bl	8008e78 <_ai_platform_acquire_crc>
 800963e:	4b5e      	ldr	r3, [pc, #376]	; (80097b8 <ai_platform_network_init+0x1c4>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800964a:	d010      	beq.n	800966e <ai_platform_network_init+0x7a>
 800964c:	4a5b      	ldr	r2, [pc, #364]	; (80097bc <ai_platform_network_init+0x1c8>)
 800964e:	2301      	movs	r3, #1
 8009650:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009654:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1fb      	bne.n	8009654 <ai_platform_network_init+0x60>
 800965c:	4b58      	ldr	r3, [pc, #352]	; (80097c0 <ai_platform_network_init+0x1cc>)
 800965e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009662:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009666:	4b57      	ldr	r3, [pc, #348]	; (80097c4 <ai_platform_network_init+0x1d0>)
 8009668:	429a      	cmp	r2, r3
 800966a:	d00d      	beq.n	8009688 <ai_platform_network_init+0x94>
 800966c:	e7fe      	b.n	800966c <ai_platform_network_init+0x78>
 800966e:	4a56      	ldr	r2, [pc, #344]	; (80097c8 <ai_platform_network_init+0x1d4>)
 8009670:	2301      	movs	r3, #1
 8009672:	6093      	str	r3, [r2, #8]
 8009674:	6893      	ldr	r3, [r2, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1fc      	bne.n	8009674 <ai_platform_network_init+0x80>
 800967a:	4b51      	ldr	r3, [pc, #324]	; (80097c0 <ai_platform_network_init+0x1cc>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	6812      	ldr	r2, [r2, #0]
 8009680:	4b50      	ldr	r3, [pc, #320]	; (80097c4 <ai_platform_network_init+0x1d0>)
 8009682:	429a      	cmp	r2, r3
 8009684:	d000      	beq.n	8009688 <ai_platform_network_init+0x94>
 8009686:	e7fe      	b.n	8009686 <ai_platform_network_init+0x92>
 8009688:	f7ff fbf8 	bl	8008e7c <_ai_platform_release_crc>
 800968c:	2600      	movs	r6, #0
 800968e:	4630      	mov	r0, r6
 8009690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009694:	4a4c      	ldr	r2, [pc, #304]	; (80097c8 <ai_platform_network_init+0x1d4>)
 8009696:	2301      	movs	r3, #1
 8009698:	6093      	str	r3, [r2, #8]
 800969a:	6893      	ldr	r3, [r2, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1fc      	bne.n	800969a <ai_platform_network_init+0xa6>
 80096a0:	4b47      	ldr	r3, [pc, #284]	; (80097c0 <ai_platform_network_init+0x1cc>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	6812      	ldr	r2, [r2, #0]
 80096a6:	4b47      	ldr	r3, [pc, #284]	; (80097c4 <ai_platform_network_init+0x1d0>)
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d11c      	bne.n	80096e6 <ai_platform_network_init+0xf2>
 80096ac:	f7ff fbe6 	bl	8008e7c <_ai_platform_release_crc>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	d06f      	beq.n	8009794 <ai_platform_network_init+0x1a0>
 80096b4:	4b45      	ldr	r3, [pc, #276]	; (80097cc <ai_platform_network_init+0x1d8>)
 80096b6:	6832      	ldr	r2, [r6, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d115      	bne.n	80096e8 <ai_platform_network_init+0xf4>
 80096bc:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80096c0:	6933      	ldr	r3, [r6, #16]
 80096c2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80096c6:	89f7      	ldrh	r7, [r6, #14]
 80096c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ca:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80096ce:	2303      	movs	r3, #3
 80096d0:	84e7      	strh	r7, [r4, #38]	; 0x26
 80096d2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80096d6:	60e3      	str	r3, [r4, #12]
 80096d8:	4620      	mov	r0, r4
 80096da:	4626      	mov	r6, r4
 80096dc:	f004 ffe2 	bl	800e6a4 <ai_layers_init_all>
 80096e0:	4630      	mov	r0, r6
 80096e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e6:	e7fe      	b.n	80096e6 <ai_platform_network_init+0xf2>
 80096e8:	2101      	movs	r1, #1
 80096ea:	4630      	mov	r0, r6
 80096ec:	4635      	mov	r5, r6
 80096ee:	6876      	ldr	r6, [r6, #4]
 80096f0:	f7ff fb74 	bl	8008ddc <ai_buffer_get_size>
 80096f4:	f105 081c 	add.w	r8, r5, #28
 80096f8:	4681      	mov	r9, r0
 80096fa:	2101      	movs	r1, #1
 80096fc:	4640      	mov	r0, r8
 80096fe:	6a2f      	ldr	r7, [r5, #32]
 8009700:	f7ff fb6c 	bl	8008ddc <ai_buffer_get_size>
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	d025      	beq.n	8009756 <ai_platform_network_init+0x162>
 800970a:	2201      	movs	r2, #1
 800970c:	4696      	mov	lr, r2
 800970e:	bb30      	cbnz	r0, 800975e <ai_platform_network_init+0x16a>
 8009710:	4680      	mov	r8, r0
 8009712:	4607      	mov	r7, r0
 8009714:	b376      	cbz	r6, 8009774 <ai_platform_network_init+0x180>
 8009716:	8be3      	ldrh	r3, [r4, #30]
 8009718:	4573      	cmp	r3, lr
 800971a:	d323      	bcc.n	8009764 <ai_platform_network_init+0x170>
 800971c:	b142      	cbz	r2, 8009730 <ai_platform_network_init+0x13c>
 800971e:	46ac      	mov	ip, r5
 8009720:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009724:	6a25      	ldr	r5, [r4, #32]
 8009726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009728:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800972c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009730:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009732:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009736:	2600      	movs	r6, #0
 8009738:	42bb      	cmp	r3, r7
 800973a:	83a6      	strh	r6, [r4, #28]
 800973c:	d323      	bcc.n	8009786 <ai_platform_network_init+0x192>
 800973e:	b37f      	cbz	r7, 80097a0 <ai_platform_network_init+0x1ac>
 8009740:	46c4      	mov	ip, r8
 8009742:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009746:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800974a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800974e:	46b6      	mov	lr, r6
 8009750:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009754:	e7bb      	b.n	80096ce <ai_platform_network_init+0xda>
 8009756:	464a      	mov	r2, r9
 8009758:	46ce      	mov	lr, r9
 800975a:	464d      	mov	r5, r9
 800975c:	e7d7      	b.n	800970e <ai_platform_network_init+0x11a>
 800975e:	b30f      	cbz	r7, 80097a4 <ai_platform_network_init+0x1b0>
 8009760:	2701      	movs	r7, #1
 8009762:	e7d7      	b.n	8009714 <ai_platform_network_init+0x120>
 8009764:	2212      	movs	r2, #18
 8009766:	2116      	movs	r1, #22
 8009768:	f104 0010 	add.w	r0, r4, #16
 800976c:	f000 fb46 	bl	8009dfc <core_set_error>
 8009770:	2600      	movs	r6, #0
 8009772:	e78c      	b.n	800968e <ai_platform_network_init+0x9a>
 8009774:	f1b9 0f00 	cmp.w	r9, #0
 8009778:	d0cd      	beq.n	8009716 <ai_platform_network_init+0x122>
 800977a:	2110      	movs	r1, #16
 800977c:	2212      	movs	r2, #18
 800977e:	1860      	adds	r0, r4, r1
 8009780:	f000 fb3c 	bl	8009dfc <core_set_error>
 8009784:	e783      	b.n	800968e <ai_platform_network_init+0x9a>
 8009786:	2213      	movs	r2, #19
 8009788:	2116      	movs	r1, #22
 800978a:	f104 0010 	add.w	r0, r4, #16
 800978e:	f000 fb35 	bl	8009dfc <core_set_error>
 8009792:	e77c      	b.n	800968e <ai_platform_network_init+0x9a>
 8009794:	2110      	movs	r1, #16
 8009796:	2211      	movs	r2, #17
 8009798:	1860      	adds	r0, r4, r1
 800979a:	f000 fb2f 	bl	8009dfc <core_set_error>
 800979e:	e776      	b.n	800968e <ai_platform_network_init+0x9a>
 80097a0:	46be      	mov	lr, r7
 80097a2:	e794      	b.n	80096ce <ai_platform_network_init+0xda>
 80097a4:	2110      	movs	r1, #16
 80097a6:	2213      	movs	r2, #19
 80097a8:	1860      	adds	r0, r4, r1
 80097aa:	f000 fb27 	bl	8009dfc <core_set_error>
 80097ae:	463e      	mov	r6, r7
 80097b0:	e76d      	b.n	800968e <ai_platform_network_init+0x9a>
 80097b2:	bf00      	nop
 80097b4:	a1c00100 	.word	0xa1c00100
 80097b8:	e0042000 	.word	0xe0042000
 80097bc:	58024000 	.word	0x58024000
 80097c0:	f407a5c2 	.word	0xf407a5c2
 80097c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80097c8:	40023000 	.word	0x40023000
 80097cc:	a1facade 	.word	0xa1facade

080097d0 <ai_platform_network_post_init>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	b1f0      	cbz	r0, 8009812 <ai_platform_network_post_init+0x42>
 80097d4:	4b3c      	ldr	r3, [pc, #240]	; (80098c8 <ai_platform_network_post_init+0xf8>)
 80097d6:	6802      	ldr	r2, [r0, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	4604      	mov	r4, r0
 80097dc:	d119      	bne.n	8009812 <ai_platform_network_post_init+0x42>
 80097de:	f7ff fb4b 	bl	8008e78 <_ai_platform_acquire_crc>
 80097e2:	4b3a      	ldr	r3, [pc, #232]	; (80098cc <ai_platform_network_post_init+0xfc>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ee:	d03b      	beq.n	8009868 <ai_platform_network_post_init+0x98>
 80097f0:	4a37      	ldr	r2, [pc, #220]	; (80098d0 <ai_platform_network_post_init+0x100>)
 80097f2:	2301      	movs	r3, #1
 80097f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1fb      	bne.n	80097f8 <ai_platform_network_post_init+0x28>
 8009800:	4b34      	ldr	r3, [pc, #208]	; (80098d4 <ai_platform_network_post_init+0x104>)
 8009802:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009806:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800980a:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <ai_platform_network_post_init+0x108>)
 800980c:	429a      	cmp	r2, r3
 800980e:	d037      	beq.n	8009880 <ai_platform_network_post_init+0xb0>
 8009810:	e7fe      	b.n	8009810 <ai_platform_network_post_init+0x40>
 8009812:	f7ff fb31 	bl	8008e78 <_ai_platform_acquire_crc>
 8009816:	4b2d      	ldr	r3, [pc, #180]	; (80098cc <ai_platform_network_post_init+0xfc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800981e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009822:	d010      	beq.n	8009846 <ai_platform_network_post_init+0x76>
 8009824:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <ai_platform_network_post_init+0x100>)
 8009826:	2301      	movs	r3, #1
 8009828:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800982c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1fb      	bne.n	800982c <ai_platform_network_post_init+0x5c>
 8009834:	4b27      	ldr	r3, [pc, #156]	; (80098d4 <ai_platform_network_post_init+0x104>)
 8009836:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800983a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800983e:	4b26      	ldr	r3, [pc, #152]	; (80098d8 <ai_platform_network_post_init+0x108>)
 8009840:	429a      	cmp	r2, r3
 8009842:	d00d      	beq.n	8009860 <ai_platform_network_post_init+0x90>
 8009844:	e7fe      	b.n	8009844 <ai_platform_network_post_init+0x74>
 8009846:	4a25      	ldr	r2, [pc, #148]	; (80098dc <ai_platform_network_post_init+0x10c>)
 8009848:	2301      	movs	r3, #1
 800984a:	6093      	str	r3, [r2, #8]
 800984c:	6893      	ldr	r3, [r2, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1fc      	bne.n	800984c <ai_platform_network_post_init+0x7c>
 8009852:	4b20      	ldr	r3, [pc, #128]	; (80098d4 <ai_platform_network_post_init+0x104>)
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	4b1f      	ldr	r3, [pc, #124]	; (80098d8 <ai_platform_network_post_init+0x108>)
 800985a:	429a      	cmp	r2, r3
 800985c:	d000      	beq.n	8009860 <ai_platform_network_post_init+0x90>
 800985e:	e7fe      	b.n	800985e <ai_platform_network_post_init+0x8e>
 8009860:	f7ff fb0c 	bl	8008e7c <_ai_platform_release_crc>
 8009864:	2000      	movs	r0, #0
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	4a1c      	ldr	r2, [pc, #112]	; (80098dc <ai_platform_network_post_init+0x10c>)
 800986a:	2301      	movs	r3, #1
 800986c:	6093      	str	r3, [r2, #8]
 800986e:	6893      	ldr	r3, [r2, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1fc      	bne.n	800986e <ai_platform_network_post_init+0x9e>
 8009874:	4b17      	ldr	r3, [pc, #92]	; (80098d4 <ai_platform_network_post_init+0x104>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <ai_platform_network_post_init+0x108>)
 800987c:	429a      	cmp	r2, r3
 800987e:	d11a      	bne.n	80098b6 <ai_platform_network_post_init+0xe6>
 8009880:	f7ff fafc 	bl	8008e7c <_ai_platform_release_crc>
 8009884:	68e3      	ldr	r3, [r4, #12]
 8009886:	f013 0502 	ands.w	r5, r3, #2
 800988a:	d015      	beq.n	80098b8 <ai_platform_network_post_init+0xe8>
 800988c:	4620      	mov	r0, r4
 800988e:	f004 ff17 	bl	800e6c0 <ai_layers_post_init_all>
 8009892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009894:	b16b      	cbz	r3, 80098b2 <ai_platform_network_post_init+0xe2>
 8009896:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009898:	e007      	b.n	80098aa <ai_platform_network_post_init+0xda>
 800989a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800989e:	4798      	blx	r3
 80098a0:	692b      	ldr	r3, [r5, #16]
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	d005      	beq.n	80098b2 <ai_platform_network_post_init+0xe2>
 80098a6:	b123      	cbz	r3, 80098b2 <ai_platform_network_post_init+0xe2>
 80098a8:	461d      	mov	r5, r3
 80098aa:	4629      	mov	r1, r5
 80098ac:	2000      	movs	r0, #0
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	d1f3      	bne.n	800989a <ai_platform_network_post_init+0xca>
 80098b2:	2001      	movs	r0, #1
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	e7fe      	b.n	80098b6 <ai_platform_network_post_init+0xe6>
 80098b8:	2210      	movs	r2, #16
 80098ba:	2111      	movs	r1, #17
 80098bc:	18a0      	adds	r0, r4, r2
 80098be:	f000 fa9d 	bl	8009dfc <core_set_error>
 80098c2:	4628      	mov	r0, r5
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	a1c00100 	.word	0xa1c00100
 80098cc:	e0042000 	.word	0xe0042000
 80098d0:	58024000 	.word	0x58024000
 80098d4:	f407a5c2 	.word	0xf407a5c2
 80098d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80098dc:	40023000 	.word	0x40023000

080098e0 <ai_platform_network_process>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	460e      	mov	r6, r1
 80098e6:	b085      	sub	sp, #20
 80098e8:	4693      	mov	fp, r2
 80098ea:	4605      	mov	r5, r0
 80098ec:	b120      	cbz	r0, 80098f8 <ai_platform_network_process+0x18>
 80098ee:	4bb8      	ldr	r3, [pc, #736]	; (8009bd0 <ai_platform_network_process+0x2f0>)
 80098f0:	6802      	ldr	r2, [r0, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	bf18      	it	ne
 80098f6:	2500      	movne	r5, #0
 80098f8:	f7ff fabe 	bl	8008e78 <_ai_platform_acquire_crc>
 80098fc:	4bb5      	ldr	r3, [pc, #724]	; (8009bd4 <ai_platform_network_process+0x2f4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009908:	d010      	beq.n	800992c <ai_platform_network_process+0x4c>
 800990a:	4ab3      	ldr	r2, [pc, #716]	; (8009bd8 <ai_platform_network_process+0x2f8>)
 800990c:	2301      	movs	r3, #1
 800990e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009912:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1fb      	bne.n	8009912 <ai_platform_network_process+0x32>
 800991a:	4bb0      	ldr	r3, [pc, #704]	; (8009bdc <ai_platform_network_process+0x2fc>)
 800991c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009920:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009924:	4bae      	ldr	r3, [pc, #696]	; (8009be0 <ai_platform_network_process+0x300>)
 8009926:	429a      	cmp	r2, r3
 8009928:	d00d      	beq.n	8009946 <ai_platform_network_process+0x66>
 800992a:	e7fe      	b.n	800992a <ai_platform_network_process+0x4a>
 800992c:	4aad      	ldr	r2, [pc, #692]	; (8009be4 <ai_platform_network_process+0x304>)
 800992e:	2301      	movs	r3, #1
 8009930:	6093      	str	r3, [r2, #8]
 8009932:	6893      	ldr	r3, [r2, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1fc      	bne.n	8009932 <ai_platform_network_process+0x52>
 8009938:	4ba8      	ldr	r3, [pc, #672]	; (8009bdc <ai_platform_network_process+0x2fc>)
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	4ba8      	ldr	r3, [pc, #672]	; (8009be0 <ai_platform_network_process+0x300>)
 8009940:	429a      	cmp	r2, r3
 8009942:	f040 812c 	bne.w	8009b9e <ai_platform_network_process+0x2be>
 8009946:	f7ff fa99 	bl	8008e7c <_ai_platform_release_crc>
 800994a:	2d00      	cmp	r5, #0
 800994c:	f000 8154 	beq.w	8009bf8 <ai_platform_network_process+0x318>
 8009950:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8124 	beq.w	8009ba0 <ai_platform_network_process+0x2c0>
 8009958:	68eb      	ldr	r3, [r5, #12]
 800995a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2700      	movs	r7, #0
 8009964:	2b03      	cmp	r3, #3
 8009966:	616f      	str	r7, [r5, #20]
 8009968:	f040 813e 	bne.w	8009be8 <ai_platform_network_process+0x308>
 800996c:	2e00      	cmp	r6, #0
 800996e:	f000 811d 	beq.w	8009bac <ai_platform_network_process+0x2cc>
 8009972:	f1ba 0f00 	cmp.w	sl, #0
 8009976:	f000 8119 	beq.w	8009bac <ai_platform_network_process+0x2cc>
 800997a:	f8ba 3000 	ldrh.w	r3, [sl]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8114 	beq.w	8009bac <ai_platform_network_process+0x2cc>
 8009984:	69b3      	ldr	r3, [r6, #24]
 8009986:	f8cd b00c 	str.w	fp, [sp, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009990:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d072      	beq.n	8009a7e <ai_platform_network_process+0x19e>
 8009998:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800999c:	2c00      	cmp	r4, #0
 800999e:	d06e      	beq.n	8009a7e <ai_platform_network_process+0x19e>
 80099a0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80099a4:	f8d3 9000 	ldr.w	r9, [r3]
 80099a8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80099ac:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80099b0:	f000 81e0 	beq.w	8009d74 <ai_platform_network_process+0x494>
 80099b4:	69a3      	ldr	r3, [r4, #24]
 80099b6:	2101      	movs	r1, #1
 80099b8:	4630      	mov	r0, r6
 80099ba:	685d      	ldr	r5, [r3, #4]
 80099bc:	f7ff fa0e 	bl	8008ddc <ai_buffer_get_size>
 80099c0:	4285      	cmp	r5, r0
 80099c2:	f0c0 811b 	bcc.w	8009bfc <ai_platform_network_process+0x31c>
 80099c6:	68e0      	ldr	r0, [r4, #12]
 80099c8:	69b1      	ldr	r1, [r6, #24]
 80099ca:	68c2      	ldr	r2, [r0, #12]
 80099cc:	68cb      	ldr	r3, [r1, #12]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	f040 8114 	bne.w	8009bfc <ai_platform_network_process+0x31c>
 80099d4:	6882      	ldr	r2, [r0, #8]
 80099d6:	688b      	ldr	r3, [r1, #8]
 80099d8:	429a      	cmp	r2, r3
 80099da:	f040 810f 	bne.w	8009bfc <ai_platform_network_process+0x31c>
 80099de:	6842      	ldr	r2, [r0, #4]
 80099e0:	684b      	ldr	r3, [r1, #4]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	f040 810a 	bne.w	8009bfc <ai_platform_network_process+0x31c>
 80099e8:	69a3      	ldr	r3, [r4, #24]
 80099ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099ee:	f005 f89b 	bl	800eb28 <ai_array_get_data_byte_size>
 80099f2:	4605      	mov	r5, r0
 80099f4:	4620      	mov	r0, r4
 80099f6:	f004 ffeb 	bl	800e9d0 <get_tensor_byte_size>
 80099fa:	4285      	cmp	r5, r0
 80099fc:	f0c0 80fe 	bcc.w	8009bfc <ai_platform_network_process+0x31c>
 8009a00:	69a3      	ldr	r3, [r4, #24]
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	f004 fffc 	bl	800ea00 <ai_array_to_buffer_fmt>
 8009a08:	6833      	ldr	r3, [r6, #0]
 8009a0a:	4058      	eors	r0, r3
 8009a0c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009a10:	f040 81bb 	bne.w	8009d8a <ai_platform_network_process+0x4aa>
 8009a14:	6873      	ldr	r3, [r6, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 81ae 	beq.w	8009d78 <ai_platform_network_process+0x498>
 8009a1c:	69b3      	ldr	r3, [r6, #24]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 819e 	beq.w	8009d62 <ai_platform_network_process+0x482>
 8009a26:	9a01      	ldr	r2, [sp, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bf38      	it	cc
 8009a2c:	461a      	movcc	r2, r3
 8009a2e:	4620      	mov	r0, r4
 8009a30:	9201      	str	r2, [sp, #4]
 8009a32:	f004 ffcd 	bl	800e9d0 <get_tensor_byte_size>
 8009a36:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a3a:	69b3      	ldr	r3, [r6, #24]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	fb00 f303 	mul.w	r3, r0, r3
 8009a42:	f8c8 300c 	str.w	r3, [r8, #12]
 8009a46:	6871      	ldr	r1, [r6, #4]
 8009a48:	f8c8 1004 	str.w	r1, [r8, #4]
 8009a4c:	440b      	add	r3, r1
 8009a4e:	f849 300b 	str.w	r3, [r9, fp]
 8009a52:	69a0      	ldr	r0, [r4, #24]
 8009a54:	6803      	ldr	r3, [r0, #0]
 8009a56:	009a      	lsls	r2, r3, #2
 8009a58:	f107 0701 	add.w	r7, r7, #1
 8009a5c:	f106 061c 	add.w	r6, r6, #28
 8009a60:	f100 80af 	bmi.w	8009bc2 <ai_platform_network_process+0x2e2>
 8009a64:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	4419      	add	r1, r3
 8009a6c:	6081      	str	r1, [r0, #8]
 8009a6e:	69a3      	ldr	r3, [r4, #24]
 8009a70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a74:	60da      	str	r2, [r3, #12]
 8009a76:	f8ba 3000 	ldrh.w	r3, [sl]
 8009a7a:	42bb      	cmp	r3, r7
 8009a7c:	d888      	bhi.n	8009990 <ai_platform_network_process+0xb0>
 8009a7e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8009a82:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009a84:	f1bb 0f00 	cmp.w	fp, #0
 8009a88:	f000 8188 	beq.w	8009d9c <ai_platform_network_process+0x4bc>
 8009a8c:	2a01      	cmp	r2, #1
 8009a8e:	f240 8160 	bls.w	8009d52 <ai_platform_network_process+0x472>
 8009a92:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009a96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8159 	beq.w	8009d52 <ai_platform_network_process+0x472>
 8009aa0:	465e      	mov	r6, fp
 8009aa2:	2700      	movs	r7, #0
 8009aa4:	462c      	mov	r4, r5
 8009aa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 80b4 	beq.w	8009c18 <ai_platform_network_process+0x338>
 8009ab0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	f000 80af 	beq.w	8009c18 <ai_platform_network_process+0x338>
 8009aba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009abe:	f8d3 8000 	ldr.w	r8, [r3]
 8009ac2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8009ac6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009aca:	f000 8173 	beq.w	8009db4 <ai_platform_network_process+0x4d4>
 8009ace:	69ab      	ldr	r3, [r5, #24]
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff f980 	bl	8008ddc <ai_buffer_get_size>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	4283      	cmp	r3, r0
 8009ae0:	f0c0 8136 	bcc.w	8009d50 <ai_platform_network_process+0x470>
 8009ae4:	68e8      	ldr	r0, [r5, #12]
 8009ae6:	69b1      	ldr	r1, [r6, #24]
 8009ae8:	68c2      	ldr	r2, [r0, #12]
 8009aea:	68cb      	ldr	r3, [r1, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	f040 812f 	bne.w	8009d50 <ai_platform_network_process+0x470>
 8009af2:	6882      	ldr	r2, [r0, #8]
 8009af4:	688b      	ldr	r3, [r1, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	f040 812a 	bne.w	8009d50 <ai_platform_network_process+0x470>
 8009afc:	6842      	ldr	r2, [r0, #4]
 8009afe:	684b      	ldr	r3, [r1, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	f040 8125 	bne.w	8009d50 <ai_platform_network_process+0x470>
 8009b06:	69ab      	ldr	r3, [r5, #24]
 8009b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b0c:	f005 f80c 	bl	800eb28 <ai_array_get_data_byte_size>
 8009b10:	9002      	str	r0, [sp, #8]
 8009b12:	4628      	mov	r0, r5
 8009b14:	f004 ff5c 	bl	800e9d0 <get_tensor_byte_size>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	4283      	cmp	r3, r0
 8009b1c:	f0c0 8118 	bcc.w	8009d50 <ai_platform_network_process+0x470>
 8009b20:	69ab      	ldr	r3, [r5, #24]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	f004 ff6c 	bl	800ea00 <ai_array_to_buffer_fmt>
 8009b28:	6833      	ldr	r3, [r6, #0]
 8009b2a:	4058      	eors	r0, r3
 8009b2c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009b30:	f040 8138 	bne.w	8009da4 <ai_platform_network_process+0x4c4>
 8009b34:	6873      	ldr	r3, [r6, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 814f 	beq.w	8009dda <ai_platform_network_process+0x4fa>
 8009b3c:	69b3      	ldr	r3, [r6, #24]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 8141 	beq.w	8009dc8 <ai_platform_network_process+0x4e8>
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	bf38      	it	cc
 8009b4c:	461a      	movcc	r2, r3
 8009b4e:	4628      	mov	r0, r5
 8009b50:	9201      	str	r2, [sp, #4]
 8009b52:	f004 ff3d 	bl	800e9d0 <get_tensor_byte_size>
 8009b56:	f8ca 0008 	str.w	r0, [sl, #8]
 8009b5a:	69b3      	ldr	r3, [r6, #24]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	fb00 f303 	mul.w	r3, r0, r3
 8009b62:	f8ca 300c 	str.w	r3, [sl, #12]
 8009b66:	6871      	ldr	r1, [r6, #4]
 8009b68:	f8ca 1004 	str.w	r1, [sl, #4]
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f848 300b 	str.w	r3, [r8, fp]
 8009b72:	69a8      	ldr	r0, [r5, #24]
 8009b74:	6803      	ldr	r3, [r0, #0]
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	f107 0701 	add.w	r7, r7, #1
 8009b7c:	f106 061c 	add.w	r6, r6, #28
 8009b80:	d445      	bmi.n	8009c0e <ai_platform_network_process+0x32e>
 8009b82:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009b86:	1a9b      	subs	r3, r3, r2
 8009b88:	4419      	add	r1, r3
 8009b8a:	6081      	str	r1, [r0, #8]
 8009b8c:	69ab      	ldr	r3, [r5, #24]
 8009b8e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009b92:	60da      	str	r2, [r3, #12]
 8009b94:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009b98:	429f      	cmp	r7, r3
 8009b9a:	d384      	bcc.n	8009aa6 <ai_platform_network_process+0x1c6>
 8009b9c:	e03c      	b.n	8009c18 <ai_platform_network_process+0x338>
 8009b9e:	e7fe      	b.n	8009b9e <ai_platform_network_process+0x2be>
 8009ba0:	68ea      	ldr	r2, [r5, #12]
 8009ba2:	616b      	str	r3, [r5, #20]
 8009ba4:	f002 0203 	and.w	r2, r2, #3
 8009ba8:	2a03      	cmp	r2, #3
 8009baa:	d11d      	bne.n	8009be8 <ai_platform_network_process+0x308>
 8009bac:	2217      	movs	r2, #23
 8009bae:	2112      	movs	r1, #18
 8009bb0:	f105 0010 	add.w	r0, r5, #16
 8009bb4:	f000 f922 	bl	8009dfc <core_set_error>
 8009bb8:	2400      	movs	r4, #0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	b005      	add	sp, #20
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	f8ba 3000 	ldrh.w	r3, [sl]
 8009bc6:	429f      	cmp	r7, r3
 8009bc8:	f4ff aee2 	bcc.w	8009990 <ai_platform_network_process+0xb0>
 8009bcc:	e757      	b.n	8009a7e <ai_platform_network_process+0x19e>
 8009bce:	bf00      	nop
 8009bd0:	a1c00100 	.word	0xa1c00100
 8009bd4:	e0042000 	.word	0xe0042000
 8009bd8:	58024000 	.word	0x58024000
 8009bdc:	f407a5c2 	.word	0xf407a5c2
 8009be0:	b5e8b5cd 	.word	0xb5e8b5cd
 8009be4:	40023000 	.word	0x40023000
 8009be8:	2230      	movs	r2, #48	; 0x30
 8009bea:	2111      	movs	r1, #17
 8009bec:	f105 0010 	add.w	r0, r5, #16
 8009bf0:	f000 f904 	bl	8009dfc <core_set_error>
 8009bf4:	2400      	movs	r4, #0
 8009bf6:	e7e0      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009bf8:	462c      	mov	r4, r5
 8009bfa:	e7de      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009bfc:	9d02      	ldr	r5, [sp, #8]
 8009bfe:	2218      	movs	r2, #24
 8009c00:	2112      	movs	r1, #18
 8009c02:	f105 0010 	add.w	r0, r5, #16
 8009c06:	f000 f8f9 	bl	8009dfc <core_set_error>
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	e7d5      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009c0e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009c12:	429f      	cmp	r7, r3
 8009c14:	f4ff af47 	bcc.w	8009aa6 <ai_platform_network_process+0x1c6>
 8009c18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c1c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8009c1e:	82a3      	strh	r3, [r4, #20]
 8009c20:	4625      	mov	r5, r4
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	f040 808e 	bne.w	8009d44 <ai_platform_network_process+0x464>
 8009c28:	4616      	mov	r6, r2
 8009c2a:	4617      	mov	r7, r2
 8009c2c:	8aec      	ldrh	r4, [r5, #22]
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	bf38      	it	cc
 8009c32:	46ab      	movcc	fp, r5
 8009c34:	d2c1      	bcs.n	8009bba <ai_platform_network_process+0x2da>
 8009c36:	2e00      	cmp	r6, #0
 8009c38:	d030      	beq.n	8009c9c <ai_platform_network_process+0x3bc>
 8009c3a:	f04f 0800 	mov.w	r8, #0
 8009c3e:	e014      	b.n	8009c6a <ai_platform_network_process+0x38a>
 8009c40:	6882      	ldr	r2, [r0, #8]
 8009c42:	68c5      	ldr	r5, [r0, #12]
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	1b52      	subs	r2, r2, r5
 8009c48:	4413      	add	r3, r2
 8009c4a:	6083      	str	r3, [r0, #8]
 8009c4c:	698b      	ldr	r3, [r1, #24]
 8009c4e:	6862      	ldr	r2, [r4, #4]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009c56:	f859 200a 	ldr.w	r2, [r9, sl]
 8009c5a:	440b      	add	r3, r1
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	bf24      	itt	cs
 8009c60:	68e3      	ldrcs	r3, [r4, #12]
 8009c62:	1ad3      	subcs	r3, r2, r3
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	f108 0801 	add.w	r8, r8, #1
 8009c6a:	8833      	ldrh	r3, [r6, #0]
 8009c6c:	4543      	cmp	r3, r8
 8009c6e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009c72:	d913      	bls.n	8009c9c <ai_platform_network_process+0x3bc>
 8009c74:	6873      	ldr	r3, [r6, #4]
 8009c76:	b18b      	cbz	r3, 8009c9c <ai_platform_network_process+0x3bc>
 8009c78:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009c7c:	b171      	cbz	r1, 8009c9c <ai_platform_network_process+0x3bc>
 8009c7e:	6988      	ldr	r0, [r1, #24]
 8009c80:	68b2      	ldr	r2, [r6, #8]
 8009c82:	6803      	ldr	r3, [r0, #0]
 8009c84:	f8d2 9000 	ldr.w	r9, [r2]
 8009c88:	009d      	lsls	r5, r3, #2
 8009c8a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009c8e:	d5d7      	bpl.n	8009c40 <ai_platform_network_process+0x360>
 8009c90:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009c94:	6880      	ldr	r0, [r0, #8]
 8009c96:	f005 fa8b 	bl	800f1b0 <memcpy>
 8009c9a:	e7da      	b.n	8009c52 <ai_platform_network_process+0x372>
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f004 fd23 	bl	800e6e8 <ai_layers_forward_all>
 8009ca2:	2f00      	cmp	r7, #0
 8009ca4:	d03f      	beq.n	8009d26 <ai_platform_network_process+0x446>
 8009ca6:	2400      	movs	r4, #0
 8009ca8:	e016      	b.n	8009cd8 <ai_platform_network_process+0x3f8>
 8009caa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009cae:	f859 100a 	ldr.w	r1, [r9, sl]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	bf24      	itt	cs
 8009cb8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009cbc:	1acb      	subcs	r3, r1, r3
 8009cbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cc2:	6981      	ldr	r1, [r0, #24]
 8009cc4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009cc8:	1b52      	subs	r2, r2, r5
 8009cca:	4413      	add	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
 8009cce:	6983      	ldr	r3, [r0, #24]
 8009cd0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009cd4:	60da      	str	r2, [r3, #12]
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	883b      	ldrh	r3, [r7, #0]
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	d923      	bls.n	8009d26 <ai_platform_network_process+0x446>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	b30b      	cbz	r3, 8009d26 <ai_platform_network_process+0x446>
 8009ce2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009ce6:	b1f0      	cbz	r0, 8009d26 <ai_platform_network_process+0x446>
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	6983      	ldr	r3, [r0, #24]
 8009cec:	f8d2 9000 	ldr.w	r9, [r2]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	0092      	lsls	r2, r2, #2
 8009cf4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009cf8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009cfc:	d5d5      	bpl.n	8009caa <ai_platform_network_process+0x3ca>
 8009cfe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009d02:	6899      	ldr	r1, [r3, #8]
 8009d04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d08:	f005 fa52 	bl	800f1b0 <memcpy>
 8009d0c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009d10:	f859 200a 	ldr.w	r2, [r9, sl]
 8009d14:	440b      	add	r3, r1
 8009d16:	4293      	cmp	r3, r2
 8009d18:	bf24      	itt	cs
 8009d1a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009d1e:	1ad3      	subcs	r3, r2, r3
 8009d20:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d24:	e7d7      	b.n	8009cd6 <ai_platform_network_process+0x3f6>
 8009d26:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009d2a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009d2e:	3401      	adds	r4, #1
 8009d30:	b2a4      	uxth	r4, r4
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009d38:	f63f af7d 	bhi.w	8009c36 <ai_platform_network_process+0x356>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	b005      	add	sp, #20
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	2a01      	cmp	r2, #1
 8009d46:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009d48:	d03c      	beq.n	8009dc4 <ai_platform_network_process+0x4e4>
 8009d4a:	f106 070c 	add.w	r7, r6, #12
 8009d4e:	e76d      	b.n	8009c2c <ai_platform_network_process+0x34c>
 8009d50:	4625      	mov	r5, r4
 8009d52:	2218      	movs	r2, #24
 8009d54:	2113      	movs	r1, #19
 8009d56:	f105 0010 	add.w	r0, r5, #16
 8009d5a:	f000 f84f 	bl	8009dfc <core_set_error>
 8009d5e:	2400      	movs	r4, #0
 8009d60:	e72b      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009d62:	9d02      	ldr	r5, [sp, #8]
 8009d64:	4604      	mov	r4, r0
 8009d66:	2221      	movs	r2, #33	; 0x21
 8009d68:	2112      	movs	r1, #18
 8009d6a:	f105 0010 	add.w	r0, r5, #16
 8009d6e:	f000 f845 	bl	8009dfc <core_set_error>
 8009d72:	e722      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009d74:	9d02      	ldr	r5, [sp, #8]
 8009d76:	e719      	b.n	8009bac <ai_platform_network_process+0x2cc>
 8009d78:	9d02      	ldr	r5, [sp, #8]
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	2217      	movs	r2, #23
 8009d7e:	2112      	movs	r1, #18
 8009d80:	f105 0010 	add.w	r0, r5, #16
 8009d84:	f000 f83a 	bl	8009dfc <core_set_error>
 8009d88:	e717      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009d8a:	9d02      	ldr	r5, [sp, #8]
 8009d8c:	2219      	movs	r2, #25
 8009d8e:	2112      	movs	r1, #18
 8009d90:	f105 0010 	add.w	r0, r5, #16
 8009d94:	f000 f832 	bl	8009dfc <core_set_error>
 8009d98:	2400      	movs	r4, #0
 8009d9a:	e70e      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009d9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009da0:	82ab      	strh	r3, [r5, #20]
 8009da2:	e73e      	b.n	8009c22 <ai_platform_network_process+0x342>
 8009da4:	f104 0010 	add.w	r0, r4, #16
 8009da8:	2219      	movs	r2, #25
 8009daa:	2113      	movs	r1, #19
 8009dac:	f000 f826 	bl	8009dfc <core_set_error>
 8009db0:	2400      	movs	r4, #0
 8009db2:	e702      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009db4:	f104 0010 	add.w	r0, r4, #16
 8009db8:	2217      	movs	r2, #23
 8009dba:	2113      	movs	r1, #19
 8009dbc:	f000 f81e 	bl	8009dfc <core_set_error>
 8009dc0:	4654      	mov	r4, sl
 8009dc2:	e6fa      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009dc4:	2700      	movs	r7, #0
 8009dc6:	e731      	b.n	8009c2c <ai_platform_network_process+0x34c>
 8009dc8:	4625      	mov	r5, r4
 8009dca:	2221      	movs	r2, #33	; 0x21
 8009dcc:	4604      	mov	r4, r0
 8009dce:	2113      	movs	r1, #19
 8009dd0:	f105 0010 	add.w	r0, r5, #16
 8009dd4:	f000 f812 	bl	8009dfc <core_set_error>
 8009dd8:	e6ef      	b.n	8009bba <ai_platform_network_process+0x2da>
 8009dda:	4625      	mov	r5, r4
 8009ddc:	2217      	movs	r2, #23
 8009dde:	4604      	mov	r4, r0
 8009de0:	2113      	movs	r1, #19
 8009de2:	f105 0010 	add.w	r0, r5, #16
 8009de6:	f000 f809 	bl	8009dfc <core_set_error>
 8009dea:	e6e6      	b.n	8009bba <ai_platform_network_process+0x2da>

08009dec <core_init>:
 8009dec:	2001      	movs	r0, #1
 8009dee:	4770      	bx	lr

08009df0 <core_get_error>:
 8009df0:	4603      	mov	r3, r0
 8009df2:	2200      	movs	r2, #0
 8009df4:	6800      	ldr	r0, [r0, #0]
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <core_set_error>:
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	7800      	ldrb	r0, [r0, #0]
 8009e00:	b108      	cbz	r0, 8009e06 <core_set_error+0xa>
 8009e02:	2000      	movs	r0, #0
 8009e04:	4770      	bx	lr
 8009e06:	7019      	strb	r1, [r3, #0]
 8009e08:	6819      	ldr	r1, [r3, #0]
 8009e0a:	f362 211f 	bfi	r1, r2, #8, #24
 8009e0e:	2001      	movs	r0, #1
 8009e10:	6019      	str	r1, [r3, #0]
 8009e12:	4770      	bx	lr

08009e14 <forward_dense>:
 8009e14:	6983      	ldr	r3, [r0, #24]
 8009e16:	881a      	ldrh	r2, [r3, #0]
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	f000 8181 	beq.w	800a120 <forward_dense+0x30c>
 8009e1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e22:	ed2d 8b02 	vpush	{d8}
 8009e26:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009e2a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009e2e:	b095      	sub	sp, #84	; 0x54
 8009e30:	b105      	cbz	r5, 8009e34 <forward_dense+0x20>
 8009e32:	682d      	ldr	r5, [r5, #0]
 8009e34:	2a01      	cmp	r2, #1
 8009e36:	f000 828f 	beq.w	800a358 <forward_dense+0x544>
 8009e3a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009e3e:	b106      	cbz	r6, 8009e42 <forward_dense+0x2e>
 8009e40:	6836      	ldr	r6, [r6, #0]
 8009e42:	2a02      	cmp	r2, #2
 8009e44:	f000 816e 	beq.w	800a124 <forward_dense+0x310>
 8009e48:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 8274 	beq.w	800a33c <forward_dense+0x528>
 8009e54:	4619      	mov	r1, r3
 8009e56:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8009e5a:	6809      	ldr	r1, [r1, #0]
 8009e5c:	910d      	str	r1, [sp, #52]	; 0x34
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	f240 826e 	bls.w	800a340 <forward_dense+0x52c>
 8009e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	68e8      	ldr	r0, [r5, #12]
 8009e6e:	68f7      	ldr	r7, [r6, #12]
 8009e70:	6840      	ldr	r0, [r0, #4]
 8009e72:	6999      	ldr	r1, [r3, #24]
 8009e74:	9013      	str	r0, [sp, #76]	; 0x4c
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	680b      	ldr	r3, [r1, #0]
 8009e7a:	9012      	str	r0, [sp, #72]	; 0x48
 8009e7c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8009e80:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009e84:	fb00 f404 	mul.w	r4, r0, r4
 8009e88:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8009e8c:	fa4e f000 	asr.w	r0, lr, r0
 8009e90:	2a03      	cmp	r2, #3
 8009e92:	9010      	str	r0, [sp, #64]	; 0x40
 8009e94:	f000 825d 	beq.w	800a352 <forward_dense+0x53e>
 8009e98:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009e9c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	f000 8246 	beq.w	800a332 <forward_dense+0x51e>
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	f000 8242 	beq.w	800a332 <forward_dense+0x51e>
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009eb4:	f000 822c 	beq.w	800a310 <forward_dense+0x4fc>
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	f000 8229 	beq.w	800a310 <forward_dense+0x4fc>
 8009ebe:	f04f 0b00 	mov.w	fp, #0
 8009ec2:	69b2      	ldr	r2, [r6, #24]
 8009ec4:	69ab      	ldr	r3, [r5, #24]
 8009ec6:	6891      	ldr	r1, [r2, #8]
 8009ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	6952      	ldr	r2, [r2, #20]
 8009ece:	9106      	str	r1, [sp, #24]
 8009ed0:	fb07 f404 	mul.w	r4, r7, r4
 8009ed4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eda:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009ede:	4281      	cmp	r1, r0
 8009ee0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8009ee4:	900e      	str	r0, [sp, #56]	; 0x38
 8009ee6:	940c      	str	r4, [sp, #48]	; 0x30
 8009ee8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8009eec:	f080 8113 	bcs.w	800a116 <forward_dense+0x302>
 8009ef0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ef2:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800a140 <forward_dense+0x32c>
 8009ef6:	f021 0201 	bic.w	r2, r1, #1
 8009efa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009efe:	9204      	str	r2, [sp, #16]
 8009f00:	f001 0201 	and.w	r2, r1, #1
 8009f04:	08c8      	lsrs	r0, r1, #3
 8009f06:	9208      	str	r2, [sp, #32]
 8009f08:	008a      	lsls	r2, r1, #2
 8009f0a:	f001 0a07 	and.w	sl, r1, #7
 8009f0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f10:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8009f14:	3320      	adds	r3, #32
 8009f16:	465c      	mov	r4, fp
 8009f18:	9007      	str	r0, [sp, #28]
 8009f1a:	46cb      	mov	fp, r9
 8009f1c:	9205      	str	r2, [sp, #20]
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	46c1      	mov	r9, r8
 8009f22:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	3b20      	subs	r3, #32
 8009f30:	930a      	str	r3, [sp, #40]	; 0x28
 8009f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f34:	b10b      	cbz	r3, 8009f3a <forward_dense+0x126>
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	f000 81da 	beq.w	800a2f4 <forward_dense+0x4e0>
 8009f40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f42:	2904      	cmp	r1, #4
 8009f44:	9906      	ldr	r1, [sp, #24]
 8009f46:	f000 80fd 	beq.w	800a144 <forward_dense+0x330>
 8009f4a:	4549      	cmp	r1, r9
 8009f4c:	f080 80d2 	bcs.w	800a0f4 <forward_dense+0x2e0>
 8009f50:	460f      	mov	r7, r1
 8009f52:	9907      	ldr	r1, [sp, #28]
 8009f54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009f58:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009f5c:	1c4e      	adds	r6, r1, #1
 8009f5e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009f62:	4694      	mov	ip, r2
 8009f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f66:	468e      	mov	lr, r1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 80de 	beq.w	800a12a <forward_dense+0x316>
 8009f6e:	ecf3 2a01 	vldmia	r3!, {s5}
 8009f72:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a140 <forward_dense+0x32c>
 8009f76:	f1be 0f00 	cmp.w	lr, #0
 8009f7a:	f000 80de 	beq.w	800a13a <forward_dense+0x326>
 8009f7e:	f10c 0108 	add.w	r1, ip, #8
 8009f82:	4640      	mov	r0, r8
 8009f84:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009f88:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8009f8c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8009f90:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8009f94:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8009f98:	ed10 5a04 	vldr	s10, [r0, #-16]
 8009f9c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8009fa0:	ed10 6a02 	vldr	s12, [r0, #-8]
 8009fa4:	ed50 6a01 	vldr	s13, [r0, #-4]
 8009fa8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fac:	edd5 7a00 	vldr	s15, [r5]
 8009fb0:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8009fb4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fb8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009fbc:	ed95 3a00 	vldr	s6, [r5]
 8009fc0:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8009fc4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009fc8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fcc:	3108      	adds	r1, #8
 8009fce:	edd5 3a00 	vldr	s7, [r5]
 8009fd2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009fd6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009fda:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fde:	3020      	adds	r0, #32
 8009fe0:	ed95 4a00 	vldr	s8, [r5]
 8009fe4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009fe8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ff0:	edd5 4a00 	vldr	s9, [r5]
 8009ff4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009ff8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009ffc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a000:	ed95 5a00 	vldr	s10, [r5]
 800a004:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800a008:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a00c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a010:	edd5 5a00 	vldr	s11, [r5]
 800a014:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800a018:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a01c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a020:	428e      	cmp	r6, r1
 800a022:	ed95 6a00 	vldr	s12, [r5]
 800a026:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a02a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a02e:	d1a9      	bne.n	8009f84 <forward_dense+0x170>
 800a030:	f1a6 0108 	sub.w	r1, r6, #8
 800a034:	4650      	mov	r0, sl
 800a036:	2a00      	cmp	r2, #0
 800a038:	d04a      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a03a:	780d      	ldrb	r5, [r1, #0]
 800a03c:	edd0 6a00 	vldr	s13, [r0]
 800a040:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a044:	edd5 7a00 	vldr	s15, [r5]
 800a048:	2a01      	cmp	r2, #1
 800a04a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a04e:	d03f      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a050:	784d      	ldrb	r5, [r1, #1]
 800a052:	edd0 6a01 	vldr	s13, [r0, #4]
 800a056:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a05a:	edd5 7a00 	vldr	s15, [r5]
 800a05e:	2a02      	cmp	r2, #2
 800a060:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a064:	d034      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a066:	788d      	ldrb	r5, [r1, #2]
 800a068:	edd0 6a02 	vldr	s13, [r0, #8]
 800a06c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a070:	edd5 7a00 	vldr	s15, [r5]
 800a074:	2a03      	cmp	r2, #3
 800a076:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a07a:	d029      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a07c:	78cd      	ldrb	r5, [r1, #3]
 800a07e:	edd0 6a03 	vldr	s13, [r0, #12]
 800a082:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a086:	edd5 7a00 	vldr	s15, [r5]
 800a08a:	2a04      	cmp	r2, #4
 800a08c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a090:	d01e      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a092:	790d      	ldrb	r5, [r1, #4]
 800a094:	edd0 6a04 	vldr	s13, [r0, #16]
 800a098:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a09c:	edd5 7a00 	vldr	s15, [r5]
 800a0a0:	2a05      	cmp	r2, #5
 800a0a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0a6:	d013      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a0a8:	794d      	ldrb	r5, [r1, #5]
 800a0aa:	edd0 6a05 	vldr	s13, [r0, #20]
 800a0ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a0b2:	edd5 7a00 	vldr	s15, [r5]
 800a0b6:	2a06      	cmp	r2, #6
 800a0b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0bc:	d008      	beq.n	800a0d0 <forward_dense+0x2bc>
 800a0be:	7989      	ldrb	r1, [r1, #6]
 800a0c0:	edd0 7a06 	vldr	s15, [r0, #24]
 800a0c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a0c8:	edd1 6a00 	vldr	s13, [r1]
 800a0cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0d0:	44dc      	add	ip, fp
 800a0d2:	445e      	add	r6, fp
 800a0d4:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a0d8:	eca7 7a01 	vstmia	r7!, {s14}
 800a0dc:	454f      	cmp	r7, r9
 800a0de:	f4ff af43 	bcc.w	8009f68 <forward_dense+0x154>
 800a0e2:	9a06      	ldr	r2, [sp, #24]
 800a0e4:	eba9 0302 	sub.w	r3, r9, r2
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	18d3      	adds	r3, r2, r3
 800a0f2:	9306      	str	r3, [sp, #24]
 800a0f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0f6:	9a05      	ldr	r2, [sp, #20]
 800a0f8:	4499      	add	r9, r3
 800a0fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fc:	441a      	add	r2, r3
 800a0fe:	9205      	str	r2, [sp, #20]
 800a100:	9a02      	ldr	r2, [sp, #8]
 800a102:	441a      	add	r2, r3
 800a104:	9202      	str	r2, [sp, #8]
 800a106:	9a04      	ldr	r2, [sp, #16]
 800a108:	441a      	add	r2, r3
 800a10a:	9204      	str	r2, [sp, #16]
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a110:	4293      	cmp	r3, r2
 800a112:	f4ff af08 	bcc.w	8009f26 <forward_dense+0x112>
 800a116:	b015      	add	sp, #84	; 0x54
 800a118:	ecbd 8b02 	vpop	{d8}
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a120:	6853      	ldr	r3, [r2, #4]
 800a122:	deff      	udf	#255	; 0xff
 800a124:	2300      	movs	r3, #0
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	deff      	udf	#255	; 0xff
 800a12a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a140 <forward_dense+0x32c>
 800a12e:	eef0 2a48 	vmov.f32	s5, s16
 800a132:	f1be 0f00 	cmp.w	lr, #0
 800a136:	f47f af22 	bne.w	8009f7e <forward_dense+0x16a>
 800a13a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a13c:	4661      	mov	r1, ip
 800a13e:	e77a      	b.n	800a036 <forward_dense+0x222>
 800a140:	00000000 	.word	0x00000000
 800a144:	4549      	cmp	r1, r9
 800a146:	d2d5      	bcs.n	800a0f4 <forward_dense+0x2e0>
 800a148:	9807      	ldr	r0, [sp, #28]
 800a14a:	9103      	str	r1, [sp, #12]
 800a14c:	9904      	ldr	r1, [sp, #16]
 800a14e:	f100 0c01 	add.w	ip, r0, #1
 800a152:	3901      	subs	r1, #1
 800a154:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a158:	9109      	str	r1, [sp, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 80b2 	beq.w	800a2c4 <forward_dense+0x4b0>
 800a160:	9907      	ldr	r1, [sp, #28]
 800a162:	ecf3 2a01 	vldmia	r3!, {s5}
 800a166:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800a140 <forward_dense+0x32c>
 800a16a:	2900      	cmp	r1, #0
 800a16c:	f000 80b2 	beq.w	800a2d4 <forward_dense+0x4c0>
 800a170:	9902      	ldr	r1, [sp, #8]
 800a172:	1d10      	adds	r0, r2, #4
 800a174:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800a178:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a17c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800a180:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800a184:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a188:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800a18c:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a190:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a194:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a198:	ed51 6a01 	vldr	s13, [r1, #-4]
 800a19c:	f006 070f 	and.w	r7, r6, #15
 800a1a0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a1a4:	edd7 7a00 	vldr	s15, [r7]
 800a1a8:	0936      	lsrs	r6, r6, #4
 800a1aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a1ae:	ed96 3a00 	vldr	s6, [r6]
 800a1b2:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a1b6:	092e      	lsrs	r6, r5, #4
 800a1b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a1bc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a1c0:	f005 050f 	and.w	r5, r5, #15
 800a1c4:	edd6 3a00 	vldr	s7, [r6]
 800a1c8:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800a1cc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a1d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a1d4:	0937      	lsrs	r7, r6, #4
 800a1d6:	ed95 4a00 	vldr	s8, [r5]
 800a1da:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800a1de:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a1e2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a1e6:	f006 060f 	and.w	r6, r6, #15
 800a1ea:	edd7 4a00 	vldr	s9, [r7]
 800a1ee:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a1f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a1f6:	3004      	adds	r0, #4
 800a1f8:	ed96 5a00 	vldr	s10, [r6]
 800a1fc:	092e      	lsrs	r6, r5, #4
 800a1fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a202:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a206:	f005 050f 	and.w	r5, r5, #15
 800a20a:	edd6 5a00 	vldr	s11, [r6]
 800a20e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a212:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a216:	4584      	cmp	ip, r0
 800a218:	ed95 6a00 	vldr	s12, [r5]
 800a21c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a220:	f101 0120 	add.w	r1, r1, #32
 800a224:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a228:	d1a4      	bne.n	800a174 <forward_dense+0x360>
 800a22a:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a22e:	f1ac 0804 	sub.w	r8, ip, #4
 800a232:	9904      	ldr	r1, [sp, #16]
 800a234:	458e      	cmp	lr, r1
 800a236:	d22a      	bcs.n	800a28e <forward_dense+0x47a>
 800a238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a23a:	eba1 070e 	sub.w	r7, r1, lr
 800a23e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800a242:	f10e 0008 	add.w	r0, lr, #8
 800a246:	f108 36ff 	add.w	r6, r8, #4294967295
 800a24a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a24e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a252:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a256:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a25a:	f001 050f 	and.w	r5, r1, #15
 800a25e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a262:	edd5 7a00 	vldr	s15, [r5]
 800a266:	0909      	lsrs	r1, r1, #4
 800a268:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a26c:	ed91 6a00 	vldr	s12, [r1]
 800a270:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a274:	42b7      	cmp	r7, r6
 800a276:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a27a:	f100 0008 	add.w	r0, r0, #8
 800a27e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a282:	d1e4      	bne.n	800a24e <forward_dense+0x43a>
 800a284:	f10a 0a01 	add.w	sl, sl, #1
 800a288:	44d0      	add	r8, sl
 800a28a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a28e:	9908      	ldr	r1, [sp, #32]
 800a290:	b321      	cbz	r1, 800a2dc <forward_dense+0x4c8>
 800a292:	f898 1000 	ldrb.w	r1, [r8]
 800a296:	edde 7a00 	vldr	s15, [lr]
 800a29a:	0909      	lsrs	r1, r1, #4
 800a29c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a2a0:	edd1 6a00 	vldr	s13, [r1]
 800a2a4:	9903      	ldr	r1, [sp, #12]
 800a2a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a2aa:	445a      	add	r2, fp
 800a2ac:	44dc      	add	ip, fp
 800a2ae:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a2b2:	ece1 2a01 	vstmia	r1!, {s5}
 800a2b6:	4589      	cmp	r9, r1
 800a2b8:	9103      	str	r1, [sp, #12]
 800a2ba:	f67f af12 	bls.w	800a0e2 <forward_dense+0x2ce>
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f47f af4e 	bne.w	800a160 <forward_dense+0x34c>
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800a140 <forward_dense+0x32c>
 800a2ca:	eef0 2a48 	vmov.f32	s5, s16
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	f47f af4e 	bne.w	800a170 <forward_dense+0x35c>
 800a2d4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800a2d8:	4690      	mov	r8, r2
 800a2da:	e7aa      	b.n	800a232 <forward_dense+0x41e>
 800a2dc:	9903      	ldr	r1, [sp, #12]
 800a2de:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a2e2:	445a      	add	r2, fp
 800a2e4:	eca1 7a01 	vstmia	r1!, {s14}
 800a2e8:	4549      	cmp	r1, r9
 800a2ea:	9103      	str	r1, [sp, #12]
 800a2ec:	44dc      	add	ip, fp
 800a2ee:	f4ff af34 	bcc.w	800a15a <forward_dense+0x346>
 800a2f2:	e6f6      	b.n	800a0e2 <forward_dense+0x2ce>
 800a2f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a2f6:	9d06      	ldr	r5, [sp, #24]
 800a2f8:	9101      	str	r1, [sp, #4]
 800a2fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2fc:	9100      	str	r1, [sp, #0]
 800a2fe:	4628      	mov	r0, r5
 800a300:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a302:	f004 fa3b 	bl	800e77c <lite_dense_if32of32wf32>
 800a306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a308:	462b      	mov	r3, r5
 800a30a:	4413      	add	r3, r2
 800a30c:	9306      	str	r3, [sp, #24]
 800a30e:	e6f1      	b.n	800a0f4 <forward_dense+0x2e0>
 800a310:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a314:	f1b9 0f00 	cmp.w	r9, #0
 800a318:	d016      	beq.n	800a348 <forward_dense+0x534>
 800a31a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a31e:	f004 fbdb 	bl	800ead8 <ai_array_get_byte_size>
 800a322:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800a326:	4602      	mov	r2, r0
 800a328:	4641      	mov	r1, r8
 800a32a:	4658      	mov	r0, fp
 800a32c:	f004 ff40 	bl	800f1b0 <memcpy>
 800a330:	e5c7      	b.n	8009ec2 <forward_dense+0xae>
 800a332:	2b04      	cmp	r3, #4
 800a334:	d00a      	beq.n	800a34c <forward_dense+0x538>
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	e5bd      	b.n	8009eb8 <forward_dense+0xa4>
 800a33c:	930d      	str	r3, [sp, #52]	; 0x34
 800a33e:	e595      	b.n	8009e6c <forward_dense+0x58>
 800a340:	2300      	movs	r3, #0
 800a342:	930b      	str	r3, [sp, #44]	; 0x2c
 800a344:	460b      	mov	r3, r1
 800a346:	e591      	b.n	8009e6c <forward_dense+0x58>
 800a348:	46c3      	mov	fp, r8
 800a34a:	e5ba      	b.n	8009ec2 <forward_dense+0xae>
 800a34c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a350:	e5b7      	b.n	8009ec2 <forward_dense+0xae>
 800a352:	2300      	movs	r3, #0
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	deff      	udf	#255	; 0xff
 800a358:	2300      	movs	r3, #0
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	deff      	udf	#255	; 0xff
 800a35e:	bf00      	nop

0800a360 <_array_handle_get_as_float>:
 800a360:	b508      	push	{r3, lr}
 800a362:	4b34      	ldr	r3, [pc, #208]	; (800a434 <_array_handle_get_as_float+0xd4>)
 800a364:	4299      	cmp	r1, r3
 800a366:	d058      	beq.n	800a41a <_array_handle_get_as_float+0xba>
 800a368:	dc22      	bgt.n	800a3b0 <_array_handle_get_as_float+0x50>
 800a36a:	4b33      	ldr	r3, [pc, #204]	; (800a438 <_array_handle_get_as_float+0xd8>)
 800a36c:	4299      	cmp	r1, r3
 800a36e:	d05b      	beq.n	800a428 <_array_handle_get_as_float+0xc8>
 800a370:	dd10      	ble.n	800a394 <_array_handle_get_as_float+0x34>
 800a372:	4b32      	ldr	r3, [pc, #200]	; (800a43c <_array_handle_get_as_float+0xdc>)
 800a374:	4299      	cmp	r1, r3
 800a376:	d035      	beq.n	800a3e4 <_array_handle_get_as_float+0x84>
 800a378:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800a37c:	4299      	cmp	r1, r3
 800a37e:	d12e      	bne.n	800a3de <_array_handle_get_as_float+0x7e>
 800a380:	7803      	ldrb	r3, [r0, #0]
 800a382:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800a440 <_array_handle_get_as_float+0xe0>
 800a386:	2b00      	cmp	r3, #0
 800a388:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a38c:	bf08      	it	eq
 800a38e:	eeb0 0a67 	vmoveq.f32	s0, s15
 800a392:	bd08      	pop	{r3, pc}
 800a394:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800a398:	4299      	cmp	r1, r3
 800a39a:	d02a      	beq.n	800a3f2 <_array_handle_get_as_float+0x92>
 800a39c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d11c      	bne.n	800a3de <_array_handle_get_as_float+0x7e>
 800a3a4:	8803      	ldrh	r3, [r0, #0]
 800a3a6:	ee00 3a10 	vmov	s0, r3
 800a3aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a3ae:	bd08      	pop	{r3, pc}
 800a3b0:	4b24      	ldr	r3, [pc, #144]	; (800a444 <_array_handle_get_as_float+0xe4>)
 800a3b2:	4299      	cmp	r1, r3
 800a3b4:	d023      	beq.n	800a3fe <_array_handle_get_as_float+0x9e>
 800a3b6:	dd05      	ble.n	800a3c4 <_array_handle_get_as_float+0x64>
 800a3b8:	4b23      	ldr	r3, [pc, #140]	; (800a448 <_array_handle_get_as_float+0xe8>)
 800a3ba:	4299      	cmp	r1, r3
 800a3bc:	d10f      	bne.n	800a3de <_array_handle_get_as_float+0x7e>
 800a3be:	ed90 0a00 	vldr	s0, [r0]
 800a3c2:	bd08      	pop	{r3, pc}
 800a3c4:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800a3c8:	4299      	cmp	r1, r3
 800a3ca:	d01f      	beq.n	800a40c <_array_handle_get_as_float+0xac>
 800a3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	d104      	bne.n	800a3de <_array_handle_get_as_float+0x7e>
 800a3d4:	ed90 0a00 	vldr	s0, [r0]
 800a3d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a3dc:	bd08      	pop	{r3, pc}
 800a3de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a440 <_array_handle_get_as_float+0xe0>
 800a3e2:	bd08      	pop	{r3, pc}
 800a3e4:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a3e8:	f7f6 fcde 	bl	8000da8 <__aeabi_ul2f>
 800a3ec:	ee00 0a10 	vmov	s0, r0
 800a3f0:	bd08      	pop	{r3, pc}
 800a3f2:	7803      	ldrb	r3, [r0, #0]
 800a3f4:	ee00 3a10 	vmov	s0, r3
 800a3f8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a3fc:	bd08      	pop	{r3, pc}
 800a3fe:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a402:	f7f6 fcd9 	bl	8000db8 <__aeabi_l2f>
 800a406:	ee00 0a10 	vmov	s0, r0
 800a40a:	bd08      	pop	{r3, pc}
 800a40c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a410:	ee00 3a10 	vmov	s0, r3
 800a414:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a418:	bd08      	pop	{r3, pc}
 800a41a:	f990 3000 	ldrsb.w	r3, [r0]
 800a41e:	ee00 3a10 	vmov	s0, r3
 800a422:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800a426:	bd08      	pop	{r3, pc}
 800a428:	ed90 0a00 	vldr	s0, [r0]
 800a42c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800a430:	bd08      	pop	{r3, pc}
 800a432:	bf00      	nop
 800a434:	00840440 	.word	0x00840440
 800a438:	00041040 	.word	0x00041040
 800a43c:	00042040 	.word	0x00042040
 800a440:	00000000 	.word	0x00000000
 800a444:	00842040 	.word	0x00842040
 800a448:	01821040 	.word	0x01821040

0800a44c <forward_cast>:
 800a44c:	6983      	ldr	r3, [r0, #24]
 800a44e:	881a      	ldrh	r2, [r3, #0]
 800a450:	2a00      	cmp	r2, #0
 800a452:	f000 815c 	beq.w	800a70e <forward_cast+0x2c2>
 800a456:	6859      	ldr	r1, [r3, #4]
 800a458:	684b      	ldr	r3, [r1, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 81bb 	beq.w	800a7d6 <forward_cast+0x38a>
 800a460:	2a01      	cmp	r2, #1
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 8722 	beq.w	800e2ac <forward_cast+0x3e60>
 800a468:	690a      	ldr	r2, [r1, #16]
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	f003 8721 	beq.w	800e2b2 <forward_cast+0x3e66>
 800a470:	6812      	ldr	r2, [r2, #0]
 800a472:	b103      	cbz	r3, 800a476 <forward_cast+0x2a>
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	2a00      	cmp	r2, #0
 800a478:	f003 871b 	beq.w	800e2b2 <forward_cast+0x3e66>
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	ed2d 8b02 	vpush	{d8}
 800a484:	6996      	ldr	r6, [r2, #24]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	69c7      	ldr	r7, [r0, #28]
 800a48a:	6859      	ldr	r1, [r3, #4]
 800a48c:	68dd      	ldr	r5, [r3, #12]
 800a48e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 800a768 <forward_cast+0x31c>
 800a492:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 800a496:	4610      	mov	r0, r2
 800a498:	6832      	ldr	r2, [r6, #0]
 800a49a:	b083      	sub	sp, #12
 800a49c:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 800a4a0:	f004 fb1a 	bl	800ead8 <ai_array_get_byte_size>
 800a4a4:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 800a4a8:	f3cb 2383 	ubfx	r3, fp, #10, #4
 800a4ac:	4547      	cmp	r7, r8
 800a4ae:	68f6      	ldr	r6, [r6, #12]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	eb05 0a00 	add.w	sl, r5, r0
 800a4b6:	f3c4 2983 	ubfx	r9, r4, #10, #4
 800a4ba:	f000 81e2 	beq.w	800a882 <forward_cast+0x436>
 800a4be:	f300 8083 	bgt.w	800a5c8 <forward_cast+0x17c>
 800a4c2:	4ba2      	ldr	r3, [pc, #648]	; (800a74c <forward_cast+0x300>)
 800a4c4:	429f      	cmp	r7, r3
 800a4c6:	f000 8227 	beq.w	800a918 <forward_cast+0x4cc>
 800a4ca:	dd2c      	ble.n	800a526 <forward_cast+0xda>
 800a4cc:	4aa0      	ldr	r2, [pc, #640]	; (800a750 <forward_cast+0x304>)
 800a4ce:	4297      	cmp	r7, r2
 800a4d0:	d124      	bne.n	800a51c <forward_cast+0xd0>
 800a4d2:	45c3      	cmp	fp, r8
 800a4d4:	f001 8055 	beq.w	800b582 <forward_cast+0x1136>
 800a4d8:	f300 85f4 	bgt.w	800b0c4 <forward_cast+0xc78>
 800a4dc:	459b      	cmp	fp, r3
 800a4de:	f001 85aa 	beq.w	800c036 <forward_cast+0x1bea>
 800a4e2:	f300 85d5 	bgt.w	800b090 <forward_cast+0xc44>
 800a4e6:	4b9b      	ldr	r3, [pc, #620]	; (800a754 <forward_cast+0x308>)
 800a4e8:	459b      	cmp	fp, r3
 800a4ea:	f002 825c 	beq.w	800c9a6 <forward_cast+0x255a>
 800a4ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4f2:	459b      	cmp	fp, r3
 800a4f4:	d112      	bne.n	800a51c <forward_cast+0xd0>
 800a4f6:	4555      	cmp	r5, sl
 800a4f8:	d210      	bcs.n	800a51c <forward_cast+0xd0>
 800a4fa:	9f00      	ldr	r7, [sp, #0]
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	4621      	mov	r1, r4
 800a500:	f7ff ff2e 	bl	800a360 <_array_handle_get_as_float>
 800a504:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50c:	444d      	add	r5, r9
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	45aa      	cmp	sl, r5
 800a516:	8033      	strh	r3, [r6, #0]
 800a518:	443e      	add	r6, r7
 800a51a:	d8ef      	bhi.n	800a4fc <forward_cast+0xb0>
 800a51c:	b003      	add	sp, #12
 800a51e:	ecbd 8b02 	vpop	{d8}
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a526:	4a8b      	ldr	r2, [pc, #556]	; (800a754 <forward_cast+0x308>)
 800a528:	4297      	cmp	r7, r2
 800a52a:	f000 80f2 	beq.w	800a712 <forward_cast+0x2c6>
 800a52e:	498a      	ldr	r1, [pc, #552]	; (800a758 <forward_cast+0x30c>)
 800a530:	428f      	cmp	r7, r1
 800a532:	d1f3      	bne.n	800a51c <forward_cast+0xd0>
 800a534:	45c3      	cmp	fp, r8
 800a536:	f000 8780 	beq.w	800b43a <forward_cast+0xfee>
 800a53a:	f300 86e7 	bgt.w	800b30c <forward_cast+0xec0>
 800a53e:	459b      	cmp	fp, r3
 800a540:	f001 8784 	beq.w	800c44c <forward_cast+0x2000>
 800a544:	4f81      	ldr	r7, [pc, #516]	; (800a74c <forward_cast+0x300>)
 800a546:	45bb      	cmp	fp, r7
 800a548:	f300 8554 	bgt.w	800aff4 <forward_cast+0xba8>
 800a54c:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800a754 <forward_cast+0x308>
 800a550:	45c3      	cmp	fp, r8
 800a552:	f001 872d 	beq.w	800c3b0 <forward_cast+0x1f64>
 800a556:	4b80      	ldr	r3, [pc, #512]	; (800a758 <forward_cast+0x30c>)
 800a558:	459b      	cmp	fp, r3
 800a55a:	d1df      	bne.n	800a51c <forward_cast+0xd0>
 800a55c:	4555      	cmp	r5, sl
 800a55e:	d2dd      	bcs.n	800a51c <forward_cast+0xd0>
 800a560:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800a770 <forward_cast+0x324>
 800a564:	4b7d      	ldr	r3, [pc, #500]	; (800a75c <forward_cast+0x310>)
 800a566:	4a7e      	ldr	r2, [pc, #504]	; (800a760 <forward_cast+0x314>)
 800a568:	e019      	b.n	800a59e <forward_cast+0x152>
 800a56a:	42bc      	cmp	r4, r7
 800a56c:	f003 842b 	beq.w	800ddc6 <forward_cast+0x397a>
 800a570:	f341 80c0 	ble.w	800b6f4 <forward_cast+0x12a8>
 800a574:	497b      	ldr	r1, [pc, #492]	; (800a764 <forward_cast+0x318>)
 800a576:	428c      	cmp	r4, r1
 800a578:	f003 83ef 	beq.w	800dd5a <forward_cast+0x390e>
 800a57c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a580:	428c      	cmp	r4, r1
 800a582:	f041 83a5 	bne.w	800bcd0 <forward_cast+0x1884>
 800a586:	7828      	ldrb	r0, [r5, #0]
 800a588:	3800      	subs	r0, #0
 800a58a:	bf18      	it	ne
 800a58c:	2001      	movne	r0, #1
 800a58e:	f380 0010 	usat	r0, #16, r0
 800a592:	9900      	ldr	r1, [sp, #0]
 800a594:	8030      	strh	r0, [r6, #0]
 800a596:	444d      	add	r5, r9
 800a598:	45aa      	cmp	sl, r5
 800a59a:	440e      	add	r6, r1
 800a59c:	d9be      	bls.n	800a51c <forward_cast+0xd0>
 800a59e:	4972      	ldr	r1, [pc, #456]	; (800a768 <forward_cast+0x31c>)
 800a5a0:	428c      	cmp	r4, r1
 800a5a2:	f003 82df 	beq.w	800db64 <forward_cast+0x3718>
 800a5a6:	dde0      	ble.n	800a56a <forward_cast+0x11e>
 800a5a8:	4970      	ldr	r1, [pc, #448]	; (800a76c <forward_cast+0x320>)
 800a5aa:	428c      	cmp	r4, r1
 800a5ac:	f002 87b0 	beq.w	800d510 <forward_cast+0x30c4>
 800a5b0:	f341 82c5 	ble.w	800bb3e <forward_cast+0x16f2>
 800a5b4:	455c      	cmp	r4, fp
 800a5b6:	f041 838b 	bne.w	800bcd0 <forward_cast+0x1884>
 800a5ba:	edd5 7a00 	vldr	s15, [r5]
 800a5be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5c2:	ee17 0a90 	vmov	r0, s15
 800a5c6:	e7e2      	b.n	800a58e <forward_cast+0x142>
 800a5c8:	4b65      	ldr	r3, [pc, #404]	; (800a760 <forward_cast+0x314>)
 800a5ca:	429f      	cmp	r7, r3
 800a5cc:	f000 810c 	beq.w	800a7e8 <forward_cast+0x39c>
 800a5d0:	4a67      	ldr	r2, [pc, #412]	; (800a770 <forward_cast+0x324>)
 800a5d2:	4297      	cmp	r7, r2
 800a5d4:	d149      	bne.n	800a66a <forward_cast+0x21e>
 800a5d6:	45c3      	cmp	fp, r8
 800a5d8:	f000 8765 	beq.w	800b4a6 <forward_cast+0x105a>
 800a5dc:	f300 82cc 	bgt.w	800ab78 <forward_cast+0x72c>
 800a5e0:	4a5a      	ldr	r2, [pc, #360]	; (800a74c <forward_cast+0x300>)
 800a5e2:	4593      	cmp	fp, r2
 800a5e4:	f001 847e 	beq.w	800bee4 <forward_cast+0x1a98>
 800a5e8:	f300 82b0 	bgt.w	800ab4c <forward_cast+0x700>
 800a5ec:	4b59      	ldr	r3, [pc, #356]	; (800a754 <forward_cast+0x308>)
 800a5ee:	459b      	cmp	fp, r3
 800a5f0:	f002 8344 	beq.w	800cc7c <forward_cast+0x2830>
 800a5f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5f8:	459b      	cmp	fp, r3
 800a5fa:	d18f      	bne.n	800a51c <forward_cast+0xd0>
 800a5fc:	4555      	cmp	r5, sl
 800a5fe:	d28d      	bcs.n	800a51c <forward_cast+0xd0>
 800a600:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a770 <forward_cast+0x324>
 800a604:	4f55      	ldr	r7, [pc, #340]	; (800a75c <forward_cast+0x310>)
 800a606:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a760 <forward_cast+0x314>
 800a60a:	4b50      	ldr	r3, [pc, #320]	; (800a74c <forward_cast+0x300>)
 800a60c:	4a55      	ldr	r2, [pc, #340]	; (800a764 <forward_cast+0x318>)
 800a60e:	e016      	b.n	800a63e <forward_cast+0x1f2>
 800a610:	429c      	cmp	r4, r3
 800a612:	f002 8541 	beq.w	800d098 <forward_cast+0x2c4c>
 800a616:	f341 8189 	ble.w	800b92c <forward_cast+0x14e0>
 800a61a:	4294      	cmp	r4, r2
 800a61c:	f003 8254 	beq.w	800dac8 <forward_cast+0x367c>
 800a620:	494b      	ldr	r1, [pc, #300]	; (800a750 <forward_cast+0x304>)
 800a622:	428c      	cmp	r4, r1
 800a624:	f041 836f 	bne.w	800bd06 <forward_cast+0x18ba>
 800a628:	7829      	ldrb	r1, [r5, #0]
 800a62a:	3900      	subs	r1, #0
 800a62c:	bf18      	it	ne
 800a62e:	2101      	movne	r1, #1
 800a630:	8031      	strh	r1, [r6, #0]
 800a632:	444d      	add	r5, r9
 800a634:	9900      	ldr	r1, [sp, #0]
 800a636:	45aa      	cmp	sl, r5
 800a638:	440e      	add	r6, r1
 800a63a:	f67f af6f 	bls.w	800a51c <forward_cast+0xd0>
 800a63e:	494a      	ldr	r1, [pc, #296]	; (800a768 <forward_cast+0x31c>)
 800a640:	428c      	cmp	r4, r1
 800a642:	f002 86a5 	beq.w	800d390 <forward_cast+0x2f44>
 800a646:	dde3      	ble.n	800a610 <forward_cast+0x1c4>
 800a648:	4948      	ldr	r1, [pc, #288]	; (800a76c <forward_cast+0x320>)
 800a64a:	428c      	cmp	r4, r1
 800a64c:	f002 876e 	beq.w	800d52c <forward_cast+0x30e0>
 800a650:	f341 8104 	ble.w	800b85c <forward_cast+0x1410>
 800a654:	4544      	cmp	r4, r8
 800a656:	f041 8356 	bne.w	800bd06 <forward_cast+0x18ba>
 800a65a:	edd5 7a00 	vldr	s15, [r5]
 800a65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a662:	ee17 1a90 	vmov	r1, s15
 800a666:	b289      	uxth	r1, r1
 800a668:	e7e2      	b.n	800a630 <forward_cast+0x1e4>
 800a66a:	493c      	ldr	r1, [pc, #240]	; (800a75c <forward_cast+0x310>)
 800a66c:	428f      	cmp	r7, r1
 800a66e:	f47f af55 	bne.w	800a51c <forward_cast+0xd0>
 800a672:	45c3      	cmp	fp, r8
 800a674:	f000 874d 	beq.w	800b512 <forward_cast+0x10c6>
 800a678:	f300 8546 	bgt.w	800b108 <forward_cast+0xcbc>
 800a67c:	4b33      	ldr	r3, [pc, #204]	; (800a74c <forward_cast+0x300>)
 800a67e:	459b      	cmp	fp, r3
 800a680:	f001 8645 	beq.w	800c30e <forward_cast+0x1ec2>
 800a684:	f300 8227 	bgt.w	800aad6 <forward_cast+0x68a>
 800a688:	4f32      	ldr	r7, [pc, #200]	; (800a754 <forward_cast+0x308>)
 800a68a:	45bb      	cmp	fp, r7
 800a68c:	f001 85dd 	beq.w	800c24a <forward_cast+0x1dfe>
 800a690:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800a694:	459b      	cmp	fp, r3
 800a696:	f47f af41 	bne.w	800a51c <forward_cast+0xd0>
 800a69a:	4555      	cmp	r5, sl
 800a69c:	f4bf af3e 	bcs.w	800a51c <forward_cast+0xd0>
 800a6a0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800a770 <forward_cast+0x324>
 800a6a4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800a75c <forward_cast+0x310>
 800a6a8:	4b2d      	ldr	r3, [pc, #180]	; (800a760 <forward_cast+0x314>)
 800a6aa:	4a28      	ldr	r2, [pc, #160]	; (800a74c <forward_cast+0x300>)
 800a6ac:	e01a      	b.n	800a6e4 <forward_cast+0x298>
 800a6ae:	4294      	cmp	r4, r2
 800a6b0:	f002 85a7 	beq.w	800d202 <forward_cast+0x2db6>
 800a6b4:	f341 80c8 	ble.w	800b848 <forward_cast+0x13fc>
 800a6b8:	492a      	ldr	r1, [pc, #168]	; (800a764 <forward_cast+0x318>)
 800a6ba:	428c      	cmp	r4, r1
 800a6bc:	f002 8593 	beq.w	800d1e6 <forward_cast+0x2d9a>
 800a6c0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a6c4:	428c      	cmp	r4, r1
 800a6c6:	f041 82cf 	bne.w	800bc68 <forward_cast+0x181c>
 800a6ca:	7828      	ldrb	r0, [r5, #0]
 800a6cc:	3800      	subs	r0, #0
 800a6ce:	bf18      	it	ne
 800a6d0:	2001      	movne	r0, #1
 800a6d2:	f300 000f 	ssat	r0, #16, r0
 800a6d6:	9900      	ldr	r1, [sp, #0]
 800a6d8:	8030      	strh	r0, [r6, #0]
 800a6da:	444d      	add	r5, r9
 800a6dc:	45aa      	cmp	sl, r5
 800a6de:	440e      	add	r6, r1
 800a6e0:	f67f af1c 	bls.w	800a51c <forward_cast+0xd0>
 800a6e4:	4920      	ldr	r1, [pc, #128]	; (800a768 <forward_cast+0x31c>)
 800a6e6:	428c      	cmp	r4, r1
 800a6e8:	f002 855d 	beq.w	800d1a6 <forward_cast+0x2d5a>
 800a6ec:	dddf      	ble.n	800a6ae <forward_cast+0x262>
 800a6ee:	491f      	ldr	r1, [pc, #124]	; (800a76c <forward_cast+0x320>)
 800a6f0:	428c      	cmp	r4, r1
 800a6f2:	f003 84c0 	beq.w	800e076 <forward_cast+0x3c2a>
 800a6f6:	f341 8097 	ble.w	800b828 <forward_cast+0x13dc>
 800a6fa:	4544      	cmp	r4, r8
 800a6fc:	f041 82b4 	bne.w	800bc68 <forward_cast+0x181c>
 800a700:	edd5 7a00 	vldr	s15, [r5]
 800a704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a708:	ee17 0a90 	vmov	r0, s15
 800a70c:	e7e1      	b.n	800a6d2 <forward_cast+0x286>
 800a70e:	6853      	ldr	r3, [r2, #4]
 800a710:	deff      	udf	#255	; 0xff
 800a712:	45c3      	cmp	fp, r8
 800a714:	f001 854b 	beq.w	800c1ae <forward_cast+0x1d62>
 800a718:	f300 8448 	bgt.w	800afac <forward_cast+0xb60>
 800a71c:	459b      	cmp	fp, r3
 800a71e:	f001 84f5 	beq.w	800c10c <forward_cast+0x1cc0>
 800a722:	f300 842a 	bgt.w	800af7a <forward_cast+0xb2e>
 800a726:	4f0b      	ldr	r7, [pc, #44]	; (800a754 <forward_cast+0x308>)
 800a728:	45bb      	cmp	fp, r7
 800a72a:	f001 84da 	beq.w	800c0e2 <forward_cast+0x1c96>
 800a72e:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <forward_cast+0x30c>)
 800a730:	459b      	cmp	fp, r3
 800a732:	f47f aef3 	bne.w	800a51c <forward_cast+0xd0>
 800a736:	4555      	cmp	r5, sl
 800a738:	f4bf aef0 	bcs.w	800a51c <forward_cast+0xd0>
 800a73c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800a770 <forward_cast+0x324>
 800a740:	f8df b018 	ldr.w	fp, [pc, #24]	; 800a75c <forward_cast+0x310>
 800a744:	4b06      	ldr	r3, [pc, #24]	; (800a760 <forward_cast+0x314>)
 800a746:	4a01      	ldr	r2, [pc, #4]	; (800a74c <forward_cast+0x300>)
 800a748:	e030      	b.n	800a7ac <forward_cast+0x360>
 800a74a:	bf00      	nop
 800a74c:	00041040 	.word	0x00041040
 800a750:	00060440 	.word	0x00060440
 800a754:	00040440 	.word	0x00040440
 800a758:	00040840 	.word	0x00040840
 800a75c:	00840840 	.word	0x00840840
 800a760:	00841040 	.word	0x00841040
 800a764:	00042040 	.word	0x00042040
 800a768:	00840440 	.word	0x00840440
 800a76c:	00842040 	.word	0x00842040
 800a770:	01821040 	.word	0x01821040
 800a774:	4294      	cmp	r4, r2
 800a776:	f003 80bf 	beq.w	800d8f8 <forward_cast+0x34ac>
 800a77a:	f340 8792 	ble.w	800b6a2 <forward_cast+0x1256>
 800a77e:	49b2      	ldr	r1, [pc, #712]	; (800aa48 <forward_cast+0x5fc>)
 800a780:	428c      	cmp	r4, r1
 800a782:	f003 80ab 	beq.w	800d8dc <forward_cast+0x3490>
 800a786:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a78a:	428c      	cmp	r4, r1
 800a78c:	f041 8297 	bne.w	800bcbe <forward_cast+0x1872>
 800a790:	7828      	ldrb	r0, [r5, #0]
 800a792:	3800      	subs	r0, #0
 800a794:	bf18      	it	ne
 800a796:	2001      	movne	r0, #1
 800a798:	f380 0008 	usat	r0, #8, r0
 800a79c:	9900      	ldr	r1, [sp, #0]
 800a79e:	444d      	add	r5, r9
 800a7a0:	b2c0      	uxtb	r0, r0
 800a7a2:	45aa      	cmp	sl, r5
 800a7a4:	8030      	strh	r0, [r6, #0]
 800a7a6:	440e      	add	r6, r1
 800a7a8:	f67f aeb8 	bls.w	800a51c <forward_cast+0xd0>
 800a7ac:	49a7      	ldr	r1, [pc, #668]	; (800aa4c <forward_cast+0x600>)
 800a7ae:	428c      	cmp	r4, r1
 800a7b0:	f003 812a 	beq.w	800da08 <forward_cast+0x35bc>
 800a7b4:	ddde      	ble.n	800a774 <forward_cast+0x328>
 800a7b6:	49a6      	ldr	r1, [pc, #664]	; (800aa50 <forward_cast+0x604>)
 800a7b8:	428c      	cmp	r4, r1
 800a7ba:	f002 86f6 	beq.w	800d5aa <forward_cast+0x315e>
 800a7be:	f341 80ec 	ble.w	800b99a <forward_cast+0x154e>
 800a7c2:	4544      	cmp	r4, r8
 800a7c4:	f041 827b 	bne.w	800bcbe <forward_cast+0x1872>
 800a7c8:	edd5 7a00 	vldr	s15, [r5]
 800a7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7d0:	ee17 0a90 	vmov	r0, s15
 800a7d4:	e7e0      	b.n	800a798 <forward_cast+0x34c>
 800a7d6:	2a01      	cmp	r2, #1
 800a7d8:	f003 8568 	beq.w	800e2ac <forward_cast+0x3e60>
 800a7dc:	690a      	ldr	r2, [r1, #16]
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	f003 8567 	beq.w	800e2b2 <forward_cast+0x3e66>
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	e646      	b.n	800a476 <forward_cast+0x2a>
 800a7e8:	45c3      	cmp	fp, r8
 800a7ea:	f002 8298 	beq.w	800cd1e <forward_cast+0x28d2>
 800a7ee:	f300 82d0 	bgt.w	800ad92 <forward_cast+0x946>
 800a7f2:	4b98      	ldr	r3, [pc, #608]	; (800aa54 <forward_cast+0x608>)
 800a7f4:	459b      	cmp	fp, r3
 800a7f6:	f001 87e1 	beq.w	800c7bc <forward_cast+0x2370>
 800a7fa:	f300 81fa 	bgt.w	800abf2 <forward_cast+0x7a6>
 800a7fe:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800a802:	459b      	cmp	fp, r3
 800a804:	f001 8789 	beq.w	800c71a <forward_cast+0x22ce>
 800a808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a80c:	459b      	cmp	fp, r3
 800a80e:	f47f ae85 	bne.w	800a51c <forward_cast+0xd0>
 800a812:	4555      	cmp	r5, sl
 800a814:	f4bf ae82 	bcs.w	800a51c <forward_cast+0xd0>
 800a818:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800aa6c <forward_cast+0x620>
 800a81c:	4f8e      	ldr	r7, [pc, #568]	; (800aa58 <forward_cast+0x60c>)
 800a81e:	f8df b248 	ldr.w	fp, [pc, #584]	; 800aa68 <forward_cast+0x61c>
 800a822:	4b8c      	ldr	r3, [pc, #560]	; (800aa54 <forward_cast+0x608>)
 800a824:	4a88      	ldr	r2, [pc, #544]	; (800aa48 <forward_cast+0x5fc>)
 800a826:	e016      	b.n	800a856 <forward_cast+0x40a>
 800a828:	429c      	cmp	r4, r3
 800a82a:	f003 8252 	beq.w	800dcd2 <forward_cast+0x3886>
 800a82e:	f340 8792 	ble.w	800b756 <forward_cast+0x130a>
 800a832:	4294      	cmp	r4, r2
 800a834:	f003 81fa 	beq.w	800dc2c <forward_cast+0x37e0>
 800a838:	4988      	ldr	r1, [pc, #544]	; (800aa5c <forward_cast+0x610>)
 800a83a:	428c      	cmp	r4, r1
 800a83c:	f041 824e 	bne.w	800bcdc <forward_cast+0x1890>
 800a840:	7829      	ldrb	r1, [r5, #0]
 800a842:	3900      	subs	r1, #0
 800a844:	bf18      	it	ne
 800a846:	2101      	movne	r1, #1
 800a848:	8031      	strh	r1, [r6, #0]
 800a84a:	444d      	add	r5, r9
 800a84c:	9900      	ldr	r1, [sp, #0]
 800a84e:	45aa      	cmp	sl, r5
 800a850:	440e      	add	r6, r1
 800a852:	f67f ae63 	bls.w	800a51c <forward_cast+0xd0>
 800a856:	497d      	ldr	r1, [pc, #500]	; (800aa4c <forward_cast+0x600>)
 800a858:	428c      	cmp	r4, r1
 800a85a:	f002 8771 	beq.w	800d740 <forward_cast+0x32f4>
 800a85e:	dde3      	ble.n	800a828 <forward_cast+0x3dc>
 800a860:	497b      	ldr	r1, [pc, #492]	; (800aa50 <forward_cast+0x604>)
 800a862:	428c      	cmp	r4, r1
 800a864:	f003 8449 	beq.w	800e0fa <forward_cast+0x3cae>
 800a868:	f341 8158 	ble.w	800bb1c <forward_cast+0x16d0>
 800a86c:	4544      	cmp	r4, r8
 800a86e:	f041 8235 	bne.w	800bcdc <forward_cast+0x1890>
 800a872:	edd5 7a00 	vldr	s15, [r5]
 800a876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a87a:	ee17 1a90 	vmov	r1, s15
 800a87e:	b289      	uxth	r1, r1
 800a880:	e7e2      	b.n	800a848 <forward_cast+0x3fc>
 800a882:	45bb      	cmp	fp, r7
 800a884:	f001 82de 	beq.w	800be44 <forward_cast+0x19f8>
 800a888:	f300 80ce 	bgt.w	800aa28 <forward_cast+0x5dc>
 800a88c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800aa54 <forward_cast+0x608>
 800a890:	45c3      	cmp	fp, r8
 800a892:	f001 868f 	beq.w	800c5b4 <forward_cast+0x2168>
 800a896:	f300 808a 	bgt.w	800a9ae <forward_cast+0x562>
 800a89a:	4a71      	ldr	r2, [pc, #452]	; (800aa60 <forward_cast+0x614>)
 800a89c:	4593      	cmp	fp, r2
 800a89e:	f001 8626 	beq.w	800c4ee <forward_cast+0x20a2>
 800a8a2:	4b70      	ldr	r3, [pc, #448]	; (800aa64 <forward_cast+0x618>)
 800a8a4:	459b      	cmp	fp, r3
 800a8a6:	f47f ae39 	bne.w	800a51c <forward_cast+0xd0>
 800a8aa:	4555      	cmp	r5, sl
 800a8ac:	f4bf ae36 	bcs.w	800a51c <forward_cast+0xd0>
 800a8b0:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800aa6c <forward_cast+0x620>
 800a8b4:	4b68      	ldr	r3, [pc, #416]	; (800aa58 <forward_cast+0x60c>)
 800a8b6:	e01b      	b.n	800a8f0 <forward_cast+0x4a4>
 800a8b8:	4544      	cmp	r4, r8
 800a8ba:	f003 81fd 	beq.w	800dcb8 <forward_cast+0x386c>
 800a8be:	f340 8763 	ble.w	800b788 <forward_cast+0x133c>
 800a8c2:	4961      	ldr	r1, [pc, #388]	; (800aa48 <forward_cast+0x5fc>)
 800a8c4:	428c      	cmp	r4, r1
 800a8c6:	f003 81e9 	beq.w	800dc9c <forward_cast+0x3850>
 800a8ca:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800a8ce:	428c      	cmp	r4, r1
 800a8d0:	f041 8213 	bne.w	800bcfa <forward_cast+0x18ae>
 800a8d4:	7828      	ldrb	r0, [r5, #0]
 800a8d6:	3800      	subs	r0, #0
 800a8d8:	bf18      	it	ne
 800a8da:	2001      	movne	r0, #1
 800a8dc:	f300 0007 	ssat	r0, #8, r0
 800a8e0:	9900      	ldr	r1, [sp, #0]
 800a8e2:	444d      	add	r5, r9
 800a8e4:	b240      	sxtb	r0, r0
 800a8e6:	45aa      	cmp	sl, r5
 800a8e8:	8030      	strh	r0, [r6, #0]
 800a8ea:	440e      	add	r6, r1
 800a8ec:	f67f ae16 	bls.w	800a51c <forward_cast+0xd0>
 800a8f0:	42bc      	cmp	r4, r7
 800a8f2:	f002 875c 	beq.w	800d7ae <forward_cast+0x3362>
 800a8f6:	dddf      	ble.n	800a8b8 <forward_cast+0x46c>
 800a8f8:	4955      	ldr	r1, [pc, #340]	; (800aa50 <forward_cast+0x604>)
 800a8fa:	428c      	cmp	r4, r1
 800a8fc:	f003 82e0 	beq.w	800dec0 <forward_cast+0x3a74>
 800a900:	f341 8171 	ble.w	800bbe6 <forward_cast+0x179a>
 800a904:	455c      	cmp	r4, fp
 800a906:	f041 81f8 	bne.w	800bcfa <forward_cast+0x18ae>
 800a90a:	edd5 7a00 	vldr	s15, [r5]
 800a90e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a912:	ee17 0a90 	vmov	r0, s15
 800a916:	e7e1      	b.n	800a8dc <forward_cast+0x490>
 800a918:	45c3      	cmp	fp, r8
 800a91a:	f001 832b 	beq.w	800bf74 <forward_cast+0x1b28>
 800a91e:	f300 81e6 	bgt.w	800acee <forward_cast+0x8a2>
 800a922:	45bb      	cmp	fp, r7
 800a924:	f001 86ae 	beq.w	800c684 <forward_cast+0x2238>
 800a928:	f300 81a2 	bgt.w	800ac70 <forward_cast+0x824>
 800a92c:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <forward_cast+0x614>)
 800a92e:	459b      	cmp	fp, r3
 800a930:	f001 8657 	beq.w	800c5e2 <forward_cast+0x2196>
 800a934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a938:	459b      	cmp	fp, r3
 800a93a:	f47f adef 	bne.w	800a51c <forward_cast+0xd0>
 800a93e:	4555      	cmp	r5, sl
 800a940:	f4bf adec 	bcs.w	800a51c <forward_cast+0xd0>
 800a944:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800aa6c <forward_cast+0x620>
 800a948:	4f43      	ldr	r7, [pc, #268]	; (800aa58 <forward_cast+0x60c>)
 800a94a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800aa68 <forward_cast+0x61c>
 800a94e:	4b41      	ldr	r3, [pc, #260]	; (800aa54 <forward_cast+0x608>)
 800a950:	4a3d      	ldr	r2, [pc, #244]	; (800aa48 <forward_cast+0x5fc>)
 800a952:	e016      	b.n	800a982 <forward_cast+0x536>
 800a954:	429c      	cmp	r4, r3
 800a956:	f002 84fa 	beq.w	800d34e <forward_cast+0x2f02>
 800a95a:	f341 8046 	ble.w	800b9ea <forward_cast+0x159e>
 800a95e:	4294      	cmp	r4, r2
 800a960:	f002 83c3 	beq.w	800d0ea <forward_cast+0x2c9e>
 800a964:	493d      	ldr	r1, [pc, #244]	; (800aa5c <forward_cast+0x610>)
 800a966:	428c      	cmp	r4, r1
 800a968:	f041 8181 	bne.w	800bc6e <forward_cast+0x1822>
 800a96c:	7829      	ldrb	r1, [r5, #0]
 800a96e:	3900      	subs	r1, #0
 800a970:	bf18      	it	ne
 800a972:	2101      	movne	r1, #1
 800a974:	8031      	strh	r1, [r6, #0]
 800a976:	444d      	add	r5, r9
 800a978:	9900      	ldr	r1, [sp, #0]
 800a97a:	45aa      	cmp	sl, r5
 800a97c:	440e      	add	r6, r1
 800a97e:	f67f adcd 	bls.w	800a51c <forward_cast+0xd0>
 800a982:	4932      	ldr	r1, [pc, #200]	; (800aa4c <forward_cast+0x600>)
 800a984:	428c      	cmp	r4, r1
 800a986:	f002 8607 	beq.w	800d598 <forward_cast+0x314c>
 800a98a:	dde3      	ble.n	800a954 <forward_cast+0x508>
 800a98c:	4930      	ldr	r1, [pc, #192]	; (800aa50 <forward_cast+0x604>)
 800a98e:	428c      	cmp	r4, r1
 800a990:	f003 82a4 	beq.w	800dedc <forward_cast+0x3a90>
 800a994:	f340 87ba 	ble.w	800b90c <forward_cast+0x14c0>
 800a998:	4544      	cmp	r4, r8
 800a99a:	f041 8168 	bne.w	800bc6e <forward_cast+0x1822>
 800a99e:	edd5 7a00 	vldr	s15, [r5]
 800a9a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9a6:	ee17 1a90 	vmov	r1, s15
 800a9aa:	b289      	uxth	r1, r1
 800a9ac:	e7e2      	b.n	800a974 <forward_cast+0x528>
 800a9ae:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <forward_cast+0x610>)
 800a9b0:	459b      	cmp	fp, r3
 800a9b2:	f47f adb3 	bne.w	800a51c <forward_cast+0xd0>
 800a9b6:	4555      	cmp	r5, sl
 800a9b8:	f4bf adb0 	bcs.w	800a51c <forward_cast+0xd0>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4a29      	ldr	r2, [pc, #164]	; (800aa68 <forward_cast+0x61c>)
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	46b9      	mov	r9, r7
 800a9c6:	4637      	mov	r7, r6
 800a9c8:	460e      	mov	r6, r1
 800a9ca:	e018      	b.n	800a9fe <forward_cast+0x5b2>
 800a9cc:	4544      	cmp	r4, r8
 800a9ce:	f002 83aa 	beq.w	800d126 <forward_cast+0x2cda>
 800a9d2:	f340 878f 	ble.w	800b8f4 <forward_cast+0x14a8>
 800a9d6:	491c      	ldr	r1, [pc, #112]	; (800aa48 <forward_cast+0x5fc>)
 800a9d8:	428c      	cmp	r4, r1
 800a9da:	f002 8395 	beq.w	800d108 <forward_cast+0x2cbc>
 800a9de:	455c      	cmp	r4, fp
 800a9e0:	f041 8148 	bne.w	800bc74 <forward_cast+0x1828>
 800a9e4:	7828      	ldrb	r0, [r5, #0]
 800a9e6:	3800      	subs	r0, #0
 800a9e8:	bf18      	it	ne
 800a9ea:	2001      	movne	r0, #1
 800a9ec:	f300 0007 	ssat	r0, #8, r0
 800a9f0:	9900      	ldr	r1, [sp, #0]
 800a9f2:	55b8      	strb	r0, [r7, r6]
 800a9f4:	441d      	add	r5, r3
 800a9f6:	45aa      	cmp	sl, r5
 800a9f8:	440e      	add	r6, r1
 800a9fa:	f67f ad8f 	bls.w	800a51c <forward_cast+0xd0>
 800a9fe:	454c      	cmp	r4, r9
 800aa00:	f002 85cf 	beq.w	800d5a2 <forward_cast+0x3156>
 800aa04:	dde2      	ble.n	800a9cc <forward_cast+0x580>
 800aa06:	4912      	ldr	r1, [pc, #72]	; (800aa50 <forward_cast+0x604>)
 800aa08:	428c      	cmp	r4, r1
 800aa0a:	f002 85b6 	beq.w	800d57a <forward_cast+0x312e>
 800aa0e:	f340 8735 	ble.w	800b87c <forward_cast+0x1430>
 800aa12:	4916      	ldr	r1, [pc, #88]	; (800aa6c <forward_cast+0x620>)
 800aa14:	428c      	cmp	r4, r1
 800aa16:	f041 812d 	bne.w	800bc74 <forward_cast+0x1828>
 800aa1a:	edd5 7a00 	vldr	s15, [r5]
 800aa1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa22:	ee17 0a90 	vmov	r0, s15
 800aa26:	e7e1      	b.n	800a9ec <forward_cast+0x5a0>
 800aa28:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800aa68 <forward_cast+0x61c>
 800aa2c:	45c3      	cmp	fp, r8
 800aa2e:	f001 876b 	beq.w	800c908 <forward_cast+0x24bc>
 800aa32:	4a0e      	ldr	r2, [pc, #56]	; (800aa6c <forward_cast+0x620>)
 800aa34:	4593      	cmp	fp, r2
 800aa36:	f040 83ac 	bne.w	800b192 <forward_cast+0xd46>
 800aa3a:	4555      	cmp	r5, sl
 800aa3c:	f4bf ad6e 	bcs.w	800a51c <forward_cast+0xd0>
 800aa40:	4b01      	ldr	r3, [pc, #4]	; (800aa48 <forward_cast+0x5fc>)
 800aa42:	4a06      	ldr	r2, [pc, #24]	; (800aa5c <forward_cast+0x610>)
 800aa44:	e033      	b.n	800aaae <forward_cast+0x662>
 800aa46:	bf00      	nop
 800aa48:	00042040 	.word	0x00042040
 800aa4c:	00840440 	.word	0x00840440
 800aa50:	00842040 	.word	0x00842040
 800aa54:	00041040 	.word	0x00041040
 800aa58:	00840840 	.word	0x00840840
 800aa5c:	00060440 	.word	0x00060440
 800aa60:	00040440 	.word	0x00040440
 800aa64:	00040840 	.word	0x00040840
 800aa68:	00841040 	.word	0x00841040
 800aa6c:	01821040 	.word	0x01821040
 800aa70:	49a6      	ldr	r1, [pc, #664]	; (800ad0c <forward_cast+0x8c0>)
 800aa72:	428c      	cmp	r4, r1
 800aa74:	f002 84c7 	beq.w	800d406 <forward_cast+0x2fba>
 800aa78:	f340 85ee 	ble.w	800b658 <forward_cast+0x120c>
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	f002 84b4 	beq.w	800d3ea <forward_cast+0x2f9e>
 800aa82:	4294      	cmp	r4, r2
 800aa84:	f041 8109 	bne.w	800bc9a <forward_cast+0x184e>
 800aa88:	7828      	ldrb	r0, [r5, #0]
 800aa8a:	3800      	subs	r0, #0
 800aa8c:	bf18      	it	ne
 800aa8e:	2001      	movne	r0, #1
 800aa90:	f300 0007 	ssat	r0, #8, r0
 800aa94:	b240      	sxtb	r0, r0
 800aa96:	ee07 0a90 	vmov	s15, r0
 800aa9a:	9900      	ldr	r1, [sp, #0]
 800aa9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaa0:	444d      	add	r5, r9
 800aaa2:	45aa      	cmp	sl, r5
 800aaa4:	edc6 7a00 	vstr	s15, [r6]
 800aaa8:	440e      	add	r6, r1
 800aaaa:	f67f ad37 	bls.w	800a51c <forward_cast+0xd0>
 800aaae:	42bc      	cmp	r4, r7
 800aab0:	f002 8411 	beq.w	800d2d6 <forward_cast+0x2e8a>
 800aab4:	dddc      	ble.n	800aa70 <forward_cast+0x624>
 800aab6:	4996      	ldr	r1, [pc, #600]	; (800ad10 <forward_cast+0x8c4>)
 800aab8:	428c      	cmp	r4, r1
 800aaba:	f002 83f6 	beq.w	800d2aa <forward_cast+0x2e5e>
 800aabe:	f340 87fb 	ble.w	800bab8 <forward_cast+0x166c>
 800aac2:	455c      	cmp	r4, fp
 800aac4:	f041 80e9 	bne.w	800bc9a <forward_cast+0x184e>
 800aac8:	edd5 7a00 	vldr	s15, [r5]
 800aacc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aad0:	ee17 0a90 	vmov	r0, s15
 800aad4:	e7dc      	b.n	800aa90 <forward_cast+0x644>
 800aad6:	4b8f      	ldr	r3, [pc, #572]	; (800ad14 <forward_cast+0x8c8>)
 800aad8:	459b      	cmp	fp, r3
 800aada:	f47f ad1f 	bne.w	800a51c <forward_cast+0xd0>
 800aade:	4555      	cmp	r5, sl
 800aae0:	f4bf ad1c 	bcs.w	800a51c <forward_cast+0xd0>
 800aae4:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800ad10 <forward_cast+0x8c4>
 800aae8:	4b8b      	ldr	r3, [pc, #556]	; (800ad18 <forward_cast+0x8cc>)
 800aaea:	4a88      	ldr	r2, [pc, #544]	; (800ad0c <forward_cast+0x8c0>)
 800aaec:	2700      	movs	r7, #0
 800aaee:	e018      	b.n	800ab22 <forward_cast+0x6d6>
 800aaf0:	4294      	cmp	r4, r2
 800aaf2:	f003 815b 	beq.w	800ddac <forward_cast+0x3960>
 800aaf6:	f340 8607 	ble.w	800b708 <forward_cast+0x12bc>
 800aafa:	4988      	ldr	r1, [pc, #544]	; (800ad1c <forward_cast+0x8d0>)
 800aafc:	428c      	cmp	r4, r1
 800aafe:	f003 8103 	beq.w	800dd08 <forward_cast+0x38bc>
 800ab02:	455c      	cmp	r4, fp
 800ab04:	f041 80de 	bne.w	800bcc4 <forward_cast+0x1878>
 800ab08:	7828      	ldrb	r0, [r5, #0]
 800ab0a:	3800      	subs	r0, #0
 800ab0c:	bf18      	it	ne
 800ab0e:	2001      	movne	r0, #1
 800ab10:	f300 000f 	ssat	r0, #16, r0
 800ab14:	9900      	ldr	r1, [sp, #0]
 800ab16:	55f0      	strb	r0, [r6, r7]
 800ab18:	444d      	add	r5, r9
 800ab1a:	45aa      	cmp	sl, r5
 800ab1c:	440f      	add	r7, r1
 800ab1e:	f67f acfd 	bls.w	800a51c <forward_cast+0xd0>
 800ab22:	497f      	ldr	r1, [pc, #508]	; (800ad20 <forward_cast+0x8d4>)
 800ab24:	428c      	cmp	r4, r1
 800ab26:	f002 876b 	beq.w	800da00 <forward_cast+0x35b4>
 800ab2a:	dde1      	ble.n	800aaf0 <forward_cast+0x6a4>
 800ab2c:	4544      	cmp	r4, r8
 800ab2e:	f002 83a6 	beq.w	800d27e <forward_cast+0x2e32>
 800ab32:	f340 87b0 	ble.w	800ba96 <forward_cast+0x164a>
 800ab36:	497b      	ldr	r1, [pc, #492]	; (800ad24 <forward_cast+0x8d8>)
 800ab38:	428c      	cmp	r4, r1
 800ab3a:	f041 80c3 	bne.w	800bcc4 <forward_cast+0x1878>
 800ab3e:	edd5 7a00 	vldr	s15, [r5]
 800ab42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab46:	ee17 0a90 	vmov	r0, s15
 800ab4a:	e7e1      	b.n	800ab10 <forward_cast+0x6c4>
 800ab4c:	4b71      	ldr	r3, [pc, #452]	; (800ad14 <forward_cast+0x8c8>)
 800ab4e:	459b      	cmp	fp, r3
 800ab50:	f47f ace4 	bne.w	800a51c <forward_cast+0xd0>
 800ab54:	4555      	cmp	r5, sl
 800ab56:	f4bf ace1 	bcs.w	800a51c <forward_cast+0xd0>
 800ab5a:	9f00      	ldr	r7, [sp, #0]
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	4621      	mov	r1, r4
 800ab60:	f7ff fbfe 	bl	800a360 <_array_handle_get_as_float>
 800ab64:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ab68:	444d      	add	r5, r9
 800ab6a:	ee17 3a90 	vmov	r3, s15
 800ab6e:	45aa      	cmp	sl, r5
 800ab70:	7033      	strb	r3, [r6, #0]
 800ab72:	443e      	add	r6, r7
 800ab74:	d8f2      	bhi.n	800ab5c <forward_cast+0x710>
 800ab76:	e4d1      	b.n	800a51c <forward_cast+0xd0>
 800ab78:	459b      	cmp	fp, r3
 800ab7a:	f001 87e4 	beq.w	800cb46 <forward_cast+0x26fa>
 800ab7e:	45bb      	cmp	fp, r7
 800ab80:	f040 8147 	bne.w	800ae12 <forward_cast+0x9c6>
 800ab84:	4555      	cmp	r5, sl
 800ab86:	f4bf acc9 	bcs.w	800a51c <forward_cast+0xd0>
 800ab8a:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800ad28 <forward_cast+0x8dc>
 800ab8e:	4a64      	ldr	r2, [pc, #400]	; (800ad20 <forward_cast+0x8d4>)
 800ab90:	4b5f      	ldr	r3, [pc, #380]	; (800ad10 <forward_cast+0x8c4>)
 800ab92:	f8df b190 	ldr.w	fp, [pc, #400]	; 800ad24 <forward_cast+0x8d8>
 800ab96:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800ad0c <forward_cast+0x8c0>
 800ab9a:	4f60      	ldr	r7, [pc, #384]	; (800ad1c <forward_cast+0x8d0>)
 800ab9c:	e01a      	b.n	800abd4 <forward_cast+0x788>
 800ab9e:	4544      	cmp	r4, r8
 800aba0:	f002 847d 	beq.w	800d49e <forward_cast+0x3052>
 800aba4:	f340 8513 	ble.w	800b5ce <forward_cast+0x1182>
 800aba8:	42bc      	cmp	r4, r7
 800abaa:	f002 8414 	beq.w	800d3d6 <forward_cast+0x2f8a>
 800abae:	4959      	ldr	r1, [pc, #356]	; (800ad14 <forward_cast+0x8c8>)
 800abb0:	428c      	cmp	r4, r1
 800abb2:	f041 806e 	bne.w	800bc92 <forward_cast+0x1846>
 800abb6:	7829      	ldrb	r1, [r5, #0]
 800abb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800abbc:	2900      	cmp	r1, #0
 800abbe:	bf08      	it	eq
 800abc0:	eef0 7a48 	vmoveq.f32	s15, s16
 800abc4:	9900      	ldr	r1, [sp, #0]
 800abc6:	edc6 7a00 	vstr	s15, [r6]
 800abca:	444d      	add	r5, r9
 800abcc:	45aa      	cmp	sl, r5
 800abce:	440e      	add	r6, r1
 800abd0:	f67f aca4 	bls.w	800a51c <forward_cast+0xd0>
 800abd4:	4294      	cmp	r4, r2
 800abd6:	f002 819f 	beq.w	800cf18 <forward_cast+0x2acc>
 800abda:	dde0      	ble.n	800ab9e <forward_cast+0x752>
 800abdc:	429c      	cmp	r4, r3
 800abde:	f002 848d 	beq.w	800d4fc <forward_cast+0x30b0>
 800abe2:	f340 8749 	ble.w	800ba78 <forward_cast+0x162c>
 800abe6:	455c      	cmp	r4, fp
 800abe8:	f041 8053 	bne.w	800bc92 <forward_cast+0x1846>
 800abec:	edd5 7a00 	vldr	s15, [r5]
 800abf0:	e7e8      	b.n	800abc4 <forward_cast+0x778>
 800abf2:	4b48      	ldr	r3, [pc, #288]	; (800ad14 <forward_cast+0x8c8>)
 800abf4:	459b      	cmp	fp, r3
 800abf6:	f47f ac91 	bne.w	800a51c <forward_cast+0xd0>
 800abfa:	4555      	cmp	r5, sl
 800abfc:	f4bf ac8e 	bcs.w	800a51c <forward_cast+0xd0>
 800ac00:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800ad24 <forward_cast+0x8d8>
 800ac04:	f8df b124 	ldr.w	fp, [pc, #292]	; 800ad2c <forward_cast+0x8e0>
 800ac08:	4b43      	ldr	r3, [pc, #268]	; (800ad18 <forward_cast+0x8cc>)
 800ac0a:	4a40      	ldr	r2, [pc, #256]	; (800ad0c <forward_cast+0x8c0>)
 800ac0c:	2700      	movs	r7, #0
 800ac0e:	e018      	b.n	800ac42 <forward_cast+0x7f6>
 800ac10:	4294      	cmp	r4, r2
 800ac12:	f002 8324 	beq.w	800d25e <forward_cast+0x2e12>
 800ac16:	f340 86d0 	ble.w	800b9ba <forward_cast+0x156e>
 800ac1a:	4940      	ldr	r1, [pc, #256]	; (800ad1c <forward_cast+0x8d0>)
 800ac1c:	428c      	cmp	r4, r1
 800ac1e:	f002 830e 	beq.w	800d23e <forward_cast+0x2df2>
 800ac22:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ac26:	428c      	cmp	r4, r1
 800ac28:	f041 8019 	bne.w	800bc5e <forward_cast+0x1812>
 800ac2c:	7829      	ldrb	r1, [r5, #0]
 800ac2e:	3900      	subs	r1, #0
 800ac30:	bf18      	it	ne
 800ac32:	2101      	movne	r1, #1
 800ac34:	55f1      	strb	r1, [r6, r7]
 800ac36:	444d      	add	r5, r9
 800ac38:	9900      	ldr	r1, [sp, #0]
 800ac3a:	45aa      	cmp	sl, r5
 800ac3c:	440f      	add	r7, r1
 800ac3e:	f67f ac6d 	bls.w	800a51c <forward_cast+0xd0>
 800ac42:	4937      	ldr	r1, [pc, #220]	; (800ad20 <forward_cast+0x8d4>)
 800ac44:	428c      	cmp	r4, r1
 800ac46:	f000 86c1 	beq.w	800b9cc <forward_cast+0x1580>
 800ac4a:	dde1      	ble.n	800ac10 <forward_cast+0x7c4>
 800ac4c:	4930      	ldr	r1, [pc, #192]	; (800ad10 <forward_cast+0x8c4>)
 800ac4e:	428c      	cmp	r4, r1
 800ac50:	f002 855c 	beq.w	800d70c <forward_cast+0x32c0>
 800ac54:	f340 86ff 	ble.w	800ba56 <forward_cast+0x160a>
 800ac58:	4544      	cmp	r4, r8
 800ac5a:	f041 8000 	bne.w	800bc5e <forward_cast+0x1812>
 800ac5e:	edd5 7a00 	vldr	s15, [r5]
 800ac62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac66:	edcd 7a01 	vstr	s15, [sp, #4]
 800ac6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ac6e:	e7e1      	b.n	800ac34 <forward_cast+0x7e8>
 800ac70:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <forward_cast+0x8c8>)
 800ac72:	459b      	cmp	fp, r3
 800ac74:	f47f ac52 	bne.w	800a51c <forward_cast+0xd0>
 800ac78:	4555      	cmp	r5, sl
 800ac7a:	f4bf ac4f 	bcs.w	800a51c <forward_cast+0xd0>
 800ac7e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ad24 <forward_cast+0x8d8>
 800ac82:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800ad2c <forward_cast+0x8e0>
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <forward_cast+0x8cc>)
 800ac88:	4a20      	ldr	r2, [pc, #128]	; (800ad0c <forward_cast+0x8c0>)
 800ac8a:	2700      	movs	r7, #0
 800ac8c:	e018      	b.n	800acc0 <forward_cast+0x874>
 800ac8e:	4294      	cmp	r4, r2
 800ac90:	f002 80ce 	beq.w	800ce30 <forward_cast+0x29e4>
 800ac94:	f340 869d 	ble.w	800b9d2 <forward_cast+0x1586>
 800ac98:	4920      	ldr	r1, [pc, #128]	; (800ad1c <forward_cast+0x8d0>)
 800ac9a:	428c      	cmp	r4, r1
 800ac9c:	f002 82bf 	beq.w	800d21e <forward_cast+0x2dd2>
 800aca0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800aca4:	428c      	cmp	r4, r1
 800aca6:	f040 87d7 	bne.w	800bc58 <forward_cast+0x180c>
 800acaa:	7829      	ldrb	r1, [r5, #0]
 800acac:	3900      	subs	r1, #0
 800acae:	bf18      	it	ne
 800acb0:	2101      	movne	r1, #1
 800acb2:	55f1      	strb	r1, [r6, r7]
 800acb4:	444d      	add	r5, r9
 800acb6:	9900      	ldr	r1, [sp, #0]
 800acb8:	45aa      	cmp	sl, r5
 800acba:	440f      	add	r7, r1
 800acbc:	f67f ac2e 	bls.w	800a51c <forward_cast+0xd0>
 800acc0:	4917      	ldr	r1, [pc, #92]	; (800ad20 <forward_cast+0x8d4>)
 800acc2:	428c      	cmp	r4, r1
 800acc4:	f000 868e 	beq.w	800b9e4 <forward_cast+0x1598>
 800acc8:	dde1      	ble.n	800ac8e <forward_cast+0x842>
 800acca:	4911      	ldr	r1, [pc, #68]	; (800ad10 <forward_cast+0x8c4>)
 800accc:	428c      	cmp	r4, r1
 800acce:	f002 81ee 	beq.w	800d0ae <forward_cast+0x2c62>
 800acd2:	f340 8641 	ble.w	800b958 <forward_cast+0x150c>
 800acd6:	4544      	cmp	r4, r8
 800acd8:	f040 87be 	bne.w	800bc58 <forward_cast+0x180c>
 800acdc:	edd5 7a00 	vldr	s15, [r5]
 800ace0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ace4:	edcd 7a01 	vstr	s15, [sp, #4]
 800ace8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800acec:	e7e1      	b.n	800acb2 <forward_cast+0x866>
 800acee:	4a0a      	ldr	r2, [pc, #40]	; (800ad18 <forward_cast+0x8cc>)
 800acf0:	4593      	cmp	fp, r2
 800acf2:	f001 85c0 	beq.w	800c876 <forward_cast+0x242a>
 800acf6:	4b0b      	ldr	r3, [pc, #44]	; (800ad24 <forward_cast+0x8d8>)
 800acf8:	459b      	cmp	fp, r3
 800acfa:	f040 80c6 	bne.w	800ae8a <forward_cast+0xa3e>
 800acfe:	4555      	cmp	r5, sl
 800ad00:	f4bf ac0c 	bcs.w	800a51c <forward_cast+0xd0>
 800ad04:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800ad28 <forward_cast+0x8dc>
 800ad08:	4b08      	ldr	r3, [pc, #32]	; (800ad2c <forward_cast+0x8e0>)
 800ad0a:	e02e      	b.n	800ad6a <forward_cast+0x91e>
 800ad0c:	00041040 	.word	0x00041040
 800ad10:	00842040 	.word	0x00842040
 800ad14:	00060440 	.word	0x00060440
 800ad18:	00841040 	.word	0x00841040
 800ad1c:	00042040 	.word	0x00042040
 800ad20:	00840440 	.word	0x00840440
 800ad24:	01821040 	.word	0x01821040
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	00840840 	.word	0x00840840
 800ad30:	42bc      	cmp	r4, r7
 800ad32:	f002 812c 	beq.w	800cf8e <forward_cast+0x2b42>
 800ad36:	f340 843a 	ble.w	800b5ae <forward_cast+0x1162>
 800ad3a:	49b4      	ldr	r1, [pc, #720]	; (800b00c <forward_cast+0xbc0>)
 800ad3c:	428c      	cmp	r4, r1
 800ad3e:	f002 813e 	beq.w	800cfbe <forward_cast+0x2b72>
 800ad42:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ad46:	428c      	cmp	r4, r1
 800ad48:	f040 879f 	bne.w	800bc8a <forward_cast+0x183e>
 800ad4c:	7829      	ldrb	r1, [r5, #0]
 800ad4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad52:	2900      	cmp	r1, #0
 800ad54:	bf08      	it	eq
 800ad56:	eef0 7a48 	vmoveq.f32	s15, s16
 800ad5a:	9900      	ldr	r1, [sp, #0]
 800ad5c:	edc6 7a00 	vstr	s15, [r6]
 800ad60:	444d      	add	r5, r9
 800ad62:	45aa      	cmp	sl, r5
 800ad64:	440e      	add	r6, r1
 800ad66:	f67f abd9 	bls.w	800a51c <forward_cast+0xd0>
 800ad6a:	4544      	cmp	r4, r8
 800ad6c:	f002 80e5 	beq.w	800cf3a <forward_cast+0x2aee>
 800ad70:	ddde      	ble.n	800ad30 <forward_cast+0x8e4>
 800ad72:	49a7      	ldr	r1, [pc, #668]	; (800b010 <forward_cast+0xbc4>)
 800ad74:	428c      	cmp	r4, r1
 800ad76:	f002 8604 	beq.w	800d982 <forward_cast+0x3536>
 800ad7a:	f340 8746 	ble.w	800bc0a <forward_cast+0x17be>
 800ad7e:	455c      	cmp	r4, fp
 800ad80:	f040 8783 	bne.w	800bc8a <forward_cast+0x183e>
 800ad84:	edd5 7a00 	vldr	s15, [r5]
 800ad88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad90:	e7e3      	b.n	800ad5a <forward_cast+0x90e>
 800ad92:	45bb      	cmp	fp, r7
 800ad94:	f000 87ba 	beq.w	800bd0c <forward_cast+0x18c0>
 800ad98:	4b9e      	ldr	r3, [pc, #632]	; (800b014 <forward_cast+0xbc8>)
 800ad9a:	459b      	cmp	fp, r3
 800ad9c:	f040 80b1 	bne.w	800af02 <forward_cast+0xab6>
 800ada0:	4555      	cmp	r5, sl
 800ada2:	f4bf abbb 	bcs.w	800a51c <forward_cast+0xd0>
 800ada6:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 800b018 <forward_cast+0xbcc>
 800adaa:	4a99      	ldr	r2, [pc, #612]	; (800b010 <forward_cast+0xbc4>)
 800adac:	4b9b      	ldr	r3, [pc, #620]	; (800b01c <forward_cast+0xbd0>)
 800adae:	e01d      	b.n	800adec <forward_cast+0x9a0>
 800adb0:	499b      	ldr	r1, [pc, #620]	; (800b020 <forward_cast+0xbd4>)
 800adb2:	428c      	cmp	r4, r1
 800adb4:	f002 8757 	beq.w	800dc66 <forward_cast+0x381a>
 800adb8:	f340 847d 	ble.w	800b6b6 <forward_cast+0x126a>
 800adbc:	4993      	ldr	r1, [pc, #588]	; (800b00c <forward_cast+0xbc0>)
 800adbe:	428c      	cmp	r4, r1
 800adc0:	f002 8743 	beq.w	800dc4a <forward_cast+0x37fe>
 800adc4:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800adc8:	428c      	cmp	r4, r1
 800adca:	f040 878a 	bne.w	800bce2 <forward_cast+0x1896>
 800adce:	7829      	ldrb	r1, [r5, #0]
 800add0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800add4:	2900      	cmp	r1, #0
 800add6:	bf08      	it	eq
 800add8:	eef0 7a48 	vmoveq.f32	s15, s16
 800addc:	9900      	ldr	r1, [sp, #0]
 800adde:	edc6 7a00 	vstr	s15, [r6]
 800ade2:	444d      	add	r5, r9
 800ade4:	45aa      	cmp	sl, r5
 800ade6:	440e      	add	r6, r1
 800ade8:	f67f ab98 	bls.w	800a51c <forward_cast+0xd0>
 800adec:	4544      	cmp	r4, r8
 800adee:	f002 8706 	beq.w	800dbfe <forward_cast+0x37b2>
 800adf2:	dddd      	ble.n	800adb0 <forward_cast+0x964>
 800adf4:	4294      	cmp	r4, r2
 800adf6:	f002 85b2 	beq.w	800d95e <forward_cast+0x3512>
 800adfa:	f340 866f 	ble.w	800badc <forward_cast+0x1690>
 800adfe:	455c      	cmp	r4, fp
 800ae00:	f040 876f 	bne.w	800bce2 <forward_cast+0x1896>
 800ae04:	edd5 7a00 	vldr	s15, [r5]
 800ae08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae10:	e7e4      	b.n	800addc <forward_cast+0x990>
 800ae12:	4b82      	ldr	r3, [pc, #520]	; (800b01c <forward_cast+0xbd0>)
 800ae14:	459b      	cmp	fp, r3
 800ae16:	f47f ab81 	bne.w	800a51c <forward_cast+0xd0>
 800ae1a:	4555      	cmp	r5, sl
 800ae1c:	f4bf ab7e 	bcs.w	800a51c <forward_cast+0xd0>
 800ae20:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800b014 <forward_cast+0xbc8>
 800ae24:	4f7d      	ldr	r7, [pc, #500]	; (800b01c <forward_cast+0xbd0>)
 800ae26:	f8df b204 	ldr.w	fp, [pc, #516]	; 800b02c <forward_cast+0xbe0>
 800ae2a:	4b7d      	ldr	r3, [pc, #500]	; (800b020 <forward_cast+0xbd4>)
 800ae2c:	4a77      	ldr	r2, [pc, #476]	; (800b00c <forward_cast+0xbc0>)
 800ae2e:	e016      	b.n	800ae5e <forward_cast+0xa12>
 800ae30:	429c      	cmp	r4, r3
 800ae32:	f002 861c 	beq.w	800da6e <forward_cast+0x3622>
 800ae36:	f340 8480 	ble.w	800b73a <forward_cast+0x12ee>
 800ae3a:	4294      	cmp	r4, r2
 800ae3c:	f002 8608 	beq.w	800da50 <forward_cast+0x3604>
 800ae40:	4978      	ldr	r1, [pc, #480]	; (800b024 <forward_cast+0xbd8>)
 800ae42:	428c      	cmp	r4, r1
 800ae44:	f040 8735 	bne.w	800bcb2 <forward_cast+0x1866>
 800ae48:	7829      	ldrb	r1, [r5, #0]
 800ae4a:	3900      	subs	r1, #0
 800ae4c:	bf18      	it	ne
 800ae4e:	2101      	movne	r1, #1
 800ae50:	8031      	strh	r1, [r6, #0]
 800ae52:	444d      	add	r5, r9
 800ae54:	9900      	ldr	r1, [sp, #0]
 800ae56:	45aa      	cmp	sl, r5
 800ae58:	440e      	add	r6, r1
 800ae5a:	f67f ab5f 	bls.w	800a51c <forward_cast+0xd0>
 800ae5e:	4972      	ldr	r1, [pc, #456]	; (800b028 <forward_cast+0xbdc>)
 800ae60:	428c      	cmp	r4, r1
 800ae62:	f002 8616 	beq.w	800da92 <forward_cast+0x3646>
 800ae66:	dde3      	ble.n	800ae30 <forward_cast+0x9e4>
 800ae68:	4969      	ldr	r1, [pc, #420]	; (800b010 <forward_cast+0xbc4>)
 800ae6a:	428c      	cmp	r4, r1
 800ae6c:	f002 8564 	beq.w	800d938 <forward_cast+0x34ec>
 800ae70:	f340 8685 	ble.w	800bb7e <forward_cast+0x1732>
 800ae74:	4544      	cmp	r4, r8
 800ae76:	f040 871c 	bne.w	800bcb2 <forward_cast+0x1866>
 800ae7a:	edd5 7a00 	vldr	s15, [r5]
 800ae7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae82:	ee17 1a90 	vmov	r1, s15
 800ae86:	b209      	sxth	r1, r1
 800ae88:	e7e2      	b.n	800ae50 <forward_cast+0xa04>
 800ae8a:	4b64      	ldr	r3, [pc, #400]	; (800b01c <forward_cast+0xbd0>)
 800ae8c:	459b      	cmp	fp, r3
 800ae8e:	f47f ab45 	bne.w	800a51c <forward_cast+0xd0>
 800ae92:	4555      	cmp	r5, sl
 800ae94:	f4bf ab42 	bcs.w	800a51c <forward_cast+0xd0>
 800ae98:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800b014 <forward_cast+0xbc8>
 800ae9c:	4f5f      	ldr	r7, [pc, #380]	; (800b01c <forward_cast+0xbd0>)
 800ae9e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800b02c <forward_cast+0xbe0>
 800aea2:	4b5f      	ldr	r3, [pc, #380]	; (800b020 <forward_cast+0xbd4>)
 800aea4:	4a59      	ldr	r2, [pc, #356]	; (800b00c <forward_cast+0xbc0>)
 800aea6:	e016      	b.n	800aed6 <forward_cast+0xa8a>
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	f002 8597 	beq.w	800d9dc <forward_cast+0x3590>
 800aeae:	f340 8413 	ble.w	800b6d8 <forward_cast+0x128c>
 800aeb2:	4294      	cmp	r4, r2
 800aeb4:	f002 8503 	beq.w	800d8be <forward_cast+0x3472>
 800aeb8:	495a      	ldr	r1, [pc, #360]	; (800b024 <forward_cast+0xbd8>)
 800aeba:	428c      	cmp	r4, r1
 800aebc:	f040 86fc 	bne.w	800bcb8 <forward_cast+0x186c>
 800aec0:	7829      	ldrb	r1, [r5, #0]
 800aec2:	3900      	subs	r1, #0
 800aec4:	bf18      	it	ne
 800aec6:	2101      	movne	r1, #1
 800aec8:	8031      	strh	r1, [r6, #0]
 800aeca:	444d      	add	r5, r9
 800aecc:	9900      	ldr	r1, [sp, #0]
 800aece:	45aa      	cmp	sl, r5
 800aed0:	440e      	add	r6, r1
 800aed2:	f67f ab23 	bls.w	800a51c <forward_cast+0xd0>
 800aed6:	4954      	ldr	r1, [pc, #336]	; (800b028 <forward_cast+0xbdc>)
 800aed8:	428c      	cmp	r4, r1
 800aeda:	f002 85de 	beq.w	800da9a <forward_cast+0x364e>
 800aede:	dde3      	ble.n	800aea8 <forward_cast+0xa5c>
 800aee0:	494b      	ldr	r1, [pc, #300]	; (800b010 <forward_cast+0xbc4>)
 800aee2:	428c      	cmp	r4, r1
 800aee4:	f002 8594 	beq.w	800da10 <forward_cast+0x35c4>
 800aee8:	f340 8458 	ble.w	800b79c <forward_cast+0x1350>
 800aeec:	4544      	cmp	r4, r8
 800aeee:	f040 86e3 	bne.w	800bcb8 <forward_cast+0x186c>
 800aef2:	edd5 7a00 	vldr	s15, [r5]
 800aef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aefa:	ee17 1a90 	vmov	r1, s15
 800aefe:	b209      	sxth	r1, r1
 800af00:	e7e2      	b.n	800aec8 <forward_cast+0xa7c>
 800af02:	4b46      	ldr	r3, [pc, #280]	; (800b01c <forward_cast+0xbd0>)
 800af04:	459b      	cmp	fp, r3
 800af06:	f47f ab09 	bne.w	800a51c <forward_cast+0xd0>
 800af0a:	4555      	cmp	r5, sl
 800af0c:	f4bf ab06 	bcs.w	800a51c <forward_cast+0xd0>
 800af10:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800b014 <forward_cast+0xbc8>
 800af14:	4f41      	ldr	r7, [pc, #260]	; (800b01c <forward_cast+0xbd0>)
 800af16:	f8df b114 	ldr.w	fp, [pc, #276]	; 800b02c <forward_cast+0xbe0>
 800af1a:	4b41      	ldr	r3, [pc, #260]	; (800b020 <forward_cast+0xbd4>)
 800af1c:	4a3b      	ldr	r2, [pc, #236]	; (800b00c <forward_cast+0xbc0>)
 800af1e:	e016      	b.n	800af4e <forward_cast+0xb02>
 800af20:	429c      	cmp	r4, r3
 800af22:	f002 8674 	beq.w	800dc0e <forward_cast+0x37c2>
 800af26:	f340 8588 	ble.w	800ba3a <forward_cast+0x15ee>
 800af2a:	4294      	cmp	r4, r2
 800af2c:	f002 85bd 	beq.w	800daaa <forward_cast+0x365e>
 800af30:	493c      	ldr	r1, [pc, #240]	; (800b024 <forward_cast+0xbd8>)
 800af32:	428c      	cmp	r4, r1
 800af34:	f040 86e4 	bne.w	800bd00 <forward_cast+0x18b4>
 800af38:	7829      	ldrb	r1, [r5, #0]
 800af3a:	3900      	subs	r1, #0
 800af3c:	bf18      	it	ne
 800af3e:	2101      	movne	r1, #1
 800af40:	8031      	strh	r1, [r6, #0]
 800af42:	444d      	add	r5, r9
 800af44:	9900      	ldr	r1, [sp, #0]
 800af46:	45aa      	cmp	sl, r5
 800af48:	440e      	add	r6, r1
 800af4a:	f67f aae7 	bls.w	800a51c <forward_cast+0xd0>
 800af4e:	4936      	ldr	r1, [pc, #216]	; (800b028 <forward_cast+0xbdc>)
 800af50:	428c      	cmp	r4, r1
 800af52:	f002 8219 	beq.w	800d388 <forward_cast+0x2f3c>
 800af56:	dde3      	ble.n	800af20 <forward_cast+0xad4>
 800af58:	492d      	ldr	r1, [pc, #180]	; (800b010 <forward_cast+0xbc4>)
 800af5a:	428c      	cmp	r4, r1
 800af5c:	f002 84d9 	beq.w	800d912 <forward_cast+0x34c6>
 800af60:	f340 849e 	ble.w	800b8a0 <forward_cast+0x1454>
 800af64:	4544      	cmp	r4, r8
 800af66:	f040 86cb 	bne.w	800bd00 <forward_cast+0x18b4>
 800af6a:	edd5 7a00 	vldr	s15, [r5]
 800af6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af72:	ee17 1a90 	vmov	r1, s15
 800af76:	b209      	sxth	r1, r1
 800af78:	e7e2      	b.n	800af40 <forward_cast+0xaf4>
 800af7a:	4b2a      	ldr	r3, [pc, #168]	; (800b024 <forward_cast+0xbd8>)
 800af7c:	459b      	cmp	fp, r3
 800af7e:	f47f aacd 	bne.w	800a51c <forward_cast+0xd0>
 800af82:	4555      	cmp	r5, sl
 800af84:	f4bf aaca 	bcs.w	800a51c <forward_cast+0xd0>
 800af88:	9f00      	ldr	r7, [sp, #0]
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff f9e7 	bl	800a360 <_array_handle_get_as_float>
 800af92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800af96:	ee17 3a90 	vmov	r3, s15
 800af9a:	f383 0308 	usat	r3, #8, r3
 800af9e:	444d      	add	r5, r9
 800afa0:	45aa      	cmp	sl, r5
 800afa2:	7033      	strb	r3, [r6, #0]
 800afa4:	443e      	add	r6, r7
 800afa6:	d8f0      	bhi.n	800af8a <forward_cast+0xb3e>
 800afa8:	f7ff bab8 	b.w	800a51c <forward_cast+0xd0>
 800afac:	4b1f      	ldr	r3, [pc, #124]	; (800b02c <forward_cast+0xbe0>)
 800afae:	459b      	cmp	fp, r3
 800afb0:	f001 850f 	beq.w	800c9d2 <forward_cast+0x2586>
 800afb4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800afb8:	459b      	cmp	fp, r3
 800afba:	f040 81ea 	bne.w	800b392 <forward_cast+0xf46>
 800afbe:	4555      	cmp	r5, sl
 800afc0:	f4bf aaac 	bcs.w	800a51c <forward_cast+0xd0>
 800afc4:	9f00      	ldr	r7, [sp, #0]
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	f7ff f9c9 	bl	800a360 <_array_handle_get_as_float>
 800afce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800afd2:	ee17 3a90 	vmov	r3, s15
 800afd6:	f383 0308 	usat	r3, #8, r3
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	444d      	add	r5, r9
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	45aa      	cmp	sl, r5
 800afe8:	edc6 7a00 	vstr	s15, [r6]
 800afec:	443e      	add	r6, r7
 800afee:	d8ea      	bhi.n	800afc6 <forward_cast+0xb7a>
 800aff0:	f7ff ba94 	b.w	800a51c <forward_cast+0xd0>
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <forward_cast+0xbd8>)
 800aff6:	459b      	cmp	fp, r3
 800aff8:	f47f aa90 	bne.w	800a51c <forward_cast+0xd0>
 800affc:	4555      	cmp	r5, sl
 800affe:	f4bf aa8d 	bcs.w	800a51c <forward_cast+0xd0>
 800b002:	4b06      	ldr	r3, [pc, #24]	; (800b01c <forward_cast+0xbd0>)
 800b004:	4a09      	ldr	r2, [pc, #36]	; (800b02c <forward_cast+0xbe0>)
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	e02b      	b.n	800b064 <forward_cast+0xc18>
 800b00c:	00042040 	.word	0x00042040
 800b010:	00842040 	.word	0x00842040
 800b014:	01821040 	.word	0x01821040
 800b018:	00000000 	.word	0x00000000
 800b01c:	00840840 	.word	0x00840840
 800b020:	00041040 	.word	0x00041040
 800b024:	00060440 	.word	0x00060440
 800b028:	00840440 	.word	0x00840440
 800b02c:	00841040 	.word	0x00841040
 800b030:	42bc      	cmp	r4, r7
 800b032:	f002 8685 	beq.w	800dd40 <forward_cast+0x38f4>
 800b036:	f340 839b 	ble.w	800b770 <forward_cast+0x1324>
 800b03a:	49ac      	ldr	r1, [pc, #688]	; (800b2ec <forward_cast+0xea0>)
 800b03c:	428c      	cmp	r4, r1
 800b03e:	f002 8671 	beq.w	800dd24 <forward_cast+0x38d8>
 800b042:	455c      	cmp	r4, fp
 800b044:	f040 8641 	bne.w	800bcca <forward_cast+0x187e>
 800b048:	7828      	ldrb	r0, [r5, #0]
 800b04a:	3800      	subs	r0, #0
 800b04c:	bf18      	it	ne
 800b04e:	2001      	movne	r0, #1
 800b050:	f380 0010 	usat	r0, #16, r0
 800b054:	9900      	ldr	r1, [sp, #0]
 800b056:	f806 0008 	strb.w	r0, [r6, r8]
 800b05a:	444d      	add	r5, r9
 800b05c:	45aa      	cmp	sl, r5
 800b05e:	4488      	add	r8, r1
 800b060:	f67f aa5c 	bls.w	800a51c <forward_cast+0xd0>
 800b064:	49a2      	ldr	r1, [pc, #648]	; (800b2f0 <forward_cast+0xea4>)
 800b066:	428c      	cmp	r4, r1
 800b068:	f002 851b 	beq.w	800daa2 <forward_cast+0x3656>
 800b06c:	dde0      	ble.n	800b030 <forward_cast+0xbe4>
 800b06e:	49a1      	ldr	r1, [pc, #644]	; (800b2f4 <forward_cast+0xea8>)
 800b070:	428c      	cmp	r4, r1
 800b072:	f002 826d 	beq.w	800d550 <forward_cast+0x3104>
 800b076:	f340 8572 	ble.w	800bb5e <forward_cast+0x1712>
 800b07a:	499f      	ldr	r1, [pc, #636]	; (800b2f8 <forward_cast+0xeac>)
 800b07c:	428c      	cmp	r4, r1
 800b07e:	f040 8624 	bne.w	800bcca <forward_cast+0x187e>
 800b082:	edd5 7a00 	vldr	s15, [r5]
 800b086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b08a:	ee17 0a90 	vmov	r0, s15
 800b08e:	e7df      	b.n	800b050 <forward_cast+0xc04>
 800b090:	4b9a      	ldr	r3, [pc, #616]	; (800b2fc <forward_cast+0xeb0>)
 800b092:	459b      	cmp	fp, r3
 800b094:	f47f aa42 	bne.w	800a51c <forward_cast+0xd0>
 800b098:	4555      	cmp	r5, sl
 800b09a:	f4bf aa3f 	bcs.w	800a51c <forward_cast+0xd0>
 800b09e:	9f00      	ldr	r7, [sp, #0]
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f7ff f95c 	bl	800a360 <_array_handle_get_as_float>
 800b0a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b0:	444d      	add	r5, r9
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	45aa      	cmp	sl, r5
 800b0ba:	7033      	strb	r3, [r6, #0]
 800b0bc:	443e      	add	r6, r7
 800b0be:	d8ef      	bhi.n	800b0a0 <forward_cast+0xc54>
 800b0c0:	f7ff ba2c 	b.w	800a51c <forward_cast+0xd0>
 800b0c4:	4b8e      	ldr	r3, [pc, #568]	; (800b300 <forward_cast+0xeb4>)
 800b0c6:	459b      	cmp	fp, r3
 800b0c8:	f001 84d4 	beq.w	800ca74 <forward_cast+0x2628>
 800b0cc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800b0d0:	459b      	cmp	fp, r3
 800b0d2:	f040 8096 	bne.w	800b202 <forward_cast+0xdb6>
 800b0d6:	4555      	cmp	r5, sl
 800b0d8:	f4bf aa20 	bcs.w	800a51c <forward_cast+0xd0>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	f7ff f93a 	bl	800a360 <_array_handle_get_as_float>
 800b0ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	444d      	add	r5, r9
 800b0f6:	f000 85a6 	beq.w	800bc46 <forward_cast+0x17fa>
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	6037      	str	r7, [r6, #0]
 800b0fe:	45aa      	cmp	sl, r5
 800b100:	441e      	add	r6, r3
 800b102:	d8ef      	bhi.n	800b0e4 <forward_cast+0xc98>
 800b104:	f7ff ba0a 	b.w	800a51c <forward_cast+0xd0>
 800b108:	459b      	cmp	fp, r3
 800b10a:	f001 8566 	beq.w	800cbda <forward_cast+0x278e>
 800b10e:	4593      	cmp	fp, r2
 800b110:	f040 80b2 	bne.w	800b278 <forward_cast+0xe2c>
 800b114:	4555      	cmp	r5, sl
 800b116:	f4bf aa01 	bcs.w	800a51c <forward_cast+0xd0>
 800b11a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800b2f8 <forward_cast+0xeac>
 800b11e:	4f79      	ldr	r7, [pc, #484]	; (800b304 <forward_cast+0xeb8>)
 800b120:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800b300 <forward_cast+0xeb4>
 800b124:	4b78      	ldr	r3, [pc, #480]	; (800b308 <forward_cast+0xebc>)
 800b126:	4a71      	ldr	r2, [pc, #452]	; (800b2ec <forward_cast+0xea0>)
 800b128:	e01e      	b.n	800b168 <forward_cast+0xd1c>
 800b12a:	429c      	cmp	r4, r3
 800b12c:	f002 8631 	beq.w	800dd92 <forward_cast+0x3946>
 800b130:	f340 82ab 	ble.w	800b68a <forward_cast+0x123e>
 800b134:	4294      	cmp	r4, r2
 800b136:	f002 861e 	beq.w	800dd76 <forward_cast+0x392a>
 800b13a:	4970      	ldr	r1, [pc, #448]	; (800b2fc <forward_cast+0xeb0>)
 800b13c:	428c      	cmp	r4, r1
 800b13e:	f040 85ca 	bne.w	800bcd6 <forward_cast+0x188a>
 800b142:	7828      	ldrb	r0, [r5, #0]
 800b144:	3800      	subs	r0, #0
 800b146:	bf18      	it	ne
 800b148:	2001      	movne	r0, #1
 800b14a:	f300 000f 	ssat	r0, #16, r0
 800b14e:	b200      	sxth	r0, r0
 800b150:	ee07 0a90 	vmov	s15, r0
 800b154:	9900      	ldr	r1, [sp, #0]
 800b156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b15a:	444d      	add	r5, r9
 800b15c:	45aa      	cmp	sl, r5
 800b15e:	edc6 7a00 	vstr	s15, [r6]
 800b162:	440e      	add	r6, r1
 800b164:	f67f a9da 	bls.w	800a51c <forward_cast+0xd0>
 800b168:	4961      	ldr	r1, [pc, #388]	; (800b2f0 <forward_cast+0xea4>)
 800b16a:	428c      	cmp	r4, r1
 800b16c:	f002 82f1 	beq.w	800d752 <forward_cast+0x3306>
 800b170:	dddb      	ble.n	800b12a <forward_cast+0xcde>
 800b172:	4960      	ldr	r1, [pc, #384]	; (800b2f4 <forward_cast+0xea8>)
 800b174:	428c      	cmp	r4, r1
 800b176:	f003 8018 	beq.w	800e1aa <forward_cast+0x3d5e>
 800b17a:	f340 84bf 	ble.w	800bafc <forward_cast+0x16b0>
 800b17e:	4544      	cmp	r4, r8
 800b180:	f040 85a9 	bne.w	800bcd6 <forward_cast+0x188a>
 800b184:	edd5 7a00 	vldr	s15, [r5]
 800b188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b18c:	ee17 0a90 	vmov	r0, s15
 800b190:	e7db      	b.n	800b14a <forward_cast+0xcfe>
 800b192:	4b5c      	ldr	r3, [pc, #368]	; (800b304 <forward_cast+0xeb8>)
 800b194:	459b      	cmp	fp, r3
 800b196:	f47f a9c1 	bne.w	800a51c <forward_cast+0xd0>
 800b19a:	4555      	cmp	r5, sl
 800b19c:	f4bf a9be 	bcs.w	800a51c <forward_cast+0xd0>
 800b1a0:	4b52      	ldr	r3, [pc, #328]	; (800b2ec <forward_cast+0xea0>)
 800b1a2:	e01a      	b.n	800b1da <forward_cast+0xd8e>
 800b1a4:	4958      	ldr	r1, [pc, #352]	; (800b308 <forward_cast+0xebc>)
 800b1a6:	428c      	cmp	r4, r1
 800b1a8:	f002 816c 	beq.w	800d484 <forward_cast+0x3038>
 800b1ac:	f340 8261 	ble.w	800b672 <forward_cast+0x1226>
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	f002 8159 	beq.w	800d468 <forward_cast+0x301c>
 800b1b6:	4951      	ldr	r1, [pc, #324]	; (800b2fc <forward_cast+0xeb0>)
 800b1b8:	428c      	cmp	r4, r1
 800b1ba:	f040 8574 	bne.w	800bca6 <forward_cast+0x185a>
 800b1be:	7828      	ldrb	r0, [r5, #0]
 800b1c0:	3800      	subs	r0, #0
 800b1c2:	bf18      	it	ne
 800b1c4:	2001      	movne	r0, #1
 800b1c6:	f300 0007 	ssat	r0, #8, r0
 800b1ca:	9900      	ldr	r1, [sp, #0]
 800b1cc:	444d      	add	r5, r9
 800b1ce:	b240      	sxtb	r0, r0
 800b1d0:	45aa      	cmp	sl, r5
 800b1d2:	8030      	strh	r0, [r6, #0]
 800b1d4:	440e      	add	r6, r1
 800b1d6:	f67f a9a1 	bls.w	800a51c <forward_cast+0xd0>
 800b1da:	42bc      	cmp	r4, r7
 800b1dc:	f002 807f 	beq.w	800d2de <forward_cast+0x2e92>
 800b1e0:	dde0      	ble.n	800b1a4 <forward_cast+0xd58>
 800b1e2:	4944      	ldr	r1, [pc, #272]	; (800b2f4 <forward_cast+0xea8>)
 800b1e4:	428c      	cmp	r4, r1
 800b1e6:	f002 81f2 	beq.w	800d5ce <forward_cast+0x3182>
 800b1ea:	f340 851d 	ble.w	800bc28 <forward_cast+0x17dc>
 800b1ee:	4294      	cmp	r4, r2
 800b1f0:	f040 8559 	bne.w	800bca6 <forward_cast+0x185a>
 800b1f4:	edd5 7a00 	vldr	s15, [r5]
 800b1f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1fc:	ee17 0a90 	vmov	r0, s15
 800b200:	e7e1      	b.n	800b1c6 <forward_cast+0xd7a>
 800b202:	4b40      	ldr	r3, [pc, #256]	; (800b304 <forward_cast+0xeb8>)
 800b204:	459b      	cmp	fp, r3
 800b206:	f47f a989 	bne.w	800a51c <forward_cast+0xd0>
 800b20a:	4555      	cmp	r5, sl
 800b20c:	f4bf a986 	bcs.w	800a51c <forward_cast+0xd0>
 800b210:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800b2f4 <forward_cast+0xea8>
 800b214:	4f38      	ldr	r7, [pc, #224]	; (800b2f8 <forward_cast+0xeac>)
 800b216:	4b35      	ldr	r3, [pc, #212]	; (800b2ec <forward_cast+0xea0>)
 800b218:	4a38      	ldr	r2, [pc, #224]	; (800b2fc <forward_cast+0xeb0>)
 800b21a:	e016      	b.n	800b24a <forward_cast+0xdfe>
 800b21c:	493a      	ldr	r1, [pc, #232]	; (800b308 <forward_cast+0xebc>)
 800b21e:	428c      	cmp	r4, r1
 800b220:	f002 814a 	beq.w	800d4b8 <forward_cast+0x306c>
 800b224:	f340 81f6 	ble.w	800b614 <forward_cast+0x11c8>
 800b228:	429c      	cmp	r4, r3
 800b22a:	f002 80fd 	beq.w	800d428 <forward_cast+0x2fdc>
 800b22e:	4294      	cmp	r4, r2
 800b230:	f040 8536 	bne.w	800bca0 <forward_cast+0x1854>
 800b234:	7829      	ldrb	r1, [r5, #0]
 800b236:	3900      	subs	r1, #0
 800b238:	bf18      	it	ne
 800b23a:	2101      	movne	r1, #1
 800b23c:	8031      	strh	r1, [r6, #0]
 800b23e:	444d      	add	r5, r9
 800b240:	9900      	ldr	r1, [sp, #0]
 800b242:	45aa      	cmp	sl, r5
 800b244:	440e      	add	r6, r1
 800b246:	f67f a969 	bls.w	800a51c <forward_cast+0xd0>
 800b24a:	4929      	ldr	r1, [pc, #164]	; (800b2f0 <forward_cast+0xea4>)
 800b24c:	428c      	cmp	r4, r1
 800b24e:	f002 804a 	beq.w	800d2e6 <forward_cast+0x2e9a>
 800b252:	dde3      	ble.n	800b21c <forward_cast+0xdd0>
 800b254:	4544      	cmp	r4, r8
 800b256:	f002 83a6 	beq.w	800d9a6 <forward_cast+0x355a>
 800b25a:	f340 81ea 	ble.w	800b632 <forward_cast+0x11e6>
 800b25e:	42bc      	cmp	r4, r7
 800b260:	f040 851e 	bne.w	800bca0 <forward_cast+0x1854>
 800b264:	edd5 7a00 	vldr	s15, [r5]
 800b268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b270:	bf14      	ite	ne
 800b272:	2101      	movne	r1, #1
 800b274:	2100      	moveq	r1, #0
 800b276:	e7e1      	b.n	800b23c <forward_cast+0xdf0>
 800b278:	4b22      	ldr	r3, [pc, #136]	; (800b304 <forward_cast+0xeb8>)
 800b27a:	459b      	cmp	fp, r3
 800b27c:	f47f a94e 	bne.w	800a51c <forward_cast+0xd0>
 800b280:	4555      	cmp	r5, sl
 800b282:	f4bf a94b 	bcs.w	800a51c <forward_cast+0xd0>
 800b286:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b2f4 <forward_cast+0xea8>
 800b28a:	4f1b      	ldr	r7, [pc, #108]	; (800b2f8 <forward_cast+0xeac>)
 800b28c:	4b17      	ldr	r3, [pc, #92]	; (800b2ec <forward_cast+0xea0>)
 800b28e:	4a1b      	ldr	r2, [pc, #108]	; (800b2fc <forward_cast+0xeb0>)
 800b290:	e018      	b.n	800b2c4 <forward_cast+0xe78>
 800b292:	491d      	ldr	r1, [pc, #116]	; (800b308 <forward_cast+0xebc>)
 800b294:	428c      	cmp	r4, r1
 800b296:	f002 852a 	beq.w	800dcee <forward_cast+0x38a2>
 800b29a:	f340 8242 	ble.w	800b722 <forward_cast+0x12d6>
 800b29e:	429c      	cmp	r4, r3
 800b2a0:	f002 84ee 	beq.w	800dc80 <forward_cast+0x3834>
 800b2a4:	4294      	cmp	r4, r2
 800b2a6:	f040 8525 	bne.w	800bcf4 <forward_cast+0x18a8>
 800b2aa:	7828      	ldrb	r0, [r5, #0]
 800b2ac:	3800      	subs	r0, #0
 800b2ae:	bf18      	it	ne
 800b2b0:	2001      	movne	r0, #1
 800b2b2:	f300 000f 	ssat	r0, #16, r0
 800b2b6:	9900      	ldr	r1, [sp, #0]
 800b2b8:	8030      	strh	r0, [r6, #0]
 800b2ba:	444d      	add	r5, r9
 800b2bc:	45aa      	cmp	sl, r5
 800b2be:	440e      	add	r6, r1
 800b2c0:	f67f a92c 	bls.w	800a51c <forward_cast+0xd0>
 800b2c4:	490a      	ldr	r1, [pc, #40]	; (800b2f0 <forward_cast+0xea4>)
 800b2c6:	428c      	cmp	r4, r1
 800b2c8:	f002 82f5 	beq.w	800d8b6 <forward_cast+0x346a>
 800b2cc:	dde1      	ble.n	800b292 <forward_cast+0xe46>
 800b2ce:	4544      	cmp	r4, r8
 800b2d0:	f002 85e8 	beq.w	800dea4 <forward_cast+0x3a58>
 800b2d4:	f340 8464 	ble.w	800bba0 <forward_cast+0x1754>
 800b2d8:	42bc      	cmp	r4, r7
 800b2da:	f040 850b 	bne.w	800bcf4 <forward_cast+0x18a8>
 800b2de:	edd5 7a00 	vldr	s15, [r5]
 800b2e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2e6:	ee17 0a90 	vmov	r0, s15
 800b2ea:	e7e2      	b.n	800b2b2 <forward_cast+0xe66>
 800b2ec:	00042040 	.word	0x00042040
 800b2f0:	00840440 	.word	0x00840440
 800b2f4:	00842040 	.word	0x00842040
 800b2f8:	01821040 	.word	0x01821040
 800b2fc:	00060440 	.word	0x00060440
 800b300:	00841040 	.word	0x00841040
 800b304:	00840840 	.word	0x00840840
 800b308:	00041040 	.word	0x00041040
 800b30c:	4bb8      	ldr	r3, [pc, #736]	; (800b5f0 <forward_cast+0x11a4>)
 800b30e:	459b      	cmp	fp, r3
 800b310:	f000 8547 	beq.w	800bda2 <forward_cast+0x1956>
 800b314:	4fb7      	ldr	r7, [pc, #732]	; (800b5f4 <forward_cast+0x11a8>)
 800b316:	45bb      	cmp	fp, r7
 800b318:	d155      	bne.n	800b3c6 <forward_cast+0xf7a>
 800b31a:	4555      	cmp	r5, sl
 800b31c:	f4bf a8fe 	bcs.w	800a51c <forward_cast+0xd0>
 800b320:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800b60c <forward_cast+0x11c0>
 800b324:	4fb4      	ldr	r7, [pc, #720]	; (800b5f8 <forward_cast+0x11ac>)
 800b326:	4bb5      	ldr	r3, [pc, #724]	; (800b5fc <forward_cast+0x11b0>)
 800b328:	4ab5      	ldr	r2, [pc, #724]	; (800b600 <forward_cast+0x11b4>)
 800b32a:	e01e      	b.n	800b36a <forward_cast+0xf1e>
 800b32c:	49b5      	ldr	r1, [pc, #724]	; (800b604 <forward_cast+0x11b8>)
 800b32e:	428c      	cmp	r4, r1
 800b330:	f002 834a 	beq.w	800d9c8 <forward_cast+0x357c>
 800b334:	f340 8242 	ble.w	800b7bc <forward_cast+0x1370>
 800b338:	429c      	cmp	r4, r3
 800b33a:	f002 837b 	beq.w	800da34 <forward_cast+0x35e8>
 800b33e:	4294      	cmp	r4, r2
 800b340:	f040 84b4 	bne.w	800bcac <forward_cast+0x1860>
 800b344:	7828      	ldrb	r0, [r5, #0]
 800b346:	3800      	subs	r0, #0
 800b348:	bf18      	it	ne
 800b34a:	2001      	movne	r0, #1
 800b34c:	f380 0010 	usat	r0, #16, r0
 800b350:	b280      	uxth	r0, r0
 800b352:	ee07 0a90 	vmov	s15, r0
 800b356:	9900      	ldr	r1, [sp, #0]
 800b358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35c:	444d      	add	r5, r9
 800b35e:	45aa      	cmp	sl, r5
 800b360:	edc6 7a00 	vstr	s15, [r6]
 800b364:	440e      	add	r6, r1
 800b366:	f67f a8d9 	bls.w	800a51c <forward_cast+0xd0>
 800b36a:	49a7      	ldr	r1, [pc, #668]	; (800b608 <forward_cast+0x11bc>)
 800b36c:	428c      	cmp	r4, r1
 800b36e:	f002 838c 	beq.w	800da8a <forward_cast+0x363e>
 800b372:	dddb      	ble.n	800b32c <forward_cast+0xee0>
 800b374:	4544      	cmp	r4, r8
 800b376:	f001 86aa 	beq.w	800d0ce <forward_cast+0x2c82>
 800b37a:	f340 82fe 	ble.w	800b97a <forward_cast+0x152e>
 800b37e:	455c      	cmp	r4, fp
 800b380:	f040 8494 	bne.w	800bcac <forward_cast+0x1860>
 800b384:	edd5 7a00 	vldr	s15, [r5]
 800b388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b38c:	ee17 0a90 	vmov	r0, s15
 800b390:	e7dc      	b.n	800b34c <forward_cast+0xf00>
 800b392:	4b99      	ldr	r3, [pc, #612]	; (800b5f8 <forward_cast+0x11ac>)
 800b394:	459b      	cmp	fp, r3
 800b396:	f47f a8c1 	bne.w	800a51c <forward_cast+0xd0>
 800b39a:	4555      	cmp	r5, sl
 800b39c:	f4bf a8be 	bcs.w	800a51c <forward_cast+0xd0>
 800b3a0:	9f00      	ldr	r7, [sp, #0]
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	f7fe ffdb 	bl	800a360 <_array_handle_get_as_float>
 800b3aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b3ae:	ee17 3a90 	vmov	r3, s15
 800b3b2:	f383 0308 	usat	r3, #8, r3
 800b3b6:	444d      	add	r5, r9
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	45aa      	cmp	sl, r5
 800b3bc:	8033      	strh	r3, [r6, #0]
 800b3be:	443e      	add	r6, r7
 800b3c0:	d8ef      	bhi.n	800b3a2 <forward_cast+0xf56>
 800b3c2:	f7ff b8ab 	b.w	800a51c <forward_cast+0xd0>
 800b3c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800b3ca:	459b      	cmp	fp, r3
 800b3cc:	f47f a8a6 	bne.w	800a51c <forward_cast+0xd0>
 800b3d0:	4555      	cmp	r5, sl
 800b3d2:	f4bf a8a3 	bcs.w	800a51c <forward_cast+0xd0>
 800b3d6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800b60c <forward_cast+0x11c0>
 800b3da:	4b88      	ldr	r3, [pc, #544]	; (800b5fc <forward_cast+0x11b0>)
 800b3dc:	4a88      	ldr	r2, [pc, #544]	; (800b600 <forward_cast+0x11b4>)
 800b3de:	e018      	b.n	800b412 <forward_cast+0xfc6>
 800b3e0:	4988      	ldr	r1, [pc, #544]	; (800b604 <forward_cast+0x11b8>)
 800b3e2:	428c      	cmp	r4, r1
 800b3e4:	f001 87be 	beq.w	800d364 <forward_cast+0x2f18>
 800b3e8:	f340 8212 	ble.w	800b810 <forward_cast+0x13c4>
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	f001 86a8 	beq.w	800d142 <forward_cast+0x2cf6>
 800b3f2:	4294      	cmp	r4, r2
 800b3f4:	f040 8441 	bne.w	800bc7a <forward_cast+0x182e>
 800b3f8:	7828      	ldrb	r0, [r5, #0]
 800b3fa:	3800      	subs	r0, #0
 800b3fc:	bf18      	it	ne
 800b3fe:	2001      	movne	r0, #1
 800b400:	f380 0010 	usat	r0, #16, r0
 800b404:	9900      	ldr	r1, [sp, #0]
 800b406:	8030      	strh	r0, [r6, #0]
 800b408:	444d      	add	r5, r9
 800b40a:	45aa      	cmp	sl, r5
 800b40c:	440e      	add	r6, r1
 800b40e:	f67f a885 	bls.w	800a51c <forward_cast+0xd0>
 800b412:	497d      	ldr	r1, [pc, #500]	; (800b608 <forward_cast+0x11bc>)
 800b414:	428c      	cmp	r4, r1
 800b416:	f001 87b3 	beq.w	800d380 <forward_cast+0x2f34>
 800b41a:	dde1      	ble.n	800b3e0 <forward_cast+0xf94>
 800b41c:	4544      	cmp	r4, r8
 800b41e:	f002 8153 	beq.w	800d6c8 <forward_cast+0x327c>
 800b422:	f340 8257 	ble.w	800b8d4 <forward_cast+0x1488>
 800b426:	42bc      	cmp	r4, r7
 800b428:	f040 8427 	bne.w	800bc7a <forward_cast+0x182e>
 800b42c:	edd5 7a00 	vldr	s15, [r5]
 800b430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b434:	ee17 0a90 	vmov	r0, s15
 800b438:	e7e2      	b.n	800b400 <forward_cast+0xfb4>
 800b43a:	4555      	cmp	r5, sl
 800b43c:	f4bf a86e 	bcs.w	800a51c <forward_cast+0xd0>
 800b440:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800b60c <forward_cast+0x11c0>
 800b444:	2700      	movs	r7, #0
 800b446:	e01a      	b.n	800b47e <forward_cast+0x1032>
 800b448:	429c      	cmp	r4, r3
 800b44a:	f002 835a 	beq.w	800db02 <forward_cast+0x36b6>
 800b44e:	f340 8238 	ble.w	800b8c2 <forward_cast+0x1476>
 800b452:	496a      	ldr	r1, [pc, #424]	; (800b5fc <forward_cast+0x11b0>)
 800b454:	428c      	cmp	r4, r1
 800b456:	f001 85a4 	beq.w	800cfa2 <forward_cast+0x2b56>
 800b45a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800b45e:	428c      	cmp	r4, r1
 800b460:	f040 8410 	bne.w	800bc84 <forward_cast+0x1838>
 800b464:	7828      	ldrb	r0, [r5, #0]
 800b466:	3800      	subs	r0, #0
 800b468:	bf18      	it	ne
 800b46a:	2001      	movne	r0, #1
 800b46c:	f380 0010 	usat	r0, #16, r0
 800b470:	9900      	ldr	r1, [sp, #0]
 800b472:	55f0      	strb	r0, [r6, r7]
 800b474:	444d      	add	r5, r9
 800b476:	45aa      	cmp	sl, r5
 800b478:	440f      	add	r7, r1
 800b47a:	f67f a84f 	bls.w	800a51c <forward_cast+0xd0>
 800b47e:	455c      	cmp	r4, fp
 800b480:	f001 85f2 	beq.w	800d068 <forward_cast+0x2c1c>
 800b484:	dde0      	ble.n	800b448 <forward_cast+0xffc>
 800b486:	4544      	cmp	r4, r8
 800b488:	f002 86a5 	beq.w	800e1d6 <forward_cast+0x3d8a>
 800b48c:	f340 81ae 	ble.w	800b7ec <forward_cast+0x13a0>
 800b490:	4958      	ldr	r1, [pc, #352]	; (800b5f4 <forward_cast+0x11a8>)
 800b492:	428c      	cmp	r4, r1
 800b494:	f040 83f6 	bne.w	800bc84 <forward_cast+0x1838>
 800b498:	edd5 7a00 	vldr	s15, [r5]
 800b49c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4a0:	ee17 0a90 	vmov	r0, s15
 800b4a4:	e7e2      	b.n	800b46c <forward_cast+0x1020>
 800b4a6:	4555      	cmp	r5, sl
 800b4a8:	f4bf a838 	bcs.w	800a51c <forward_cast+0xd0>
 800b4ac:	4a53      	ldr	r2, [pc, #332]	; (800b5fc <forward_cast+0x11b0>)
 800b4ae:	f04f 0800 	mov.w	r8, #0
 800b4b2:	e018      	b.n	800b4e6 <forward_cast+0x109a>
 800b4b4:	4953      	ldr	r1, [pc, #332]	; (800b604 <forward_cast+0x11b8>)
 800b4b6:	428c      	cmp	r4, r1
 800b4b8:	f001 85c6 	beq.w	800d048 <forward_cast+0x2bfc>
 800b4bc:	f340 82a2 	ble.w	800ba04 <forward_cast+0x15b8>
 800b4c0:	4294      	cmp	r4, r2
 800b4c2:	f001 8680 	beq.w	800d1c6 <forward_cast+0x2d7a>
 800b4c6:	494e      	ldr	r1, [pc, #312]	; (800b600 <forward_cast+0x11b4>)
 800b4c8:	428c      	cmp	r4, r1
 800b4ca:	f040 83cb 	bne.w	800bc64 <forward_cast+0x1818>
 800b4ce:	7829      	ldrb	r1, [r5, #0]
 800b4d0:	3900      	subs	r1, #0
 800b4d2:	bf18      	it	ne
 800b4d4:	2101      	movne	r1, #1
 800b4d6:	f806 1008 	strb.w	r1, [r6, r8]
 800b4da:	444d      	add	r5, r9
 800b4dc:	9900      	ldr	r1, [sp, #0]
 800b4de:	45aa      	cmp	sl, r5
 800b4e0:	4488      	add	r8, r1
 800b4e2:	f67f a81b 	bls.w	800a51c <forward_cast+0xd0>
 800b4e6:	455c      	cmp	r4, fp
 800b4e8:	f000 8295 	beq.w	800ba16 <forward_cast+0x15ca>
 800b4ec:	dde2      	ble.n	800b4b4 <forward_cast+0x1068>
 800b4ee:	4947      	ldr	r1, [pc, #284]	; (800b60c <forward_cast+0x11c0>)
 800b4f0:	428c      	cmp	r4, r1
 800b4f2:	f002 8681 	beq.w	800e1f8 <forward_cast+0x3dac>
 800b4f6:	f340 8364 	ble.w	800bbc2 <forward_cast+0x1776>
 800b4fa:	42bc      	cmp	r4, r7
 800b4fc:	f040 83b2 	bne.w	800bc64 <forward_cast+0x1818>
 800b500:	edd5 7a00 	vldr	s15, [r5]
 800b504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b508:	edcd 7a01 	vstr	s15, [sp, #4]
 800b50c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800b510:	e7e1      	b.n	800b4d6 <forward_cast+0x108a>
 800b512:	4555      	cmp	r5, sl
 800b514:	bf38      	it	cc
 800b516:	f04f 0800 	movcc.w	r8, #0
 800b51a:	d31e      	bcc.n	800b55a <forward_cast+0x110e>
 800b51c:	f7fe bffe 	b.w	800a51c <forward_cast+0xd0>
 800b520:	4938      	ldr	r1, [pc, #224]	; (800b604 <forward_cast+0x11b8>)
 800b522:	428c      	cmp	r4, r1
 800b524:	f001 8629 	beq.w	800d17a <forward_cast+0x2d2e>
 800b528:	f340 8154 	ble.w	800b7d4 <forward_cast+0x1388>
 800b52c:	4933      	ldr	r1, [pc, #204]	; (800b5fc <forward_cast+0x11b0>)
 800b52e:	428c      	cmp	r4, r1
 800b530:	f001 8615 	beq.w	800d15e <forward_cast+0x2d12>
 800b534:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800b538:	428c      	cmp	r4, r1
 800b53a:	f040 83a1 	bne.w	800bc80 <forward_cast+0x1834>
 800b53e:	7828      	ldrb	r0, [r5, #0]
 800b540:	3800      	subs	r0, #0
 800b542:	bf18      	it	ne
 800b544:	2001      	movne	r0, #1
 800b546:	f300 000f 	ssat	r0, #16, r0
 800b54a:	9900      	ldr	r1, [sp, #0]
 800b54c:	f806 0008 	strb.w	r0, [r6, r8]
 800b550:	444d      	add	r5, r9
 800b552:	45aa      	cmp	sl, r5
 800b554:	4488      	add	r8, r1
 800b556:	f67e afe1 	bls.w	800a51c <forward_cast+0xd0>
 800b55a:	455c      	cmp	r4, fp
 800b55c:	f001 8580 	beq.w	800d060 <forward_cast+0x2c14>
 800b560:	ddde      	ble.n	800b520 <forward_cast+0x10d4>
 800b562:	492a      	ldr	r1, [pc, #168]	; (800b60c <forward_cast+0x11c0>)
 800b564:	428c      	cmp	r4, r1
 800b566:	f002 82be 	beq.w	800dae6 <forward_cast+0x369a>
 800b56a:	f340 8257 	ble.w	800ba1c <forward_cast+0x15d0>
 800b56e:	4294      	cmp	r4, r2
 800b570:	f040 8386 	bne.w	800bc80 <forward_cast+0x1834>
 800b574:	edd5 7a00 	vldr	s15, [r5]
 800b578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b57c:	ee17 0a90 	vmov	r0, s15
 800b580:	e7e1      	b.n	800b546 <forward_cast+0x10fa>
 800b582:	4555      	cmp	r5, sl
 800b584:	f4be afca 	bcs.w	800a51c <forward_cast+0xd0>
 800b588:	9f00      	ldr	r7, [sp, #0]
 800b58a:	4628      	mov	r0, r5
 800b58c:	4621      	mov	r1, r4
 800b58e:	f7fe fee7 	bl	800a360 <_array_handle_get_as_float>
 800b592:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	444d      	add	r5, r9
 800b59c:	bf14      	ite	ne
 800b59e:	2301      	movne	r3, #1
 800b5a0:	2300      	moveq	r3, #0
 800b5a2:	45aa      	cmp	sl, r5
 800b5a4:	7033      	strb	r3, [r6, #0]
 800b5a6:	443e      	add	r6, r7
 800b5a8:	d8ef      	bhi.n	800b58a <forward_cast+0x113e>
 800b5aa:	f7fe bfb7 	b.w	800a51c <forward_cast+0xd0>
 800b5ae:	4918      	ldr	r1, [pc, #96]	; (800b610 <forward_cast+0x11c4>)
 800b5b0:	428c      	cmp	r4, r1
 800b5b2:	f001 877a 	beq.w	800d4aa <forward_cast+0x305e>
 800b5b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b5ba:	428c      	cmp	r4, r1
 800b5bc:	f040 8365 	bne.w	800bc8a <forward_cast+0x183e>
 800b5c0:	8829      	ldrh	r1, [r5, #0]
 800b5c2:	ee07 1a90 	vmov	s15, r1
 800b5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ca:	f7ff bbc6 	b.w	800ad5a <forward_cast+0x90e>
 800b5ce:	4910      	ldr	r1, [pc, #64]	; (800b610 <forward_cast+0x11c4>)
 800b5d0:	428c      	cmp	r4, r1
 800b5d2:	f001 877e 	beq.w	800d4d2 <forward_cast+0x3086>
 800b5d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b5da:	428c      	cmp	r4, r1
 800b5dc:	f040 8359 	bne.w	800bc92 <forward_cast+0x1846>
 800b5e0:	8829      	ldrh	r1, [r5, #0]
 800b5e2:	ee07 1a90 	vmov	s15, r1
 800b5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ea:	f7ff baeb 	b.w	800abc4 <forward_cast+0x778>
 800b5ee:	bf00      	nop
 800b5f0:	00841040 	.word	0x00841040
 800b5f4:	01821040 	.word	0x01821040
 800b5f8:	00840840 	.word	0x00840840
 800b5fc:	00042040 	.word	0x00042040
 800b600:	00060440 	.word	0x00060440
 800b604:	00041040 	.word	0x00041040
 800b608:	00840440 	.word	0x00840440
 800b60c:	00842040 	.word	0x00842040
 800b610:	00040440 	.word	0x00040440
 800b614:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b618:	428c      	cmp	r4, r1
 800b61a:	f43f ae0b 	beq.w	800b234 <forward_cast+0xde8>
 800b61e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b622:	428c      	cmp	r4, r1
 800b624:	f040 833c 	bne.w	800bca0 <forward_cast+0x1854>
 800b628:	8829      	ldrh	r1, [r5, #0]
 800b62a:	3900      	subs	r1, #0
 800b62c:	bf18      	it	ne
 800b62e:	2101      	movne	r1, #1
 800b630:	e604      	b.n	800b23c <forward_cast+0xdf0>
 800b632:	455c      	cmp	r4, fp
 800b634:	f001 86f1 	beq.w	800d41a <forward_cast+0x2fce>
 800b638:	49c3      	ldr	r1, [pc, #780]	; (800b948 <forward_cast+0x14fc>)
 800b63a:	428c      	cmp	r4, r1
 800b63c:	f040 8330 	bne.w	800bca0 <forward_cast+0x1854>
 800b640:	edd5 7a00 	vldr	s15, [r5]
 800b644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b648:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	bf14      	ite	ne
 800b652:	2101      	movne	r1, #1
 800b654:	2100      	moveq	r1, #0
 800b656:	e5f1      	b.n	800b23c <forward_cast+0xdf0>
 800b658:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b65c:	428c      	cmp	r4, r1
 800b65e:	f001 871b 	beq.w	800d498 <forward_cast+0x304c>
 800b662:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b666:	428c      	cmp	r4, r1
 800b668:	f040 8317 	bne.w	800bc9a <forward_cast+0x184e>
 800b66c:	8828      	ldrh	r0, [r5, #0]
 800b66e:	f7ff ba0f 	b.w	800aa90 <forward_cast+0x644>
 800b672:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b676:	428c      	cmp	r4, r1
 800b678:	f002 8395 	beq.w	800dda6 <forward_cast+0x395a>
 800b67c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b680:	428c      	cmp	r4, r1
 800b682:	f040 8310 	bne.w	800bca6 <forward_cast+0x185a>
 800b686:	8828      	ldrh	r0, [r5, #0]
 800b688:	e59d      	b.n	800b1c6 <forward_cast+0xd7a>
 800b68a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b68e:	428c      	cmp	r4, r1
 800b690:	f002 813c 	beq.w	800d90c <forward_cast+0x34c0>
 800b694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b698:	428c      	cmp	r4, r1
 800b69a:	f040 831c 	bne.w	800bcd6 <forward_cast+0x188a>
 800b69e:	8828      	ldrh	r0, [r5, #0]
 800b6a0:	e553      	b.n	800b14a <forward_cast+0xcfe>
 800b6a2:	42bc      	cmp	r4, r7
 800b6a4:	f002 82e9 	beq.w	800dc7a <forward_cast+0x382e>
 800b6a8:	49a8      	ldr	r1, [pc, #672]	; (800b94c <forward_cast+0x1500>)
 800b6aa:	428c      	cmp	r4, r1
 800b6ac:	f040 8307 	bne.w	800bcbe <forward_cast+0x1872>
 800b6b0:	8828      	ldrh	r0, [r5, #0]
 800b6b2:	f7ff b871 	b.w	800a798 <forward_cast+0x34c>
 800b6b6:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b6ba:	428c      	cmp	r4, r1
 800b6bc:	f002 8199 	beq.w	800d9f2 <forward_cast+0x35a6>
 800b6c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6c4:	428c      	cmp	r4, r1
 800b6c6:	f040 830c 	bne.w	800bce2 <forward_cast+0x1896>
 800b6ca:	8829      	ldrh	r1, [r5, #0]
 800b6cc:	ee07 1a90 	vmov	s15, r1
 800b6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6d4:	f7ff bb82 	b.w	800addc <forward_cast+0x990>
 800b6d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b6dc:	428c      	cmp	r4, r1
 800b6de:	f002 837c 	beq.w	800ddda <forward_cast+0x398e>
 800b6e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6e6:	428c      	cmp	r4, r1
 800b6e8:	f040 82e6 	bne.w	800bcb8 <forward_cast+0x186c>
 800b6ec:	f9b5 1000 	ldrsh.w	r1, [r5]
 800b6f0:	f7ff bbea 	b.w	800aec8 <forward_cast+0xa7c>
 800b6f4:	4544      	cmp	r4, r8
 800b6f6:	f002 8363 	beq.w	800ddc0 <forward_cast+0x3974>
 800b6fa:	4994      	ldr	r1, [pc, #592]	; (800b94c <forward_cast+0x1500>)
 800b6fc:	428c      	cmp	r4, r1
 800b6fe:	f040 82e7 	bne.w	800bcd0 <forward_cast+0x1884>
 800b702:	8828      	ldrh	r0, [r5, #0]
 800b704:	f7fe bf43 	b.w	800a58e <forward_cast+0x142>
 800b708:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b70c:	428c      	cmp	r4, r1
 800b70e:	f002 82f8 	beq.w	800dd02 <forward_cast+0x38b6>
 800b712:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b716:	428c      	cmp	r4, r1
 800b718:	f040 82d4 	bne.w	800bcc4 <forward_cast+0x1878>
 800b71c:	8828      	ldrh	r0, [r5, #0]
 800b71e:	f7ff b9f7 	b.w	800ab10 <forward_cast+0x6c4>
 800b722:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b726:	428c      	cmp	r4, r1
 800b728:	f002 81ac 	beq.w	800da84 <forward_cast+0x3638>
 800b72c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b730:	428c      	cmp	r4, r1
 800b732:	f040 82df 	bne.w	800bcf4 <forward_cast+0x18a8>
 800b736:	8828      	ldrh	r0, [r5, #0]
 800b738:	e5bb      	b.n	800b2b2 <forward_cast+0xe66>
 800b73a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b73e:	428c      	cmp	r4, r1
 800b740:	f002 82d2 	beq.w	800dce8 <forward_cast+0x389c>
 800b744:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b748:	428c      	cmp	r4, r1
 800b74a:	f040 82b2 	bne.w	800bcb2 <forward_cast+0x1866>
 800b74e:	f9b5 1000 	ldrsh.w	r1, [r5]
 800b752:	f7ff bb7d 	b.w	800ae50 <forward_cast+0xa04>
 800b756:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b75a:	428c      	cmp	r4, r1
 800b75c:	f002 82fa 	beq.w	800dd54 <forward_cast+0x3908>
 800b760:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b764:	428c      	cmp	r4, r1
 800b766:	f040 82b9 	bne.w	800bcdc <forward_cast+0x1890>
 800b76a:	8829      	ldrh	r1, [r5, #0]
 800b76c:	f7ff b86c 	b.w	800a848 <forward_cast+0x3fc>
 800b770:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b774:	428c      	cmp	r4, r1
 800b776:	f002 82a9 	beq.w	800dccc <forward_cast+0x3880>
 800b77a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b77e:	428c      	cmp	r4, r1
 800b780:	f040 82a3 	bne.w	800bcca <forward_cast+0x187e>
 800b784:	8828      	ldrh	r0, [r5, #0]
 800b786:	e463      	b.n	800b050 <forward_cast+0xc04>
 800b788:	4294      	cmp	r4, r2
 800b78a:	f002 8150 	beq.w	800da2e <forward_cast+0x35e2>
 800b78e:	496f      	ldr	r1, [pc, #444]	; (800b94c <forward_cast+0x1500>)
 800b790:	428c      	cmp	r4, r1
 800b792:	f040 82b2 	bne.w	800bcfa <forward_cast+0x18ae>
 800b796:	8828      	ldrh	r0, [r5, #0]
 800b798:	f7ff b8a0 	b.w	800a8dc <forward_cast+0x490>
 800b79c:	42bc      	cmp	r4, r7
 800b79e:	d0a5      	beq.n	800b6ec <forward_cast+0x12a0>
 800b7a0:	455c      	cmp	r4, fp
 800b7a2:	f040 8289 	bne.w	800bcb8 <forward_cast+0x186c>
 800b7a6:	edd5 7a00 	vldr	s15, [r5]
 800b7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7b2:	ee17 1a90 	vmov	r1, s15
 800b7b6:	b209      	sxth	r1, r1
 800b7b8:	f7ff bb86 	b.w	800aec8 <forward_cast+0xa7c>
 800b7bc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b7c0:	428c      	cmp	r4, r1
 800b7c2:	f001 84e4 	beq.w	800d18e <forward_cast+0x2d42>
 800b7c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7ca:	428c      	cmp	r4, r1
 800b7cc:	f040 826e 	bne.w	800bcac <forward_cast+0x1860>
 800b7d0:	8828      	ldrh	r0, [r5, #0]
 800b7d2:	e5bb      	b.n	800b34c <forward_cast+0xf00>
 800b7d4:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b7d8:	428c      	cmp	r4, r1
 800b7da:	f002 850a 	beq.w	800e1f2 <forward_cast+0x3da6>
 800b7de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7e2:	428c      	cmp	r4, r1
 800b7e4:	f040 824c 	bne.w	800bc80 <forward_cast+0x1834>
 800b7e8:	8828      	ldrh	r0, [r5, #0]
 800b7ea:	e6ac      	b.n	800b546 <forward_cast+0x10fa>
 800b7ec:	4958      	ldr	r1, [pc, #352]	; (800b950 <forward_cast+0x1504>)
 800b7ee:	428c      	cmp	r4, r1
 800b7f0:	f001 85c2 	beq.w	800d378 <forward_cast+0x2f2c>
 800b7f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7f8:	428c      	cmp	r4, r1
 800b7fa:	f040 8243 	bne.w	800bc84 <forward_cast+0x1838>
 800b7fe:	edd5 7a00 	vldr	s15, [r5]
 800b802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b80a:	ee17 0a90 	vmov	r0, s15
 800b80e:	e62d      	b.n	800b46c <forward_cast+0x1020>
 800b810:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800b814:	428c      	cmp	r4, r1
 800b816:	f002 843c 	beq.w	800e092 <forward_cast+0x3c46>
 800b81a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b81e:	428c      	cmp	r4, r1
 800b820:	f040 822b 	bne.w	800bc7a <forward_cast+0x182e>
 800b824:	8828      	ldrh	r0, [r5, #0]
 800b826:	e5eb      	b.n	800b400 <forward_cast+0xfb4>
 800b828:	455c      	cmp	r4, fp
 800b82a:	f001 84f4 	beq.w	800d216 <forward_cast+0x2dca>
 800b82e:	429c      	cmp	r4, r3
 800b830:	f040 821a 	bne.w	800bc68 <forward_cast+0x181c>
 800b834:	edd5 7a00 	vldr	s15, [r5]
 800b838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b83c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b840:	ee17 0a90 	vmov	r0, s15
 800b844:	f7fe bf45 	b.w	800a6d2 <forward_cast+0x286>
 800b848:	42bc      	cmp	r4, r7
 800b84a:	f001 867e 	beq.w	800d54a <forward_cast+0x30fe>
 800b84e:	493f      	ldr	r1, [pc, #252]	; (800b94c <forward_cast+0x1500>)
 800b850:	428c      	cmp	r4, r1
 800b852:	f040 8209 	bne.w	800bc68 <forward_cast+0x181c>
 800b856:	8828      	ldrh	r0, [r5, #0]
 800b858:	f7fe bf3b 	b.w	800a6d2 <forward_cast+0x286>
 800b85c:	42bc      	cmp	r4, r7
 800b85e:	d06f      	beq.n	800b940 <forward_cast+0x14f4>
 800b860:	455c      	cmp	r4, fp
 800b862:	f040 8250 	bne.w	800bd06 <forward_cast+0x18ba>
 800b866:	edd5 7a00 	vldr	s15, [r5]
 800b86a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b872:	ee17 1a90 	vmov	r1, s15
 800b876:	b289      	uxth	r1, r1
 800b878:	f7fe beda 	b.w	800a630 <forward_cast+0x1e4>
 800b87c:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800b880:	428c      	cmp	r4, r1
 800b882:	f002 8055 	beq.w	800d930 <forward_cast+0x34e4>
 800b886:	4294      	cmp	r4, r2
 800b888:	f040 81f4 	bne.w	800bc74 <forward_cast+0x1828>
 800b88c:	edd5 7a00 	vldr	s15, [r5]
 800b890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b898:	ee17 0a90 	vmov	r0, s15
 800b89c:	f7ff b8a6 	b.w	800a9ec <forward_cast+0x5a0>
 800b8a0:	42bc      	cmp	r4, r7
 800b8a2:	f000 80d4 	beq.w	800ba4e <forward_cast+0x1602>
 800b8a6:	455c      	cmp	r4, fp
 800b8a8:	f040 822a 	bne.w	800bd00 <forward_cast+0x18b4>
 800b8ac:	edd5 7a00 	vldr	s15, [r5]
 800b8b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8b8:	ee17 1a90 	vmov	r1, s15
 800b8bc:	b209      	sxth	r1, r1
 800b8be:	f7ff bb3f 	b.w	800af40 <forward_cast+0xaf4>
 800b8c2:	4294      	cmp	r4, r2
 800b8c4:	f001 870e 	beq.w	800d6e4 <forward_cast+0x3298>
 800b8c8:	4920      	ldr	r1, [pc, #128]	; (800b94c <forward_cast+0x1500>)
 800b8ca:	428c      	cmp	r4, r1
 800b8cc:	f040 81da 	bne.w	800bc84 <forward_cast+0x1838>
 800b8d0:	8828      	ldrh	r0, [r5, #0]
 800b8d2:	e5cb      	b.n	800b46c <forward_cast+0x1020>
 800b8d4:	455c      	cmp	r4, fp
 800b8d6:	f001 8430 	beq.w	800d13a <forward_cast+0x2cee>
 800b8da:	491b      	ldr	r1, [pc, #108]	; (800b948 <forward_cast+0x14fc>)
 800b8dc:	428c      	cmp	r4, r1
 800b8de:	f040 81cc 	bne.w	800bc7a <forward_cast+0x182e>
 800b8e2:	edd5 7a00 	vldr	s15, [r5]
 800b8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8ee:	ee17 0a90 	vmov	r0, s15
 800b8f2:	e585      	b.n	800b400 <forward_cast+0xfb4>
 800b8f4:	4917      	ldr	r1, [pc, #92]	; (800b954 <forward_cast+0x1508>)
 800b8f6:	428c      	cmp	r4, r1
 800b8f8:	f002 82ff 	beq.w	800defa <forward_cast+0x3aae>
 800b8fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b900:	428c      	cmp	r4, r1
 800b902:	f040 81b7 	bne.w	800bc74 <forward_cast+0x1828>
 800b906:	8828      	ldrh	r0, [r5, #0]
 800b908:	f7ff b870 	b.w	800a9ec <forward_cast+0x5a0>
 800b90c:	42bc      	cmp	r4, r7
 800b90e:	d076      	beq.n	800b9fe <forward_cast+0x15b2>
 800b910:	455c      	cmp	r4, fp
 800b912:	f040 81ac 	bne.w	800bc6e <forward_cast+0x1822>
 800b916:	edd5 7a00 	vldr	s15, [r5]
 800b91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b91e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b922:	ee17 1a90 	vmov	r1, s15
 800b926:	b289      	uxth	r1, r1
 800b928:	f7ff b824 	b.w	800a974 <forward_cast+0x528>
 800b92c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b930:	428c      	cmp	r4, r1
 800b932:	f001 861f 	beq.w	800d574 <forward_cast+0x3128>
 800b936:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b93a:	428c      	cmp	r4, r1
 800b93c:	f040 81e3 	bne.w	800bd06 <forward_cast+0x18ba>
 800b940:	8829      	ldrh	r1, [r5, #0]
 800b942:	f7fe be75 	b.w	800a630 <forward_cast+0x1e4>
 800b946:	bf00      	nop
 800b948:	00841040 	.word	0x00841040
 800b94c:	00040840 	.word	0x00040840
 800b950:	00840840 	.word	0x00840840
 800b954:	00040440 	.word	0x00040440
 800b958:	455c      	cmp	r4, fp
 800b95a:	d043      	beq.n	800b9e4 <forward_cast+0x1598>
 800b95c:	429c      	cmp	r4, r3
 800b95e:	f040 817b 	bne.w	800bc58 <forward_cast+0x180c>
 800b962:	edd5 7a00 	vldr	s15, [r5]
 800b966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b96e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b972:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b976:	f7ff b99c 	b.w	800acb2 <forward_cast+0x866>
 800b97a:	42bc      	cmp	r4, r7
 800b97c:	f001 8623 	beq.w	800d5c6 <forward_cast+0x317a>
 800b980:	49da      	ldr	r1, [pc, #872]	; (800bcec <forward_cast+0x18a0>)
 800b982:	428c      	cmp	r4, r1
 800b984:	f040 8192 	bne.w	800bcac <forward_cast+0x1860>
 800b988:	edd5 7a00 	vldr	s15, [r5]
 800b98c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b994:	ee17 0a90 	vmov	r0, s15
 800b998:	e4d8      	b.n	800b34c <forward_cast+0xf00>
 800b99a:	455c      	cmp	r4, fp
 800b99c:	f001 846b 	beq.w	800d276 <forward_cast+0x2e2a>
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	f040 818c 	bne.w	800bcbe <forward_cast+0x1872>
 800b9a6:	edd5 7a00 	vldr	s15, [r5]
 800b9aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9b2:	ee17 0a90 	vmov	r0, s15
 800b9b6:	f7fe beef 	b.w	800a798 <forward_cast+0x34c>
 800b9ba:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b9be:	428c      	cmp	r4, r1
 800b9c0:	d004      	beq.n	800b9cc <forward_cast+0x1580>
 800b9c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9c6:	428c      	cmp	r4, r1
 800b9c8:	f040 8149 	bne.w	800bc5e <forward_cast+0x1812>
 800b9cc:	7829      	ldrb	r1, [r5, #0]
 800b9ce:	f7ff b931 	b.w	800ac34 <forward_cast+0x7e8>
 800b9d2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b9d6:	428c      	cmp	r4, r1
 800b9d8:	d004      	beq.n	800b9e4 <forward_cast+0x1598>
 800b9da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9de:	428c      	cmp	r4, r1
 800b9e0:	f040 813a 	bne.w	800bc58 <forward_cast+0x180c>
 800b9e4:	7829      	ldrb	r1, [r5, #0]
 800b9e6:	f7ff b964 	b.w	800acb2 <forward_cast+0x866>
 800b9ea:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b9ee:	428c      	cmp	r4, r1
 800b9f0:	f001 833e 	beq.w	800d070 <forward_cast+0x2c24>
 800b9f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9f8:	428c      	cmp	r4, r1
 800b9fa:	f040 8138 	bne.w	800bc6e <forward_cast+0x1822>
 800b9fe:	8829      	ldrh	r1, [r5, #0]
 800ba00:	f7fe bfb8 	b.w	800a974 <forward_cast+0x528>
 800ba04:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800ba08:	428c      	cmp	r4, r1
 800ba0a:	d004      	beq.n	800ba16 <forward_cast+0x15ca>
 800ba0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba10:	428c      	cmp	r4, r1
 800ba12:	f040 8127 	bne.w	800bc64 <forward_cast+0x1818>
 800ba16:	f995 1000 	ldrsb.w	r1, [r5]
 800ba1a:	e55c      	b.n	800b4d6 <forward_cast+0x108a>
 800ba1c:	42bc      	cmp	r4, r7
 800ba1e:	f002 8101 	beq.w	800dc24 <forward_cast+0x37d8>
 800ba22:	429c      	cmp	r4, r3
 800ba24:	f040 812c 	bne.w	800bc80 <forward_cast+0x1834>
 800ba28:	edd5 7a00 	vldr	s15, [r5]
 800ba2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba34:	ee17 0a90 	vmov	r0, s15
 800ba38:	e585      	b.n	800b546 <forward_cast+0x10fa>
 800ba3a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ba3e:	428c      	cmp	r4, r1
 800ba40:	f001 8661 	beq.w	800d706 <forward_cast+0x32ba>
 800ba44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba48:	428c      	cmp	r4, r1
 800ba4a:	f040 8159 	bne.w	800bd00 <forward_cast+0x18b4>
 800ba4e:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ba52:	f7ff ba75 	b.w	800af40 <forward_cast+0xaf4>
 800ba56:	455c      	cmp	r4, fp
 800ba58:	d0b8      	beq.n	800b9cc <forward_cast+0x1580>
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	f040 80ff 	bne.w	800bc5e <forward_cast+0x1812>
 800ba60:	edd5 7a00 	vldr	s15, [r5]
 800ba64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba6c:	edcd 7a01 	vstr	s15, [sp, #4]
 800ba70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ba74:	f7ff b8de 	b.w	800ac34 <forward_cast+0x7e8>
 800ba78:	499d      	ldr	r1, [pc, #628]	; (800bcf0 <forward_cast+0x18a4>)
 800ba7a:	428c      	cmp	r4, r1
 800ba7c:	f001 840d 	beq.w	800d29a <forward_cast+0x2e4e>
 800ba80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba84:	428c      	cmp	r4, r1
 800ba86:	f040 8104 	bne.w	800bc92 <forward_cast+0x1846>
 800ba8a:	edd5 7a00 	vldr	s15, [r5]
 800ba8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba92:	f7ff b897 	b.w	800abc4 <forward_cast+0x778>
 800ba96:	4996      	ldr	r1, [pc, #600]	; (800bcf0 <forward_cast+0x18a4>)
 800ba98:	428c      	cmp	r4, r1
 800ba9a:	f001 8414 	beq.w	800d2c6 <forward_cast+0x2e7a>
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	f040 8110 	bne.w	800bcc4 <forward_cast+0x1878>
 800baa4:	edd5 7a00 	vldr	s15, [r5]
 800baa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bab0:	ee17 0a90 	vmov	r0, s15
 800bab4:	f7ff b82c 	b.w	800ab10 <forward_cast+0x6c4>
 800bab8:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800babc:	428c      	cmp	r4, r1
 800babe:	f001 875c 	beq.w	800d97a <forward_cast+0x352e>
 800bac2:	4544      	cmp	r4, r8
 800bac4:	f040 80e9 	bne.w	800bc9a <forward_cast+0x184e>
 800bac8:	edd5 7a00 	vldr	s15, [r5]
 800bacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bad4:	ee17 0a90 	vmov	r0, s15
 800bad8:	f7fe bfda 	b.w	800aa90 <forward_cast+0x644>
 800badc:	429c      	cmp	r4, r3
 800bade:	f002 8372 	beq.w	800e1c6 <forward_cast+0x3d7a>
 800bae2:	42bc      	cmp	r4, r7
 800bae4:	f040 80fd 	bne.w	800bce2 <forward_cast+0x1896>
 800bae8:	edd5 7a00 	vldr	s15, [r5]
 800baec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf8:	f7ff b970 	b.w	800addc <forward_cast+0x990>
 800bafc:	42bc      	cmp	r4, r7
 800bafe:	f002 830b 	beq.w	800e118 <forward_cast+0x3ccc>
 800bb02:	455c      	cmp	r4, fp
 800bb04:	f040 80e7 	bne.w	800bcd6 <forward_cast+0x188a>
 800bb08:	edd5 7a00 	vldr	s15, [r5]
 800bb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb14:	ee17 0a90 	vmov	r0, s15
 800bb18:	f7ff bb17 	b.w	800b14a <forward_cast+0xcfe>
 800bb1c:	42bc      	cmp	r4, r7
 800bb1e:	f43f ae24 	beq.w	800b76a <forward_cast+0x131e>
 800bb22:	455c      	cmp	r4, fp
 800bb24:	f040 80da 	bne.w	800bcdc <forward_cast+0x1890>
 800bb28:	edd5 7a00 	vldr	s15, [r5]
 800bb2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb34:	ee17 1a90 	vmov	r1, s15
 800bb38:	b289      	uxth	r1, r1
 800bb3a:	f7fe be85 	b.w	800a848 <forward_cast+0x3fc>
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	f001 8514 	beq.w	800d56c <forward_cast+0x3120>
 800bb44:	4294      	cmp	r4, r2
 800bb46:	f040 80c3 	bne.w	800bcd0 <forward_cast+0x1884>
 800bb4a:	edd5 7a00 	vldr	s15, [r5]
 800bb4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb56:	ee17 0a90 	vmov	r0, s15
 800bb5a:	f7fe bd18 	b.w	800a58e <forward_cast+0x142>
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	f001 86f9 	beq.w	800d956 <forward_cast+0x350a>
 800bb64:	4294      	cmp	r4, r2
 800bb66:	f040 80b0 	bne.w	800bcca <forward_cast+0x187e>
 800bb6a:	edd5 7a00 	vldr	s15, [r5]
 800bb6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb76:	ee17 0a90 	vmov	r0, s15
 800bb7a:	f7ff ba69 	b.w	800b050 <forward_cast+0xc04>
 800bb7e:	42bc      	cmp	r4, r7
 800bb80:	f43f ade5 	beq.w	800b74e <forward_cast+0x1302>
 800bb84:	455c      	cmp	r4, fp
 800bb86:	f040 8094 	bne.w	800bcb2 <forward_cast+0x1866>
 800bb8a:	edd5 7a00 	vldr	s15, [r5]
 800bb8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb96:	ee17 1a90 	vmov	r1, s15
 800bb9a:	b209      	sxth	r1, r1
 800bb9c:	f7ff b958 	b.w	800ae50 <forward_cast+0xa04>
 800bba0:	455c      	cmp	r4, fp
 800bba2:	f002 8339 	beq.w	800e218 <forward_cast+0x3dcc>
 800bba6:	4951      	ldr	r1, [pc, #324]	; (800bcec <forward_cast+0x18a0>)
 800bba8:	428c      	cmp	r4, r1
 800bbaa:	f040 80a3 	bne.w	800bcf4 <forward_cast+0x18a8>
 800bbae:	edd5 7a00 	vldr	s15, [r5]
 800bbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbba:	ee17 0a90 	vmov	r0, s15
 800bbbe:	f7ff bb78 	b.w	800b2b2 <forward_cast+0xe66>
 800bbc2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bbc6:	428c      	cmp	r4, r1
 800bbc8:	f43f af25 	beq.w	800ba16 <forward_cast+0x15ca>
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	d149      	bne.n	800bc64 <forward_cast+0x1818>
 800bbd0:	edd5 7a00 	vldr	s15, [r5]
 800bbd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbdc:	edcd 7a01 	vstr	s15, [sp, #4]
 800bbe0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800bbe4:	e477      	b.n	800b4d6 <forward_cast+0x108a>
 800bbe6:	429c      	cmp	r4, r3
 800bbe8:	f001 86d9 	beq.w	800d99e <forward_cast+0x3552>
 800bbec:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 800bbf0:	428c      	cmp	r4, r1
 800bbf2:	f040 8082 	bne.w	800bcfa <forward_cast+0x18ae>
 800bbf6:	edd5 7a00 	vldr	s15, [r5]
 800bbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc02:	ee17 0a90 	vmov	r0, s15
 800bc06:	f7fe be69 	b.w	800a8dc <forward_cast+0x490>
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	f001 84ed 	beq.w	800d5ea <forward_cast+0x319e>
 800bc10:	4294      	cmp	r4, r2
 800bc12:	d13a      	bne.n	800bc8a <forward_cast+0x183e>
 800bc14:	edd5 7a00 	vldr	s15, [r5]
 800bc18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc24:	f7ff b899 	b.w	800ad5a <forward_cast+0x90e>
 800bc28:	455c      	cmp	r4, fp
 800bc2a:	f001 8463 	beq.w	800d4f4 <forward_cast+0x30a8>
 800bc2e:	4544      	cmp	r4, r8
 800bc30:	d139      	bne.n	800bca6 <forward_cast+0x185a>
 800bc32:	edd5 7a00 	vldr	s15, [r5]
 800bc36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc3e:	ee17 0a90 	vmov	r0, s15
 800bc42:	f7ff bac0 	b.w	800b1c6 <forward_cast+0xd7a>
 800bc46:	9b00      	ldr	r3, [sp, #0]
 800bc48:	f8c6 8000 	str.w	r8, [r6]
 800bc4c:	45aa      	cmp	sl, r5
 800bc4e:	441e      	add	r6, r3
 800bc50:	f63f aa48 	bhi.w	800b0e4 <forward_cast+0xc98>
 800bc54:	f7fe bc62 	b.w	800a51c <forward_cast+0xd0>
 800bc58:	2100      	movs	r1, #0
 800bc5a:	f7ff b82a 	b.w	800acb2 <forward_cast+0x866>
 800bc5e:	2100      	movs	r1, #0
 800bc60:	f7fe bfe8 	b.w	800ac34 <forward_cast+0x7e8>
 800bc64:	2100      	movs	r1, #0
 800bc66:	e436      	b.n	800b4d6 <forward_cast+0x108a>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	f7fe bd32 	b.w	800a6d2 <forward_cast+0x286>
 800bc6e:	2100      	movs	r1, #0
 800bc70:	f7fe be80 	b.w	800a974 <forward_cast+0x528>
 800bc74:	2000      	movs	r0, #0
 800bc76:	f7fe beb9 	b.w	800a9ec <forward_cast+0x5a0>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	f7ff bbc0 	b.w	800b400 <forward_cast+0xfb4>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e460      	b.n	800b546 <forward_cast+0x10fa>
 800bc84:	2000      	movs	r0, #0
 800bc86:	f7ff bbf1 	b.w	800b46c <forward_cast+0x1020>
 800bc8a:	eef0 7a48 	vmov.f32	s15, s16
 800bc8e:	f7ff b864 	b.w	800ad5a <forward_cast+0x90e>
 800bc92:	eef0 7a48 	vmov.f32	s15, s16
 800bc96:	f7fe bf95 	b.w	800abc4 <forward_cast+0x778>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7fe bef8 	b.w	800aa90 <forward_cast+0x644>
 800bca0:	2100      	movs	r1, #0
 800bca2:	f7ff bacb 	b.w	800b23c <forward_cast+0xdf0>
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7ff ba8d 	b.w	800b1c6 <forward_cast+0xd7a>
 800bcac:	2000      	movs	r0, #0
 800bcae:	f7ff bb4d 	b.w	800b34c <forward_cast+0xf00>
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f7ff b8cc 	b.w	800ae50 <forward_cast+0xa04>
 800bcb8:	2100      	movs	r1, #0
 800bcba:	f7ff b905 	b.w	800aec8 <forward_cast+0xa7c>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f7fe bd6a 	b.w	800a798 <forward_cast+0x34c>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f7fe bf23 	b.w	800ab10 <forward_cast+0x6c4>
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7ff b9c0 	b.w	800b050 <forward_cast+0xc04>
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7fe bc5c 	b.w	800a58e <forward_cast+0x142>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	f7ff ba37 	b.w	800b14a <forward_cast+0xcfe>
 800bcdc:	2100      	movs	r1, #0
 800bcde:	f7fe bdb3 	b.w	800a848 <forward_cast+0x3fc>
 800bce2:	eef0 7a48 	vmov.f32	s15, s16
 800bce6:	f7ff b879 	b.w	800addc <forward_cast+0x990>
 800bcea:	bf00      	nop
 800bcec:	00841040 	.word	0x00841040
 800bcf0:	00840840 	.word	0x00840840
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f7ff badc 	b.w	800b2b2 <forward_cast+0xe66>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f7fe bdee 	b.w	800a8dc <forward_cast+0x490>
 800bd00:	2100      	movs	r1, #0
 800bd02:	f7ff b91d 	b.w	800af40 <forward_cast+0xaf4>
 800bd06:	2100      	movs	r1, #0
 800bd08:	f7fe bc92 	b.w	800a630 <forward_cast+0x1e4>
 800bd0c:	4555      	cmp	r5, sl
 800bd0e:	f4be ac05 	bcs.w	800a51c <forward_cast+0xd0>
 800bd12:	4f9c      	ldr	r7, [pc, #624]	; (800bf84 <forward_cast+0x1b38>)
 800bd14:	4b9c      	ldr	r3, [pc, #624]	; (800bf88 <forward_cast+0x1b3c>)
 800bd16:	4a9d      	ldr	r2, [pc, #628]	; (800bf8c <forward_cast+0x1b40>)
 800bd18:	e014      	b.n	800bd44 <forward_cast+0x18f8>
 800bd1a:	499d      	ldr	r1, [pc, #628]	; (800bf90 <forward_cast+0x1b44>)
 800bd1c:	428c      	cmp	r4, r1
 800bd1e:	f001 8764 	beq.w	800dbea <forward_cast+0x379e>
 800bd22:	dd21      	ble.n	800bd68 <forward_cast+0x191c>
 800bd24:	429c      	cmp	r4, r3
 800bd26:	f001 8707 	beq.w	800db38 <forward_cast+0x36ec>
 800bd2a:	4294      	cmp	r4, r2
 800bd2c:	d137      	bne.n	800bd9e <forward_cast+0x1952>
 800bd2e:	7828      	ldrb	r0, [r5, #0]
 800bd30:	3800      	subs	r0, #0
 800bd32:	bf18      	it	ne
 800bd34:	2001      	movne	r0, #1
 800bd36:	9900      	ldr	r1, [sp, #0]
 800bd38:	6030      	str	r0, [r6, #0]
 800bd3a:	444d      	add	r5, r9
 800bd3c:	45aa      	cmp	sl, r5
 800bd3e:	440e      	add	r6, r1
 800bd40:	f67e abec 	bls.w	800a51c <forward_cast+0xd0>
 800bd44:	4544      	cmp	r4, r8
 800bd46:	f001 8709 	beq.w	800db5c <forward_cast+0x3710>
 800bd4a:	dde6      	ble.n	800bd1a <forward_cast+0x18ce>
 800bd4c:	4991      	ldr	r1, [pc, #580]	; (800bf94 <forward_cast+0x1b48>)
 800bd4e:	428c      	cmp	r4, r1
 800bd50:	f001 86e1 	beq.w	800db16 <forward_cast+0x36ca>
 800bd54:	dd13      	ble.n	800bd7e <forward_cast+0x1932>
 800bd56:	42bc      	cmp	r4, r7
 800bd58:	d121      	bne.n	800bd9e <forward_cast+0x1952>
 800bd5a:	edd5 7a00 	vldr	s15, [r5]
 800bd5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd62:	ee17 0a90 	vmov	r0, s15
 800bd66:	e7e6      	b.n	800bd36 <forward_cast+0x18ea>
 800bd68:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800bd6c:	428c      	cmp	r4, r1
 800bd6e:	f001 86e0 	beq.w	800db32 <forward_cast+0x36e6>
 800bd72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bd76:	428c      	cmp	r4, r1
 800bd78:	d111      	bne.n	800bd9e <forward_cast+0x1952>
 800bd7a:	8828      	ldrh	r0, [r5, #0]
 800bd7c:	e7db      	b.n	800bd36 <forward_cast+0x18ea>
 800bd7e:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bd82:	428c      	cmp	r4, r1
 800bd84:	f001 86e6 	beq.w	800db54 <forward_cast+0x3708>
 800bd88:	455c      	cmp	r4, fp
 800bd8a:	d108      	bne.n	800bd9e <forward_cast+0x1952>
 800bd8c:	edd5 7a00 	vldr	s15, [r5]
 800bd90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd98:	ee17 0a90 	vmov	r0, s15
 800bd9c:	e7cb      	b.n	800bd36 <forward_cast+0x18ea>
 800bd9e:	2000      	movs	r0, #0
 800bda0:	e7c9      	b.n	800bd36 <forward_cast+0x18ea>
 800bda2:	4555      	cmp	r5, sl
 800bda4:	f4be abba 	bcs.w	800a51c <forward_cast+0xd0>
 800bda8:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800bf84 <forward_cast+0x1b38>
 800bdac:	4f7a      	ldr	r7, [pc, #488]	; (800bf98 <forward_cast+0x1b4c>)
 800bdae:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 800bfa4 <forward_cast+0x1b58>
 800bdb2:	4b77      	ldr	r3, [pc, #476]	; (800bf90 <forward_cast+0x1b44>)
 800bdb4:	4a74      	ldr	r2, [pc, #464]	; (800bf88 <forward_cast+0x1b3c>)
 800bdb6:	e017      	b.n	800bde8 <forward_cast+0x199c>
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	f001 86db 	beq.w	800db74 <forward_cast+0x3728>
 800bdbe:	dd26      	ble.n	800be0e <forward_cast+0x19c2>
 800bdc0:	4294      	cmp	r4, r2
 800bdc2:	f001 8700 	beq.w	800dbc6 <forward_cast+0x377a>
 800bdc6:	4971      	ldr	r1, [pc, #452]	; (800bf8c <forward_cast+0x1b40>)
 800bdc8:	428c      	cmp	r4, r1
 800bdca:	d139      	bne.n	800be40 <forward_cast+0x19f4>
 800bdcc:	7828      	ldrb	r0, [r5, #0]
 800bdce:	3800      	subs	r0, #0
 800bdd0:	bf18      	it	ne
 800bdd2:	2001      	movne	r0, #1
 800bdd4:	f380 0010 	usat	r0, #16, r0
 800bdd8:	9900      	ldr	r1, [sp, #0]
 800bdda:	444d      	add	r5, r9
 800bddc:	b280      	uxth	r0, r0
 800bdde:	45aa      	cmp	sl, r5
 800bde0:	6030      	str	r0, [r6, #0]
 800bde2:	440e      	add	r6, r1
 800bde4:	f67e ab9a 	bls.w	800a51c <forward_cast+0xd0>
 800bde8:	496c      	ldr	r1, [pc, #432]	; (800bf9c <forward_cast+0x1b50>)
 800bdea:	428c      	cmp	r4, r1
 800bdec:	f001 86be 	beq.w	800db6c <forward_cast+0x3720>
 800bdf0:	dde2      	ble.n	800bdb8 <forward_cast+0x196c>
 800bdf2:	4968      	ldr	r1, [pc, #416]	; (800bf94 <forward_cast+0x1b48>)
 800bdf4:	428c      	cmp	r4, r1
 800bdf6:	f001 86d5 	beq.w	800dba4 <forward_cast+0x3758>
 800bdfa:	dd13      	ble.n	800be24 <forward_cast+0x19d8>
 800bdfc:	4544      	cmp	r4, r8
 800bdfe:	d11f      	bne.n	800be40 <forward_cast+0x19f4>
 800be00:	edd5 7a00 	vldr	s15, [r5]
 800be04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be08:	ee17 0a90 	vmov	r0, s15
 800be0c:	e7e2      	b.n	800bdd4 <forward_cast+0x1988>
 800be0e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800be12:	428c      	cmp	r4, r1
 800be14:	f001 86d4 	beq.w	800dbc0 <forward_cast+0x3774>
 800be18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800be1c:	428c      	cmp	r4, r1
 800be1e:	d10f      	bne.n	800be40 <forward_cast+0x19f4>
 800be20:	8828      	ldrh	r0, [r5, #0]
 800be22:	e7d7      	b.n	800bdd4 <forward_cast+0x1988>
 800be24:	42bc      	cmp	r4, r7
 800be26:	f001 86dc 	beq.w	800dbe2 <forward_cast+0x3796>
 800be2a:	455c      	cmp	r4, fp
 800be2c:	d108      	bne.n	800be40 <forward_cast+0x19f4>
 800be2e:	edd5 7a00 	vldr	s15, [r5]
 800be32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be3a:	ee17 0a90 	vmov	r0, s15
 800be3e:	e7c9      	b.n	800bdd4 <forward_cast+0x1988>
 800be40:	2000      	movs	r0, #0
 800be42:	e7c7      	b.n	800bdd4 <forward_cast+0x1988>
 800be44:	4555      	cmp	r5, sl
 800be46:	f4be ab69 	bcs.w	800a51c <forward_cast+0xd0>
 800be4a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800bf84 <forward_cast+0x1b38>
 800be4e:	4b50      	ldr	r3, [pc, #320]	; (800bf90 <forward_cast+0x1b44>)
 800be50:	4a4d      	ldr	r2, [pc, #308]	; (800bf88 <forward_cast+0x1b3c>)
 800be52:	2700      	movs	r7, #0
 800be54:	e016      	b.n	800be84 <forward_cast+0x1a38>
 800be56:	429c      	cmp	r4, r3
 800be58:	f001 8468 	beq.w	800d72c <forward_cast+0x32e0>
 800be5c:	dd24      	ble.n	800bea8 <forward_cast+0x1a5c>
 800be5e:	4294      	cmp	r4, r2
 800be60:	f001 87cf 	beq.w	800de02 <forward_cast+0x39b6>
 800be64:	4949      	ldr	r1, [pc, #292]	; (800bf8c <forward_cast+0x1b40>)
 800be66:	428c      	cmp	r4, r1
 800be68:	d13a      	bne.n	800bee0 <forward_cast+0x1a94>
 800be6a:	7828      	ldrb	r0, [r5, #0]
 800be6c:	3800      	subs	r0, #0
 800be6e:	bf18      	it	ne
 800be70:	2001      	movne	r0, #1
 800be72:	f300 0007 	ssat	r0, #8, r0
 800be76:	9900      	ldr	r1, [sp, #0]
 800be78:	55f0      	strb	r0, [r6, r7]
 800be7a:	444d      	add	r5, r9
 800be7c:	45aa      	cmp	sl, r5
 800be7e:	440f      	add	r7, r1
 800be80:	f67e ab4c 	bls.w	800a51c <forward_cast+0xd0>
 800be84:	455c      	cmp	r4, fp
 800be86:	f001 8460 	beq.w	800d74a <forward_cast+0x32fe>
 800be8a:	dde4      	ble.n	800be56 <forward_cast+0x1a0a>
 800be8c:	4941      	ldr	r1, [pc, #260]	; (800bf94 <forward_cast+0x1b48>)
 800be8e:	428c      	cmp	r4, r1
 800be90:	f001 87a6 	beq.w	800dde0 <forward_cast+0x3994>
 800be94:	dd12      	ble.n	800bebc <forward_cast+0x1a70>
 800be96:	4544      	cmp	r4, r8
 800be98:	d122      	bne.n	800bee0 <forward_cast+0x1a94>
 800be9a:	edd5 7a00 	vldr	s15, [r5]
 800be9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea2:	ee17 0a90 	vmov	r0, s15
 800bea6:	e7e4      	b.n	800be72 <forward_cast+0x1a26>
 800bea8:	493d      	ldr	r1, [pc, #244]	; (800bfa0 <forward_cast+0x1b54>)
 800beaa:	428c      	cmp	r4, r1
 800beac:	f001 87a6 	beq.w	800ddfc <forward_cast+0x39b0>
 800beb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800beb4:	428c      	cmp	r4, r1
 800beb6:	d113      	bne.n	800bee0 <forward_cast+0x1a94>
 800beb8:	8828      	ldrh	r0, [r5, #0]
 800beba:	e7da      	b.n	800be72 <forward_cast+0x1a26>
 800bebc:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bec0:	428c      	cmp	r4, r1
 800bec2:	f001 87ac 	beq.w	800de1e <forward_cast+0x39d2>
 800bec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beca:	428c      	cmp	r4, r1
 800becc:	d108      	bne.n	800bee0 <forward_cast+0x1a94>
 800bece:	edd5 7a00 	vldr	s15, [r5]
 800bed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beda:	ee17 0a90 	vmov	r0, s15
 800bede:	e7c8      	b.n	800be72 <forward_cast+0x1a26>
 800bee0:	2000      	movs	r0, #0
 800bee2:	e7c6      	b.n	800be72 <forward_cast+0x1a26>
 800bee4:	4555      	cmp	r5, sl
 800bee6:	f4be ab19 	bcs.w	800a51c <forward_cast+0xd0>
 800beea:	4a28      	ldr	r2, [pc, #160]	; (800bf8c <forward_cast+0x1b40>)
 800beec:	e014      	b.n	800bf18 <forward_cast+0x1acc>
 800beee:	455c      	cmp	r4, fp
 800bef0:	f001 8465 	beq.w	800d7be <forward_cast+0x3372>
 800bef4:	dd22      	ble.n	800bf3c <forward_cast+0x1af0>
 800bef6:	4924      	ldr	r1, [pc, #144]	; (800bf88 <forward_cast+0x1b3c>)
 800bef8:	428c      	cmp	r4, r1
 800befa:	f001 843f 	beq.w	800d77c <forward_cast+0x3330>
 800befe:	4294      	cmp	r4, r2
 800bf00:	d136      	bne.n	800bf70 <forward_cast+0x1b24>
 800bf02:	7828      	ldrb	r0, [r5, #0]
 800bf04:	3800      	subs	r0, #0
 800bf06:	bf18      	it	ne
 800bf08:	2001      	movne	r0, #1
 800bf0a:	9900      	ldr	r1, [sp, #0]
 800bf0c:	6030      	str	r0, [r6, #0]
 800bf0e:	444d      	add	r5, r9
 800bf10:	45aa      	cmp	sl, r5
 800bf12:	440e      	add	r6, r1
 800bf14:	f67e ab02 	bls.w	800a51c <forward_cast+0xd0>
 800bf18:	4544      	cmp	r4, r8
 800bf1a:	f001 844c 	beq.w	800d7b6 <forward_cast+0x336a>
 800bf1e:	dde6      	ble.n	800beee <forward_cast+0x1aa2>
 800bf20:	491c      	ldr	r1, [pc, #112]	; (800bf94 <forward_cast+0x1b48>)
 800bf22:	428c      	cmp	r4, r1
 800bf24:	f001 8419 	beq.w	800d75a <forward_cast+0x330e>
 800bf28:	dd12      	ble.n	800bf50 <forward_cast+0x1b04>
 800bf2a:	42bc      	cmp	r4, r7
 800bf2c:	d120      	bne.n	800bf70 <forward_cast+0x1b24>
 800bf2e:	edd5 7a00 	vldr	s15, [r5]
 800bf32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf36:	ee17 0a90 	vmov	r0, s15
 800bf3a:	e7e6      	b.n	800bf0a <forward_cast+0x1abe>
 800bf3c:	4918      	ldr	r1, [pc, #96]	; (800bfa0 <forward_cast+0x1b54>)
 800bf3e:	428c      	cmp	r4, r1
 800bf40:	f001 8419 	beq.w	800d776 <forward_cast+0x332a>
 800bf44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf48:	428c      	cmp	r4, r1
 800bf4a:	d111      	bne.n	800bf70 <forward_cast+0x1b24>
 800bf4c:	8828      	ldrh	r0, [r5, #0]
 800bf4e:	e7dc      	b.n	800bf0a <forward_cast+0x1abe>
 800bf50:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800bf54:	428c      	cmp	r4, r1
 800bf56:	f001 841f 	beq.w	800d798 <forward_cast+0x334c>
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	d108      	bne.n	800bf70 <forward_cast+0x1b24>
 800bf5e:	edd5 7a00 	vldr	s15, [r5]
 800bf62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf6a:	ee17 0a90 	vmov	r0, s15
 800bf6e:	e7cc      	b.n	800bf0a <forward_cast+0x1abe>
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7ca      	b.n	800bf0a <forward_cast+0x1abe>
 800bf74:	4555      	cmp	r5, sl
 800bf76:	f4be aad1 	bcs.w	800a51c <forward_cast+0xd0>
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	; (800bfa4 <forward_cast+0x1b58>)
 800bf7c:	4a02      	ldr	r2, [pc, #8]	; (800bf88 <forward_cast+0x1b3c>)
 800bf7e:	f04f 0800 	mov.w	r8, #0
 800bf82:	e027      	b.n	800bfd4 <forward_cast+0x1b88>
 800bf84:	01821040 	.word	0x01821040
 800bf88:	00042040 	.word	0x00042040
 800bf8c:	00060440 	.word	0x00060440
 800bf90:	00041040 	.word	0x00041040
 800bf94:	00842040 	.word	0x00842040
 800bf98:	00840840 	.word	0x00840840
 800bf9c:	00840440 	.word	0x00840440
 800bfa0:	00040440 	.word	0x00040440
 800bfa4:	00841040 	.word	0x00841040
 800bfa8:	42bc      	cmp	r4, r7
 800bfaa:	f001 8478 	beq.w	800d89e <forward_cast+0x3452>
 800bfae:	dd25      	ble.n	800bffc <forward_cast+0x1bb0>
 800bfb0:	4294      	cmp	r4, r2
 800bfb2:	f001 8464 	beq.w	800d87e <forward_cast+0x3432>
 800bfb6:	49a9      	ldr	r1, [pc, #676]	; (800c25c <forward_cast+0x1e10>)
 800bfb8:	428c      	cmp	r4, r1
 800bfba:	d13a      	bne.n	800c032 <forward_cast+0x1be6>
 800bfbc:	7829      	ldrb	r1, [r5, #0]
 800bfbe:	3900      	subs	r1, #0
 800bfc0:	bf18      	it	ne
 800bfc2:	2101      	movne	r1, #1
 800bfc4:	f806 1008 	strb.w	r1, [r6, r8]
 800bfc8:	444d      	add	r5, r9
 800bfca:	9900      	ldr	r1, [sp, #0]
 800bfcc:	45aa      	cmp	sl, r5
 800bfce:	4488      	add	r8, r1
 800bfd0:	f67e aaa4 	bls.w	800a51c <forward_cast+0xd0>
 800bfd4:	455c      	cmp	r4, fp
 800bfd6:	d018      	beq.n	800c00a <forward_cast+0x1bbe>
 800bfd8:	dde6      	ble.n	800bfa8 <forward_cast+0x1b5c>
 800bfda:	49a1      	ldr	r1, [pc, #644]	; (800c260 <forward_cast+0x1e14>)
 800bfdc:	428c      	cmp	r4, r1
 800bfde:	f001 843e 	beq.w	800d85e <forward_cast+0x3412>
 800bfe2:	dd15      	ble.n	800c010 <forward_cast+0x1bc4>
 800bfe4:	499f      	ldr	r1, [pc, #636]	; (800c264 <forward_cast+0x1e18>)
 800bfe6:	428c      	cmp	r4, r1
 800bfe8:	d123      	bne.n	800c032 <forward_cast+0x1be6>
 800bfea:	edd5 7a00 	vldr	s15, [r5]
 800bfee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bff2:	edcd 7a01 	vstr	s15, [sp, #4]
 800bff6:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800bffa:	e7e3      	b.n	800bfc4 <forward_cast+0x1b78>
 800bffc:	499a      	ldr	r1, [pc, #616]	; (800c268 <forward_cast+0x1e1c>)
 800bffe:	428c      	cmp	r4, r1
 800c000:	d003      	beq.n	800c00a <forward_cast+0x1bbe>
 800c002:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c006:	428c      	cmp	r4, r1
 800c008:	d113      	bne.n	800c032 <forward_cast+0x1be6>
 800c00a:	f995 1000 	ldrsb.w	r1, [r5]
 800c00e:	e7d9      	b.n	800bfc4 <forward_cast+0x1b78>
 800c010:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c014:	428c      	cmp	r4, r1
 800c016:	d0f8      	beq.n	800c00a <forward_cast+0x1bbe>
 800c018:	429c      	cmp	r4, r3
 800c01a:	d10a      	bne.n	800c032 <forward_cast+0x1be6>
 800c01c:	edd5 7a00 	vldr	s15, [r5]
 800c020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c028:	edcd 7a01 	vstr	s15, [sp, #4]
 800c02c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800c030:	e7c8      	b.n	800bfc4 <forward_cast+0x1b78>
 800c032:	2100      	movs	r1, #0
 800c034:	e7c6      	b.n	800bfc4 <forward_cast+0x1b78>
 800c036:	4555      	cmp	r5, sl
 800c038:	f4be aa70 	bcs.w	800a51c <forward_cast+0xd0>
 800c03c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800c264 <forward_cast+0x1e18>
 800c040:	4f8a      	ldr	r7, [pc, #552]	; (800c26c <forward_cast+0x1e20>)
 800c042:	f8df b238 	ldr.w	fp, [pc, #568]	; 800c27c <forward_cast+0x1e30>
 800c046:	4b8a      	ldr	r3, [pc, #552]	; (800c270 <forward_cast+0x1e24>)
 800c048:	4a8a      	ldr	r2, [pc, #552]	; (800c274 <forward_cast+0x1e28>)
 800c04a:	e014      	b.n	800c076 <forward_cast+0x1c2a>
 800c04c:	429c      	cmp	r4, r3
 800c04e:	f001 83c0 	beq.w	800d7d2 <forward_cast+0x3386>
 800c052:	dd26      	ble.n	800c0a2 <forward_cast+0x1c56>
 800c054:	4294      	cmp	r4, r2
 800c056:	f001 83ea 	beq.w	800d82e <forward_cast+0x33e2>
 800c05a:	4980      	ldr	r1, [pc, #512]	; (800c25c <forward_cast+0x1e10>)
 800c05c:	428c      	cmp	r4, r1
 800c05e:	d13e      	bne.n	800c0de <forward_cast+0x1c92>
 800c060:	7829      	ldrb	r1, [r5, #0]
 800c062:	3900      	subs	r1, #0
 800c064:	bf18      	it	ne
 800c066:	2101      	movne	r1, #1
 800c068:	6031      	str	r1, [r6, #0]
 800c06a:	444d      	add	r5, r9
 800c06c:	9900      	ldr	r1, [sp, #0]
 800c06e:	45aa      	cmp	sl, r5
 800c070:	440e      	add	r6, r1
 800c072:	f67e aa53 	bls.w	800a51c <forward_cast+0xd0>
 800c076:	4980      	ldr	r1, [pc, #512]	; (800c278 <forward_cast+0x1e2c>)
 800c078:	428c      	cmp	r4, r1
 800c07a:	f001 8391 	beq.w	800d7a0 <forward_cast+0x3354>
 800c07e:	dde5      	ble.n	800c04c <forward_cast+0x1c00>
 800c080:	4977      	ldr	r1, [pc, #476]	; (800c260 <forward_cast+0x1e14>)
 800c082:	428c      	cmp	r4, r1
 800c084:	f001 83c2 	beq.w	800d80c <forward_cast+0x33c0>
 800c088:	dd18      	ble.n	800c0bc <forward_cast+0x1c70>
 800c08a:	4544      	cmp	r4, r8
 800c08c:	d127      	bne.n	800c0de <forward_cast+0x1c92>
 800c08e:	edd5 7a00 	vldr	s15, [r5]
 800c092:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09a:	bf14      	ite	ne
 800c09c:	2101      	movne	r1, #1
 800c09e:	2100      	moveq	r1, #0
 800c0a0:	e7e2      	b.n	800c068 <forward_cast+0x1c1c>
 800c0a2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c0a6:	428c      	cmp	r4, r1
 800c0a8:	d0da      	beq.n	800c060 <forward_cast+0x1c14>
 800c0aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c0ae:	428c      	cmp	r4, r1
 800c0b0:	d115      	bne.n	800c0de <forward_cast+0x1c92>
 800c0b2:	8829      	ldrh	r1, [r5, #0]
 800c0b4:	3900      	subs	r1, #0
 800c0b6:	bf18      	it	ne
 800c0b8:	2101      	movne	r1, #1
 800c0ba:	e7d5      	b.n	800c068 <forward_cast+0x1c1c>
 800c0bc:	42bc      	cmp	r4, r7
 800c0be:	f001 83c7 	beq.w	800d850 <forward_cast+0x3404>
 800c0c2:	455c      	cmp	r4, fp
 800c0c4:	d10b      	bne.n	800c0de <forward_cast+0x1c92>
 800c0c6:	edd5 7a00 	vldr	s15, [r5]
 800c0ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	bf14      	ite	ne
 800c0d8:	2101      	movne	r1, #1
 800c0da:	2100      	moveq	r1, #0
 800c0dc:	e7c4      	b.n	800c068 <forward_cast+0x1c1c>
 800c0de:	2100      	movs	r1, #0
 800c0e0:	e7c2      	b.n	800c068 <forward_cast+0x1c1c>
 800c0e2:	4555      	cmp	r5, sl
 800c0e4:	f4be aa1a 	bcs.w	800a51c <forward_cast+0xd0>
 800c0e8:	9f00      	ldr	r7, [sp, #0]
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f7fe f937 	bl	800a360 <_array_handle_get_as_float>
 800c0f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c0f6:	ee17 3a90 	vmov	r3, s15
 800c0fa:	f383 0308 	usat	r3, #8, r3
 800c0fe:	444d      	add	r5, r9
 800c100:	45aa      	cmp	sl, r5
 800c102:	7033      	strb	r3, [r6, #0]
 800c104:	443e      	add	r6, r7
 800c106:	d8f0      	bhi.n	800c0ea <forward_cast+0x1c9e>
 800c108:	f7fe ba08 	b.w	800a51c <forward_cast+0xd0>
 800c10c:	4555      	cmp	r5, sl
 800c10e:	f4be aa05 	bcs.w	800a51c <forward_cast+0xd0>
 800c112:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800c264 <forward_cast+0x1e18>
 800c116:	4f55      	ldr	r7, [pc, #340]	; (800c26c <forward_cast+0x1e20>)
 800c118:	f8df b160 	ldr.w	fp, [pc, #352]	; 800c27c <forward_cast+0x1e30>
 800c11c:	4b54      	ldr	r3, [pc, #336]	; (800c270 <forward_cast+0x1e24>)
 800c11e:	4a55      	ldr	r2, [pc, #340]	; (800c274 <forward_cast+0x1e28>)
 800c120:	e017      	b.n	800c152 <forward_cast+0x1d06>
 800c122:	429c      	cmp	r4, r3
 800c124:	f001 8726 	beq.w	800df74 <forward_cast+0x3b28>
 800c128:	dd26      	ble.n	800c178 <forward_cast+0x1d2c>
 800c12a:	4294      	cmp	r4, r2
 800c12c:	f001 86f9 	beq.w	800df22 <forward_cast+0x3ad6>
 800c130:	494a      	ldr	r1, [pc, #296]	; (800c25c <forward_cast+0x1e10>)
 800c132:	428c      	cmp	r4, r1
 800c134:	d139      	bne.n	800c1aa <forward_cast+0x1d5e>
 800c136:	7828      	ldrb	r0, [r5, #0]
 800c138:	3800      	subs	r0, #0
 800c13a:	bf18      	it	ne
 800c13c:	2001      	movne	r0, #1
 800c13e:	f380 0008 	usat	r0, #8, r0
 800c142:	9900      	ldr	r1, [sp, #0]
 800c144:	444d      	add	r5, r9
 800c146:	b2c0      	uxtb	r0, r0
 800c148:	45aa      	cmp	sl, r5
 800c14a:	6030      	str	r0, [r6, #0]
 800c14c:	440e      	add	r6, r1
 800c14e:	f67e a9e5 	bls.w	800a51c <forward_cast+0xd0>
 800c152:	4949      	ldr	r1, [pc, #292]	; (800c278 <forward_cast+0x1e2c>)
 800c154:	428c      	cmp	r4, r1
 800c156:	f001 8709 	beq.w	800df6c <forward_cast+0x3b20>
 800c15a:	dde2      	ble.n	800c122 <forward_cast+0x1cd6>
 800c15c:	4940      	ldr	r1, [pc, #256]	; (800c260 <forward_cast+0x1e14>)
 800c15e:	428c      	cmp	r4, r1
 800c160:	f001 86ce 	beq.w	800df00 <forward_cast+0x3ab4>
 800c164:	dd13      	ble.n	800c18e <forward_cast+0x1d42>
 800c166:	4544      	cmp	r4, r8
 800c168:	d11f      	bne.n	800c1aa <forward_cast+0x1d5e>
 800c16a:	edd5 7a00 	vldr	s15, [r5]
 800c16e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c172:	ee17 0a90 	vmov	r0, s15
 800c176:	e7e2      	b.n	800c13e <forward_cast+0x1cf2>
 800c178:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c17c:	428c      	cmp	r4, r1
 800c17e:	f001 86cd 	beq.w	800df1c <forward_cast+0x3ad0>
 800c182:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c186:	428c      	cmp	r4, r1
 800c188:	d10f      	bne.n	800c1aa <forward_cast+0x1d5e>
 800c18a:	8828      	ldrh	r0, [r5, #0]
 800c18c:	e7d7      	b.n	800c13e <forward_cast+0x1cf2>
 800c18e:	42bc      	cmp	r4, r7
 800c190:	f001 86e4 	beq.w	800df5c <forward_cast+0x3b10>
 800c194:	455c      	cmp	r4, fp
 800c196:	d108      	bne.n	800c1aa <forward_cast+0x1d5e>
 800c198:	edd5 7a00 	vldr	s15, [r5]
 800c19c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1a4:	ee17 0a90 	vmov	r0, s15
 800c1a8:	e7c9      	b.n	800c13e <forward_cast+0x1cf2>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e7c7      	b.n	800c13e <forward_cast+0x1cf2>
 800c1ae:	4555      	cmp	r5, sl
 800c1b0:	f4be a9b4 	bcs.w	800a51c <forward_cast+0xd0>
 800c1b4:	4a31      	ldr	r2, [pc, #196]	; (800c27c <forward_cast+0x1e30>)
 800c1b6:	f04f 0800 	mov.w	r8, #0
 800c1ba:	e019      	b.n	800c1f0 <forward_cast+0x1da4>
 800c1bc:	429c      	cmp	r4, r3
 800c1be:	f001 8636 	beq.w	800de2e <forward_cast+0x39e2>
 800c1c2:	dd28      	ble.n	800c216 <forward_cast+0x1dca>
 800c1c4:	492b      	ldr	r1, [pc, #172]	; (800c274 <forward_cast+0x1e28>)
 800c1c6:	428c      	cmp	r4, r1
 800c1c8:	f001 86ef 	beq.w	800dfaa <forward_cast+0x3b5e>
 800c1cc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c1d0:	428c      	cmp	r4, r1
 800c1d2:	d138      	bne.n	800c246 <forward_cast+0x1dfa>
 800c1d4:	7828      	ldrb	r0, [r5, #0]
 800c1d6:	3800      	subs	r0, #0
 800c1d8:	bf18      	it	ne
 800c1da:	2001      	movne	r0, #1
 800c1dc:	f380 0008 	usat	r0, #8, r0
 800c1e0:	9900      	ldr	r1, [sp, #0]
 800c1e2:	f806 0008 	strb.w	r0, [r6, r8]
 800c1e6:	444d      	add	r5, r9
 800c1e8:	45aa      	cmp	sl, r5
 800c1ea:	4488      	add	r8, r1
 800c1ec:	f67e a996 	bls.w	800a51c <forward_cast+0xd0>
 800c1f0:	455c      	cmp	r4, fp
 800c1f2:	f001 86b7 	beq.w	800df64 <forward_cast+0x3b18>
 800c1f6:	dde1      	ble.n	800c1bc <forward_cast+0x1d70>
 800c1f8:	4919      	ldr	r1, [pc, #100]	; (800c260 <forward_cast+0x1e14>)
 800c1fa:	428c      	cmp	r4, r1
 800c1fc:	f001 86c4 	beq.w	800df88 <forward_cast+0x3b3c>
 800c200:	dd11      	ble.n	800c226 <forward_cast+0x1dda>
 800c202:	4918      	ldr	r1, [pc, #96]	; (800c264 <forward_cast+0x1e18>)
 800c204:	428c      	cmp	r4, r1
 800c206:	d11e      	bne.n	800c246 <forward_cast+0x1dfa>
 800c208:	edd5 7a00 	vldr	s15, [r5]
 800c20c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c210:	ee17 0a90 	vmov	r0, s15
 800c214:	e7e2      	b.n	800c1dc <forward_cast+0x1d90>
 800c216:	42bc      	cmp	r4, r7
 800c218:	f001 86c4 	beq.w	800dfa4 <forward_cast+0x3b58>
 800c21c:	4918      	ldr	r1, [pc, #96]	; (800c280 <forward_cast+0x1e34>)
 800c21e:	428c      	cmp	r4, r1
 800c220:	d111      	bne.n	800c246 <forward_cast+0x1dfa>
 800c222:	8828      	ldrh	r0, [r5, #0]
 800c224:	e7da      	b.n	800c1dc <forward_cast+0x1d90>
 800c226:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c22a:	428c      	cmp	r4, r1
 800c22c:	f001 86cb 	beq.w	800dfc6 <forward_cast+0x3b7a>
 800c230:	4294      	cmp	r4, r2
 800c232:	d108      	bne.n	800c246 <forward_cast+0x1dfa>
 800c234:	edd5 7a00 	vldr	s15, [r5]
 800c238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c23c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c240:	ee17 0a90 	vmov	r0, s15
 800c244:	e7ca      	b.n	800c1dc <forward_cast+0x1d90>
 800c246:	2000      	movs	r0, #0
 800c248:	e7c8      	b.n	800c1dc <forward_cast+0x1d90>
 800c24a:	4555      	cmp	r5, sl
 800c24c:	f4be a966 	bcs.w	800a51c <forward_cast+0xd0>
 800c250:	f8df 800c 	ldr.w	r8, [pc, #12]	; 800c260 <forward_cast+0x1e14>
 800c254:	4b09      	ldr	r3, [pc, #36]	; (800c27c <forward_cast+0x1e30>)
 800c256:	4a06      	ldr	r2, [pc, #24]	; (800c270 <forward_cast+0x1e24>)
 800c258:	2700      	movs	r7, #0
 800c25a:	e02c      	b.n	800c2b6 <forward_cast+0x1e6a>
 800c25c:	00060440 	.word	0x00060440
 800c260:	00842040 	.word	0x00842040
 800c264:	01821040 	.word	0x01821040
 800c268:	00040440 	.word	0x00040440
 800c26c:	00840840 	.word	0x00840840
 800c270:	00041040 	.word	0x00041040
 800c274:	00042040 	.word	0x00042040
 800c278:	00840440 	.word	0x00840440
 800c27c:	00841040 	.word	0x00841040
 800c280:	00040840 	.word	0x00040840
 800c284:	4294      	cmp	r4, r2
 800c286:	f001 86ec 	beq.w	800e062 <forward_cast+0x3c16>
 800c28a:	dd27      	ble.n	800c2dc <forward_cast+0x1e90>
 800c28c:	499d      	ldr	r1, [pc, #628]	; (800c504 <forward_cast+0x20b8>)
 800c28e:	428c      	cmp	r4, r1
 800c290:	f001 86ae 	beq.w	800dff0 <forward_cast+0x3ba4>
 800c294:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c298:	428c      	cmp	r4, r1
 800c29a:	d136      	bne.n	800c30a <forward_cast+0x1ebe>
 800c29c:	7828      	ldrb	r0, [r5, #0]
 800c29e:	3800      	subs	r0, #0
 800c2a0:	bf18      	it	ne
 800c2a2:	2001      	movne	r0, #1
 800c2a4:	f300 000f 	ssat	r0, #16, r0
 800c2a8:	9900      	ldr	r1, [sp, #0]
 800c2aa:	55f0      	strb	r0, [r6, r7]
 800c2ac:	444d      	add	r5, r9
 800c2ae:	45aa      	cmp	sl, r5
 800c2b0:	440f      	add	r7, r1
 800c2b2:	f67e a933 	bls.w	800a51c <forward_cast+0xd0>
 800c2b6:	4994      	ldr	r1, [pc, #592]	; (800c508 <forward_cast+0x20bc>)
 800c2b8:	428c      	cmp	r4, r1
 800c2ba:	f001 86ce 	beq.w	800e05a <forward_cast+0x3c0e>
 800c2be:	dde1      	ble.n	800c284 <forward_cast+0x1e38>
 800c2c0:	4544      	cmp	r4, r8
 800c2c2:	f001 8684 	beq.w	800dfce <forward_cast+0x3b82>
 800c2c6:	dd11      	ble.n	800c2ec <forward_cast+0x1ea0>
 800c2c8:	4990      	ldr	r1, [pc, #576]	; (800c50c <forward_cast+0x20c0>)
 800c2ca:	428c      	cmp	r4, r1
 800c2cc:	d11d      	bne.n	800c30a <forward_cast+0x1ebe>
 800c2ce:	edd5 7a00 	vldr	s15, [r5]
 800c2d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d6:	ee17 0a90 	vmov	r0, s15
 800c2da:	e7e3      	b.n	800c2a4 <forward_cast+0x1e58>
 800c2dc:	455c      	cmp	r4, fp
 800c2de:	f001 8684 	beq.w	800dfea <forward_cast+0x3b9e>
 800c2e2:	498b      	ldr	r1, [pc, #556]	; (800c510 <forward_cast+0x20c4>)
 800c2e4:	428c      	cmp	r4, r1
 800c2e6:	d110      	bne.n	800c30a <forward_cast+0x1ebe>
 800c2e8:	8828      	ldrh	r0, [r5, #0]
 800c2ea:	e7db      	b.n	800c2a4 <forward_cast+0x1e58>
 800c2ec:	4989      	ldr	r1, [pc, #548]	; (800c514 <forward_cast+0x20c8>)
 800c2ee:	428c      	cmp	r4, r1
 800c2f0:	f001 868c 	beq.w	800e00c <forward_cast+0x3bc0>
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d108      	bne.n	800c30a <forward_cast+0x1ebe>
 800c2f8:	edd5 7a00 	vldr	s15, [r5]
 800c2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c304:	ee17 0a90 	vmov	r0, s15
 800c308:	e7cc      	b.n	800c2a4 <forward_cast+0x1e58>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e7ca      	b.n	800c2a4 <forward_cast+0x1e58>
 800c30e:	4555      	cmp	r5, sl
 800c310:	f4be a904 	bcs.w	800a51c <forward_cast+0xd0>
 800c314:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800c50c <forward_cast+0x20c0>
 800c318:	4f7e      	ldr	r7, [pc, #504]	; (800c514 <forward_cast+0x20c8>)
 800c31a:	f8df b208 	ldr.w	fp, [pc, #520]	; 800c524 <forward_cast+0x20d8>
 800c31e:	4b7e      	ldr	r3, [pc, #504]	; (800c518 <forward_cast+0x20cc>)
 800c320:	4a78      	ldr	r2, [pc, #480]	; (800c504 <forward_cast+0x20b8>)
 800c322:	e017      	b.n	800c354 <forward_cast+0x1f08>
 800c324:	429c      	cmp	r4, r3
 800c326:	f001 86de 	beq.w	800e0e6 <forward_cast+0x3c9a>
 800c32a:	dd26      	ble.n	800c37a <forward_cast+0x1f2e>
 800c32c:	4294      	cmp	r4, r2
 800c32e:	f001 8682 	beq.w	800e036 <forward_cast+0x3bea>
 800c332:	497a      	ldr	r1, [pc, #488]	; (800c51c <forward_cast+0x20d0>)
 800c334:	428c      	cmp	r4, r1
 800c336:	d139      	bne.n	800c3ac <forward_cast+0x1f60>
 800c338:	7828      	ldrb	r0, [r5, #0]
 800c33a:	3800      	subs	r0, #0
 800c33c:	bf18      	it	ne
 800c33e:	2001      	movne	r0, #1
 800c340:	f300 000f 	ssat	r0, #16, r0
 800c344:	9900      	ldr	r1, [sp, #0]
 800c346:	444d      	add	r5, r9
 800c348:	b200      	sxth	r0, r0
 800c34a:	45aa      	cmp	sl, r5
 800c34c:	6030      	str	r0, [r6, #0]
 800c34e:	440e      	add	r6, r1
 800c350:	f67e a8e4 	bls.w	800a51c <forward_cast+0xd0>
 800c354:	496c      	ldr	r1, [pc, #432]	; (800c508 <forward_cast+0x20bc>)
 800c356:	428c      	cmp	r4, r1
 800c358:	f001 8565 	beq.w	800de26 <forward_cast+0x39da>
 800c35c:	dde2      	ble.n	800c324 <forward_cast+0x1ed8>
 800c35e:	4970      	ldr	r1, [pc, #448]	; (800c520 <forward_cast+0x20d4>)
 800c360:	428c      	cmp	r4, r1
 800c362:	f001 8657 	beq.w	800e014 <forward_cast+0x3bc8>
 800c366:	dd13      	ble.n	800c390 <forward_cast+0x1f44>
 800c368:	4544      	cmp	r4, r8
 800c36a:	d11f      	bne.n	800c3ac <forward_cast+0x1f60>
 800c36c:	edd5 7a00 	vldr	s15, [r5]
 800c370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c374:	ee17 0a90 	vmov	r0, s15
 800c378:	e7e2      	b.n	800c340 <forward_cast+0x1ef4>
 800c37a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c37e:	428c      	cmp	r4, r1
 800c380:	f001 8656 	beq.w	800e030 <forward_cast+0x3be4>
 800c384:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c388:	428c      	cmp	r4, r1
 800c38a:	d10f      	bne.n	800c3ac <forward_cast+0x1f60>
 800c38c:	8828      	ldrh	r0, [r5, #0]
 800c38e:	e7d7      	b.n	800c340 <forward_cast+0x1ef4>
 800c390:	42bc      	cmp	r4, r7
 800c392:	f001 865e 	beq.w	800e052 <forward_cast+0x3c06>
 800c396:	455c      	cmp	r4, fp
 800c398:	d108      	bne.n	800c3ac <forward_cast+0x1f60>
 800c39a:	edd5 7a00 	vldr	s15, [r5]
 800c39e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3a6:	ee17 0a90 	vmov	r0, s15
 800c3aa:	e7c9      	b.n	800c340 <forward_cast+0x1ef4>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	e7c7      	b.n	800c340 <forward_cast+0x1ef4>
 800c3b0:	4555      	cmp	r5, sl
 800c3b2:	f4be a8b3 	bcs.w	800a51c <forward_cast+0xd0>
 800c3b6:	4b57      	ldr	r3, [pc, #348]	; (800c514 <forward_cast+0x20c8>)
 800c3b8:	4a5a      	ldr	r2, [pc, #360]	; (800c524 <forward_cast+0x20d8>)
 800c3ba:	f04f 0800 	mov.w	r8, #0
 800c3be:	e019      	b.n	800c3f4 <forward_cast+0x1fa8>
 800c3c0:	42bc      	cmp	r4, r7
 800c3c2:	f001 8542 	beq.w	800de4a <forward_cast+0x39fe>
 800c3c6:	dd29      	ble.n	800c41c <forward_cast+0x1fd0>
 800c3c8:	494e      	ldr	r1, [pc, #312]	; (800c504 <forward_cast+0x20b8>)
 800c3ca:	428c      	cmp	r4, r1
 800c3cc:	f001 8558 	beq.w	800de80 <forward_cast+0x3a34>
 800c3d0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c3d4:	428c      	cmp	r4, r1
 800c3d6:	d137      	bne.n	800c448 <forward_cast+0x1ffc>
 800c3d8:	7828      	ldrb	r0, [r5, #0]
 800c3da:	3800      	subs	r0, #0
 800c3dc:	bf18      	it	ne
 800c3de:	2001      	movne	r0, #1
 800c3e0:	f380 0010 	usat	r0, #16, r0
 800c3e4:	9900      	ldr	r1, [sp, #0]
 800c3e6:	f806 0008 	strb.w	r0, [r6, r8]
 800c3ea:	444d      	add	r5, r9
 800c3ec:	45aa      	cmp	sl, r5
 800c3ee:	4488      	add	r8, r1
 800c3f0:	f67e a894 	bls.w	800a51c <forward_cast+0xd0>
 800c3f4:	4944      	ldr	r1, [pc, #272]	; (800c508 <forward_cast+0x20bc>)
 800c3f6:	428c      	cmp	r4, r1
 800c3f8:	f001 8523 	beq.w	800de42 <forward_cast+0x39f6>
 800c3fc:	dde0      	ble.n	800c3c0 <forward_cast+0x1f74>
 800c3fe:	4948      	ldr	r1, [pc, #288]	; (800c520 <forward_cast+0x20d4>)
 800c400:	428c      	cmp	r4, r1
 800c402:	f001 852c 	beq.w	800de5e <forward_cast+0x3a12>
 800c406:	dd11      	ble.n	800c42c <forward_cast+0x1fe0>
 800c408:	4940      	ldr	r1, [pc, #256]	; (800c50c <forward_cast+0x20c0>)
 800c40a:	428c      	cmp	r4, r1
 800c40c:	d11c      	bne.n	800c448 <forward_cast+0x1ffc>
 800c40e:	edd5 7a00 	vldr	s15, [r5]
 800c412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c416:	ee17 0a90 	vmov	r0, s15
 800c41a:	e7e1      	b.n	800c3e0 <forward_cast+0x1f94>
 800c41c:	455c      	cmp	r4, fp
 800c41e:	f001 852c 	beq.w	800de7a <forward_cast+0x3a2e>
 800c422:	493b      	ldr	r1, [pc, #236]	; (800c510 <forward_cast+0x20c4>)
 800c424:	428c      	cmp	r4, r1
 800c426:	d10f      	bne.n	800c448 <forward_cast+0x1ffc>
 800c428:	8828      	ldrh	r0, [r5, #0]
 800c42a:	e7d9      	b.n	800c3e0 <forward_cast+0x1f94>
 800c42c:	429c      	cmp	r4, r3
 800c42e:	f001 8535 	beq.w	800de9c <forward_cast+0x3a50>
 800c432:	4294      	cmp	r4, r2
 800c434:	d108      	bne.n	800c448 <forward_cast+0x1ffc>
 800c436:	edd5 7a00 	vldr	s15, [r5]
 800c43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c442:	ee17 0a90 	vmov	r0, s15
 800c446:	e7cb      	b.n	800c3e0 <forward_cast+0x1f94>
 800c448:	2000      	movs	r0, #0
 800c44a:	e7c9      	b.n	800c3e0 <forward_cast+0x1f94>
 800c44c:	4555      	cmp	r5, sl
 800c44e:	f4be a865 	bcs.w	800a51c <forward_cast+0xd0>
 800c452:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c50c <forward_cast+0x20c0>
 800c456:	4f2f      	ldr	r7, [pc, #188]	; (800c514 <forward_cast+0x20c8>)
 800c458:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800c524 <forward_cast+0x20d8>
 800c45c:	4b2e      	ldr	r3, [pc, #184]	; (800c518 <forward_cast+0x20cc>)
 800c45e:	4a29      	ldr	r2, [pc, #164]	; (800c504 <forward_cast+0x20b8>)
 800c460:	e017      	b.n	800c492 <forward_cast+0x2046>
 800c462:	429c      	cmp	r4, r3
 800c464:	f001 8126 	beq.w	800d6b4 <forward_cast+0x3268>
 800c468:	dd26      	ble.n	800c4b8 <forward_cast+0x206c>
 800c46a:	4294      	cmp	r4, r2
 800c46c:	f001 8625 	beq.w	800e0ba <forward_cast+0x3c6e>
 800c470:	492a      	ldr	r1, [pc, #168]	; (800c51c <forward_cast+0x20d0>)
 800c472:	428c      	cmp	r4, r1
 800c474:	d139      	bne.n	800c4ea <forward_cast+0x209e>
 800c476:	7828      	ldrb	r0, [r5, #0]
 800c478:	3800      	subs	r0, #0
 800c47a:	bf18      	it	ne
 800c47c:	2001      	movne	r0, #1
 800c47e:	f380 0010 	usat	r0, #16, r0
 800c482:	9900      	ldr	r1, [sp, #0]
 800c484:	444d      	add	r5, r9
 800c486:	b280      	uxth	r0, r0
 800c488:	45aa      	cmp	sl, r5
 800c48a:	6030      	str	r0, [r6, #0]
 800c48c:	440e      	add	r6, r1
 800c48e:	f67e a845 	bls.w	800a51c <forward_cast+0xd0>
 800c492:	491d      	ldr	r1, [pc, #116]	; (800c508 <forward_cast+0x20bc>)
 800c494:	428c      	cmp	r4, r1
 800c496:	f001 8622 	beq.w	800e0de <forward_cast+0x3c92>
 800c49a:	dde2      	ble.n	800c462 <forward_cast+0x2016>
 800c49c:	4920      	ldr	r1, [pc, #128]	; (800c520 <forward_cast+0x20d4>)
 800c49e:	428c      	cmp	r4, r1
 800c4a0:	f001 85fa 	beq.w	800e098 <forward_cast+0x3c4c>
 800c4a4:	dd13      	ble.n	800c4ce <forward_cast+0x2082>
 800c4a6:	4544      	cmp	r4, r8
 800c4a8:	d11f      	bne.n	800c4ea <forward_cast+0x209e>
 800c4aa:	edd5 7a00 	vldr	s15, [r5]
 800c4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4b2:	ee17 0a90 	vmov	r0, s15
 800c4b6:	e7e2      	b.n	800c47e <forward_cast+0x2032>
 800c4b8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c4bc:	428c      	cmp	r4, r1
 800c4be:	f001 85f9 	beq.w	800e0b4 <forward_cast+0x3c68>
 800c4c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c4c6:	428c      	cmp	r4, r1
 800c4c8:	d10f      	bne.n	800c4ea <forward_cast+0x209e>
 800c4ca:	8828      	ldrh	r0, [r5, #0]
 800c4cc:	e7d7      	b.n	800c47e <forward_cast+0x2032>
 800c4ce:	42bc      	cmp	r4, r7
 800c4d0:	f001 8601 	beq.w	800e0d6 <forward_cast+0x3c8a>
 800c4d4:	455c      	cmp	r4, fp
 800c4d6:	d108      	bne.n	800c4ea <forward_cast+0x209e>
 800c4d8:	edd5 7a00 	vldr	s15, [r5]
 800c4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4e4:	ee17 0a90 	vmov	r0, s15
 800c4e8:	e7c9      	b.n	800c47e <forward_cast+0x2032>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e7c7      	b.n	800c47e <forward_cast+0x2032>
 800c4ee:	4555      	cmp	r5, sl
 800c4f0:	f4be a814 	bcs.w	800a51c <forward_cast+0xd0>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4a0a      	ldr	r2, [pc, #40]	; (800c524 <forward_cast+0x20d8>)
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	46b9      	mov	r9, r7
 800c4fe:	4637      	mov	r7, r6
 800c500:	460e      	mov	r6, r1
 800c502:	e02a      	b.n	800c55a <forward_cast+0x210e>
 800c504:	00042040 	.word	0x00042040
 800c508:	00840440 	.word	0x00840440
 800c50c:	01821040 	.word	0x01821040
 800c510:	00040840 	.word	0x00040840
 800c514:	00840840 	.word	0x00840840
 800c518:	00041040 	.word	0x00041040
 800c51c:	00060440 	.word	0x00060440
 800c520:	00842040 	.word	0x00842040
 800c524:	00841040 	.word	0x00841040
 800c528:	4544      	cmp	r4, r8
 800c52a:	f001 80e2 	beq.w	800d6f2 <forward_cast+0x32a6>
 800c52e:	dd27      	ble.n	800c580 <forward_cast+0x2134>
 800c530:	49a5      	ldr	r1, [pc, #660]	; (800c7c8 <forward_cast+0x237c>)
 800c532:	428c      	cmp	r4, r1
 800c534:	f001 8606 	beq.w	800e144 <forward_cast+0x3cf8>
 800c538:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c53c:	428c      	cmp	r4, r1
 800c53e:	d137      	bne.n	800c5b0 <forward_cast+0x2164>
 800c540:	7828      	ldrb	r0, [r5, #0]
 800c542:	3800      	subs	r0, #0
 800c544:	bf18      	it	ne
 800c546:	2001      	movne	r0, #1
 800c548:	f300 0007 	ssat	r0, #8, r0
 800c54c:	9900      	ldr	r1, [sp, #0]
 800c54e:	55b8      	strb	r0, [r7, r6]
 800c550:	441d      	add	r5, r3
 800c552:	45aa      	cmp	sl, r5
 800c554:	440e      	add	r6, r1
 800c556:	f67d afe1 	bls.w	800a51c <forward_cast+0xd0>
 800c55a:	454c      	cmp	r4, r9
 800c55c:	f001 80c5 	beq.w	800d6ea <forward_cast+0x329e>
 800c560:	dde2      	ble.n	800c528 <forward_cast+0x20dc>
 800c562:	499a      	ldr	r1, [pc, #616]	; (800c7cc <forward_cast+0x2380>)
 800c564:	428c      	cmp	r4, r1
 800c566:	f001 85db 	beq.w	800e120 <forward_cast+0x3cd4>
 800c56a:	dd11      	ble.n	800c590 <forward_cast+0x2144>
 800c56c:	4998      	ldr	r1, [pc, #608]	; (800c7d0 <forward_cast+0x2384>)
 800c56e:	428c      	cmp	r4, r1
 800c570:	d11e      	bne.n	800c5b0 <forward_cast+0x2164>
 800c572:	edd5 7a00 	vldr	s15, [r5]
 800c576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c57a:	ee17 0a90 	vmov	r0, s15
 800c57e:	e7e3      	b.n	800c548 <forward_cast+0x20fc>
 800c580:	455c      	cmp	r4, fp
 800c582:	f001 85dc 	beq.w	800e13e <forward_cast+0x3cf2>
 800c586:	4993      	ldr	r1, [pc, #588]	; (800c7d4 <forward_cast+0x2388>)
 800c588:	428c      	cmp	r4, r1
 800c58a:	d111      	bne.n	800c5b0 <forward_cast+0x2164>
 800c58c:	8828      	ldrh	r0, [r5, #0]
 800c58e:	e7db      	b.n	800c548 <forward_cast+0x20fc>
 800c590:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c594:	428c      	cmp	r4, r1
 800c596:	f001 85e4 	beq.w	800e162 <forward_cast+0x3d16>
 800c59a:	4294      	cmp	r4, r2
 800c59c:	d108      	bne.n	800c5b0 <forward_cast+0x2164>
 800c59e:	edd5 7a00 	vldr	s15, [r5]
 800c5a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5aa:	ee17 0a90 	vmov	r0, s15
 800c5ae:	e7cb      	b.n	800c548 <forward_cast+0x20fc>
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e7c9      	b.n	800c548 <forward_cast+0x20fc>
 800c5b4:	4555      	cmp	r5, sl
 800c5b6:	bf38      	it	cc
 800c5b8:	461f      	movcc	r7, r3
 800c5ba:	f4bd afaf 	bcs.w	800a51c <forward_cast+0xd0>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f7fd fecd 	bl	800a360 <_array_handle_get_as_float>
 800c5c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c5ca:	ee17 3a90 	vmov	r3, s15
 800c5ce:	f303 0307 	ssat	r3, #8, r3
 800c5d2:	444d      	add	r5, r9
 800c5d4:	b25b      	sxtb	r3, r3
 800c5d6:	45aa      	cmp	sl, r5
 800c5d8:	6033      	str	r3, [r6, #0]
 800c5da:	443e      	add	r6, r7
 800c5dc:	d8ef      	bhi.n	800c5be <forward_cast+0x2172>
 800c5de:	f7fd bf9d 	b.w	800a51c <forward_cast+0xd0>
 800c5e2:	4555      	cmp	r5, sl
 800c5e4:	f4bd af9a 	bcs.w	800a51c <forward_cast+0xd0>
 800c5e8:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800c7d0 <forward_cast+0x2384>
 800c5ec:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c7ec <forward_cast+0x23a0>
 800c5f0:	4b79      	ldr	r3, [pc, #484]	; (800c7d8 <forward_cast+0x238c>)
 800c5f2:	4a7a      	ldr	r2, [pc, #488]	; (800c7dc <forward_cast+0x2390>)
 800c5f4:	2700      	movs	r7, #0
 800c5f6:	e016      	b.n	800c626 <forward_cast+0x21da>
 800c5f8:	4294      	cmp	r4, r2
 800c5fa:	f000 87fe 	beq.w	800d5fa <forward_cast+0x31ae>
 800c5fe:	dd26      	ble.n	800c64e <forward_cast+0x2202>
 800c600:	4971      	ldr	r1, [pc, #452]	; (800c7c8 <forward_cast+0x237c>)
 800c602:	428c      	cmp	r4, r1
 800c604:	f001 8046 	beq.w	800d694 <forward_cast+0x3248>
 800c608:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c60c:	428c      	cmp	r4, r1
 800c60e:	d137      	bne.n	800c680 <forward_cast+0x2234>
 800c610:	7829      	ldrb	r1, [r5, #0]
 800c612:	3900      	subs	r1, #0
 800c614:	bf18      	it	ne
 800c616:	2101      	movne	r1, #1
 800c618:	55f1      	strb	r1, [r6, r7]
 800c61a:	444d      	add	r5, r9
 800c61c:	9900      	ldr	r1, [sp, #0]
 800c61e:	45aa      	cmp	sl, r5
 800c620:	440f      	add	r7, r1
 800c622:	f67d af7b 	bls.w	800a51c <forward_cast+0xd0>
 800c626:	496e      	ldr	r1, [pc, #440]	; (800c7e0 <forward_cast+0x2394>)
 800c628:	428c      	cmp	r4, r1
 800c62a:	d018      	beq.n	800c65e <forward_cast+0x2212>
 800c62c:	dde4      	ble.n	800c5f8 <forward_cast+0x21ac>
 800c62e:	4967      	ldr	r1, [pc, #412]	; (800c7cc <forward_cast+0x2380>)
 800c630:	428c      	cmp	r4, r1
 800c632:	f000 87ee 	beq.w	800d612 <forward_cast+0x31c6>
 800c636:	dd14      	ble.n	800c662 <forward_cast+0x2216>
 800c638:	4544      	cmp	r4, r8
 800c63a:	d121      	bne.n	800c680 <forward_cast+0x2234>
 800c63c:	edd5 7a00 	vldr	s15, [r5]
 800c640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c644:	edcd 7a01 	vstr	s15, [sp, #4]
 800c648:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c64c:	e7e4      	b.n	800c618 <forward_cast+0x21cc>
 800c64e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c652:	428c      	cmp	r4, r1
 800c654:	d003      	beq.n	800c65e <forward_cast+0x2212>
 800c656:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c65a:	428c      	cmp	r4, r1
 800c65c:	d110      	bne.n	800c680 <forward_cast+0x2234>
 800c65e:	7829      	ldrb	r1, [r5, #0]
 800c660:	e7da      	b.n	800c618 <forward_cast+0x21cc>
 800c662:	455c      	cmp	r4, fp
 800c664:	d0fb      	beq.n	800c65e <forward_cast+0x2212>
 800c666:	429c      	cmp	r4, r3
 800c668:	d10a      	bne.n	800c680 <forward_cast+0x2234>
 800c66a:	edd5 7a00 	vldr	s15, [r5]
 800c66e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c676:	edcd 7a01 	vstr	s15, [sp, #4]
 800c67a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c67e:	e7cb      	b.n	800c618 <forward_cast+0x21cc>
 800c680:	2100      	movs	r1, #0
 800c682:	e7c9      	b.n	800c618 <forward_cast+0x21cc>
 800c684:	4555      	cmp	r5, sl
 800c686:	f4bd af49 	bcs.w	800a51c <forward_cast+0xd0>
 800c68a:	4f51      	ldr	r7, [pc, #324]	; (800c7d0 <forward_cast+0x2384>)
 800c68c:	4b4e      	ldr	r3, [pc, #312]	; (800c7c8 <forward_cast+0x237c>)
 800c68e:	4a55      	ldr	r2, [pc, #340]	; (800c7e4 <forward_cast+0x2398>)
 800c690:	e013      	b.n	800c6ba <forward_cast+0x226e>
 800c692:	455c      	cmp	r4, fp
 800c694:	f000 87d1 	beq.w	800d63a <forward_cast+0x31ee>
 800c698:	dd21      	ble.n	800c6de <forward_cast+0x2292>
 800c69a:	429c      	cmp	r4, r3
 800c69c:	f000 87e8 	beq.w	800d670 <forward_cast+0x3224>
 800c6a0:	4294      	cmp	r4, r2
 800c6a2:	d138      	bne.n	800c716 <forward_cast+0x22ca>
 800c6a4:	7828      	ldrb	r0, [r5, #0]
 800c6a6:	3800      	subs	r0, #0
 800c6a8:	bf18      	it	ne
 800c6aa:	2001      	movne	r0, #1
 800c6ac:	9900      	ldr	r1, [sp, #0]
 800c6ae:	6030      	str	r0, [r6, #0]
 800c6b0:	444d      	add	r5, r9
 800c6b2:	45aa      	cmp	sl, r5
 800c6b4:	440e      	add	r6, r1
 800c6b6:	f67d af31 	bls.w	800a51c <forward_cast+0xd0>
 800c6ba:	4544      	cmp	r4, r8
 800c6bc:	f000 87b9 	beq.w	800d632 <forward_cast+0x31e6>
 800c6c0:	dde7      	ble.n	800c692 <forward_cast+0x2246>
 800c6c2:	4942      	ldr	r1, [pc, #264]	; (800c7cc <forward_cast+0x2380>)
 800c6c4:	428c      	cmp	r4, r1
 800c6c6:	f000 87c2 	beq.w	800d64e <forward_cast+0x3202>
 800c6ca:	dd12      	ble.n	800c6f2 <forward_cast+0x22a6>
 800c6cc:	42bc      	cmp	r4, r7
 800c6ce:	d122      	bne.n	800c716 <forward_cast+0x22ca>
 800c6d0:	edd5 7a00 	vldr	s15, [r5]
 800c6d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6d8:	ee17 0a90 	vmov	r0, s15
 800c6dc:	e7e6      	b.n	800c6ac <forward_cast+0x2260>
 800c6de:	4942      	ldr	r1, [pc, #264]	; (800c7e8 <forward_cast+0x239c>)
 800c6e0:	428c      	cmp	r4, r1
 800c6e2:	f000 87c2 	beq.w	800d66a <forward_cast+0x321e>
 800c6e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c6ea:	428c      	cmp	r4, r1
 800c6ec:	d113      	bne.n	800c716 <forward_cast+0x22ca>
 800c6ee:	8828      	ldrh	r0, [r5, #0]
 800c6f0:	e7dc      	b.n	800c6ac <forward_cast+0x2260>
 800c6f2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c6f6:	428c      	cmp	r4, r1
 800c6f8:	f000 87c8 	beq.w	800d68c <forward_cast+0x3240>
 800c6fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c700:	428c      	cmp	r4, r1
 800c702:	d108      	bne.n	800c716 <forward_cast+0x22ca>
 800c704:	edd5 7a00 	vldr	s15, [r5]
 800c708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c70c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c710:	ee17 0a90 	vmov	r0, s15
 800c714:	e7ca      	b.n	800c6ac <forward_cast+0x2260>
 800c716:	2000      	movs	r0, #0
 800c718:	e7c8      	b.n	800c6ac <forward_cast+0x2260>
 800c71a:	4555      	cmp	r5, sl
 800c71c:	f4bd aefe 	bcs.w	800a51c <forward_cast+0xd0>
 800c720:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c7d0 <forward_cast+0x2384>
 800c724:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800c7ec <forward_cast+0x23a0>
 800c728:	4b2b      	ldr	r3, [pc, #172]	; (800c7d8 <forward_cast+0x238c>)
 800c72a:	4a2c      	ldr	r2, [pc, #176]	; (800c7dc <forward_cast+0x2390>)
 800c72c:	2700      	movs	r7, #0
 800c72e:	e016      	b.n	800c75e <forward_cast+0x2312>
 800c730:	4294      	cmp	r4, r2
 800c732:	f000 8636 	beq.w	800d3a2 <forward_cast+0x2f56>
 800c736:	dd26      	ble.n	800c786 <forward_cast+0x233a>
 800c738:	4923      	ldr	r1, [pc, #140]	; (800c7c8 <forward_cast+0x237c>)
 800c73a:	428c      	cmp	r4, r1
 800c73c:	f001 8525 	beq.w	800e18a <forward_cast+0x3d3e>
 800c740:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800c744:	428c      	cmp	r4, r1
 800c746:	d137      	bne.n	800c7b8 <forward_cast+0x236c>
 800c748:	7829      	ldrb	r1, [r5, #0]
 800c74a:	3900      	subs	r1, #0
 800c74c:	bf18      	it	ne
 800c74e:	2101      	movne	r1, #1
 800c750:	55f1      	strb	r1, [r6, r7]
 800c752:	444d      	add	r5, r9
 800c754:	9900      	ldr	r1, [sp, #0]
 800c756:	45aa      	cmp	sl, r5
 800c758:	440f      	add	r7, r1
 800c75a:	f67d aedf 	bls.w	800a51c <forward_cast+0xd0>
 800c75e:	4920      	ldr	r1, [pc, #128]	; (800c7e0 <forward_cast+0x2394>)
 800c760:	428c      	cmp	r4, r1
 800c762:	d018      	beq.n	800c796 <forward_cast+0x234a>
 800c764:	dde4      	ble.n	800c730 <forward_cast+0x22e4>
 800c766:	4919      	ldr	r1, [pc, #100]	; (800c7cc <forward_cast+0x2380>)
 800c768:	428c      	cmp	r4, r1
 800c76a:	f001 84fe 	beq.w	800e16a <forward_cast+0x3d1e>
 800c76e:	dd14      	ble.n	800c79a <forward_cast+0x234e>
 800c770:	4544      	cmp	r4, r8
 800c772:	d121      	bne.n	800c7b8 <forward_cast+0x236c>
 800c774:	edd5 7a00 	vldr	s15, [r5]
 800c778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c77c:	edcd 7a01 	vstr	s15, [sp, #4]
 800c780:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c784:	e7e4      	b.n	800c750 <forward_cast+0x2304>
 800c786:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c78a:	428c      	cmp	r4, r1
 800c78c:	d003      	beq.n	800c796 <forward_cast+0x234a>
 800c78e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c792:	428c      	cmp	r4, r1
 800c794:	d110      	bne.n	800c7b8 <forward_cast+0x236c>
 800c796:	7829      	ldrb	r1, [r5, #0]
 800c798:	e7da      	b.n	800c750 <forward_cast+0x2304>
 800c79a:	455c      	cmp	r4, fp
 800c79c:	d0fb      	beq.n	800c796 <forward_cast+0x234a>
 800c79e:	429c      	cmp	r4, r3
 800c7a0:	d10a      	bne.n	800c7b8 <forward_cast+0x236c>
 800c7a2:	edd5 7a00 	vldr	s15, [r5]
 800c7a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7ae:	edcd 7a01 	vstr	s15, [sp, #4]
 800c7b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c7b6:	e7cb      	b.n	800c750 <forward_cast+0x2304>
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	e7c9      	b.n	800c750 <forward_cast+0x2304>
 800c7bc:	4555      	cmp	r5, sl
 800c7be:	f4bd aead 	bcs.w	800a51c <forward_cast+0xd0>
 800c7c2:	4b01      	ldr	r3, [pc, #4]	; (800c7c8 <forward_cast+0x237c>)
 800c7c4:	4a07      	ldr	r2, [pc, #28]	; (800c7e4 <forward_cast+0x2398>)
 800c7c6:	e027      	b.n	800c818 <forward_cast+0x23cc>
 800c7c8:	00042040 	.word	0x00042040
 800c7cc:	00842040 	.word	0x00842040
 800c7d0:	01821040 	.word	0x01821040
 800c7d4:	00040840 	.word	0x00040840
 800c7d8:	00841040 	.word	0x00841040
 800c7dc:	00041040 	.word	0x00041040
 800c7e0:	00840440 	.word	0x00840440
 800c7e4:	00060440 	.word	0x00060440
 800c7e8:	00040440 	.word	0x00040440
 800c7ec:	00840840 	.word	0x00840840
 800c7f0:	455c      	cmp	r4, fp
 800c7f2:	f000 8675 	beq.w	800d4e0 <forward_cast+0x3094>
 800c7f6:	dd22      	ble.n	800c83e <forward_cast+0x23f2>
 800c7f8:	429c      	cmp	r4, r3
 800c7fa:	f001 8522 	beq.w	800e242 <forward_cast+0x3df6>
 800c7fe:	4294      	cmp	r4, r2
 800c800:	d137      	bne.n	800c872 <forward_cast+0x2426>
 800c802:	7828      	ldrb	r0, [r5, #0]
 800c804:	3800      	subs	r0, #0
 800c806:	bf18      	it	ne
 800c808:	2001      	movne	r0, #1
 800c80a:	9900      	ldr	r1, [sp, #0]
 800c80c:	6030      	str	r0, [r6, #0]
 800c80e:	444d      	add	r5, r9
 800c810:	45aa      	cmp	sl, r5
 800c812:	440e      	add	r6, r1
 800c814:	f67d ae82 	bls.w	800a51c <forward_cast+0xd0>
 800c818:	4544      	cmp	r4, r8
 800c81a:	f000 85be 	beq.w	800d39a <forward_cast+0x2f4e>
 800c81e:	dde7      	ble.n	800c7f0 <forward_cast+0x23a4>
 800c820:	499a      	ldr	r1, [pc, #616]	; (800ca8c <forward_cast+0x2640>)
 800c822:	428c      	cmp	r4, r1
 800c824:	f001 84fc 	beq.w	800e220 <forward_cast+0x3dd4>
 800c828:	dd13      	ble.n	800c852 <forward_cast+0x2406>
 800c82a:	4999      	ldr	r1, [pc, #612]	; (800ca90 <forward_cast+0x2644>)
 800c82c:	428c      	cmp	r4, r1
 800c82e:	d120      	bne.n	800c872 <forward_cast+0x2426>
 800c830:	edd5 7a00 	vldr	s15, [r5]
 800c834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c838:	ee17 0a90 	vmov	r0, s15
 800c83c:	e7e5      	b.n	800c80a <forward_cast+0x23be>
 800c83e:	4995      	ldr	r1, [pc, #596]	; (800ca94 <forward_cast+0x2648>)
 800c840:	428c      	cmp	r4, r1
 800c842:	f001 84fb 	beq.w	800e23c <forward_cast+0x3df0>
 800c846:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c84a:	428c      	cmp	r4, r1
 800c84c:	d111      	bne.n	800c872 <forward_cast+0x2426>
 800c84e:	8828      	ldrh	r0, [r5, #0]
 800c850:	e7db      	b.n	800c80a <forward_cast+0x23be>
 800c852:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c856:	428c      	cmp	r4, r1
 800c858:	f001 8501 	beq.w	800e25e <forward_cast+0x3e12>
 800c85c:	42bc      	cmp	r4, r7
 800c85e:	d108      	bne.n	800c872 <forward_cast+0x2426>
 800c860:	edd5 7a00 	vldr	s15, [r5]
 800c864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c86c:	ee17 0a90 	vmov	r0, s15
 800c870:	e7cb      	b.n	800c80a <forward_cast+0x23be>
 800c872:	2000      	movs	r0, #0
 800c874:	e7c9      	b.n	800c80a <forward_cast+0x23be>
 800c876:	4555      	cmp	r5, sl
 800c878:	f4bd ae50 	bcs.w	800a51c <forward_cast+0xd0>
 800c87c:	4b86      	ldr	r3, [pc, #536]	; (800ca98 <forward_cast+0x264c>)
 800c87e:	4a87      	ldr	r2, [pc, #540]	; (800ca9c <forward_cast+0x2650>)
 800c880:	e013      	b.n	800c8aa <forward_cast+0x245e>
 800c882:	42bc      	cmp	r4, r7
 800c884:	f000 859d 	beq.w	800d3c2 <forward_cast+0x2f76>
 800c888:	dd22      	ble.n	800c8d0 <forward_cast+0x2484>
 800c88a:	429c      	cmp	r4, r3
 800c88c:	f001 84fc 	beq.w	800e288 <forward_cast+0x3e3c>
 800c890:	4294      	cmp	r4, r2
 800c892:	d137      	bne.n	800c904 <forward_cast+0x24b8>
 800c894:	7828      	ldrb	r0, [r5, #0]
 800c896:	3800      	subs	r0, #0
 800c898:	bf18      	it	ne
 800c89a:	2001      	movne	r0, #1
 800c89c:	9900      	ldr	r1, [sp, #0]
 800c89e:	6030      	str	r0, [r6, #0]
 800c8a0:	444d      	add	r5, r9
 800c8a2:	45aa      	cmp	sl, r5
 800c8a4:	440e      	add	r6, r1
 800c8a6:	f67d ae39 	bls.w	800a51c <forward_cast+0xd0>
 800c8aa:	4544      	cmp	r4, r8
 800c8ac:	f000 8585 	beq.w	800d3ba <forward_cast+0x2f6e>
 800c8b0:	dde7      	ble.n	800c882 <forward_cast+0x2436>
 800c8b2:	4976      	ldr	r1, [pc, #472]	; (800ca8c <forward_cast+0x2640>)
 800c8b4:	428c      	cmp	r4, r1
 800c8b6:	f001 84d6 	beq.w	800e266 <forward_cast+0x3e1a>
 800c8ba:	dd13      	ble.n	800c8e4 <forward_cast+0x2498>
 800c8bc:	4974      	ldr	r1, [pc, #464]	; (800ca90 <forward_cast+0x2644>)
 800c8be:	428c      	cmp	r4, r1
 800c8c0:	d120      	bne.n	800c904 <forward_cast+0x24b8>
 800c8c2:	edd5 7a00 	vldr	s15, [r5]
 800c8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8ca:	ee17 0a90 	vmov	r0, s15
 800c8ce:	e7e5      	b.n	800c89c <forward_cast+0x2450>
 800c8d0:	4970      	ldr	r1, [pc, #448]	; (800ca94 <forward_cast+0x2648>)
 800c8d2:	428c      	cmp	r4, r1
 800c8d4:	f001 84d5 	beq.w	800e282 <forward_cast+0x3e36>
 800c8d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c8dc:	428c      	cmp	r4, r1
 800c8de:	d111      	bne.n	800c904 <forward_cast+0x24b8>
 800c8e0:	8828      	ldrh	r0, [r5, #0]
 800c8e2:	e7db      	b.n	800c89c <forward_cast+0x2450>
 800c8e4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c8e8:	428c      	cmp	r4, r1
 800c8ea:	f001 84db 	beq.w	800e2a4 <forward_cast+0x3e58>
 800c8ee:	455c      	cmp	r4, fp
 800c8f0:	d108      	bne.n	800c904 <forward_cast+0x24b8>
 800c8f2:	edd5 7a00 	vldr	s15, [r5]
 800c8f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8fe:	ee17 0a90 	vmov	r0, s15
 800c902:	e7cb      	b.n	800c89c <forward_cast+0x2450>
 800c904:	2000      	movs	r0, #0
 800c906:	e7c9      	b.n	800c89c <forward_cast+0x2450>
 800c908:	4555      	cmp	r5, sl
 800c90a:	f4bd ae07 	bcs.w	800a51c <forward_cast+0xd0>
 800c90e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800ca90 <forward_cast+0x2644>
 800c912:	4b61      	ldr	r3, [pc, #388]	; (800ca98 <forward_cast+0x264c>)
 800c914:	4a61      	ldr	r2, [pc, #388]	; (800ca9c <forward_cast+0x2650>)
 800c916:	e017      	b.n	800c948 <forward_cast+0x24fc>
 800c918:	4961      	ldr	r1, [pc, #388]	; (800caa0 <forward_cast+0x2654>)
 800c91a:	428c      	cmp	r4, r1
 800c91c:	f000 850d 	beq.w	800d33a <forward_cast+0x2eee>
 800c920:	dd24      	ble.n	800c96c <forward_cast+0x2520>
 800c922:	429c      	cmp	r4, r3
 800c924:	f000 84f7 	beq.w	800d316 <forward_cast+0x2eca>
 800c928:	4294      	cmp	r4, r2
 800c92a:	d13a      	bne.n	800c9a2 <forward_cast+0x2556>
 800c92c:	7828      	ldrb	r0, [r5, #0]
 800c92e:	3800      	subs	r0, #0
 800c930:	bf18      	it	ne
 800c932:	2001      	movne	r0, #1
 800c934:	f300 0007 	ssat	r0, #8, r0
 800c938:	9900      	ldr	r1, [sp, #0]
 800c93a:	444d      	add	r5, r9
 800c93c:	b240      	sxtb	r0, r0
 800c93e:	45aa      	cmp	sl, r5
 800c940:	6030      	str	r0, [r6, #0]
 800c942:	440e      	add	r6, r1
 800c944:	f67d adea 	bls.w	800a51c <forward_cast+0xd0>
 800c948:	42bc      	cmp	r4, r7
 800c94a:	f000 84c0 	beq.w	800d2ce <forward_cast+0x2e82>
 800c94e:	dde3      	ble.n	800c918 <forward_cast+0x24cc>
 800c950:	494e      	ldr	r1, [pc, #312]	; (800ca8c <forward_cast+0x2640>)
 800c952:	428c      	cmp	r4, r1
 800c954:	f000 84ce 	beq.w	800d2f4 <forward_cast+0x2ea8>
 800c958:	dd13      	ble.n	800c982 <forward_cast+0x2536>
 800c95a:	4544      	cmp	r4, r8
 800c95c:	d121      	bne.n	800c9a2 <forward_cast+0x2556>
 800c95e:	edd5 7a00 	vldr	s15, [r5]
 800c962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c966:	ee17 0a90 	vmov	r0, s15
 800c96a:	e7e3      	b.n	800c934 <forward_cast+0x24e8>
 800c96c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800c970:	428c      	cmp	r4, r1
 800c972:	f000 84cd 	beq.w	800d310 <forward_cast+0x2ec4>
 800c976:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c97a:	428c      	cmp	r4, r1
 800c97c:	d111      	bne.n	800c9a2 <forward_cast+0x2556>
 800c97e:	8828      	ldrh	r0, [r5, #0]
 800c980:	e7d8      	b.n	800c934 <forward_cast+0x24e8>
 800c982:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800c986:	428c      	cmp	r4, r1
 800c988:	f000 84d3 	beq.w	800d332 <forward_cast+0x2ee6>
 800c98c:	455c      	cmp	r4, fp
 800c98e:	d108      	bne.n	800c9a2 <forward_cast+0x2556>
 800c990:	edd5 7a00 	vldr	s15, [r5]
 800c994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c99c:	ee17 0a90 	vmov	r0, s15
 800c9a0:	e7c8      	b.n	800c934 <forward_cast+0x24e8>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e7c6      	b.n	800c934 <forward_cast+0x24e8>
 800c9a6:	4555      	cmp	r5, sl
 800c9a8:	f4bd adb8 	bcs.w	800a51c <forward_cast+0xd0>
 800c9ac:	9f00      	ldr	r7, [sp, #0]
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7fd fcd5 	bl	800a360 <_array_handle_get_as_float>
 800c9b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9be:	444d      	add	r5, r9
 800c9c0:	bf14      	ite	ne
 800c9c2:	2301      	movne	r3, #1
 800c9c4:	2300      	moveq	r3, #0
 800c9c6:	45aa      	cmp	sl, r5
 800c9c8:	7033      	strb	r3, [r6, #0]
 800c9ca:	443e      	add	r6, r7
 800c9cc:	d8ef      	bhi.n	800c9ae <forward_cast+0x2562>
 800c9ce:	f7fd bda5 	b.w	800a51c <forward_cast+0xd0>
 800c9d2:	4555      	cmp	r5, sl
 800c9d4:	f4bd ada2 	bcs.w	800a51c <forward_cast+0xd0>
 800c9d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800ca90 <forward_cast+0x2644>
 800c9dc:	4f31      	ldr	r7, [pc, #196]	; (800caa4 <forward_cast+0x2658>)
 800c9de:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800caac <forward_cast+0x2660>
 800c9e2:	4b2f      	ldr	r3, [pc, #188]	; (800caa0 <forward_cast+0x2654>)
 800c9e4:	4a2c      	ldr	r2, [pc, #176]	; (800ca98 <forward_cast+0x264c>)
 800c9e6:	e017      	b.n	800ca18 <forward_cast+0x25cc>
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	f000 829d 	beq.w	800cf28 <forward_cast+0x2adc>
 800c9ee:	dd26      	ble.n	800ca3e <forward_cast+0x25f2>
 800c9f0:	4294      	cmp	r4, r2
 800c9f2:	f000 82b9 	beq.w	800cf68 <forward_cast+0x2b1c>
 800c9f6:	4929      	ldr	r1, [pc, #164]	; (800ca9c <forward_cast+0x2650>)
 800c9f8:	428c      	cmp	r4, r1
 800c9fa:	d139      	bne.n	800ca70 <forward_cast+0x2624>
 800c9fc:	7828      	ldrb	r0, [r5, #0]
 800c9fe:	3800      	subs	r0, #0
 800ca00:	bf18      	it	ne
 800ca02:	2001      	movne	r0, #1
 800ca04:	f380 0008 	usat	r0, #8, r0
 800ca08:	9900      	ldr	r1, [sp, #0]
 800ca0a:	444d      	add	r5, r9
 800ca0c:	b2c0      	uxtb	r0, r0
 800ca0e:	45aa      	cmp	sl, r5
 800ca10:	6030      	str	r0, [r6, #0]
 800ca12:	440e      	add	r6, r1
 800ca14:	f67d ad82 	bls.w	800a51c <forward_cast+0xd0>
 800ca18:	4923      	ldr	r1, [pc, #140]	; (800caa8 <forward_cast+0x265c>)
 800ca1a:	428c      	cmp	r4, r1
 800ca1c:	f000 82b4 	beq.w	800cf88 <forward_cast+0x2b3c>
 800ca20:	dde2      	ble.n	800c9e8 <forward_cast+0x259c>
 800ca22:	491a      	ldr	r1, [pc, #104]	; (800ca8c <forward_cast+0x2640>)
 800ca24:	428c      	cmp	r4, r1
 800ca26:	f000 8290 	beq.w	800cf4a <forward_cast+0x2afe>
 800ca2a:	dd13      	ble.n	800ca54 <forward_cast+0x2608>
 800ca2c:	4544      	cmp	r4, r8
 800ca2e:	d11f      	bne.n	800ca70 <forward_cast+0x2624>
 800ca30:	edd5 7a00 	vldr	s15, [r5]
 800ca34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca38:	ee17 0a90 	vmov	r0, s15
 800ca3c:	e7e2      	b.n	800ca04 <forward_cast+0x25b8>
 800ca3e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ca42:	428c      	cmp	r4, r1
 800ca44:	f000 828e 	beq.w	800cf64 <forward_cast+0x2b18>
 800ca48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ca4c:	428c      	cmp	r4, r1
 800ca4e:	d10f      	bne.n	800ca70 <forward_cast+0x2624>
 800ca50:	8828      	ldrh	r0, [r5, #0]
 800ca52:	e7d7      	b.n	800ca04 <forward_cast+0x25b8>
 800ca54:	42bc      	cmp	r4, r7
 800ca56:	f000 8294 	beq.w	800cf82 <forward_cast+0x2b36>
 800ca5a:	455c      	cmp	r4, fp
 800ca5c:	d108      	bne.n	800ca70 <forward_cast+0x2624>
 800ca5e:	edd5 7a00 	vldr	s15, [r5]
 800ca62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca6a:	ee17 0a90 	vmov	r0, s15
 800ca6e:	e7c9      	b.n	800ca04 <forward_cast+0x25b8>
 800ca70:	2000      	movs	r0, #0
 800ca72:	e7c7      	b.n	800ca04 <forward_cast+0x25b8>
 800ca74:	4555      	cmp	r5, sl
 800ca76:	f4bd ad51 	bcs.w	800a51c <forward_cast+0xd0>
 800ca7a:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800ca90 <forward_cast+0x2644>
 800ca7e:	4f09      	ldr	r7, [pc, #36]	; (800caa4 <forward_cast+0x2658>)
 800ca80:	f8df b028 	ldr.w	fp, [pc, #40]	; 800caac <forward_cast+0x2660>
 800ca84:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <forward_cast+0x2654>)
 800ca86:	4a04      	ldr	r2, [pc, #16]	; (800ca98 <forward_cast+0x264c>)
 800ca88:	e027      	b.n	800cada <forward_cast+0x268e>
 800ca8a:	bf00      	nop
 800ca8c:	00842040 	.word	0x00842040
 800ca90:	01821040 	.word	0x01821040
 800ca94:	00040440 	.word	0x00040440
 800ca98:	00042040 	.word	0x00042040
 800ca9c:	00060440 	.word	0x00060440
 800caa0:	00041040 	.word	0x00041040
 800caa4:	00840840 	.word	0x00840840
 800caa8:	00840440 	.word	0x00840440
 800caac:	00841040 	.word	0x00841040
 800cab0:	429c      	cmp	r4, r3
 800cab2:	f000 8298 	beq.w	800cfe6 <forward_cast+0x2b9a>
 800cab6:	dd26      	ble.n	800cb06 <forward_cast+0x26ba>
 800cab8:	4294      	cmp	r4, r2
 800caba:	f000 82a0 	beq.w	800cffe <forward_cast+0x2bb2>
 800cabe:	499c      	ldr	r1, [pc, #624]	; (800cd30 <forward_cast+0x28e4>)
 800cac0:	428c      	cmp	r4, r1
 800cac2:	d13e      	bne.n	800cb42 <forward_cast+0x26f6>
 800cac4:	7829      	ldrb	r1, [r5, #0]
 800cac6:	3900      	subs	r1, #0
 800cac8:	bf18      	it	ne
 800caca:	2101      	movne	r1, #1
 800cacc:	6031      	str	r1, [r6, #0]
 800cace:	444d      	add	r5, r9
 800cad0:	9900      	ldr	r1, [sp, #0]
 800cad2:	45aa      	cmp	sl, r5
 800cad4:	440e      	add	r6, r1
 800cad6:	f67d ad21 	bls.w	800a51c <forward_cast+0xd0>
 800cada:	4996      	ldr	r1, [pc, #600]	; (800cd34 <forward_cast+0x28e8>)
 800cadc:	428c      	cmp	r4, r1
 800cade:	f000 827c 	beq.w	800cfda <forward_cast+0x2b8e>
 800cae2:	dde5      	ble.n	800cab0 <forward_cast+0x2664>
 800cae4:	4994      	ldr	r1, [pc, #592]	; (800cd38 <forward_cast+0x28ec>)
 800cae6:	428c      	cmp	r4, r1
 800cae8:	f000 8206 	beq.w	800cef8 <forward_cast+0x2aac>
 800caec:	dd18      	ble.n	800cb20 <forward_cast+0x26d4>
 800caee:	4544      	cmp	r4, r8
 800caf0:	d127      	bne.n	800cb42 <forward_cast+0x26f6>
 800caf2:	edd5 7a00 	vldr	s15, [r5]
 800caf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafe:	bf14      	ite	ne
 800cb00:	2101      	movne	r1, #1
 800cb02:	2100      	moveq	r1, #0
 800cb04:	e7e2      	b.n	800cacc <forward_cast+0x2680>
 800cb06:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cb0a:	428c      	cmp	r4, r1
 800cb0c:	d0da      	beq.n	800cac4 <forward_cast+0x2678>
 800cb0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cb12:	428c      	cmp	r4, r1
 800cb14:	d115      	bne.n	800cb42 <forward_cast+0x26f6>
 800cb16:	8829      	ldrh	r1, [r5, #0]
 800cb18:	3900      	subs	r1, #0
 800cb1a:	bf18      	it	ne
 800cb1c:	2101      	movne	r1, #1
 800cb1e:	e7d5      	b.n	800cacc <forward_cast+0x2680>
 800cb20:	42bc      	cmp	r4, r7
 800cb22:	f000 827c 	beq.w	800d01e <forward_cast+0x2bd2>
 800cb26:	455c      	cmp	r4, fp
 800cb28:	d10b      	bne.n	800cb42 <forward_cast+0x26f6>
 800cb2a:	edd5 7a00 	vldr	s15, [r5]
 800cb2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb32:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3a:	bf14      	ite	ne
 800cb3c:	2101      	movne	r1, #1
 800cb3e:	2100      	moveq	r1, #0
 800cb40:	e7c4      	b.n	800cacc <forward_cast+0x2680>
 800cb42:	2100      	movs	r1, #0
 800cb44:	e7c2      	b.n	800cacc <forward_cast+0x2680>
 800cb46:	4555      	cmp	r5, sl
 800cb48:	f4bd ace8 	bcs.w	800a51c <forward_cast+0xd0>
 800cb4c:	4b7b      	ldr	r3, [pc, #492]	; (800cd3c <forward_cast+0x28f0>)
 800cb4e:	4a78      	ldr	r2, [pc, #480]	; (800cd30 <forward_cast+0x28e4>)
 800cb50:	e014      	b.n	800cb7c <forward_cast+0x2730>
 800cb52:	497b      	ldr	r1, [pc, #492]	; (800cd40 <forward_cast+0x28f4>)
 800cb54:	428c      	cmp	r4, r1
 800cb56:	f000 832d 	beq.w	800d1b4 <forward_cast+0x2d68>
 800cb5a:	dd21      	ble.n	800cba0 <forward_cast+0x2754>
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	f000 819c 	beq.w	800ce9a <forward_cast+0x2a4e>
 800cb62:	4294      	cmp	r4, r2
 800cb64:	d137      	bne.n	800cbd6 <forward_cast+0x278a>
 800cb66:	7828      	ldrb	r0, [r5, #0]
 800cb68:	3800      	subs	r0, #0
 800cb6a:	bf18      	it	ne
 800cb6c:	2001      	movne	r0, #1
 800cb6e:	9900      	ldr	r1, [sp, #0]
 800cb70:	6030      	str	r0, [r6, #0]
 800cb72:	444d      	add	r5, r9
 800cb74:	45aa      	cmp	sl, r5
 800cb76:	440e      	add	r6, r1
 800cb78:	f67d acd0 	bls.w	800a51c <forward_cast+0xd0>
 800cb7c:	4544      	cmp	r4, r8
 800cb7e:	f000 8316 	beq.w	800d1ae <forward_cast+0x2d62>
 800cb82:	dde6      	ble.n	800cb52 <forward_cast+0x2706>
 800cb84:	496c      	ldr	r1, [pc, #432]	; (800cd38 <forward_cast+0x28ec>)
 800cb86:	428c      	cmp	r4, r1
 800cb88:	f000 8178 	beq.w	800ce7c <forward_cast+0x2a30>
 800cb8c:	dd13      	ble.n	800cbb6 <forward_cast+0x276a>
 800cb8e:	42bc      	cmp	r4, r7
 800cb90:	d121      	bne.n	800cbd6 <forward_cast+0x278a>
 800cb92:	edd5 7a00 	vldr	s15, [r5]
 800cb96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb9a:	ee17 0a90 	vmov	r0, s15
 800cb9e:	e7e6      	b.n	800cb6e <forward_cast+0x2722>
 800cba0:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800cba4:	428c      	cmp	r4, r1
 800cba6:	f000 8176 	beq.w	800ce96 <forward_cast+0x2a4a>
 800cbaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cbae:	428c      	cmp	r4, r1
 800cbb0:	d111      	bne.n	800cbd6 <forward_cast+0x278a>
 800cbb2:	8828      	ldrh	r0, [r5, #0]
 800cbb4:	e7db      	b.n	800cb6e <forward_cast+0x2722>
 800cbb6:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800cbba:	428c      	cmp	r4, r1
 800cbbc:	f000 817a 	beq.w	800ceb4 <forward_cast+0x2a68>
 800cbc0:	455c      	cmp	r4, fp
 800cbc2:	d108      	bne.n	800cbd6 <forward_cast+0x278a>
 800cbc4:	edd5 7a00 	vldr	s15, [r5]
 800cbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbd0:	ee17 0a90 	vmov	r0, s15
 800cbd4:	e7cb      	b.n	800cb6e <forward_cast+0x2722>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e7c9      	b.n	800cb6e <forward_cast+0x2722>
 800cbda:	4555      	cmp	r5, sl
 800cbdc:	f4bd ac9e 	bcs.w	800a51c <forward_cast+0xd0>
 800cbe0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800cd4c <forward_cast+0x2900>
 800cbe4:	4f57      	ldr	r7, [pc, #348]	; (800cd44 <forward_cast+0x28f8>)
 800cbe6:	f8df b160 	ldr.w	fp, [pc, #352]	; 800cd48 <forward_cast+0x28fc>
 800cbea:	4b55      	ldr	r3, [pc, #340]	; (800cd40 <forward_cast+0x28f4>)
 800cbec:	4a53      	ldr	r2, [pc, #332]	; (800cd3c <forward_cast+0x28f0>)
 800cbee:	e017      	b.n	800cc20 <forward_cast+0x27d4>
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	f000 82cf 	beq.w	800d194 <forward_cast+0x2d48>
 800cbf6:	dd26      	ble.n	800cc46 <forward_cast+0x27fa>
 800cbf8:	4294      	cmp	r4, r2
 800cbfa:	f000 816d 	beq.w	800ced8 <forward_cast+0x2a8c>
 800cbfe:	494c      	ldr	r1, [pc, #304]	; (800cd30 <forward_cast+0x28e4>)
 800cc00:	428c      	cmp	r4, r1
 800cc02:	d139      	bne.n	800cc78 <forward_cast+0x282c>
 800cc04:	7828      	ldrb	r0, [r5, #0]
 800cc06:	3800      	subs	r0, #0
 800cc08:	bf18      	it	ne
 800cc0a:	2001      	movne	r0, #1
 800cc0c:	f300 000f 	ssat	r0, #16, r0
 800cc10:	9900      	ldr	r1, [sp, #0]
 800cc12:	444d      	add	r5, r9
 800cc14:	b200      	sxth	r0, r0
 800cc16:	45aa      	cmp	sl, r5
 800cc18:	6030      	str	r0, [r6, #0]
 800cc1a:	440e      	add	r6, r1
 800cc1c:	f67d ac7e 	bls.w	800a51c <forward_cast+0xd0>
 800cc20:	4944      	ldr	r1, [pc, #272]	; (800cd34 <forward_cast+0x28e8>)
 800cc22:	428c      	cmp	r4, r1
 800cc24:	f000 8101 	beq.w	800ce2a <forward_cast+0x29de>
 800cc28:	dde2      	ble.n	800cbf0 <forward_cast+0x27a4>
 800cc2a:	4943      	ldr	r1, [pc, #268]	; (800cd38 <forward_cast+0x28ec>)
 800cc2c:	428c      	cmp	r4, r1
 800cc2e:	f000 8144 	beq.w	800ceba <forward_cast+0x2a6e>
 800cc32:	dd13      	ble.n	800cc5c <forward_cast+0x2810>
 800cc34:	4544      	cmp	r4, r8
 800cc36:	d11f      	bne.n	800cc78 <forward_cast+0x282c>
 800cc38:	edd5 7a00 	vldr	s15, [r5]
 800cc3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc40:	ee17 0a90 	vmov	r0, s15
 800cc44:	e7e2      	b.n	800cc0c <forward_cast+0x27c0>
 800cc46:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cc4a:	428c      	cmp	r4, r1
 800cc4c:	f000 8142 	beq.w	800ced4 <forward_cast+0x2a88>
 800cc50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cc54:	428c      	cmp	r4, r1
 800cc56:	d10f      	bne.n	800cc78 <forward_cast+0x282c>
 800cc58:	8828      	ldrh	r0, [r5, #0]
 800cc5a:	e7d7      	b.n	800cc0c <forward_cast+0x27c0>
 800cc5c:	42bc      	cmp	r4, r7
 800cc5e:	f000 8148 	beq.w	800cef2 <forward_cast+0x2aa6>
 800cc62:	455c      	cmp	r4, fp
 800cc64:	d108      	bne.n	800cc78 <forward_cast+0x282c>
 800cc66:	edd5 7a00 	vldr	s15, [r5]
 800cc6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc72:	ee17 0a90 	vmov	r0, s15
 800cc76:	e7c9      	b.n	800cc0c <forward_cast+0x27c0>
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e7c7      	b.n	800cc0c <forward_cast+0x27c0>
 800cc7c:	4555      	cmp	r5, sl
 800cc7e:	f4bd ac4d 	bcs.w	800a51c <forward_cast+0xd0>
 800cc82:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800cd4c <forward_cast+0x2900>
 800cc86:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800cd44 <forward_cast+0x28f8>
 800cc8a:	4b2f      	ldr	r3, [pc, #188]	; (800cd48 <forward_cast+0x28fc>)
 800cc8c:	4a2c      	ldr	r2, [pc, #176]	; (800cd40 <forward_cast+0x28f4>)
 800cc8e:	2700      	movs	r7, #0
 800cc90:	e016      	b.n	800ccc0 <forward_cast+0x2874>
 800cc92:	4294      	cmp	r4, r2
 800cc94:	f000 80d8 	beq.w	800ce48 <forward_cast+0x29fc>
 800cc98:	dd26      	ble.n	800cce8 <forward_cast+0x289c>
 800cc9a:	4928      	ldr	r1, [pc, #160]	; (800cd3c <forward_cast+0x28f0>)
 800cc9c:	428c      	cmp	r4, r1
 800cc9e:	f000 81c4 	beq.w	800d02a <forward_cast+0x2bde>
 800cca2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800cca6:	428c      	cmp	r4, r1
 800cca8:	d137      	bne.n	800cd1a <forward_cast+0x28ce>
 800ccaa:	7829      	ldrb	r1, [r5, #0]
 800ccac:	3900      	subs	r1, #0
 800ccae:	bf18      	it	ne
 800ccb0:	2101      	movne	r1, #1
 800ccb2:	55f1      	strb	r1, [r6, r7]
 800ccb4:	444d      	add	r5, r9
 800ccb6:	9900      	ldr	r1, [sp, #0]
 800ccb8:	45aa      	cmp	sl, r5
 800ccba:	440f      	add	r7, r1
 800ccbc:	f67d ac2e 	bls.w	800a51c <forward_cast+0xd0>
 800ccc0:	491c      	ldr	r1, [pc, #112]	; (800cd34 <forward_cast+0x28e8>)
 800ccc2:	428c      	cmp	r4, r1
 800ccc4:	d018      	beq.n	800ccf8 <forward_cast+0x28ac>
 800ccc6:	dde4      	ble.n	800cc92 <forward_cast+0x2846>
 800ccc8:	491b      	ldr	r1, [pc, #108]	; (800cd38 <forward_cast+0x28ec>)
 800ccca:	428c      	cmp	r4, r1
 800cccc:	f000 80c7 	beq.w	800ce5e <forward_cast+0x2a12>
 800ccd0:	dd14      	ble.n	800ccfc <forward_cast+0x28b0>
 800ccd2:	4544      	cmp	r4, r8
 800ccd4:	d121      	bne.n	800cd1a <forward_cast+0x28ce>
 800ccd6:	edd5 7a00 	vldr	s15, [r5]
 800ccda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccde:	edcd 7a01 	vstr	s15, [sp, #4]
 800cce2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cce6:	e7e4      	b.n	800ccb2 <forward_cast+0x2866>
 800cce8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ccec:	428c      	cmp	r4, r1
 800ccee:	d003      	beq.n	800ccf8 <forward_cast+0x28ac>
 800ccf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccf4:	428c      	cmp	r4, r1
 800ccf6:	d110      	bne.n	800cd1a <forward_cast+0x28ce>
 800ccf8:	7829      	ldrb	r1, [r5, #0]
 800ccfa:	e7da      	b.n	800ccb2 <forward_cast+0x2866>
 800ccfc:	455c      	cmp	r4, fp
 800ccfe:	d0fb      	beq.n	800ccf8 <forward_cast+0x28ac>
 800cd00:	429c      	cmp	r4, r3
 800cd02:	d10a      	bne.n	800cd1a <forward_cast+0x28ce>
 800cd04:	edd5 7a00 	vldr	s15, [r5]
 800cd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd10:	edcd 7a01 	vstr	s15, [sp, #4]
 800cd14:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cd18:	e7cb      	b.n	800ccb2 <forward_cast+0x2866>
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	e7c9      	b.n	800ccb2 <forward_cast+0x2866>
 800cd1e:	4555      	cmp	r5, sl
 800cd20:	f4bd abfc 	bcs.w	800a51c <forward_cast+0xd0>
 800cd24:	4b06      	ldr	r3, [pc, #24]	; (800cd40 <forward_cast+0x28f4>)
 800cd26:	4a05      	ldr	r2, [pc, #20]	; (800cd3c <forward_cast+0x28f0>)
 800cd28:	f04f 0800 	mov.w	r8, #0
 800cd2c:	e024      	b.n	800cd78 <forward_cast+0x292c>
 800cd2e:	bf00      	nop
 800cd30:	00060440 	.word	0x00060440
 800cd34:	00840440 	.word	0x00840440
 800cd38:	00842040 	.word	0x00842040
 800cd3c:	00042040 	.word	0x00042040
 800cd40:	00041040 	.word	0x00041040
 800cd44:	00840840 	.word	0x00840840
 800cd48:	00841040 	.word	0x00841040
 800cd4c:	01821040 	.word	0x01821040
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d050      	beq.n	800cdf6 <forward_cast+0x29aa>
 800cd54:	dd23      	ble.n	800cd9e <forward_cast+0x2952>
 800cd56:	4294      	cmp	r4, r2
 800cd58:	d03e      	beq.n	800cdd8 <forward_cast+0x298c>
 800cd5a:	49c7      	ldr	r1, [pc, #796]	; (800d078 <forward_cast+0x2c2c>)
 800cd5c:	428c      	cmp	r4, r1
 800cd5e:	d139      	bne.n	800cdd4 <forward_cast+0x2988>
 800cd60:	7829      	ldrb	r1, [r5, #0]
 800cd62:	3900      	subs	r1, #0
 800cd64:	bf18      	it	ne
 800cd66:	2101      	movne	r1, #1
 800cd68:	f806 1008 	strb.w	r1, [r6, r8]
 800cd6c:	444d      	add	r5, r9
 800cd6e:	9900      	ldr	r1, [sp, #0]
 800cd70:	45aa      	cmp	sl, r5
 800cd72:	4488      	add	r8, r1
 800cd74:	f67d abd2 	bls.w	800a51c <forward_cast+0xd0>
 800cd78:	455c      	cmp	r4, fp
 800cd7a:	d017      	beq.n	800cdac <forward_cast+0x2960>
 800cd7c:	dde8      	ble.n	800cd50 <forward_cast+0x2904>
 800cd7e:	49bf      	ldr	r1, [pc, #764]	; (800d07c <forward_cast+0x2c30>)
 800cd80:	428c      	cmp	r4, r1
 800cd82:	d043      	beq.n	800ce0c <forward_cast+0x29c0>
 800cd84:	dd15      	ble.n	800cdb2 <forward_cast+0x2966>
 800cd86:	49be      	ldr	r1, [pc, #760]	; (800d080 <forward_cast+0x2c34>)
 800cd88:	428c      	cmp	r4, r1
 800cd8a:	d123      	bne.n	800cdd4 <forward_cast+0x2988>
 800cd8c:	edd5 7a00 	vldr	s15, [r5]
 800cd90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd94:	edcd 7a01 	vstr	s15, [sp, #4]
 800cd98:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cd9c:	e7e4      	b.n	800cd68 <forward_cast+0x291c>
 800cd9e:	49b9      	ldr	r1, [pc, #740]	; (800d084 <forward_cast+0x2c38>)
 800cda0:	428c      	cmp	r4, r1
 800cda2:	d003      	beq.n	800cdac <forward_cast+0x2960>
 800cda4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cda8:	428c      	cmp	r4, r1
 800cdaa:	d113      	bne.n	800cdd4 <forward_cast+0x2988>
 800cdac:	f995 1000 	ldrsb.w	r1, [r5]
 800cdb0:	e7da      	b.n	800cd68 <forward_cast+0x291c>
 800cdb2:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800cdb6:	428c      	cmp	r4, r1
 800cdb8:	d0f8      	beq.n	800cdac <forward_cast+0x2960>
 800cdba:	42bc      	cmp	r4, r7
 800cdbc:	d10a      	bne.n	800cdd4 <forward_cast+0x2988>
 800cdbe:	edd5 7a00 	vldr	s15, [r5]
 800cdc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdca:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdce:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cdd2:	e7c9      	b.n	800cd68 <forward_cast+0x291c>
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	e7c7      	b.n	800cd68 <forward_cast+0x291c>
 800cdd8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cddc:	f7f3 ffe4 	bl	8000da8 <__aeabi_ul2f>
 800cde0:	ee07 0a90 	vmov	s15, r0
 800cde4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cde8:	4aa7      	ldr	r2, [pc, #668]	; (800d088 <forward_cast+0x2c3c>)
 800cdea:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdee:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800cdf2:	4ba6      	ldr	r3, [pc, #664]	; (800d08c <forward_cast+0x2c40>)
 800cdf4:	e7b8      	b.n	800cd68 <forward_cast+0x291c>
 800cdf6:	edd5 7a00 	vldr	s15, [r5]
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce02:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce06:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ce0a:	e7ad      	b.n	800cd68 <forward_cast+0x291c>
 800ce0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce10:	f7f3 ffd2 	bl	8000db8 <__aeabi_l2f>
 800ce14:	ee07 0a90 	vmov	s15, r0
 800ce18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce1c:	4b9b      	ldr	r3, [pc, #620]	; (800d08c <forward_cast+0x2c40>)
 800ce1e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce22:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ce26:	4a98      	ldr	r2, [pc, #608]	; (800d088 <forward_cast+0x2c3c>)
 800ce28:	e79e      	b.n	800cd68 <forward_cast+0x291c>
 800ce2a:	f995 0000 	ldrsb.w	r0, [r5]
 800ce2e:	e6ed      	b.n	800cc0c <forward_cast+0x27c0>
 800ce30:	edd5 7a00 	vldr	s15, [r5]
 800ce34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce3c:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce44:	f7fd bf35 	b.w	800acb2 <forward_cast+0x866>
 800ce48:	edd5 7a00 	vldr	s15, [r5]
 800ce4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce54:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce58:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce5c:	e729      	b.n	800ccb2 <forward_cast+0x2866>
 800ce5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce62:	f7f3 ffa9 	bl	8000db8 <__aeabi_l2f>
 800ce66:	ee07 0a90 	vmov	s15, r0
 800ce6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6e:	4b88      	ldr	r3, [pc, #544]	; (800d090 <forward_cast+0x2c44>)
 800ce70:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce74:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce78:	4a84      	ldr	r2, [pc, #528]	; (800d08c <forward_cast+0x2c40>)
 800ce7a:	e71a      	b.n	800ccb2 <forward_cast+0x2866>
 800ce7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce80:	f7f3 ff9a 	bl	8000db8 <__aeabi_l2f>
 800ce84:	ee07 0a90 	vmov	s15, r0
 800ce88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8c:	4b7e      	ldr	r3, [pc, #504]	; (800d088 <forward_cast+0x2c3c>)
 800ce8e:	4a7a      	ldr	r2, [pc, #488]	; (800d078 <forward_cast+0x2c2c>)
 800ce90:	ee17 0a90 	vmov	r0, s15
 800ce94:	e66b      	b.n	800cb6e <forward_cast+0x2722>
 800ce96:	7828      	ldrb	r0, [r5, #0]
 800ce98:	e669      	b.n	800cb6e <forward_cast+0x2722>
 800ce9a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ce9e:	f7f3 ff83 	bl	8000da8 <__aeabi_ul2f>
 800cea2:	ee07 0a90 	vmov	s15, r0
 800cea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceaa:	4a73      	ldr	r2, [pc, #460]	; (800d078 <forward_cast+0x2c2c>)
 800ceac:	4b76      	ldr	r3, [pc, #472]	; (800d088 <forward_cast+0x2c3c>)
 800ceae:	ee17 0a90 	vmov	r0, s15
 800ceb2:	e65c      	b.n	800cb6e <forward_cast+0x2722>
 800ceb4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800ceb8:	e659      	b.n	800cb6e <forward_cast+0x2722>
 800ceba:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cebe:	f7f3 ff7b 	bl	8000db8 <__aeabi_l2f>
 800cec2:	ee07 0a90 	vmov	s15, r0
 800cec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceca:	4b70      	ldr	r3, [pc, #448]	; (800d08c <forward_cast+0x2c40>)
 800cecc:	4a6e      	ldr	r2, [pc, #440]	; (800d088 <forward_cast+0x2c3c>)
 800cece:	ee17 0a90 	vmov	r0, s15
 800ced2:	e69b      	b.n	800cc0c <forward_cast+0x27c0>
 800ced4:	7828      	ldrb	r0, [r5, #0]
 800ced6:	e699      	b.n	800cc0c <forward_cast+0x27c0>
 800ced8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cedc:	f7f3 ff64 	bl	8000da8 <__aeabi_ul2f>
 800cee0:	ee07 0a90 	vmov	s15, r0
 800cee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cee8:	4a67      	ldr	r2, [pc, #412]	; (800d088 <forward_cast+0x2c3c>)
 800ceea:	4b68      	ldr	r3, [pc, #416]	; (800d08c <forward_cast+0x2c40>)
 800ceec:	ee17 0a90 	vmov	r0, s15
 800cef0:	e68c      	b.n	800cc0c <forward_cast+0x27c0>
 800cef2:	f9b5 0000 	ldrsh.w	r0, [r5]
 800cef6:	e689      	b.n	800cc0c <forward_cast+0x27c0>
 800cef8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cefc:	f7f3 ff5c 	bl	8000db8 <__aeabi_l2f>
 800cf00:	ee07 0a90 	vmov	s15, r0
 800cf04:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	4b5f      	ldr	r3, [pc, #380]	; (800d08c <forward_cast+0x2c40>)
 800cf0e:	4a5e      	ldr	r2, [pc, #376]	; (800d088 <forward_cast+0x2c3c>)
 800cf10:	bf14      	ite	ne
 800cf12:	2101      	movne	r1, #1
 800cf14:	2100      	moveq	r1, #0
 800cf16:	e5d9      	b.n	800cacc <forward_cast+0x2680>
 800cf18:	f995 1000 	ldrsb.w	r1, [r5]
 800cf1c:	ee07 1a90 	vmov	s15, r1
 800cf20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf24:	f7fd be4e 	b.w	800abc4 <forward_cast+0x778>
 800cf28:	edd5 7a00 	vldr	s15, [r5]
 800cf2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf34:	ee17 0a90 	vmov	r0, s15
 800cf38:	e564      	b.n	800ca04 <forward_cast+0x25b8>
 800cf3a:	f995 1000 	ldrsb.w	r1, [r5]
 800cf3e:	ee07 1a90 	vmov	s15, r1
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	f7fd bf08 	b.w	800ad5a <forward_cast+0x90e>
 800cf4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf4e:	f7f3 ff33 	bl	8000db8 <__aeabi_l2f>
 800cf52:	ee07 0a90 	vmov	s15, r0
 800cf56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf5a:	4b4c      	ldr	r3, [pc, #304]	; (800d08c <forward_cast+0x2c40>)
 800cf5c:	4a4a      	ldr	r2, [pc, #296]	; (800d088 <forward_cast+0x2c3c>)
 800cf5e:	ee17 0a90 	vmov	r0, s15
 800cf62:	e54f      	b.n	800ca04 <forward_cast+0x25b8>
 800cf64:	7828      	ldrb	r0, [r5, #0]
 800cf66:	e54d      	b.n	800ca04 <forward_cast+0x25b8>
 800cf68:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf6c:	f7f3 ff1c 	bl	8000da8 <__aeabi_ul2f>
 800cf70:	ee07 0a90 	vmov	s15, r0
 800cf74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf78:	4a43      	ldr	r2, [pc, #268]	; (800d088 <forward_cast+0x2c3c>)
 800cf7a:	4b44      	ldr	r3, [pc, #272]	; (800d08c <forward_cast+0x2c40>)
 800cf7c:	ee17 0a90 	vmov	r0, s15
 800cf80:	e540      	b.n	800ca04 <forward_cast+0x25b8>
 800cf82:	f9b5 0000 	ldrsh.w	r0, [r5]
 800cf86:	e53d      	b.n	800ca04 <forward_cast+0x25b8>
 800cf88:	f995 0000 	ldrsb.w	r0, [r5]
 800cf8c:	e53a      	b.n	800ca04 <forward_cast+0x25b8>
 800cf8e:	edd5 7a00 	vldr	s15, [r5]
 800cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf9e:	f7fd bedc 	b.w	800ad5a <forward_cast+0x90e>
 800cfa2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cfa6:	f7f3 feff 	bl	8000da8 <__aeabi_ul2f>
 800cfaa:	ee07 0a90 	vmov	s15, r0
 800cfae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfb2:	4a34      	ldr	r2, [pc, #208]	; (800d084 <forward_cast+0x2c38>)
 800cfb4:	4b35      	ldr	r3, [pc, #212]	; (800d08c <forward_cast+0x2c40>)
 800cfb6:	ee17 0a90 	vmov	r0, s15
 800cfba:	f7fe ba57 	b.w	800b46c <forward_cast+0x1020>
 800cfbe:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cfc2:	f7f3 fef1 	bl	8000da8 <__aeabi_ul2f>
 800cfc6:	ee07 0a90 	vmov	s15, r0
 800cfca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfce:	4b31      	ldr	r3, [pc, #196]	; (800d094 <forward_cast+0x2c48>)
 800cfd0:	4a2f      	ldr	r2, [pc, #188]	; (800d090 <forward_cast+0x2c44>)
 800cfd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfd6:	f7fd bec0 	b.w	800ad5a <forward_cast+0x90e>
 800cfda:	f995 1000 	ldrsb.w	r1, [r5]
 800cfde:	3900      	subs	r1, #0
 800cfe0:	bf18      	it	ne
 800cfe2:	2101      	movne	r1, #1
 800cfe4:	e572      	b.n	800cacc <forward_cast+0x2680>
 800cfe6:	edd5 7a00 	vldr	s15, [r5]
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff6:	bf14      	ite	ne
 800cff8:	2101      	movne	r1, #1
 800cffa:	2100      	moveq	r1, #0
 800cffc:	e566      	b.n	800cacc <forward_cast+0x2680>
 800cffe:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d002:	f7f3 fed1 	bl	8000da8 <__aeabi_ul2f>
 800d006:	ee07 0a90 	vmov	s15, r0
 800d00a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d012:	4a1d      	ldr	r2, [pc, #116]	; (800d088 <forward_cast+0x2c3c>)
 800d014:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <forward_cast+0x2c40>)
 800d016:	bf14      	ite	ne
 800d018:	2101      	movne	r1, #1
 800d01a:	2100      	moveq	r1, #0
 800d01c:	e556      	b.n	800cacc <forward_cast+0x2680>
 800d01e:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d022:	3900      	subs	r1, #0
 800d024:	bf18      	it	ne
 800d026:	2101      	movne	r1, #1
 800d028:	e550      	b.n	800cacc <forward_cast+0x2680>
 800d02a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d02e:	f7f3 febb 	bl	8000da8 <__aeabi_ul2f>
 800d032:	ee07 0a90 	vmov	s15, r0
 800d036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d03a:	4a14      	ldr	r2, [pc, #80]	; (800d08c <forward_cast+0x2c40>)
 800d03c:	edcd 7a01 	vstr	s15, [sp, #4]
 800d040:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d044:	4b12      	ldr	r3, [pc, #72]	; (800d090 <forward_cast+0x2c44>)
 800d046:	e634      	b.n	800ccb2 <forward_cast+0x2866>
 800d048:	edd5 7a00 	vldr	s15, [r5]
 800d04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d054:	edcd 7a01 	vstr	s15, [sp, #4]
 800d058:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d05c:	f7fe ba3b 	b.w	800b4d6 <forward_cast+0x108a>
 800d060:	f995 0000 	ldrsb.w	r0, [r5]
 800d064:	f7fe ba6f 	b.w	800b546 <forward_cast+0x10fa>
 800d068:	f995 0000 	ldrsb.w	r0, [r5]
 800d06c:	f7fe b9fe 	b.w	800b46c <forward_cast+0x1020>
 800d070:	7829      	ldrb	r1, [r5, #0]
 800d072:	f7fd bc7f 	b.w	800a974 <forward_cast+0x528>
 800d076:	bf00      	nop
 800d078:	00060440 	.word	0x00060440
 800d07c:	00842040 	.word	0x00842040
 800d080:	01821040 	.word	0x01821040
 800d084:	00040440 	.word	0x00040440
 800d088:	00042040 	.word	0x00042040
 800d08c:	00041040 	.word	0x00041040
 800d090:	00841040 	.word	0x00841040
 800d094:	00840840 	.word	0x00840840
 800d098:	edd5 7a00 	vldr	s15, [r5]
 800d09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0a4:	ee17 1a90 	vmov	r1, s15
 800d0a8:	b289      	uxth	r1, r1
 800d0aa:	f7fd bac1 	b.w	800a630 <forward_cast+0x1e4>
 800d0ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0b2:	f7f3 fe81 	bl	8000db8 <__aeabi_l2f>
 800d0b6:	ee07 0a90 	vmov	s15, r0
 800d0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0be:	4be3      	ldr	r3, [pc, #908]	; (800d44c <forward_cast+0x3000>)
 800d0c0:	edcd 7a01 	vstr	s15, [sp, #4]
 800d0c4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d0c8:	4ae1      	ldr	r2, [pc, #900]	; (800d450 <forward_cast+0x3004>)
 800d0ca:	f7fd bdf2 	b.w	800acb2 <forward_cast+0x866>
 800d0ce:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0d2:	f7f3 fe71 	bl	8000db8 <__aeabi_l2f>
 800d0d6:	ee07 0a90 	vmov	s15, r0
 800d0da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0de:	4bdd      	ldr	r3, [pc, #884]	; (800d454 <forward_cast+0x3008>)
 800d0e0:	4add      	ldr	r2, [pc, #884]	; (800d458 <forward_cast+0x300c>)
 800d0e2:	ee17 0a90 	vmov	r0, s15
 800d0e6:	f7fe b931 	b.w	800b34c <forward_cast+0xf00>
 800d0ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0ee:	f7f3 fe5b 	bl	8000da8 <__aeabi_ul2f>
 800d0f2:	ee07 0a90 	vmov	s15, r0
 800d0f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0fa:	4ad6      	ldr	r2, [pc, #856]	; (800d454 <forward_cast+0x3008>)
 800d0fc:	ee17 3a90 	vmov	r3, s15
 800d100:	b299      	uxth	r1, r3
 800d102:	4bd3      	ldr	r3, [pc, #844]	; (800d450 <forward_cast+0x3004>)
 800d104:	f7fd bc36 	b.w	800a974 <forward_cast+0x528>
 800d108:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	f7f3 fe4b 	bl	8000da8 <__aeabi_ul2f>
 800d112:	ee07 0a90 	vmov	s15, r0
 800d116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	4acb      	ldr	r2, [pc, #812]	; (800d44c <forward_cast+0x3000>)
 800d11e:	ee17 0a90 	vmov	r0, s15
 800d122:	f7fd bc63 	b.w	800a9ec <forward_cast+0x5a0>
 800d126:	edd5 7a00 	vldr	s15, [r5]
 800d12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d132:	ee17 0a90 	vmov	r0, s15
 800d136:	f7fd bc59 	b.w	800a9ec <forward_cast+0x5a0>
 800d13a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d13e:	f7fe b95f 	b.w	800b400 <forward_cast+0xfb4>
 800d142:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d146:	f7f3 fe2f 	bl	8000da8 <__aeabi_ul2f>
 800d14a:	ee07 0a90 	vmov	s15, r0
 800d14e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d152:	4ac1      	ldr	r2, [pc, #772]	; (800d458 <forward_cast+0x300c>)
 800d154:	4bbf      	ldr	r3, [pc, #764]	; (800d454 <forward_cast+0x3008>)
 800d156:	ee17 0a90 	vmov	r0, s15
 800d15a:	f7fe b951 	b.w	800b400 <forward_cast+0xfb4>
 800d15e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d162:	f7f3 fe21 	bl	8000da8 <__aeabi_ul2f>
 800d166:	ee07 0a90 	vmov	s15, r0
 800d16a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d16e:	4abb      	ldr	r2, [pc, #748]	; (800d45c <forward_cast+0x3010>)
 800d170:	4bb6      	ldr	r3, [pc, #728]	; (800d44c <forward_cast+0x3000>)
 800d172:	ee17 0a90 	vmov	r0, s15
 800d176:	f7fe b9e6 	b.w	800b546 <forward_cast+0x10fa>
 800d17a:	edd5 7a00 	vldr	s15, [r5]
 800d17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d186:	ee17 0a90 	vmov	r0, s15
 800d18a:	f7fe b9dc 	b.w	800b546 <forward_cast+0x10fa>
 800d18e:	7828      	ldrb	r0, [r5, #0]
 800d190:	f7fe b8dc 	b.w	800b34c <forward_cast+0xf00>
 800d194:	edd5 7a00 	vldr	s15, [r5]
 800d198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1a0:	ee17 0a90 	vmov	r0, s15
 800d1a4:	e532      	b.n	800cc0c <forward_cast+0x27c0>
 800d1a6:	f995 0000 	ldrsb.w	r0, [r5]
 800d1aa:	f7fd ba92 	b.w	800a6d2 <forward_cast+0x286>
 800d1ae:	f995 0000 	ldrsb.w	r0, [r5]
 800d1b2:	e4dc      	b.n	800cb6e <forward_cast+0x2722>
 800d1b4:	edd5 7a00 	vldr	s15, [r5]
 800d1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1c0:	ee17 0a90 	vmov	r0, s15
 800d1c4:	e4d3      	b.n	800cb6e <forward_cast+0x2722>
 800d1c6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1ca:	f7f3 fded 	bl	8000da8 <__aeabi_ul2f>
 800d1ce:	ee07 0a90 	vmov	s15, r0
 800d1d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1d6:	4a9f      	ldr	r2, [pc, #636]	; (800d454 <forward_cast+0x3008>)
 800d1d8:	edcd 7a01 	vstr	s15, [sp, #4]
 800d1dc:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d1e0:	4b9a      	ldr	r3, [pc, #616]	; (800d44c <forward_cast+0x3000>)
 800d1e2:	f7fe b978 	b.w	800b4d6 <forward_cast+0x108a>
 800d1e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1ea:	f7f3 fddd 	bl	8000da8 <__aeabi_ul2f>
 800d1ee:	ee07 0a90 	vmov	s15, r0
 800d1f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1f6:	4a96      	ldr	r2, [pc, #600]	; (800d450 <forward_cast+0x3004>)
 800d1f8:	4b94      	ldr	r3, [pc, #592]	; (800d44c <forward_cast+0x3000>)
 800d1fa:	ee17 0a90 	vmov	r0, s15
 800d1fe:	f7fd ba68 	b.w	800a6d2 <forward_cast+0x286>
 800d202:	edd5 7a00 	vldr	s15, [r5]
 800d206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d20e:	ee17 0a90 	vmov	r0, s15
 800d212:	f7fd ba5e 	b.w	800a6d2 <forward_cast+0x286>
 800d216:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d21a:	f7fd ba5a 	b.w	800a6d2 <forward_cast+0x286>
 800d21e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d222:	f7f3 fdc1 	bl	8000da8 <__aeabi_ul2f>
 800d226:	ee07 0a90 	vmov	s15, r0
 800d22a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d22e:	4a88      	ldr	r2, [pc, #544]	; (800d450 <forward_cast+0x3004>)
 800d230:	edcd 7a01 	vstr	s15, [sp, #4]
 800d234:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d238:	4b84      	ldr	r3, [pc, #528]	; (800d44c <forward_cast+0x3000>)
 800d23a:	f7fd bd3a 	b.w	800acb2 <forward_cast+0x866>
 800d23e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d242:	f7f3 fdb1 	bl	8000da8 <__aeabi_ul2f>
 800d246:	ee07 0a90 	vmov	s15, r0
 800d24a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d24e:	4a80      	ldr	r2, [pc, #512]	; (800d450 <forward_cast+0x3004>)
 800d250:	edcd 7a01 	vstr	s15, [sp, #4]
 800d254:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d258:	4b7c      	ldr	r3, [pc, #496]	; (800d44c <forward_cast+0x3000>)
 800d25a:	f7fd bceb 	b.w	800ac34 <forward_cast+0x7e8>
 800d25e:	edd5 7a00 	vldr	s15, [r5]
 800d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d26a:	edcd 7a01 	vstr	s15, [sp, #4]
 800d26e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d272:	f7fd bcdf 	b.w	800ac34 <forward_cast+0x7e8>
 800d276:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d27a:	f7fd ba8d 	b.w	800a798 <forward_cast+0x34c>
 800d27e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d282:	f7f3 fd99 	bl	8000db8 <__aeabi_l2f>
 800d286:	ee07 0a90 	vmov	s15, r0
 800d28a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d28e:	4b6f      	ldr	r3, [pc, #444]	; (800d44c <forward_cast+0x3000>)
 800d290:	4a6f      	ldr	r2, [pc, #444]	; (800d450 <forward_cast+0x3004>)
 800d292:	ee17 0a90 	vmov	r0, s15
 800d296:	f7fd bc3b 	b.w	800ab10 <forward_cast+0x6c4>
 800d29a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d29e:	ee07 1a90 	vmov	s15, r1
 800d2a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2a6:	f7fd bc8d 	b.w	800abc4 <forward_cast+0x778>
 800d2aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2ae:	f7f3 fd83 	bl	8000db8 <__aeabi_l2f>
 800d2b2:	ee07 0a90 	vmov	s15, r0
 800d2b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2ba:	4b66      	ldr	r3, [pc, #408]	; (800d454 <forward_cast+0x3008>)
 800d2bc:	4a66      	ldr	r2, [pc, #408]	; (800d458 <forward_cast+0x300c>)
 800d2be:	ee17 0a90 	vmov	r0, s15
 800d2c2:	f7fd bbe5 	b.w	800aa90 <forward_cast+0x644>
 800d2c6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d2ca:	f7fd bc21 	b.w	800ab10 <forward_cast+0x6c4>
 800d2ce:	f995 0000 	ldrsb.w	r0, [r5]
 800d2d2:	f7ff bb2f 	b.w	800c934 <forward_cast+0x24e8>
 800d2d6:	f995 0000 	ldrsb.w	r0, [r5]
 800d2da:	f7fd bbd9 	b.w	800aa90 <forward_cast+0x644>
 800d2de:	f995 0000 	ldrsb.w	r0, [r5]
 800d2e2:	f7fd bf70 	b.w	800b1c6 <forward_cast+0xd7a>
 800d2e6:	f995 1000 	ldrsb.w	r1, [r5]
 800d2ea:	3900      	subs	r1, #0
 800d2ec:	bf18      	it	ne
 800d2ee:	2101      	movne	r1, #1
 800d2f0:	f7fd bfa4 	b.w	800b23c <forward_cast+0xdf0>
 800d2f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2f8:	f7f3 fd5e 	bl	8000db8 <__aeabi_l2f>
 800d2fc:	ee07 0a90 	vmov	s15, r0
 800d300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d304:	4b53      	ldr	r3, [pc, #332]	; (800d454 <forward_cast+0x3008>)
 800d306:	4a54      	ldr	r2, [pc, #336]	; (800d458 <forward_cast+0x300c>)
 800d308:	ee17 0a90 	vmov	r0, s15
 800d30c:	f7ff bb12 	b.w	800c934 <forward_cast+0x24e8>
 800d310:	7828      	ldrb	r0, [r5, #0]
 800d312:	f7ff bb0f 	b.w	800c934 <forward_cast+0x24e8>
 800d316:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d31a:	f7f3 fd45 	bl	8000da8 <__aeabi_ul2f>
 800d31e:	ee07 0a90 	vmov	s15, r0
 800d322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d326:	4a4c      	ldr	r2, [pc, #304]	; (800d458 <forward_cast+0x300c>)
 800d328:	4b4a      	ldr	r3, [pc, #296]	; (800d454 <forward_cast+0x3008>)
 800d32a:	ee17 0a90 	vmov	r0, s15
 800d32e:	f7ff bb01 	b.w	800c934 <forward_cast+0x24e8>
 800d332:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d336:	f7ff bafd 	b.w	800c934 <forward_cast+0x24e8>
 800d33a:	edd5 7a00 	vldr	s15, [r5]
 800d33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d346:	ee17 0a90 	vmov	r0, s15
 800d34a:	f7ff baf3 	b.w	800c934 <forward_cast+0x24e8>
 800d34e:	edd5 7a00 	vldr	s15, [r5]
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d35a:	ee17 1a90 	vmov	r1, s15
 800d35e:	b289      	uxth	r1, r1
 800d360:	f7fd bb08 	b.w	800a974 <forward_cast+0x528>
 800d364:	edd5 7a00 	vldr	s15, [r5]
 800d368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d370:	ee17 0a90 	vmov	r0, s15
 800d374:	f7fe b844 	b.w	800b400 <forward_cast+0xfb4>
 800d378:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d37c:	f7fe b876 	b.w	800b46c <forward_cast+0x1020>
 800d380:	f995 0000 	ldrsb.w	r0, [r5]
 800d384:	f7fe b83c 	b.w	800b400 <forward_cast+0xfb4>
 800d388:	f995 1000 	ldrsb.w	r1, [r5]
 800d38c:	f7fd bdd8 	b.w	800af40 <forward_cast+0xaf4>
 800d390:	f995 1000 	ldrsb.w	r1, [r5]
 800d394:	b289      	uxth	r1, r1
 800d396:	f7fd b94b 	b.w	800a630 <forward_cast+0x1e4>
 800d39a:	f995 0000 	ldrsb.w	r0, [r5]
 800d39e:	f7ff ba34 	b.w	800c80a <forward_cast+0x23be>
 800d3a2:	edd5 7a00 	vldr	s15, [r5]
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3ae:	edcd 7a01 	vstr	s15, [sp, #4]
 800d3b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d3b6:	f7ff b9cb 	b.w	800c750 <forward_cast+0x2304>
 800d3ba:	f995 0000 	ldrsb.w	r0, [r5]
 800d3be:	f7ff ba6d 	b.w	800c89c <forward_cast+0x2450>
 800d3c2:	edd5 7a00 	vldr	s15, [r5]
 800d3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3ce:	ee17 0a90 	vmov	r0, s15
 800d3d2:	f7ff ba63 	b.w	800c89c <forward_cast+0x2450>
 800d3d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d3da:	f7f3 fce5 	bl	8000da8 <__aeabi_ul2f>
 800d3de:	4b20      	ldr	r3, [pc, #128]	; (800d460 <forward_cast+0x3014>)
 800d3e0:	4a20      	ldr	r2, [pc, #128]	; (800d464 <forward_cast+0x3018>)
 800d3e2:	ee07 0a90 	vmov	s15, r0
 800d3e6:	f7fd bbed 	b.w	800abc4 <forward_cast+0x778>
 800d3ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d3ee:	f7f3 fcdb 	bl	8000da8 <__aeabi_ul2f>
 800d3f2:	ee07 0a90 	vmov	s15, r0
 800d3f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3fa:	4a17      	ldr	r2, [pc, #92]	; (800d458 <forward_cast+0x300c>)
 800d3fc:	4b15      	ldr	r3, [pc, #84]	; (800d454 <forward_cast+0x3008>)
 800d3fe:	ee17 0a90 	vmov	r0, s15
 800d402:	f7fd bb45 	b.w	800aa90 <forward_cast+0x644>
 800d406:	edd5 7a00 	vldr	s15, [r5]
 800d40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d412:	ee17 0a90 	vmov	r0, s15
 800d416:	f7fd bb3b 	b.w	800aa90 <forward_cast+0x644>
 800d41a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d41e:	3900      	subs	r1, #0
 800d420:	bf18      	it	ne
 800d422:	2101      	movne	r1, #1
 800d424:	f7fd bf0a 	b.w	800b23c <forward_cast+0xdf0>
 800d428:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d42c:	f7f3 fcbc 	bl	8000da8 <__aeabi_ul2f>
 800d430:	ee07 0a90 	vmov	s15, r0
 800d434:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43c:	4a06      	ldr	r2, [pc, #24]	; (800d458 <forward_cast+0x300c>)
 800d43e:	4b05      	ldr	r3, [pc, #20]	; (800d454 <forward_cast+0x3008>)
 800d440:	bf14      	ite	ne
 800d442:	2101      	movne	r1, #1
 800d444:	2100      	moveq	r1, #0
 800d446:	f7fd bef9 	b.w	800b23c <forward_cast+0xdf0>
 800d44a:	bf00      	nop
 800d44c:	00841040 	.word	0x00841040
 800d450:	00041040 	.word	0x00041040
 800d454:	00042040 	.word	0x00042040
 800d458:	00060440 	.word	0x00060440
 800d45c:	01821040 	.word	0x01821040
 800d460:	00842040 	.word	0x00842040
 800d464:	00840440 	.word	0x00840440
 800d468:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d46c:	f7f3 fc9c 	bl	8000da8 <__aeabi_ul2f>
 800d470:	ee07 0a90 	vmov	s15, r0
 800d474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d478:	4bdc      	ldr	r3, [pc, #880]	; (800d7ec <forward_cast+0x33a0>)
 800d47a:	4add      	ldr	r2, [pc, #884]	; (800d7f0 <forward_cast+0x33a4>)
 800d47c:	ee17 0a90 	vmov	r0, s15
 800d480:	f7fd bea1 	b.w	800b1c6 <forward_cast+0xd7a>
 800d484:	edd5 7a00 	vldr	s15, [r5]
 800d488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d490:	ee17 0a90 	vmov	r0, s15
 800d494:	f7fd be97 	b.w	800b1c6 <forward_cast+0xd7a>
 800d498:	7828      	ldrb	r0, [r5, #0]
 800d49a:	f7fd baf9 	b.w	800aa90 <forward_cast+0x644>
 800d49e:	edd5 7a00 	vldr	s15, [r5]
 800d4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a6:	f7fd bb8d 	b.w	800abc4 <forward_cast+0x778>
 800d4aa:	7829      	ldrb	r1, [r5, #0]
 800d4ac:	ee07 1a90 	vmov	s15, r1
 800d4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b4:	f7fd bc51 	b.w	800ad5a <forward_cast+0x90e>
 800d4b8:	edd5 7a00 	vldr	s15, [r5]
 800d4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c8:	bf14      	ite	ne
 800d4ca:	2101      	movne	r1, #1
 800d4cc:	2100      	moveq	r1, #0
 800d4ce:	f7fd beb5 	b.w	800b23c <forward_cast+0xdf0>
 800d4d2:	7829      	ldrb	r1, [r5, #0]
 800d4d4:	ee07 1a90 	vmov	s15, r1
 800d4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4dc:	f7fd bb72 	b.w	800abc4 <forward_cast+0x778>
 800d4e0:	edd5 7a00 	vldr	s15, [r5]
 800d4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4ec:	ee17 0a90 	vmov	r0, s15
 800d4f0:	f7ff b98b 	b.w	800c80a <forward_cast+0x23be>
 800d4f4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d4f8:	f7fd be65 	b.w	800b1c6 <forward_cast+0xd7a>
 800d4fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d500:	f7f3 fc5a 	bl	8000db8 <__aeabi_l2f>
 800d504:	4abb      	ldr	r2, [pc, #748]	; (800d7f4 <forward_cast+0x33a8>)
 800d506:	4bbc      	ldr	r3, [pc, #752]	; (800d7f8 <forward_cast+0x33ac>)
 800d508:	ee07 0a90 	vmov	s15, r0
 800d50c:	f7fd bb5a 	b.w	800abc4 <forward_cast+0x778>
 800d510:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d514:	f7f3 fc50 	bl	8000db8 <__aeabi_l2f>
 800d518:	ee07 0a90 	vmov	s15, r0
 800d51c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d520:	4bb6      	ldr	r3, [pc, #728]	; (800d7fc <forward_cast+0x33b0>)
 800d522:	4ab7      	ldr	r2, [pc, #732]	; (800d800 <forward_cast+0x33b4>)
 800d524:	ee17 0a90 	vmov	r0, s15
 800d528:	f7fd b831 	b.w	800a58e <forward_cast+0x142>
 800d52c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d530:	f7f3 fc42 	bl	8000db8 <__aeabi_l2f>
 800d534:	ee07 0a90 	vmov	s15, r0
 800d538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d53c:	4aab      	ldr	r2, [pc, #684]	; (800d7ec <forward_cast+0x33a0>)
 800d53e:	ee17 3a90 	vmov	r3, s15
 800d542:	b299      	uxth	r1, r3
 800d544:	4baf      	ldr	r3, [pc, #700]	; (800d804 <forward_cast+0x33b8>)
 800d546:	f7fd b873 	b.w	800a630 <forward_cast+0x1e4>
 800d54a:	7828      	ldrb	r0, [r5, #0]
 800d54c:	f7fd b8c1 	b.w	800a6d2 <forward_cast+0x286>
 800d550:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d554:	f7f3 fc30 	bl	8000db8 <__aeabi_l2f>
 800d558:	ee07 0a90 	vmov	s15, r0
 800d55c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d560:	4ba6      	ldr	r3, [pc, #664]	; (800d7fc <forward_cast+0x33b0>)
 800d562:	4aa7      	ldr	r2, [pc, #668]	; (800d800 <forward_cast+0x33b4>)
 800d564:	ee17 0a90 	vmov	r0, s15
 800d568:	f7fd bd72 	b.w	800b050 <forward_cast+0xc04>
 800d56c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d570:	f7fd b80d 	b.w	800a58e <forward_cast+0x142>
 800d574:	7829      	ldrb	r1, [r5, #0]
 800d576:	f7fd b85b 	b.w	800a630 <forward_cast+0x1e4>
 800d57a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	f7f3 fc1a 	bl	8000db8 <__aeabi_l2f>
 800d584:	ee07 0a90 	vmov	s15, r0
 800d588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d58c:	4a9c      	ldr	r2, [pc, #624]	; (800d800 <forward_cast+0x33b4>)
 800d58e:	9b01      	ldr	r3, [sp, #4]
 800d590:	ee17 0a90 	vmov	r0, s15
 800d594:	f7fd ba2a 	b.w	800a9ec <forward_cast+0x5a0>
 800d598:	f995 1000 	ldrsb.w	r1, [r5]
 800d59c:	b289      	uxth	r1, r1
 800d59e:	f7fd b9e9 	b.w	800a974 <forward_cast+0x528>
 800d5a2:	f995 0000 	ldrsb.w	r0, [r5]
 800d5a6:	f7fd ba21 	b.w	800a9ec <forward_cast+0x5a0>
 800d5aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d5ae:	f7f3 fc03 	bl	8000db8 <__aeabi_l2f>
 800d5b2:	ee07 0a90 	vmov	s15, r0
 800d5b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5ba:	4b91      	ldr	r3, [pc, #580]	; (800d800 <forward_cast+0x33b4>)
 800d5bc:	4a91      	ldr	r2, [pc, #580]	; (800d804 <forward_cast+0x33b8>)
 800d5be:	ee17 0a90 	vmov	r0, s15
 800d5c2:	f7fd b8e9 	b.w	800a798 <forward_cast+0x34c>
 800d5c6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d5ca:	f7fd bebf 	b.w	800b34c <forward_cast+0xf00>
 800d5ce:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d5d2:	f7f3 fbf1 	bl	8000db8 <__aeabi_l2f>
 800d5d6:	ee07 0a90 	vmov	s15, r0
 800d5da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5de:	4a84      	ldr	r2, [pc, #528]	; (800d7f0 <forward_cast+0x33a4>)
 800d5e0:	4b82      	ldr	r3, [pc, #520]	; (800d7ec <forward_cast+0x33a0>)
 800d5e2:	ee17 0a90 	vmov	r0, s15
 800d5e6:	f7fd bdee 	b.w	800b1c6 <forward_cast+0xd7a>
 800d5ea:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d5ee:	ee07 1a90 	vmov	s15, r1
 800d5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f6:	f7fd bbb0 	b.w	800ad5a <forward_cast+0x90e>
 800d5fa:	edd5 7a00 	vldr	s15, [r5]
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d606:	edcd 7a01 	vstr	s15, [sp, #4]
 800d60a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d60e:	f7ff b803 	b.w	800c618 <forward_cast+0x21cc>
 800d612:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d616:	f7f3 fbcf 	bl	8000db8 <__aeabi_l2f>
 800d61a:	ee07 0a90 	vmov	s15, r0
 800d61e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d622:	4b77      	ldr	r3, [pc, #476]	; (800d800 <forward_cast+0x33b4>)
 800d624:	edcd 7a01 	vstr	s15, [sp, #4]
 800d628:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d62c:	4a75      	ldr	r2, [pc, #468]	; (800d804 <forward_cast+0x33b8>)
 800d62e:	f7fe bff3 	b.w	800c618 <forward_cast+0x21cc>
 800d632:	f995 0000 	ldrsb.w	r0, [r5]
 800d636:	f7ff b839 	b.w	800c6ac <forward_cast+0x2260>
 800d63a:	edd5 7a00 	vldr	s15, [r5]
 800d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d646:	ee17 0a90 	vmov	r0, s15
 800d64a:	f7ff b82f 	b.w	800c6ac <forward_cast+0x2260>
 800d64e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d652:	f7f3 fbb1 	bl	8000db8 <__aeabi_l2f>
 800d656:	ee07 0a90 	vmov	s15, r0
 800d65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d65e:	4b63      	ldr	r3, [pc, #396]	; (800d7ec <forward_cast+0x33a0>)
 800d660:	4a69      	ldr	r2, [pc, #420]	; (800d808 <forward_cast+0x33bc>)
 800d662:	ee17 0a90 	vmov	r0, s15
 800d666:	f7ff b821 	b.w	800c6ac <forward_cast+0x2260>
 800d66a:	7828      	ldrb	r0, [r5, #0]
 800d66c:	f7ff b81e 	b.w	800c6ac <forward_cast+0x2260>
 800d670:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d674:	f7f3 fb98 	bl	8000da8 <__aeabi_ul2f>
 800d678:	ee07 0a90 	vmov	s15, r0
 800d67c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d680:	4a61      	ldr	r2, [pc, #388]	; (800d808 <forward_cast+0x33bc>)
 800d682:	4b5a      	ldr	r3, [pc, #360]	; (800d7ec <forward_cast+0x33a0>)
 800d684:	ee17 0a90 	vmov	r0, s15
 800d688:	f7ff b810 	b.w	800c6ac <forward_cast+0x2260>
 800d68c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d690:	f7ff b80c 	b.w	800c6ac <forward_cast+0x2260>
 800d694:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d698:	f7f3 fb86 	bl	8000da8 <__aeabi_ul2f>
 800d69c:	ee07 0a90 	vmov	s15, r0
 800d6a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6a4:	4a57      	ldr	r2, [pc, #348]	; (800d804 <forward_cast+0x33b8>)
 800d6a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d6ae:	4b54      	ldr	r3, [pc, #336]	; (800d800 <forward_cast+0x33b4>)
 800d6b0:	f7fe bfb2 	b.w	800c618 <forward_cast+0x21cc>
 800d6b4:	edd5 7a00 	vldr	s15, [r5]
 800d6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6c0:	ee17 0a90 	vmov	r0, s15
 800d6c4:	f7fe bedb 	b.w	800c47e <forward_cast+0x2032>
 800d6c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d6cc:	f7f3 fb74 	bl	8000db8 <__aeabi_l2f>
 800d6d0:	ee07 0a90 	vmov	s15, r0
 800d6d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6d8:	4b44      	ldr	r3, [pc, #272]	; (800d7ec <forward_cast+0x33a0>)
 800d6da:	4a4b      	ldr	r2, [pc, #300]	; (800d808 <forward_cast+0x33bc>)
 800d6dc:	ee17 0a90 	vmov	r0, s15
 800d6e0:	f7fd be8e 	b.w	800b400 <forward_cast+0xfb4>
 800d6e4:	7828      	ldrb	r0, [r5, #0]
 800d6e6:	f7fd bec1 	b.w	800b46c <forward_cast+0x1020>
 800d6ea:	f995 0000 	ldrsb.w	r0, [r5]
 800d6ee:	f7fe bf2b 	b.w	800c548 <forward_cast+0x20fc>
 800d6f2:	edd5 7a00 	vldr	s15, [r5]
 800d6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6fe:	ee17 0a90 	vmov	r0, s15
 800d702:	f7fe bf21 	b.w	800c548 <forward_cast+0x20fc>
 800d706:	7829      	ldrb	r1, [r5, #0]
 800d708:	f7fd bc1a 	b.w	800af40 <forward_cast+0xaf4>
 800d70c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d710:	f7f3 fb52 	bl	8000db8 <__aeabi_l2f>
 800d714:	ee07 0a90 	vmov	s15, r0
 800d718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d71c:	4b38      	ldr	r3, [pc, #224]	; (800d800 <forward_cast+0x33b4>)
 800d71e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d722:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d726:	4a37      	ldr	r2, [pc, #220]	; (800d804 <forward_cast+0x33b8>)
 800d728:	f7fd ba84 	b.w	800ac34 <forward_cast+0x7e8>
 800d72c:	edd5 7a00 	vldr	s15, [r5]
 800d730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d738:	ee17 0a90 	vmov	r0, s15
 800d73c:	f7fe bb99 	b.w	800be72 <forward_cast+0x1a26>
 800d740:	f995 1000 	ldrsb.w	r1, [r5]
 800d744:	b289      	uxth	r1, r1
 800d746:	f7fd b87f 	b.w	800a848 <forward_cast+0x3fc>
 800d74a:	f995 0000 	ldrsb.w	r0, [r5]
 800d74e:	f7fe bb90 	b.w	800be72 <forward_cast+0x1a26>
 800d752:	f995 0000 	ldrsb.w	r0, [r5]
 800d756:	f7fd bcf8 	b.w	800b14a <forward_cast+0xcfe>
 800d75a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d75e:	f7f3 fb2b 	bl	8000db8 <__aeabi_l2f>
 800d762:	ee07 0a90 	vmov	s15, r0
 800d766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d76a:	4b25      	ldr	r3, [pc, #148]	; (800d800 <forward_cast+0x33b4>)
 800d76c:	4a26      	ldr	r2, [pc, #152]	; (800d808 <forward_cast+0x33bc>)
 800d76e:	ee17 0a90 	vmov	r0, s15
 800d772:	f7fe bbca 	b.w	800bf0a <forward_cast+0x1abe>
 800d776:	7828      	ldrb	r0, [r5, #0]
 800d778:	f7fe bbc7 	b.w	800bf0a <forward_cast+0x1abe>
 800d77c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d780:	f7f3 fb12 	bl	8000da8 <__aeabi_ul2f>
 800d784:	ee07 0a90 	vmov	s15, r0
 800d788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d78c:	4a1e      	ldr	r2, [pc, #120]	; (800d808 <forward_cast+0x33bc>)
 800d78e:	4b1c      	ldr	r3, [pc, #112]	; (800d800 <forward_cast+0x33b4>)
 800d790:	ee17 0a90 	vmov	r0, s15
 800d794:	f7fe bbb9 	b.w	800bf0a <forward_cast+0x1abe>
 800d798:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d79c:	f7fe bbb5 	b.w	800bf0a <forward_cast+0x1abe>
 800d7a0:	f995 1000 	ldrsb.w	r1, [r5]
 800d7a4:	3900      	subs	r1, #0
 800d7a6:	bf18      	it	ne
 800d7a8:	2101      	movne	r1, #1
 800d7aa:	f7fe bc5d 	b.w	800c068 <forward_cast+0x1c1c>
 800d7ae:	f995 0000 	ldrsb.w	r0, [r5]
 800d7b2:	f7fd b893 	b.w	800a8dc <forward_cast+0x490>
 800d7b6:	f995 0000 	ldrsb.w	r0, [r5]
 800d7ba:	f7fe bba6 	b.w	800bf0a <forward_cast+0x1abe>
 800d7be:	edd5 7a00 	vldr	s15, [r5]
 800d7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ca:	ee17 0a90 	vmov	r0, s15
 800d7ce:	f7fe bb9c 	b.w	800bf0a <forward_cast+0x1abe>
 800d7d2:	edd5 7a00 	vldr	s15, [r5]
 800d7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7da:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e2:	bf14      	ite	ne
 800d7e4:	2101      	movne	r1, #1
 800d7e6:	2100      	moveq	r1, #0
 800d7e8:	f7fe bc3e 	b.w	800c068 <forward_cast+0x1c1c>
 800d7ec:	00042040 	.word	0x00042040
 800d7f0:	01821040 	.word	0x01821040
 800d7f4:	00840440 	.word	0x00840440
 800d7f8:	00842040 	.word	0x00842040
 800d7fc:	00840840 	.word	0x00840840
 800d800:	00841040 	.word	0x00841040
 800d804:	00041040 	.word	0x00041040
 800d808:	00060440 	.word	0x00060440
 800d80c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d810:	f7f3 fad2 	bl	8000db8 <__aeabi_l2f>
 800d814:	ee07 0a90 	vmov	s15, r0
 800d818:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	4bd9      	ldr	r3, [pc, #868]	; (800db88 <forward_cast+0x373c>)
 800d822:	4ada      	ldr	r2, [pc, #872]	; (800db8c <forward_cast+0x3740>)
 800d824:	bf14      	ite	ne
 800d826:	2101      	movne	r1, #1
 800d828:	2100      	moveq	r1, #0
 800d82a:	f7fe bc1d 	b.w	800c068 <forward_cast+0x1c1c>
 800d82e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d832:	f7f3 fab9 	bl	8000da8 <__aeabi_ul2f>
 800d836:	ee07 0a90 	vmov	s15, r0
 800d83a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	4ad2      	ldr	r2, [pc, #840]	; (800db8c <forward_cast+0x3740>)
 800d844:	4bd0      	ldr	r3, [pc, #832]	; (800db88 <forward_cast+0x373c>)
 800d846:	bf14      	ite	ne
 800d848:	2101      	movne	r1, #1
 800d84a:	2100      	moveq	r1, #0
 800d84c:	f7fe bc0c 	b.w	800c068 <forward_cast+0x1c1c>
 800d850:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d854:	3900      	subs	r1, #0
 800d856:	bf18      	it	ne
 800d858:	2101      	movne	r1, #1
 800d85a:	f7fe bc05 	b.w	800c068 <forward_cast+0x1c1c>
 800d85e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d862:	f7f3 faa9 	bl	8000db8 <__aeabi_l2f>
 800d866:	ee07 0a90 	vmov	s15, r0
 800d86a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d86e:	4bc8      	ldr	r3, [pc, #800]	; (800db90 <forward_cast+0x3744>)
 800d870:	edcd 7a01 	vstr	s15, [sp, #4]
 800d874:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d878:	4ac4      	ldr	r2, [pc, #784]	; (800db8c <forward_cast+0x3740>)
 800d87a:	f7fe bba3 	b.w	800bfc4 <forward_cast+0x1b78>
 800d87e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d882:	f7f3 fa91 	bl	8000da8 <__aeabi_ul2f>
 800d886:	ee07 0a90 	vmov	s15, r0
 800d88a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d88e:	4abf      	ldr	r2, [pc, #764]	; (800db8c <forward_cast+0x3740>)
 800d890:	edcd 7a01 	vstr	s15, [sp, #4]
 800d894:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d898:	4bbd      	ldr	r3, [pc, #756]	; (800db90 <forward_cast+0x3744>)
 800d89a:	f7fe bb93 	b.w	800bfc4 <forward_cast+0x1b78>
 800d89e:	edd5 7a00 	vldr	s15, [r5]
 800d8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8aa:	edcd 7a01 	vstr	s15, [sp, #4]
 800d8ae:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800d8b2:	f7fe bb87 	b.w	800bfc4 <forward_cast+0x1b78>
 800d8b6:	f995 0000 	ldrsb.w	r0, [r5]
 800d8ba:	f7fd bcfa 	b.w	800b2b2 <forward_cast+0xe66>
 800d8be:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d8c2:	f7f3 fa71 	bl	8000da8 <__aeabi_ul2f>
 800d8c6:	ee07 0a90 	vmov	s15, r0
 800d8ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8ce:	4aaf      	ldr	r2, [pc, #700]	; (800db8c <forward_cast+0x3740>)
 800d8d0:	ee17 3a90 	vmov	r3, s15
 800d8d4:	b219      	sxth	r1, r3
 800d8d6:	4bac      	ldr	r3, [pc, #688]	; (800db88 <forward_cast+0x373c>)
 800d8d8:	f7fd baf6 	b.w	800aec8 <forward_cast+0xa7c>
 800d8dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d8e0:	f7f3 fa62 	bl	8000da8 <__aeabi_ul2f>
 800d8e4:	ee07 0a90 	vmov	s15, r0
 800d8e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8ec:	4aa6      	ldr	r2, [pc, #664]	; (800db88 <forward_cast+0x373c>)
 800d8ee:	4ba8      	ldr	r3, [pc, #672]	; (800db90 <forward_cast+0x3744>)
 800d8f0:	ee17 0a90 	vmov	r0, s15
 800d8f4:	f7fc bf50 	b.w	800a798 <forward_cast+0x34c>
 800d8f8:	edd5 7a00 	vldr	s15, [r5]
 800d8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d904:	ee17 0a90 	vmov	r0, s15
 800d908:	f7fc bf46 	b.w	800a798 <forward_cast+0x34c>
 800d90c:	7828      	ldrb	r0, [r5, #0]
 800d90e:	f7fd bc1c 	b.w	800b14a <forward_cast+0xcfe>
 800d912:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d916:	f7f3 fa4f 	bl	8000db8 <__aeabi_l2f>
 800d91a:	ee07 0a90 	vmov	s15, r0
 800d91e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d922:	4a9a      	ldr	r2, [pc, #616]	; (800db8c <forward_cast+0x3740>)
 800d924:	ee17 3a90 	vmov	r3, s15
 800d928:	b219      	sxth	r1, r3
 800d92a:	4b97      	ldr	r3, [pc, #604]	; (800db88 <forward_cast+0x373c>)
 800d92c:	f7fd bb08 	b.w	800af40 <forward_cast+0xaf4>
 800d930:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d934:	f7fd b85a 	b.w	800a9ec <forward_cast+0x5a0>
 800d938:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d93c:	f7f3 fa3c 	bl	8000db8 <__aeabi_l2f>
 800d940:	ee07 0a90 	vmov	s15, r0
 800d944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d948:	4a90      	ldr	r2, [pc, #576]	; (800db8c <forward_cast+0x3740>)
 800d94a:	ee17 3a90 	vmov	r3, s15
 800d94e:	b219      	sxth	r1, r3
 800d950:	4b8d      	ldr	r3, [pc, #564]	; (800db88 <forward_cast+0x373c>)
 800d952:	f7fd ba7d 	b.w	800ae50 <forward_cast+0xa04>
 800d956:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d95a:	f7fd bb79 	b.w	800b050 <forward_cast+0xc04>
 800d95e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d962:	f7f3 fa29 	bl	8000db8 <__aeabi_l2f>
 800d966:	ee07 0a90 	vmov	s15, r0
 800d96a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d96e:	4a89      	ldr	r2, [pc, #548]	; (800db94 <forward_cast+0x3748>)
 800d970:	4b89      	ldr	r3, [pc, #548]	; (800db98 <forward_cast+0x374c>)
 800d972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d976:	f7fd ba31 	b.w	800addc <forward_cast+0x990>
 800d97a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d97e:	f7fd b887 	b.w	800aa90 <forward_cast+0x644>
 800d982:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d986:	f7f3 fa17 	bl	8000db8 <__aeabi_l2f>
 800d98a:	ee07 0a90 	vmov	s15, r0
 800d98e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d992:	4a7f      	ldr	r2, [pc, #508]	; (800db90 <forward_cast+0x3744>)
 800d994:	4b80      	ldr	r3, [pc, #512]	; (800db98 <forward_cast+0x374c>)
 800d996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99a:	f7fd b9de 	b.w	800ad5a <forward_cast+0x90e>
 800d99e:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d9a2:	f7fc bf9b 	b.w	800a8dc <forward_cast+0x490>
 800d9a6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9aa:	f7f3 fa05 	bl	8000db8 <__aeabi_l2f>
 800d9ae:	ee07 0a90 	vmov	s15, r0
 800d9b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	4b74      	ldr	r3, [pc, #464]	; (800db8c <forward_cast+0x3740>)
 800d9bc:	4a77      	ldr	r2, [pc, #476]	; (800db9c <forward_cast+0x3750>)
 800d9be:	bf14      	ite	ne
 800d9c0:	2101      	movne	r1, #1
 800d9c2:	2100      	moveq	r1, #0
 800d9c4:	f7fd bc3a 	b.w	800b23c <forward_cast+0xdf0>
 800d9c8:	edd5 7a00 	vldr	s15, [r5]
 800d9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9d4:	ee17 0a90 	vmov	r0, s15
 800d9d8:	f7fd bcb8 	b.w	800b34c <forward_cast+0xf00>
 800d9dc:	edd5 7a00 	vldr	s15, [r5]
 800d9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9e8:	ee17 1a90 	vmov	r1, s15
 800d9ec:	b209      	sxth	r1, r1
 800d9ee:	f7fd ba6b 	b.w	800aec8 <forward_cast+0xa7c>
 800d9f2:	7829      	ldrb	r1, [r5, #0]
 800d9f4:	ee07 1a90 	vmov	s15, r1
 800d9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9fc:	f7fd b9ee 	b.w	800addc <forward_cast+0x990>
 800da00:	f995 0000 	ldrsb.w	r0, [r5]
 800da04:	f7fd b884 	b.w	800ab10 <forward_cast+0x6c4>
 800da08:	f995 0000 	ldrsb.w	r0, [r5]
 800da0c:	f7fc bec4 	b.w	800a798 <forward_cast+0x34c>
 800da10:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da14:	f7f3 f9d0 	bl	8000db8 <__aeabi_l2f>
 800da18:	ee07 0a90 	vmov	s15, r0
 800da1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da20:	4a5a      	ldr	r2, [pc, #360]	; (800db8c <forward_cast+0x3740>)
 800da22:	ee17 3a90 	vmov	r3, s15
 800da26:	b219      	sxth	r1, r3
 800da28:	4b57      	ldr	r3, [pc, #348]	; (800db88 <forward_cast+0x373c>)
 800da2a:	f7fd ba4d 	b.w	800aec8 <forward_cast+0xa7c>
 800da2e:	7828      	ldrb	r0, [r5, #0]
 800da30:	f7fc bf54 	b.w	800a8dc <forward_cast+0x490>
 800da34:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da38:	f7f3 f9b6 	bl	8000da8 <__aeabi_ul2f>
 800da3c:	ee07 0a90 	vmov	s15, r0
 800da40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da44:	4a55      	ldr	r2, [pc, #340]	; (800db9c <forward_cast+0x3750>)
 800da46:	4b51      	ldr	r3, [pc, #324]	; (800db8c <forward_cast+0x3740>)
 800da48:	ee17 0a90 	vmov	r0, s15
 800da4c:	f7fd bc7e 	b.w	800b34c <forward_cast+0xf00>
 800da50:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da54:	f7f3 f9a8 	bl	8000da8 <__aeabi_ul2f>
 800da58:	ee07 0a90 	vmov	s15, r0
 800da5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da60:	4a4a      	ldr	r2, [pc, #296]	; (800db8c <forward_cast+0x3740>)
 800da62:	ee17 3a90 	vmov	r3, s15
 800da66:	b219      	sxth	r1, r3
 800da68:	4b47      	ldr	r3, [pc, #284]	; (800db88 <forward_cast+0x373c>)
 800da6a:	f7fd b9f1 	b.w	800ae50 <forward_cast+0xa04>
 800da6e:	edd5 7a00 	vldr	s15, [r5]
 800da72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da7a:	ee17 1a90 	vmov	r1, s15
 800da7e:	b209      	sxth	r1, r1
 800da80:	f7fd b9e6 	b.w	800ae50 <forward_cast+0xa04>
 800da84:	7828      	ldrb	r0, [r5, #0]
 800da86:	f7fd bc14 	b.w	800b2b2 <forward_cast+0xe66>
 800da8a:	f995 0000 	ldrsb.w	r0, [r5]
 800da8e:	f7fd bc5d 	b.w	800b34c <forward_cast+0xf00>
 800da92:	f995 1000 	ldrsb.w	r1, [r5]
 800da96:	f7fd b9db 	b.w	800ae50 <forward_cast+0xa04>
 800da9a:	f995 1000 	ldrsb.w	r1, [r5]
 800da9e:	f7fd ba13 	b.w	800aec8 <forward_cast+0xa7c>
 800daa2:	f995 0000 	ldrsb.w	r0, [r5]
 800daa6:	f7fd bad3 	b.w	800b050 <forward_cast+0xc04>
 800daaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800daae:	f7f3 f97b 	bl	8000da8 <__aeabi_ul2f>
 800dab2:	ee07 0a90 	vmov	s15, r0
 800dab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daba:	4a34      	ldr	r2, [pc, #208]	; (800db8c <forward_cast+0x3740>)
 800dabc:	ee17 3a90 	vmov	r3, s15
 800dac0:	b219      	sxth	r1, r3
 800dac2:	4b31      	ldr	r3, [pc, #196]	; (800db88 <forward_cast+0x373c>)
 800dac4:	f7fd ba3c 	b.w	800af40 <forward_cast+0xaf4>
 800dac8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dacc:	f7f3 f96c 	bl	8000da8 <__aeabi_ul2f>
 800dad0:	ee07 0a90 	vmov	s15, r0
 800dad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad8:	4a2c      	ldr	r2, [pc, #176]	; (800db8c <forward_cast+0x3740>)
 800dada:	ee17 3a90 	vmov	r3, s15
 800dade:	b299      	uxth	r1, r3
 800dae0:	4b29      	ldr	r3, [pc, #164]	; (800db88 <forward_cast+0x373c>)
 800dae2:	f7fc bda5 	b.w	800a630 <forward_cast+0x1e4>
 800dae6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800daea:	f7f3 f965 	bl	8000db8 <__aeabi_l2f>
 800daee:	ee07 0a90 	vmov	s15, r0
 800daf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daf6:	4b26      	ldr	r3, [pc, #152]	; (800db90 <forward_cast+0x3744>)
 800daf8:	4a29      	ldr	r2, [pc, #164]	; (800dba0 <forward_cast+0x3754>)
 800dafa:	ee17 0a90 	vmov	r0, s15
 800dafe:	f7fd bd22 	b.w	800b546 <forward_cast+0x10fa>
 800db02:	edd5 7a00 	vldr	s15, [r5]
 800db06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db0e:	ee17 0a90 	vmov	r0, s15
 800db12:	f7fd bcab 	b.w	800b46c <forward_cast+0x1020>
 800db16:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db1a:	f7f3 f94d 	bl	8000db8 <__aeabi_l2f>
 800db1e:	ee07 0a90 	vmov	s15, r0
 800db22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db26:	4b19      	ldr	r3, [pc, #100]	; (800db8c <forward_cast+0x3740>)
 800db28:	4a1c      	ldr	r2, [pc, #112]	; (800db9c <forward_cast+0x3750>)
 800db2a:	ee17 0a90 	vmov	r0, s15
 800db2e:	f7fe b902 	b.w	800bd36 <forward_cast+0x18ea>
 800db32:	7828      	ldrb	r0, [r5, #0]
 800db34:	f7fe b8ff 	b.w	800bd36 <forward_cast+0x18ea>
 800db38:	e9d5 0100 	ldrd	r0, r1, [r5]
 800db3c:	f7f3 f934 	bl	8000da8 <__aeabi_ul2f>
 800db40:	ee07 0a90 	vmov	s15, r0
 800db44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db48:	4a14      	ldr	r2, [pc, #80]	; (800db9c <forward_cast+0x3750>)
 800db4a:	4b10      	ldr	r3, [pc, #64]	; (800db8c <forward_cast+0x3740>)
 800db4c:	ee17 0a90 	vmov	r0, s15
 800db50:	f7fe b8f1 	b.w	800bd36 <forward_cast+0x18ea>
 800db54:	f9b5 0000 	ldrsh.w	r0, [r5]
 800db58:	f7fe b8ed 	b.w	800bd36 <forward_cast+0x18ea>
 800db5c:	f995 0000 	ldrsb.w	r0, [r5]
 800db60:	f7fe b8e9 	b.w	800bd36 <forward_cast+0x18ea>
 800db64:	f995 0000 	ldrsb.w	r0, [r5]
 800db68:	f7fc bd11 	b.w	800a58e <forward_cast+0x142>
 800db6c:	f995 0000 	ldrsb.w	r0, [r5]
 800db70:	f7fe b930 	b.w	800bdd4 <forward_cast+0x1988>
 800db74:	edd5 7a00 	vldr	s15, [r5]
 800db78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db80:	ee17 0a90 	vmov	r0, s15
 800db84:	f7fe b926 	b.w	800bdd4 <forward_cast+0x1988>
 800db88:	00041040 	.word	0x00041040
 800db8c:	00042040 	.word	0x00042040
 800db90:	00841040 	.word	0x00841040
 800db94:	00842040 	.word	0x00842040
 800db98:	00840840 	.word	0x00840840
 800db9c:	00060440 	.word	0x00060440
 800dba0:	01821040 	.word	0x01821040
 800dba4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dba8:	f7f3 f906 	bl	8000db8 <__aeabi_l2f>
 800dbac:	ee07 0a90 	vmov	s15, r0
 800dbb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbb4:	4be2      	ldr	r3, [pc, #904]	; (800df40 <forward_cast+0x3af4>)
 800dbb6:	4ae3      	ldr	r2, [pc, #908]	; (800df44 <forward_cast+0x3af8>)
 800dbb8:	ee17 0a90 	vmov	r0, s15
 800dbbc:	f7fe b90a 	b.w	800bdd4 <forward_cast+0x1988>
 800dbc0:	7828      	ldrb	r0, [r5, #0]
 800dbc2:	f7fe b907 	b.w	800bdd4 <forward_cast+0x1988>
 800dbc6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dbca:	f7f3 f8ed 	bl	8000da8 <__aeabi_ul2f>
 800dbce:	ee07 0a90 	vmov	s15, r0
 800dbd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbd6:	4adb      	ldr	r2, [pc, #876]	; (800df44 <forward_cast+0x3af8>)
 800dbd8:	4bd9      	ldr	r3, [pc, #868]	; (800df40 <forward_cast+0x3af4>)
 800dbda:	ee17 0a90 	vmov	r0, s15
 800dbde:	f7fe b8f9 	b.w	800bdd4 <forward_cast+0x1988>
 800dbe2:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dbe6:	f7fe b8f5 	b.w	800bdd4 <forward_cast+0x1988>
 800dbea:	edd5 7a00 	vldr	s15, [r5]
 800dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbf6:	ee17 0a90 	vmov	r0, s15
 800dbfa:	f7fe b89c 	b.w	800bd36 <forward_cast+0x18ea>
 800dbfe:	f995 1000 	ldrsb.w	r1, [r5]
 800dc02:	ee07 1a90 	vmov	s15, r1
 800dc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc0a:	f7fd b8e7 	b.w	800addc <forward_cast+0x990>
 800dc0e:	edd5 7a00 	vldr	s15, [r5]
 800dc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc1a:	ee17 1a90 	vmov	r1, s15
 800dc1e:	b209      	sxth	r1, r1
 800dc20:	f7fd b98e 	b.w	800af40 <forward_cast+0xaf4>
 800dc24:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dc28:	f7fd bc8d 	b.w	800b546 <forward_cast+0x10fa>
 800dc2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc30:	f7f3 f8ba 	bl	8000da8 <__aeabi_ul2f>
 800dc34:	ee07 0a90 	vmov	s15, r0
 800dc38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc3c:	4ac1      	ldr	r2, [pc, #772]	; (800df44 <forward_cast+0x3af8>)
 800dc3e:	ee17 3a90 	vmov	r3, s15
 800dc42:	b299      	uxth	r1, r3
 800dc44:	4bbe      	ldr	r3, [pc, #760]	; (800df40 <forward_cast+0x3af4>)
 800dc46:	f7fc bdff 	b.w	800a848 <forward_cast+0x3fc>
 800dc4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc4e:	f7f3 f8ab 	bl	8000da8 <__aeabi_ul2f>
 800dc52:	ee07 0a90 	vmov	s15, r0
 800dc56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc5a:	4bbb      	ldr	r3, [pc, #748]	; (800df48 <forward_cast+0x3afc>)
 800dc5c:	4abb      	ldr	r2, [pc, #748]	; (800df4c <forward_cast+0x3b00>)
 800dc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc62:	f7fd b8bb 	b.w	800addc <forward_cast+0x990>
 800dc66:	edd5 7a00 	vldr	s15, [r5]
 800dc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc76:	f7fd b8b1 	b.w	800addc <forward_cast+0x990>
 800dc7a:	7828      	ldrb	r0, [r5, #0]
 800dc7c:	f7fc bd8c 	b.w	800a798 <forward_cast+0x34c>
 800dc80:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc84:	f7f3 f890 	bl	8000da8 <__aeabi_ul2f>
 800dc88:	ee07 0a90 	vmov	s15, r0
 800dc8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc90:	4aaf      	ldr	r2, [pc, #700]	; (800df50 <forward_cast+0x3b04>)
 800dc92:	4bac      	ldr	r3, [pc, #688]	; (800df44 <forward_cast+0x3af8>)
 800dc94:	ee17 0a90 	vmov	r0, s15
 800dc98:	f7fd bb0b 	b.w	800b2b2 <forward_cast+0xe66>
 800dc9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dca0:	f7f3 f882 	bl	8000da8 <__aeabi_ul2f>
 800dca4:	ee07 0a90 	vmov	s15, r0
 800dca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcac:	4ba6      	ldr	r3, [pc, #664]	; (800df48 <forward_cast+0x3afc>)
 800dcae:	4aa9      	ldr	r2, [pc, #676]	; (800df54 <forward_cast+0x3b08>)
 800dcb0:	ee17 0a90 	vmov	r0, s15
 800dcb4:	f7fc be12 	b.w	800a8dc <forward_cast+0x490>
 800dcb8:	edd5 7a00 	vldr	s15, [r5]
 800dcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcc4:	ee17 0a90 	vmov	r0, s15
 800dcc8:	f7fc be08 	b.w	800a8dc <forward_cast+0x490>
 800dccc:	7828      	ldrb	r0, [r5, #0]
 800dcce:	f7fd b9bf 	b.w	800b050 <forward_cast+0xc04>
 800dcd2:	edd5 7a00 	vldr	s15, [r5]
 800dcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcde:	ee17 1a90 	vmov	r1, s15
 800dce2:	b289      	uxth	r1, r1
 800dce4:	f7fc bdb0 	b.w	800a848 <forward_cast+0x3fc>
 800dce8:	7829      	ldrb	r1, [r5, #0]
 800dcea:	f7fd b8b1 	b.w	800ae50 <forward_cast+0xa04>
 800dcee:	edd5 7a00 	vldr	s15, [r5]
 800dcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcfa:	ee17 0a90 	vmov	r0, s15
 800dcfe:	f7fd bad8 	b.w	800b2b2 <forward_cast+0xe66>
 800dd02:	7828      	ldrb	r0, [r5, #0]
 800dd04:	f7fc bf04 	b.w	800ab10 <forward_cast+0x6c4>
 800dd08:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd0c:	f7f3 f84c 	bl	8000da8 <__aeabi_ul2f>
 800dd10:	ee07 0a90 	vmov	s15, r0
 800dd14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd18:	4a89      	ldr	r2, [pc, #548]	; (800df40 <forward_cast+0x3af4>)
 800dd1a:	4b8f      	ldr	r3, [pc, #572]	; (800df58 <forward_cast+0x3b0c>)
 800dd1c:	ee17 0a90 	vmov	r0, s15
 800dd20:	f7fc bef6 	b.w	800ab10 <forward_cast+0x6c4>
 800dd24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd28:	f7f3 f83e 	bl	8000da8 <__aeabi_ul2f>
 800dd2c:	ee07 0a90 	vmov	s15, r0
 800dd30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd34:	4a88      	ldr	r2, [pc, #544]	; (800df58 <forward_cast+0x3b0c>)
 800dd36:	4b84      	ldr	r3, [pc, #528]	; (800df48 <forward_cast+0x3afc>)
 800dd38:	ee17 0a90 	vmov	r0, s15
 800dd3c:	f7fd b988 	b.w	800b050 <forward_cast+0xc04>
 800dd40:	edd5 7a00 	vldr	s15, [r5]
 800dd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd4c:	ee17 0a90 	vmov	r0, s15
 800dd50:	f7fd b97e 	b.w	800b050 <forward_cast+0xc04>
 800dd54:	7829      	ldrb	r1, [r5, #0]
 800dd56:	f7fc bd77 	b.w	800a848 <forward_cast+0x3fc>
 800dd5a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd5e:	f7f3 f823 	bl	8000da8 <__aeabi_ul2f>
 800dd62:	ee07 0a90 	vmov	s15, r0
 800dd66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd6a:	4a7b      	ldr	r2, [pc, #492]	; (800df58 <forward_cast+0x3b0c>)
 800dd6c:	4b76      	ldr	r3, [pc, #472]	; (800df48 <forward_cast+0x3afc>)
 800dd6e:	ee17 0a90 	vmov	r0, s15
 800dd72:	f7fc bc0c 	b.w	800a58e <forward_cast+0x142>
 800dd76:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dd7a:	f7f3 f815 	bl	8000da8 <__aeabi_ul2f>
 800dd7e:	ee07 0a90 	vmov	s15, r0
 800dd82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd86:	4a6f      	ldr	r2, [pc, #444]	; (800df44 <forward_cast+0x3af8>)
 800dd88:	4b6d      	ldr	r3, [pc, #436]	; (800df40 <forward_cast+0x3af4>)
 800dd8a:	ee17 0a90 	vmov	r0, s15
 800dd8e:	f7fd b9dc 	b.w	800b14a <forward_cast+0xcfe>
 800dd92:	edd5 7a00 	vldr	s15, [r5]
 800dd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd9e:	ee17 0a90 	vmov	r0, s15
 800dda2:	f7fd b9d2 	b.w	800b14a <forward_cast+0xcfe>
 800dda6:	7828      	ldrb	r0, [r5, #0]
 800dda8:	f7fd ba0d 	b.w	800b1c6 <forward_cast+0xd7a>
 800ddac:	edd5 7a00 	vldr	s15, [r5]
 800ddb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddb8:	ee17 0a90 	vmov	r0, s15
 800ddbc:	f7fc bea8 	b.w	800ab10 <forward_cast+0x6c4>
 800ddc0:	7828      	ldrb	r0, [r5, #0]
 800ddc2:	f7fc bbe4 	b.w	800a58e <forward_cast+0x142>
 800ddc6:	edd5 7a00 	vldr	s15, [r5]
 800ddca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddd2:	ee17 0a90 	vmov	r0, s15
 800ddd6:	f7fc bbda 	b.w	800a58e <forward_cast+0x142>
 800ddda:	7829      	ldrb	r1, [r5, #0]
 800dddc:	f7fd b874 	b.w	800aec8 <forward_cast+0xa7c>
 800dde0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dde4:	f7f2 ffe8 	bl	8000db8 <__aeabi_l2f>
 800dde8:	ee07 0a90 	vmov	s15, r0
 800ddec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddf0:	4b53      	ldr	r3, [pc, #332]	; (800df40 <forward_cast+0x3af4>)
 800ddf2:	4a54      	ldr	r2, [pc, #336]	; (800df44 <forward_cast+0x3af8>)
 800ddf4:	ee17 0a90 	vmov	r0, s15
 800ddf8:	f7fe b83b 	b.w	800be72 <forward_cast+0x1a26>
 800ddfc:	7828      	ldrb	r0, [r5, #0]
 800ddfe:	f7fe b838 	b.w	800be72 <forward_cast+0x1a26>
 800de02:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de06:	f7f2 ffcf 	bl	8000da8 <__aeabi_ul2f>
 800de0a:	ee07 0a90 	vmov	s15, r0
 800de0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de12:	4a4c      	ldr	r2, [pc, #304]	; (800df44 <forward_cast+0x3af8>)
 800de14:	4b4a      	ldr	r3, [pc, #296]	; (800df40 <forward_cast+0x3af4>)
 800de16:	ee17 0a90 	vmov	r0, s15
 800de1a:	f7fe b82a 	b.w	800be72 <forward_cast+0x1a26>
 800de1e:	f9b5 0000 	ldrsh.w	r0, [r5]
 800de22:	f7fe b826 	b.w	800be72 <forward_cast+0x1a26>
 800de26:	f995 0000 	ldrsb.w	r0, [r5]
 800de2a:	f7fe ba89 	b.w	800c340 <forward_cast+0x1ef4>
 800de2e:	edd5 7a00 	vldr	s15, [r5]
 800de32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de3a:	ee17 0a90 	vmov	r0, s15
 800de3e:	f7fe b9cd 	b.w	800c1dc <forward_cast+0x1d90>
 800de42:	f995 0000 	ldrsb.w	r0, [r5]
 800de46:	f7fe bacb 	b.w	800c3e0 <forward_cast+0x1f94>
 800de4a:	edd5 7a00 	vldr	s15, [r5]
 800de4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de56:	ee17 0a90 	vmov	r0, s15
 800de5a:	f7fe bac1 	b.w	800c3e0 <forward_cast+0x1f94>
 800de5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de62:	f7f2 ffa9 	bl	8000db8 <__aeabi_l2f>
 800de66:	ee07 0a90 	vmov	s15, r0
 800de6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <forward_cast+0x3afc>)
 800de70:	4a39      	ldr	r2, [pc, #228]	; (800df58 <forward_cast+0x3b0c>)
 800de72:	ee17 0a90 	vmov	r0, s15
 800de76:	f7fe bab3 	b.w	800c3e0 <forward_cast+0x1f94>
 800de7a:	7828      	ldrb	r0, [r5, #0]
 800de7c:	f7fe bab0 	b.w	800c3e0 <forward_cast+0x1f94>
 800de80:	e9d5 0100 	ldrd	r0, r1, [r5]
 800de84:	f7f2 ff90 	bl	8000da8 <__aeabi_ul2f>
 800de88:	ee07 0a90 	vmov	s15, r0
 800de8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de90:	4a31      	ldr	r2, [pc, #196]	; (800df58 <forward_cast+0x3b0c>)
 800de92:	4b2d      	ldr	r3, [pc, #180]	; (800df48 <forward_cast+0x3afc>)
 800de94:	ee17 0a90 	vmov	r0, s15
 800de98:	f7fe baa2 	b.w	800c3e0 <forward_cast+0x1f94>
 800de9c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dea0:	f7fe ba9e 	b.w	800c3e0 <forward_cast+0x1f94>
 800dea4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dea8:	f7f2 ff86 	bl	8000db8 <__aeabi_l2f>
 800deac:	ee07 0a90 	vmov	s15, r0
 800deb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800deb4:	4b23      	ldr	r3, [pc, #140]	; (800df44 <forward_cast+0x3af8>)
 800deb6:	4a26      	ldr	r2, [pc, #152]	; (800df50 <forward_cast+0x3b04>)
 800deb8:	ee17 0a90 	vmov	r0, s15
 800debc:	f7fd b9f9 	b.w	800b2b2 <forward_cast+0xe66>
 800dec0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dec4:	f7f2 ff78 	bl	8000db8 <__aeabi_l2f>
 800dec8:	ee07 0a90 	vmov	s15, r0
 800decc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ded0:	4a20      	ldr	r2, [pc, #128]	; (800df54 <forward_cast+0x3b08>)
 800ded2:	4b1d      	ldr	r3, [pc, #116]	; (800df48 <forward_cast+0x3afc>)
 800ded4:	ee17 0a90 	vmov	r0, s15
 800ded8:	f7fc bd00 	b.w	800a8dc <forward_cast+0x490>
 800dedc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dee0:	f7f2 ff6a 	bl	8000db8 <__aeabi_l2f>
 800dee4:	ee07 0a90 	vmov	s15, r0
 800dee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800deec:	4a15      	ldr	r2, [pc, #84]	; (800df44 <forward_cast+0x3af8>)
 800deee:	ee17 3a90 	vmov	r3, s15
 800def2:	b299      	uxth	r1, r3
 800def4:	4b12      	ldr	r3, [pc, #72]	; (800df40 <forward_cast+0x3af4>)
 800def6:	f7fc bd3d 	b.w	800a974 <forward_cast+0x528>
 800defa:	7828      	ldrb	r0, [r5, #0]
 800defc:	f7fc bd76 	b.w	800a9ec <forward_cast+0x5a0>
 800df00:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df04:	f7f2 ff58 	bl	8000db8 <__aeabi_l2f>
 800df08:	ee07 0a90 	vmov	s15, r0
 800df0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <forward_cast+0x3af4>)
 800df12:	4a0c      	ldr	r2, [pc, #48]	; (800df44 <forward_cast+0x3af8>)
 800df14:	ee17 0a90 	vmov	r0, s15
 800df18:	f7fe b911 	b.w	800c13e <forward_cast+0x1cf2>
 800df1c:	7828      	ldrb	r0, [r5, #0]
 800df1e:	f7fe b90e 	b.w	800c13e <forward_cast+0x1cf2>
 800df22:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df26:	f7f2 ff3f 	bl	8000da8 <__aeabi_ul2f>
 800df2a:	ee07 0a90 	vmov	s15, r0
 800df2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df32:	4a04      	ldr	r2, [pc, #16]	; (800df44 <forward_cast+0x3af8>)
 800df34:	4b02      	ldr	r3, [pc, #8]	; (800df40 <forward_cast+0x3af4>)
 800df36:	ee17 0a90 	vmov	r0, s15
 800df3a:	f7fe b900 	b.w	800c13e <forward_cast+0x1cf2>
 800df3e:	bf00      	nop
 800df40:	00041040 	.word	0x00041040
 800df44:	00042040 	.word	0x00042040
 800df48:	00840840 	.word	0x00840840
 800df4c:	00842040 	.word	0x00842040
 800df50:	00060440 	.word	0x00060440
 800df54:	00040440 	.word	0x00040440
 800df58:	00841040 	.word	0x00841040
 800df5c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800df60:	f7fe b8ed 	b.w	800c13e <forward_cast+0x1cf2>
 800df64:	f995 0000 	ldrsb.w	r0, [r5]
 800df68:	f7fe b938 	b.w	800c1dc <forward_cast+0x1d90>
 800df6c:	f995 0000 	ldrsb.w	r0, [r5]
 800df70:	f7fe b8e5 	b.w	800c13e <forward_cast+0x1cf2>
 800df74:	edd5 7a00 	vldr	s15, [r5]
 800df78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df80:	ee17 0a90 	vmov	r0, s15
 800df84:	f7fe b8db 	b.w	800c13e <forward_cast+0x1cf2>
 800df88:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df8c:	f7f2 ff14 	bl	8000db8 <__aeabi_l2f>
 800df90:	ee07 0a90 	vmov	s15, r0
 800df94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df98:	4bc7      	ldr	r3, [pc, #796]	; (800e2b8 <forward_cast+0x3e6c>)
 800df9a:	4ac8      	ldr	r2, [pc, #800]	; (800e2bc <forward_cast+0x3e70>)
 800df9c:	ee17 0a90 	vmov	r0, s15
 800dfa0:	f7fe b91c 	b.w	800c1dc <forward_cast+0x1d90>
 800dfa4:	7828      	ldrb	r0, [r5, #0]
 800dfa6:	f7fe b919 	b.w	800c1dc <forward_cast+0x1d90>
 800dfaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dfae:	f7f2 fefb 	bl	8000da8 <__aeabi_ul2f>
 800dfb2:	ee07 0a90 	vmov	s15, r0
 800dfb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfba:	4ac0      	ldr	r2, [pc, #768]	; (800e2bc <forward_cast+0x3e70>)
 800dfbc:	4bbe      	ldr	r3, [pc, #760]	; (800e2b8 <forward_cast+0x3e6c>)
 800dfbe:	ee17 0a90 	vmov	r0, s15
 800dfc2:	f7fe b90b 	b.w	800c1dc <forward_cast+0x1d90>
 800dfc6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800dfca:	f7fe b907 	b.w	800c1dc <forward_cast+0x1d90>
 800dfce:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dfd2:	f7f2 fef1 	bl	8000db8 <__aeabi_l2f>
 800dfd6:	ee07 0a90 	vmov	s15, r0
 800dfda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfde:	4bb7      	ldr	r3, [pc, #732]	; (800e2bc <forward_cast+0x3e70>)
 800dfe0:	4ab5      	ldr	r2, [pc, #724]	; (800e2b8 <forward_cast+0x3e6c>)
 800dfe2:	ee17 0a90 	vmov	r0, s15
 800dfe6:	f7fe b95d 	b.w	800c2a4 <forward_cast+0x1e58>
 800dfea:	7828      	ldrb	r0, [r5, #0]
 800dfec:	f7fe b95a 	b.w	800c2a4 <forward_cast+0x1e58>
 800dff0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dff4:	f7f2 fed8 	bl	8000da8 <__aeabi_ul2f>
 800dff8:	ee07 0a90 	vmov	s15, r0
 800dffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e000:	4aad      	ldr	r2, [pc, #692]	; (800e2b8 <forward_cast+0x3e6c>)
 800e002:	4bae      	ldr	r3, [pc, #696]	; (800e2bc <forward_cast+0x3e70>)
 800e004:	ee17 0a90 	vmov	r0, s15
 800e008:	f7fe b94c 	b.w	800c2a4 <forward_cast+0x1e58>
 800e00c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e010:	f7fe b948 	b.w	800c2a4 <forward_cast+0x1e58>
 800e014:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e018:	f7f2 fece 	bl	8000db8 <__aeabi_l2f>
 800e01c:	ee07 0a90 	vmov	s15, r0
 800e020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e024:	4ba4      	ldr	r3, [pc, #656]	; (800e2b8 <forward_cast+0x3e6c>)
 800e026:	4aa6      	ldr	r2, [pc, #664]	; (800e2c0 <forward_cast+0x3e74>)
 800e028:	ee17 0a90 	vmov	r0, s15
 800e02c:	f7fe b988 	b.w	800c340 <forward_cast+0x1ef4>
 800e030:	7828      	ldrb	r0, [r5, #0]
 800e032:	f7fe b985 	b.w	800c340 <forward_cast+0x1ef4>
 800e036:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e03a:	f7f2 feb5 	bl	8000da8 <__aeabi_ul2f>
 800e03e:	ee07 0a90 	vmov	s15, r0
 800e042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e046:	4a9e      	ldr	r2, [pc, #632]	; (800e2c0 <forward_cast+0x3e74>)
 800e048:	4b9b      	ldr	r3, [pc, #620]	; (800e2b8 <forward_cast+0x3e6c>)
 800e04a:	ee17 0a90 	vmov	r0, s15
 800e04e:	f7fe b977 	b.w	800c340 <forward_cast+0x1ef4>
 800e052:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e056:	f7fe b973 	b.w	800c340 <forward_cast+0x1ef4>
 800e05a:	f995 0000 	ldrsb.w	r0, [r5]
 800e05e:	f7fe b921 	b.w	800c2a4 <forward_cast+0x1e58>
 800e062:	edd5 7a00 	vldr	s15, [r5]
 800e066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e06a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e06e:	ee17 0a90 	vmov	r0, s15
 800e072:	f7fe b917 	b.w	800c2a4 <forward_cast+0x1e58>
 800e076:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e07a:	f7f2 fe9d 	bl	8000db8 <__aeabi_l2f>
 800e07e:	ee07 0a90 	vmov	s15, r0
 800e082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e086:	4b8d      	ldr	r3, [pc, #564]	; (800e2bc <forward_cast+0x3e70>)
 800e088:	4a8b      	ldr	r2, [pc, #556]	; (800e2b8 <forward_cast+0x3e6c>)
 800e08a:	ee17 0a90 	vmov	r0, s15
 800e08e:	f7fc bb20 	b.w	800a6d2 <forward_cast+0x286>
 800e092:	7828      	ldrb	r0, [r5, #0]
 800e094:	f7fd b9b4 	b.w	800b400 <forward_cast+0xfb4>
 800e098:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e09c:	f7f2 fe8c 	bl	8000db8 <__aeabi_l2f>
 800e0a0:	ee07 0a90 	vmov	s15, r0
 800e0a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0a8:	4b83      	ldr	r3, [pc, #524]	; (800e2b8 <forward_cast+0x3e6c>)
 800e0aa:	4a85      	ldr	r2, [pc, #532]	; (800e2c0 <forward_cast+0x3e74>)
 800e0ac:	ee17 0a90 	vmov	r0, s15
 800e0b0:	f7fe b9e5 	b.w	800c47e <forward_cast+0x2032>
 800e0b4:	7828      	ldrb	r0, [r5, #0]
 800e0b6:	f7fe b9e2 	b.w	800c47e <forward_cast+0x2032>
 800e0ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e0be:	f7f2 fe73 	bl	8000da8 <__aeabi_ul2f>
 800e0c2:	ee07 0a90 	vmov	s15, r0
 800e0c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ca:	4a7d      	ldr	r2, [pc, #500]	; (800e2c0 <forward_cast+0x3e74>)
 800e0cc:	4b7a      	ldr	r3, [pc, #488]	; (800e2b8 <forward_cast+0x3e6c>)
 800e0ce:	ee17 0a90 	vmov	r0, s15
 800e0d2:	f7fe b9d4 	b.w	800c47e <forward_cast+0x2032>
 800e0d6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e0da:	f7fe b9d0 	b.w	800c47e <forward_cast+0x2032>
 800e0de:	f995 0000 	ldrsb.w	r0, [r5]
 800e0e2:	f7fe b9cc 	b.w	800c47e <forward_cast+0x2032>
 800e0e6:	edd5 7a00 	vldr	s15, [r5]
 800e0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0f2:	ee17 0a90 	vmov	r0, s15
 800e0f6:	f7fe b923 	b.w	800c340 <forward_cast+0x1ef4>
 800e0fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e0fe:	f7f2 fe5b 	bl	8000db8 <__aeabi_l2f>
 800e102:	ee07 0a90 	vmov	s15, r0
 800e106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e10a:	4a6d      	ldr	r2, [pc, #436]	; (800e2c0 <forward_cast+0x3e74>)
 800e10c:	ee17 3a90 	vmov	r3, s15
 800e110:	b299      	uxth	r1, r3
 800e112:	4b69      	ldr	r3, [pc, #420]	; (800e2b8 <forward_cast+0x3e6c>)
 800e114:	f7fc bb98 	b.w	800a848 <forward_cast+0x3fc>
 800e118:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e11c:	f7fd b815 	b.w	800b14a <forward_cast+0xcfe>
 800e120:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	f7f2 fe47 	bl	8000db8 <__aeabi_l2f>
 800e12a:	ee07 0a90 	vmov	s15, r0
 800e12e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e132:	4a62      	ldr	r2, [pc, #392]	; (800e2bc <forward_cast+0x3e70>)
 800e134:	9b01      	ldr	r3, [sp, #4]
 800e136:	ee17 0a90 	vmov	r0, s15
 800e13a:	f7fe ba05 	b.w	800c548 <forward_cast+0x20fc>
 800e13e:	7828      	ldrb	r0, [r5, #0]
 800e140:	f7fe ba02 	b.w	800c548 <forward_cast+0x20fc>
 800e144:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	f7f2 fe2d 	bl	8000da8 <__aeabi_ul2f>
 800e14e:	ee07 0a90 	vmov	s15, r0
 800e152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	4a58      	ldr	r2, [pc, #352]	; (800e2bc <forward_cast+0x3e70>)
 800e15a:	ee17 0a90 	vmov	r0, s15
 800e15e:	f7fe b9f3 	b.w	800c548 <forward_cast+0x20fc>
 800e162:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e166:	f7fe b9ef 	b.w	800c548 <forward_cast+0x20fc>
 800e16a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e16e:	f7f2 fe23 	bl	8000db8 <__aeabi_l2f>
 800e172:	ee07 0a90 	vmov	s15, r0
 800e176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e17a:	4b50      	ldr	r3, [pc, #320]	; (800e2bc <forward_cast+0x3e70>)
 800e17c:	edcd 7a01 	vstr	s15, [sp, #4]
 800e180:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e184:	4a4c      	ldr	r2, [pc, #304]	; (800e2b8 <forward_cast+0x3e6c>)
 800e186:	f7fe bae3 	b.w	800c750 <forward_cast+0x2304>
 800e18a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e18e:	f7f2 fe0b 	bl	8000da8 <__aeabi_ul2f>
 800e192:	ee07 0a90 	vmov	s15, r0
 800e196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e19a:	4a47      	ldr	r2, [pc, #284]	; (800e2b8 <forward_cast+0x3e6c>)
 800e19c:	edcd 7a01 	vstr	s15, [sp, #4]
 800e1a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e1a4:	4b45      	ldr	r3, [pc, #276]	; (800e2bc <forward_cast+0x3e70>)
 800e1a6:	f7fe bad3 	b.w	800c750 <forward_cast+0x2304>
 800e1aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1ae:	f7f2 fe03 	bl	8000db8 <__aeabi_l2f>
 800e1b2:	ee07 0a90 	vmov	s15, r0
 800e1b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1ba:	4b3f      	ldr	r3, [pc, #252]	; (800e2b8 <forward_cast+0x3e6c>)
 800e1bc:	4a40      	ldr	r2, [pc, #256]	; (800e2c0 <forward_cast+0x3e74>)
 800e1be:	ee17 0a90 	vmov	r0, s15
 800e1c2:	f7fc bfc2 	b.w	800b14a <forward_cast+0xcfe>
 800e1c6:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e1ca:	ee07 1a90 	vmov	s15, r1
 800e1ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1d2:	f7fc be03 	b.w	800addc <forward_cast+0x990>
 800e1d6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1da:	f7f2 fded 	bl	8000db8 <__aeabi_l2f>
 800e1de:	ee07 0a90 	vmov	s15, r0
 800e1e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1e6:	4b34      	ldr	r3, [pc, #208]	; (800e2b8 <forward_cast+0x3e6c>)
 800e1e8:	4a36      	ldr	r2, [pc, #216]	; (800e2c4 <forward_cast+0x3e78>)
 800e1ea:	ee17 0a90 	vmov	r0, s15
 800e1ee:	f7fd b93d 	b.w	800b46c <forward_cast+0x1020>
 800e1f2:	7828      	ldrb	r0, [r5, #0]
 800e1f4:	f7fd b9a7 	b.w	800b546 <forward_cast+0x10fa>
 800e1f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1fc:	f7f2 fddc 	bl	8000db8 <__aeabi_l2f>
 800e200:	ee07 0a90 	vmov	s15, r0
 800e204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e208:	4b2c      	ldr	r3, [pc, #176]	; (800e2bc <forward_cast+0x3e70>)
 800e20a:	edcd 7a01 	vstr	s15, [sp, #4]
 800e20e:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800e212:	4a2b      	ldr	r2, [pc, #172]	; (800e2c0 <forward_cast+0x3e74>)
 800e214:	f7fd b95f 	b.w	800b4d6 <forward_cast+0x108a>
 800e218:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e21c:	f7fd b849 	b.w	800b2b2 <forward_cast+0xe66>
 800e220:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e224:	f7f2 fdc8 	bl	8000db8 <__aeabi_l2f>
 800e228:	ee07 0a90 	vmov	s15, r0
 800e22c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e230:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <forward_cast+0x3e74>)
 800e232:	4a25      	ldr	r2, [pc, #148]	; (800e2c8 <forward_cast+0x3e7c>)
 800e234:	ee17 0a90 	vmov	r0, s15
 800e238:	f7fe bae7 	b.w	800c80a <forward_cast+0x23be>
 800e23c:	7828      	ldrb	r0, [r5, #0]
 800e23e:	f7fe bae4 	b.w	800c80a <forward_cast+0x23be>
 800e242:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e246:	f7f2 fdaf 	bl	8000da8 <__aeabi_ul2f>
 800e24a:	ee07 0a90 	vmov	s15, r0
 800e24e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e252:	4a1d      	ldr	r2, [pc, #116]	; (800e2c8 <forward_cast+0x3e7c>)
 800e254:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <forward_cast+0x3e74>)
 800e256:	ee17 0a90 	vmov	r0, s15
 800e25a:	f7fe bad6 	b.w	800c80a <forward_cast+0x23be>
 800e25e:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e262:	f7fe bad2 	b.w	800c80a <forward_cast+0x23be>
 800e266:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e26a:	f7f2 fda5 	bl	8000db8 <__aeabi_l2f>
 800e26e:	ee07 0a90 	vmov	s15, r0
 800e272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <forward_cast+0x3e74>)
 800e278:	4a13      	ldr	r2, [pc, #76]	; (800e2c8 <forward_cast+0x3e7c>)
 800e27a:	ee17 0a90 	vmov	r0, s15
 800e27e:	f7fe bb0d 	b.w	800c89c <forward_cast+0x2450>
 800e282:	7828      	ldrb	r0, [r5, #0]
 800e284:	f7fe bb0a 	b.w	800c89c <forward_cast+0x2450>
 800e288:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e28c:	f7f2 fd8c 	bl	8000da8 <__aeabi_ul2f>
 800e290:	ee07 0a90 	vmov	s15, r0
 800e294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e298:	4a0b      	ldr	r2, [pc, #44]	; (800e2c8 <forward_cast+0x3e7c>)
 800e29a:	4b09      	ldr	r3, [pc, #36]	; (800e2c0 <forward_cast+0x3e74>)
 800e29c:	ee17 0a90 	vmov	r0, s15
 800e2a0:	f7fe bafc 	b.w	800c89c <forward_cast+0x2450>
 800e2a4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800e2a8:	f7fe baf8 	b.w	800c89c <forward_cast+0x2450>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	deff      	udf	#255	; 0xff
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	deff      	udf	#255	; 0xff
 800e2b8:	00041040 	.word	0x00041040
 800e2bc:	00841040 	.word	0x00841040
 800e2c0:	00042040 	.word	0x00042040
 800e2c4:	00040440 	.word	0x00040440
 800e2c8:	00060440 	.word	0x00060440

0800e2cc <forward_relu>:
 800e2cc:	6982      	ldr	r2, [r0, #24]
 800e2ce:	8813      	ldrh	r3, [r2, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d05b      	beq.n	800e38c <forward_relu+0xc0>
 800e2d4:	6851      	ldr	r1, [r2, #4]
 800e2d6:	684a      	ldr	r2, [r1, #4]
 800e2d8:	b102      	cbz	r2, 800e2dc <forward_relu+0x10>
 800e2da:	6812      	ldr	r2, [r2, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	f000 8123 	beq.w	800e528 <forward_relu+0x25c>
 800e2e2:	b470      	push	{r4, r5, r6}
 800e2e4:	6909      	ldr	r1, [r1, #16]
 800e2e6:	b101      	cbz	r1, 800e2ea <forward_relu+0x1e>
 800e2e8:	6809      	ldr	r1, [r1, #0]
 800e2ea:	69c6      	ldr	r6, [r0, #28]
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	f000 8097 	beq.w	800e420 <forward_relu+0x154>
 800e2f2:	6873      	ldr	r3, [r6, #4]
 800e2f4:	6988      	ldr	r0, [r1, #24]
 800e2f6:	6991      	ldr	r1, [r2, #24]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	f000 80c1 	beq.w	800e480 <forward_relu+0x1b4>
 800e2fe:	6893      	ldr	r3, [r2, #8]
 800e300:	6880      	ldr	r0, [r0, #8]
 800e302:	688c      	ldr	r4, [r1, #8]
 800e304:	0a1b      	lsrs	r3, r3, #8
 800e306:	f000 80f2 	beq.w	800e4ee <forward_relu+0x222>
 800e30a:	68d5      	ldr	r5, [r2, #12]
 800e30c:	2201      	movs	r2, #1
 800e30e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e316:	42ab      	cmp	r3, r5
 800e318:	fb01 f202 	mul.w	r2, r1, r2
 800e31c:	d1f9      	bne.n	800e312 <forward_relu+0x46>
 800e31e:	68b3      	ldr	r3, [r6, #8]
 800e320:	ed93 7a02 	vldr	s14, [r3, #8]
 800e324:	edd3 6a00 	vldr	s13, [r3]
 800e328:	ed93 6a01 	vldr	s12, [r3, #4]
 800e32c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e330:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800e334:	3a01      	subs	r2, #1
 800e336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e33e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e342:	d425      	bmi.n	800e390 <forward_relu+0xc4>
 800e344:	429c      	cmp	r4, r3
 800e346:	d81f      	bhi.n	800e388 <forward_relu+0xbc>
 800e348:	1d1a      	adds	r2, r3, #4
 800e34a:	1d01      	adds	r1, r0, #4
 800e34c:	e00d      	b.n	800e36a <forward_relu+0x9e>
 800e34e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e356:	db03      	blt.n	800e360 <forward_relu+0x94>
 800e358:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e35c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e360:	3b08      	subs	r3, #8
 800e362:	429c      	cmp	r4, r3
 800e364:	ed61 7a01 	vstmdb	r1!, {s15}
 800e368:	d80e      	bhi.n	800e388 <forward_relu+0xbc>
 800e36a:	4613      	mov	r3, r2
 800e36c:	ed72 7a01 	vldmdb	r2!, {s15}
 800e370:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	d9e9      	bls.n	800e34e <forward_relu+0x82>
 800e37a:	3b08      	subs	r3, #8
 800e37c:	eef0 7a47 	vmov.f32	s15, s14
 800e380:	429c      	cmp	r4, r3
 800e382:	ed61 7a01 	vstmdb	r1!, {s15}
 800e386:	d9f0      	bls.n	800e36a <forward_relu+0x9e>
 800e388:	bc70      	pop	{r4, r5, r6}
 800e38a:	4770      	bx	lr
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	deff      	udf	#255	; 0xff
 800e390:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e398:	d11f      	bne.n	800e3da <forward_relu+0x10e>
 800e39a:	429c      	cmp	r4, r3
 800e39c:	d8f4      	bhi.n	800e388 <forward_relu+0xbc>
 800e39e:	1b1c      	subs	r4, r3, r4
 800e3a0:	f024 0403 	bic.w	r4, r4, #3
 800e3a4:	1d1a      	adds	r2, r3, #4
 800e3a6:	2500      	movs	r5, #0
 800e3a8:	1b1b      	subs	r3, r3, r4
 800e3aa:	1d01      	adds	r1, r0, #4
 800e3ac:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b8:	dc0a      	bgt.n	800e3d0 <forward_relu+0x104>
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	f841 5d04 	str.w	r5, [r1, #-4]!
 800e3c0:	d0e2      	beq.n	800e388 <forward_relu+0xbc>
 800e3c2:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ce:	ddf4      	ble.n	800e3ba <forward_relu+0xee>
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	ed61 7a01 	vstmdb	r1!, {s15}
 800e3d6:	d1e9      	bne.n	800e3ac <forward_relu+0xe0>
 800e3d8:	e7d6      	b.n	800e388 <forward_relu+0xbc>
 800e3da:	429c      	cmp	r4, r3
 800e3dc:	d8d4      	bhi.n	800e388 <forward_relu+0xbc>
 800e3de:	1b1c      	subs	r4, r3, r4
 800e3e0:	f024 0403 	bic.w	r4, r4, #3
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	1d01      	adds	r1, r0, #4
 800e3e8:	1b1b      	subs	r3, r3, r4
 800e3ea:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3ee:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f6:	db0e      	blt.n	800e416 <forward_relu+0x14a>
 800e3f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e402:	ed61 7a01 	vstmdb	r1!, {s15}
 800e406:	d0bf      	beq.n	800e388 <forward_relu+0xbc>
 800e408:	ed72 7a01 	vldmdb	r2!, {s15}
 800e40c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e414:	daf0      	bge.n	800e3f8 <forward_relu+0x12c>
 800e416:	4293      	cmp	r3, r2
 800e418:	ed61 7a01 	vstmdb	r1!, {s15}
 800e41c:	d1e5      	bne.n	800e3ea <forward_relu+0x11e>
 800e41e:	e7b3      	b.n	800e388 <forward_relu+0xbc>
 800e420:	6893      	ldr	r3, [r2, #8]
 800e422:	6989      	ldr	r1, [r1, #24]
 800e424:	6990      	ldr	r0, [r2, #24]
 800e426:	6889      	ldr	r1, [r1, #8]
 800e428:	6884      	ldr	r4, [r0, #8]
 800e42a:	0a1b      	lsrs	r3, r3, #8
 800e42c:	d075      	beq.n	800e51a <forward_relu+0x24e>
 800e42e:	68d5      	ldr	r5, [r2, #12]
 800e430:	2201      	movs	r2, #1
 800e432:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e436:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e43a:	429d      	cmp	r5, r3
 800e43c:	fb00 f202 	mul.w	r2, r0, r2
 800e440:	d1f9      	bne.n	800e436 <forward_relu+0x16a>
 800e442:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800e446:	3b01      	subs	r3, #1
 800e448:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e44c:	4294      	cmp	r4, r2
 800e44e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e452:	d899      	bhi.n	800e388 <forward_relu+0xbc>
 800e454:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e530 <forward_relu+0x264>
 800e458:	3204      	adds	r2, #4
 800e45a:	3104      	adds	r1, #4
 800e45c:	4613      	mov	r3, r2
 800e45e:	ed72 7a01 	vldmdb	r2!, {s15}
 800e462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46a:	f1a3 0308 	sub.w	r3, r3, #8
 800e46e:	bfb8      	it	lt
 800e470:	eef0 7a47 	vmovlt.f32	s15, s14
 800e474:	429c      	cmp	r4, r3
 800e476:	ed61 7a01 	vstmdb	r1!, {s15}
 800e47a:	d9ef      	bls.n	800e45c <forward_relu+0x190>
 800e47c:	bc70      	pop	{r4, r5, r6}
 800e47e:	4770      	bx	lr
 800e480:	688c      	ldr	r4, [r1, #8]
 800e482:	6891      	ldr	r1, [r2, #8]
 800e484:	6880      	ldr	r0, [r0, #8]
 800e486:	0a09      	lsrs	r1, r1, #8
 800e488:	d049      	beq.n	800e51e <forward_relu+0x252>
 800e48a:	68d5      	ldr	r5, [r2, #12]
 800e48c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800e490:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e494:	42aa      	cmp	r2, r5
 800e496:	fb01 f303 	mul.w	r3, r1, r3
 800e49a:	d1f9      	bne.n	800e490 <forward_relu+0x1c4>
 800e49c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800e4a0:	3a01      	subs	r2, #1
 800e4a2:	68b1      	ldr	r1, [r6, #8]
 800e4a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4a8:	429c      	cmp	r4, r3
 800e4aa:	ed91 7a00 	vldr	s14, [r1]
 800e4ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e4b2:	f63f af69 	bhi.w	800e388 <forward_relu+0xbc>
 800e4b6:	2500      	movs	r5, #0
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	1d02      	adds	r2, r0, #4
 800e4bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e4c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	f1a3 0104 	sub.w	r1, r3, #4
 800e4cc:	f1a3 0308 	sub.w	r3, r3, #8
 800e4d0:	d406      	bmi.n	800e4e0 <forward_relu+0x214>
 800e4d2:	429c      	cmp	r4, r3
 800e4d4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e4d8:	f63f af56 	bhi.w	800e388 <forward_relu+0xbc>
 800e4dc:	460b      	mov	r3, r1
 800e4de:	e7ed      	b.n	800e4bc <forward_relu+0x1f0>
 800e4e0:	429c      	cmp	r4, r3
 800e4e2:	ed62 7a01 	vstmdb	r2!, {s15}
 800e4e6:	f63f af4f 	bhi.w	800e388 <forward_relu+0xbc>
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	e7e6      	b.n	800e4bc <forward_relu+0x1f0>
 800e4ee:	68b3      	ldr	r3, [r6, #8]
 800e4f0:	ed93 7a02 	vldr	s14, [r3, #8]
 800e4f4:	edd3 6a00 	vldr	s13, [r3]
 800e4f8:	ed93 6a01 	vldr	s12, [r3, #4]
 800e4fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	d401      	bmi.n	800e50a <forward_relu+0x23e>
 800e506:	4623      	mov	r3, r4
 800e508:	e71e      	b.n	800e348 <forward_relu+0x7c>
 800e50a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	4623      	mov	r3, r4
 800e514:	f47f af63 	bne.w	800e3de <forward_relu+0x112>
 800e518:	e741      	b.n	800e39e <forward_relu+0xd2>
 800e51a:	4622      	mov	r2, r4
 800e51c:	e79a      	b.n	800e454 <forward_relu+0x188>
 800e51e:	68b2      	ldr	r2, [r6, #8]
 800e520:	4623      	mov	r3, r4
 800e522:	ed92 7a00 	vldr	s14, [r2]
 800e526:	e7c6      	b.n	800e4b6 <forward_relu+0x1ea>
 800e528:	2300      	movs	r3, #0
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	deff      	udf	#255	; 0xff
 800e52e:	bf00      	nop
 800e530:	00000000 	.word	0x00000000

0800e534 <forward_sm>:
 800e534:	6982      	ldr	r2, [r0, #24]
 800e536:	8813      	ldrh	r3, [r2, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d07c      	beq.n	800e636 <forward_sm+0x102>
 800e53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e540:	ed2d 8b04 	vpush	{d8-d9}
 800e544:	6852      	ldr	r2, [r2, #4]
 800e546:	6854      	ldr	r4, [r2, #4]
 800e548:	b085      	sub	sp, #20
 800e54a:	b104      	cbz	r4, 800e54e <forward_sm+0x1a>
 800e54c:	6824      	ldr	r4, [r4, #0]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d076      	beq.n	800e640 <forward_sm+0x10c>
 800e552:	6913      	ldr	r3, [r2, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d076      	beq.n	800e646 <forward_sm+0x112>
 800e558:	681e      	ldr	r6, [r3, #0]
 800e55a:	68a3      	ldr	r3, [r4, #8]
 800e55c:	68e0      	ldr	r0, [r4, #12]
 800e55e:	68f2      	ldr	r2, [r6, #12]
 800e560:	6845      	ldr	r5, [r0, #4]
 800e562:	6857      	ldr	r7, [r2, #4]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	d068      	beq.n	800e63a <forward_sm+0x106>
 800e568:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e56c:	2201      	movs	r2, #1
 800e56e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e572:	4298      	cmp	r0, r3
 800e574:	fb01 f202 	mul.w	r2, r1, r2
 800e578:	d1f9      	bne.n	800e56e <forward_sm+0x3a>
 800e57a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e57e:	69a2      	ldr	r2, [r4, #24]
 800e580:	69b3      	ldr	r3, [r6, #24]
 800e582:	6892      	ldr	r2, [r2, #8]
 800e584:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e588:	eb02 0309 	add.w	r3, r2, r9
 800e58c:	429a      	cmp	r2, r3
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	d24c      	bcs.n	800e62c <forward_sm+0xf8>
 800e592:	00bb      	lsls	r3, r7, #2
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e59a:	00ab      	lsls	r3, r5, #2
 800e59c:	2d01      	cmp	r5, #1
 800e59e:	ed92 8a00 	vldr	s16, [r2]
 800e5a2:	9302      	str	r3, [sp, #8]
 800e5a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e5a8:	463e      	mov	r6, r7
 800e5aa:	d93c      	bls.n	800e626 <forward_sm+0xf2>
 800e5ac:	1d13      	adds	r3, r2, #4
 800e5ae:	ecf3 7a01 	vldmia	r3!, {s15}
 800e5b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	bfb8      	it	lt
 800e5bc:	eeb0 8a67 	vmovlt.f32	s16, s15
 800e5c0:	429e      	cmp	r6, r3
 800e5c2:	d1f4      	bne.n	800e5ae <forward_sm+0x7a>
 800e5c4:	eddf 8a21 	vldr	s17, [pc, #132]	; 800e64c <forward_sm+0x118>
 800e5c8:	4692      	mov	sl, r2
 800e5ca:	46c3      	mov	fp, r8
 800e5cc:	46c1      	mov	r9, r8
 800e5ce:	2400      	movs	r4, #0
 800e5d0:	ecba 0a01 	vldmia	sl!, {s0}
 800e5d4:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e5d8:	f003 fda4 	bl	8012124 <expf>
 800e5dc:	3401      	adds	r4, #1
 800e5de:	42a5      	cmp	r5, r4
 800e5e0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e5e4:	eca9 0a01 	vstmia	r9!, {s0}
 800e5e8:	d8f2      	bhi.n	800e5d0 <forward_sm+0x9c>
 800e5ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f2:	d00b      	beq.n	800e60c <forward_sm+0xd8>
 800e5f4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	429d      	cmp	r5, r3
 800e5fe:	eddb 7a00 	vldr	s15, [fp]
 800e602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e606:	eceb 7a01 	vstmia	fp!, {s15}
 800e60a:	d8f6      	bhi.n	800e5fa <forward_sm+0xc6>
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	9901      	ldr	r1, [sp, #4]
 800e610:	4498      	add	r8, r3
 800e612:	9b02      	ldr	r3, [sp, #8]
 800e614:	42b9      	cmp	r1, r7
 800e616:	463a      	mov	r2, r7
 800e618:	441e      	add	r6, r3
 800e61a:	d907      	bls.n	800e62c <forward_sm+0xf8>
 800e61c:	2d01      	cmp	r5, #1
 800e61e:	ed92 8a00 	vldr	s16, [r2]
 800e622:	441f      	add	r7, r3
 800e624:	d8c2      	bhi.n	800e5ac <forward_sm+0x78>
 800e626:	2d00      	cmp	r5, #0
 800e628:	d0f0      	beq.n	800e60c <forward_sm+0xd8>
 800e62a:	e7cb      	b.n	800e5c4 <forward_sm+0x90>
 800e62c:	b005      	add	sp, #20
 800e62e:	ecbd 8b04 	vpop	{d8-d9}
 800e632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	deff      	udf	#255	; 0xff
 800e63a:	f04f 0904 	mov.w	r9, #4
 800e63e:	e79e      	b.n	800e57e <forward_sm+0x4a>
 800e640:	2300      	movs	r3, #0
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	deff      	udf	#255	; 0xff
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	deff      	udf	#255	; 0xff
 800e64a:	bf00      	nop
 800e64c:	00000000 	.word	0x00000000

0800e650 <ai_check_custom_types>:
 800e650:	b082      	sub	sp, #8
 800e652:	4b13      	ldr	r3, [pc, #76]	; (800e6a0 <ai_check_custom_types+0x50>)
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	b118      	cbz	r0, 800e660 <ai_check_custom_types+0x10>
 800e658:	7803      	ldrb	r3, [r0, #0]
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d002      	beq.n	800e664 <ai_check_custom_types+0x14>
 800e65e:	2000      	movs	r0, #0
 800e660:	b002      	add	sp, #8
 800e662:	4770      	bx	lr
 800e664:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e668:	4293      	cmp	r3, r2
 800e66a:	d004      	beq.n	800e676 <ai_check_custom_types+0x26>
 800e66c:	2001      	movs	r0, #1
 800e66e:	f080 0001 	eor.w	r0, r0, #1
 800e672:	b002      	add	sp, #8
 800e674:	4770      	bx	lr
 800e676:	7842      	ldrb	r2, [r0, #1]
 800e678:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	f100 0001 	add.w	r0, r0, #1
 800e682:	d1f3      	bne.n	800e66c <ai_check_custom_types+0x1c>
 800e684:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e688:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d1ed      	bne.n	800e66c <ai_check_custom_types+0x1c>
 800e690:	7842      	ldrb	r2, [r0, #1]
 800e692:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e696:	429a      	cmp	r2, r3
 800e698:	d1e8      	bne.n	800e66c <ai_check_custom_types+0x1c>
 800e69a:	2000      	movs	r0, #0
 800e69c:	e7e7      	b.n	800e66e <ai_check_custom_types+0x1e>
 800e69e:	bf00      	nop
 800e6a0:	84048403 	.word	0x84048403

0800e6a4 <ai_layers_init_all>:
 800e6a4:	4601      	mov	r1, r0
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e6aa:	b143      	cbz	r3, 800e6be <ai_layers_init_all+0x1a>
 800e6ac:	691a      	ldr	r2, [r3, #16]
 800e6ae:	60d9      	str	r1, [r3, #12]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	f100 0001 	add.w	r0, r0, #1
 800e6b6:	d002      	beq.n	800e6be <ai_layers_init_all+0x1a>
 800e6b8:	b10a      	cbz	r2, 800e6be <ai_layers_init_all+0x1a>
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	e7f5      	b.n	800e6aa <ai_layers_init_all+0x6>
 800e6be:	4770      	bx	lr

0800e6c0 <ai_layers_post_init_all>:
 800e6c0:	b538      	push	{r3, r4, r5, lr}
 800e6c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e6c4:	2500      	movs	r5, #0
 800e6c6:	b16c      	cbz	r4, 800e6e4 <ai_layers_post_init_all+0x24>
 800e6c8:	6863      	ldr	r3, [r4, #4]
 800e6ca:	07db      	lsls	r3, r3, #31
 800e6cc:	d504      	bpl.n	800e6d8 <ai_layers_post_init_all+0x18>
 800e6ce:	6a23      	ldr	r3, [r4, #32]
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	b10b      	cbz	r3, 800e6d8 <ai_layers_post_init_all+0x18>
 800e6d4:	4798      	blx	r3
 800e6d6:	3501      	adds	r5, #1
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	42a3      	cmp	r3, r4
 800e6dc:	d002      	beq.n	800e6e4 <ai_layers_post_init_all+0x24>
 800e6de:	b10b      	cbz	r3, 800e6e4 <ai_layers_post_init_all+0x24>
 800e6e0:	461c      	mov	r4, r3
 800e6e2:	e7f0      	b.n	800e6c6 <ai_layers_post_init_all+0x6>
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}

0800e6e8 <ai_layers_forward_all>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	f1b8 0f00 	cmp.w	r8, #0
 800e6f6:	d02b      	beq.n	800e750 <ai_layers_forward_all+0x68>
 800e6f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e6fa:	6381      	str	r1, [r0, #56]	; 0x38
 800e6fc:	b321      	cbz	r1, 800e748 <ai_layers_forward_all+0x60>
 800e6fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e700:	2001      	movs	r0, #1
 800e702:	47c0      	blx	r8
 800e704:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e706:	b1fe      	cbz	r6, 800e748 <ai_layers_forward_all+0x60>
 800e708:	2700      	movs	r7, #0
 800e70a:	4631      	mov	r1, r6
 800e70c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e70e:	2002      	movs	r0, #2
 800e710:	47c0      	blx	r8
 800e712:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e714:	4628      	mov	r0, r5
 800e716:	696b      	ldr	r3, [r5, #20]
 800e718:	4798      	blx	r3
 800e71a:	692e      	ldr	r6, [r5, #16]
 800e71c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e71e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e720:	42b5      	cmp	r5, r6
 800e722:	f04f 0003 	mov.w	r0, #3
 800e726:	d007      	beq.n	800e738 <ai_layers_forward_all+0x50>
 800e728:	47c0      	blx	r8
 800e72a:	3701      	adds	r7, #1
 800e72c:	63a6      	str	r6, [r4, #56]	; 0x38
 800e72e:	2e00      	cmp	r6, #0
 800e730:	d1eb      	bne.n	800e70a <ai_layers_forward_all+0x22>
 800e732:	4638      	mov	r0, r7
 800e734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e738:	2003      	movs	r0, #3
 800e73a:	47c0      	blx	r8
 800e73c:	2300      	movs	r3, #0
 800e73e:	3701      	adds	r7, #1
 800e740:	63a3      	str	r3, [r4, #56]	; 0x38
 800e742:	4638      	mov	r0, r7
 800e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e748:	2700      	movs	r7, #0
 800e74a:	4638      	mov	r0, r7
 800e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e750:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e752:	6385      	str	r5, [r0, #56]	; 0x38
 800e754:	2d00      	cmp	r5, #0
 800e756:	d0f7      	beq.n	800e748 <ai_layers_forward_all+0x60>
 800e758:	4647      	mov	r7, r8
 800e75a:	696b      	ldr	r3, [r5, #20]
 800e75c:	4628      	mov	r0, r5
 800e75e:	4798      	blx	r3
 800e760:	462b      	mov	r3, r5
 800e762:	692d      	ldr	r5, [r5, #16]
 800e764:	429d      	cmp	r5, r3
 800e766:	d004      	beq.n	800e772 <ai_layers_forward_all+0x8a>
 800e768:	63a5      	str	r5, [r4, #56]	; 0x38
 800e76a:	3701      	adds	r7, #1
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d1f4      	bne.n	800e75a <ai_layers_forward_all+0x72>
 800e770:	e7df      	b.n	800e732 <ai_layers_forward_all+0x4a>
 800e772:	2300      	movs	r3, #0
 800e774:	63a3      	str	r3, [r4, #56]	; 0x38
 800e776:	3701      	adds	r7, #1
 800e778:	e7db      	b.n	800e732 <ai_layers_forward_all+0x4a>
 800e77a:	bf00      	nop

0800e77c <lite_dense_if32of32wf32>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800e784:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e788:	4287      	cmp	r7, r0
 800e78a:	f240 8106 	bls.w	800e99a <lite_dense_if32of32wf32+0x21e>
 800e78e:	f1a6 0810 	sub.w	r8, r6, #16
 800e792:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e796:	f108 0801 	add.w	r8, r8, #1
 800e79a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800e79e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e7a2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	f006 0a0f 	and.w	sl, r6, #15
 800e7ac:	2e0f      	cmp	r6, #15
 800e7ae:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e9c0 <lite_dense_if32of32wf32+0x244>
 800e7b2:	f240 8101 	bls.w	800e9b8 <lite_dense_if32of32wf32+0x23c>
 800e7b6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e7ba:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e7be:	46b6      	mov	lr, r6
 800e7c0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800e7c4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e7c8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800e7cc:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800e7d0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800e7d4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800e7d8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800e7dc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800e7e0:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800e7e4:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800e7e8:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800e7ec:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800e7f0:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800e7f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7f8:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e7fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e800:	f1ae 0e10 	sub.w	lr, lr, #16
 800e804:	f1be 0f0f 	cmp.w	lr, #15
 800e808:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800e80c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800e810:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e814:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e818:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800e81c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800e820:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800e824:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800e828:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800e82c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800e830:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e834:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800e838:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800e83c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e840:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800e844:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800e848:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e84c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e850:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e854:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e858:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e85c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e860:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e864:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e868:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e86c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e870:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e874:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e878:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e87c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e880:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e884:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e888:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e88c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e890:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e894:	d894      	bhi.n	800e7c0 <lite_dense_if32of32wf32+0x44>
 800e896:	eb02 0e0b 	add.w	lr, r2, fp
 800e89a:	4654      	mov	r4, sl
 800e89c:	46c4      	mov	ip, r8
 800e89e:	2c00      	cmp	r4, #0
 800e8a0:	d075      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8a2:	eddc 6a00 	vldr	s13, [ip]
 800e8a6:	edde 7a00 	vldr	s15, [lr]
 800e8aa:	2c01      	cmp	r4, #1
 800e8ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8b0:	d06d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8b2:	eddc 6a01 	vldr	s13, [ip, #4]
 800e8b6:	edde 7a01 	vldr	s15, [lr, #4]
 800e8ba:	2c02      	cmp	r4, #2
 800e8bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8c0:	d065      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8c2:	eddc 6a02 	vldr	s13, [ip, #8]
 800e8c6:	edde 7a02 	vldr	s15, [lr, #8]
 800e8ca:	2c03      	cmp	r4, #3
 800e8cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8d0:	d05d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8d2:	eddc 6a03 	vldr	s13, [ip, #12]
 800e8d6:	edde 7a03 	vldr	s15, [lr, #12]
 800e8da:	2c04      	cmp	r4, #4
 800e8dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8e0:	d055      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8e2:	eddc 6a04 	vldr	s13, [ip, #16]
 800e8e6:	edde 7a04 	vldr	s15, [lr, #16]
 800e8ea:	2c05      	cmp	r4, #5
 800e8ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8f0:	d04d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e8f2:	eddc 6a05 	vldr	s13, [ip, #20]
 800e8f6:	edde 7a05 	vldr	s15, [lr, #20]
 800e8fa:	2c06      	cmp	r4, #6
 800e8fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e900:	d045      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e902:	eddc 6a06 	vldr	s13, [ip, #24]
 800e906:	edde 7a06 	vldr	s15, [lr, #24]
 800e90a:	2c07      	cmp	r4, #7
 800e90c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e910:	d03d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e912:	eddc 6a07 	vldr	s13, [ip, #28]
 800e916:	edde 7a07 	vldr	s15, [lr, #28]
 800e91a:	2c08      	cmp	r4, #8
 800e91c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e920:	d035      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e922:	eddc 6a08 	vldr	s13, [ip, #32]
 800e926:	edde 7a08 	vldr	s15, [lr, #32]
 800e92a:	2c09      	cmp	r4, #9
 800e92c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e930:	d02d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e932:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e936:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e93a:	2c0a      	cmp	r4, #10
 800e93c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e940:	d025      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e942:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e946:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e94a:	2c0b      	cmp	r4, #11
 800e94c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e950:	d01d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e952:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e956:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e95a:	2c0c      	cmp	r4, #12
 800e95c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e960:	d015      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e962:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e966:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e96a:	3c0d      	subs	r4, #13
 800e96c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e970:	d00d      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e972:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e976:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e97a:	2c01      	cmp	r4, #1
 800e97c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e980:	d005      	beq.n	800e98e <lite_dense_if32of32wf32+0x212>
 800e982:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800e986:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800e98a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e98e:	444a      	add	r2, r9
 800e990:	eca5 7a01 	vstmia	r5!, {s14}
 800e994:	42af      	cmp	r7, r5
 800e996:	f63f af09 	bhi.w	800e7ac <lite_dense_if32of32wf32+0x30>
 800e99a:	b15b      	cbz	r3, 800e9b4 <lite_dense_if32of32wf32+0x238>
 800e99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e99e:	b14a      	cbz	r2, 800e9b4 <lite_dense_if32of32wf32+0x238>
 800e9a0:	edd0 7a00 	vldr	s15, [r0]
 800e9a4:	ecb3 7a01 	vldmia	r3!, {s14}
 800e9a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9ac:	ece0 7a01 	vstmia	r0!, {s15}
 800e9b0:	4287      	cmp	r7, r0
 800e9b2:	d1f5      	bne.n	800e9a0 <lite_dense_if32of32wf32+0x224>
 800e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b8:	4634      	mov	r4, r6
 800e9ba:	4696      	mov	lr, r2
 800e9bc:	468c      	mov	ip, r1
 800e9be:	e76e      	b.n	800e89e <lite_dense_if32of32wf32+0x122>
 800e9c0:	00000000 	.word	0x00000000

0800e9c4 <ai_version_get>:
 800e9c4:	0212      	lsls	r2, r2, #8
 800e9c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e9ca:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e9ce:	4770      	bx	lr

0800e9d0 <get_tensor_byte_size>:
 800e9d0:	b410      	push	{r4}
 800e9d2:	6983      	ldr	r3, [r0, #24]
 800e9d4:	68c4      	ldr	r4, [r0, #12]
 800e9d6:	6941      	ldr	r1, [r0, #20]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68e0      	ldr	r0, [r4, #12]
 800e9dc:	4a07      	ldr	r2, [pc, #28]	; (800e9fc <get_tensor_byte_size+0x2c>)
 800e9de:	68c9      	ldr	r1, [r1, #12]
 800e9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800e9e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e9ec:	fb01 f000 	mul.w	r0, r1, r0
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	bf04      	itt	eq
 800e9f4:	3007      	addeq	r0, #7
 800e9f6:	08c0      	lsreq	r0, r0, #3
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	000400c0 	.word	0x000400c0

0800ea00 <ai_array_to_buffer_fmt>:
 800ea00:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d050      	beq.n	800eaaa <ai_array_to_buffer_fmt+0xaa>
 800ea08:	4b2a      	ldr	r3, [pc, #168]	; (800eab4 <ai_array_to_buffer_fmt+0xb4>)
 800ea0a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d00b      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea12:	dc1c      	bgt.n	800ea4e <ai_array_to_buffer_fmt+0x4e>
 800ea14:	4b28      	ldr	r3, [pc, #160]	; (800eab8 <ai_array_to_buffer_fmt+0xb8>)
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d007      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea1a:	dd0b      	ble.n	800ea34 <ai_array_to_buffer_fmt+0x34>
 800ea1c:	4b27      	ldr	r3, [pc, #156]	; (800eabc <ai_array_to_buffer_fmt+0xbc>)
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d003      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea22:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d131      	bne.n	800ea8e <ai_array_to_buffer_fmt+0x8e>
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea30:	4318      	orrs	r0, r3
 800ea32:	4770      	bx	lr
 800ea34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d0f6      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea3c:	dd2c      	ble.n	800ea98 <ai_array_to_buffer_fmt+0x98>
 800ea3e:	4b20      	ldr	r3, [pc, #128]	; (800eac0 <ai_array_to_buffer_fmt+0xc0>)
 800ea40:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea44:	429a      	cmp	r2, r3
 800ea46:	bf18      	it	ne
 800ea48:	2340      	movne	r3, #64	; 0x40
 800ea4a:	4318      	orrs	r0, r3
 800ea4c:	4770      	bx	lr
 800ea4e:	4b1d      	ldr	r3, [pc, #116]	; (800eac4 <ai_array_to_buffer_fmt+0xc4>)
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d0ea      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea54:	dd0e      	ble.n	800ea74 <ai_array_to_buffer_fmt+0x74>
 800ea56:	4b1c      	ldr	r3, [pc, #112]	; (800eac8 <ai_array_to_buffer_fmt+0xc8>)
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d0e6      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea5c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d0e2      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea64:	4b19      	ldr	r3, [pc, #100]	; (800eacc <ai_array_to_buffer_fmt+0xcc>)
 800ea66:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	bf18      	it	ne
 800ea6e:	2340      	movne	r3, #64	; 0x40
 800ea70:	4318      	orrs	r0, r3
 800ea72:	4770      	bx	lr
 800ea74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d0d6      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea7c:	3307      	adds	r3, #7
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d0d3      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800ea82:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ea86:	429a      	cmp	r2, r3
 800ea88:	bf18      	it	ne
 800ea8a:	2340      	movne	r3, #64	; 0x40
 800ea8c:	e7ce      	b.n	800ea2c <ai_array_to_buffer_fmt+0x2c>
 800ea8e:	4b10      	ldr	r3, [pc, #64]	; (800ead0 <ai_array_to_buffer_fmt+0xd0>)
 800ea90:	429a      	cmp	r2, r3
 800ea92:	bf18      	it	ne
 800ea94:	2340      	movne	r3, #64	; 0x40
 800ea96:	e7c9      	b.n	800ea2c <ai_array_to_buffer_fmt+0x2c>
 800ea98:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d0c4      	beq.n	800ea2a <ai_array_to_buffer_fmt+0x2a>
 800eaa0:	3380      	adds	r3, #128	; 0x80
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	bf18      	it	ne
 800eaa6:	2340      	movne	r3, #64	; 0x40
 800eaa8:	e7c0      	b.n	800ea2c <ai_array_to_buffer_fmt+0x2c>
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <ai_array_to_buffer_fmt+0xd4>)
 800eaac:	4003      	ands	r3, r0
 800eaae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eab2:	e7bb      	b.n	800ea2c <ai_array_to_buffer_fmt+0x2c>
 800eab4:	00840040 	.word	0x00840040
 800eab8:	00040840 	.word	0x00040840
 800eabc:	00041040 	.word	0x00041040
 800eac0:	00040447 	.word	0x00040447
 800eac4:	00840840 	.word	0x00840840
 800eac8:	00841040 	.word	0x00841040
 800eacc:	0084084f 	.word	0x0084084f
 800ead0:	0004084f 	.word	0x0004084f
 800ead4:	00803fff 	.word	0x00803fff

0800ead8 <ai_array_get_byte_size>:
 800ead8:	b319      	cbz	r1, 800eb22 <ai_array_get_byte_size+0x4a>
 800eada:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800eade:	fb03 f101 	mul.w	r1, r3, r1
 800eae2:	3107      	adds	r1, #7
 800eae4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800eae8:	f021 0307 	bic.w	r3, r1, #7
 800eaec:	2a04      	cmp	r2, #4
 800eaee:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800eaf2:	fa23 f101 	lsr.w	r1, r3, r1
 800eaf6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800eafa:	d00b      	beq.n	800eb14 <ai_array_get_byte_size+0x3c>
 800eafc:	2a08      	cmp	r2, #8
 800eafe:	d002      	beq.n	800eb06 <ai_array_get_byte_size+0x2e>
 800eb00:	3107      	adds	r1, #7
 800eb02:	08c8      	lsrs	r0, r1, #3
 800eb04:	4770      	bx	lr
 800eb06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb0a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800eb0e:	3107      	adds	r1, #7
 800eb10:	08c8      	lsrs	r0, r1, #3
 800eb12:	4770      	bx	lr
 800eb14:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb18:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800eb1c:	3107      	adds	r1, #7
 800eb1e:	08c8      	lsrs	r0, r1, #3
 800eb20:	4770      	bx	lr
 800eb22:	4608      	mov	r0, r1
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop

0800eb28 <ai_array_get_data_byte_size>:
 800eb28:	b169      	cbz	r1, 800eb46 <ai_array_get_data_byte_size+0x1e>
 800eb2a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800eb2e:	fb02 f101 	mul.w	r1, r2, r1
 800eb32:	1dcb      	adds	r3, r1, #7
 800eb34:	f023 0307 	bic.w	r3, r3, #7
 800eb38:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800eb3c:	fa23 f000 	lsr.w	r0, r3, r0
 800eb40:	3007      	adds	r0, #7
 800eb42:	08c0      	lsrs	r0, r0, #3
 800eb44:	4770      	bx	lr
 800eb46:	4608      	mov	r0, r1
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop

0800eb4c <arm_max_f32>:
 800eb4c:	f101 3cff 	add.w	ip, r1, #4294967295
 800eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb52:	4607      	mov	r7, r0
 800eb54:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800eb58:	ecf7 7a01 	vldmia	r7!, {s15}
 800eb5c:	d060      	beq.n	800ec20 <arm_max_f32+0xd4>
 800eb5e:	2400      	movs	r4, #0
 800eb60:	3014      	adds	r0, #20
 800eb62:	4625      	mov	r5, r4
 800eb64:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800eb68:	ed10 7a04 	vldr	s14, [r0, #-16]
 800eb6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb74:	bf48      	it	mi
 800eb76:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb7a:	ed10 7a03 	vldr	s14, [r0, #-12]
 800eb7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb82:	bf48      	it	mi
 800eb84:	1c65      	addmi	r5, r4, #1
 800eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8a:	bf48      	it	mi
 800eb8c:	eef0 7a47 	vmovmi.f32	s15, s14
 800eb90:	ed10 7a02 	vldr	s14, [r0, #-8]
 800eb94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb98:	bf48      	it	mi
 800eb9a:	1ca5      	addmi	r5, r4, #2
 800eb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba0:	bf48      	it	mi
 800eba2:	eef0 7a47 	vmovmi.f32	s15, s14
 800eba6:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ebaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebae:	bf48      	it	mi
 800ebb0:	1ce5      	addmi	r5, r4, #3
 800ebb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb6:	f104 0404 	add.w	r4, r4, #4
 800ebba:	bf44      	itt	mi
 800ebbc:	eef0 7a47 	vmovmi.f32	s15, s14
 800ebc0:	4625      	movmi	r5, r4
 800ebc2:	42a6      	cmp	r6, r4
 800ebc4:	f100 0010 	add.w	r0, r0, #16
 800ebc8:	d1ce      	bne.n	800eb68 <arm_max_f32+0x1c>
 800ebca:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800ebce:	f01c 0003 	ands.w	r0, ip, #3
 800ebd2:	d021      	beq.n	800ec18 <arm_max_f32+0xcc>
 800ebd4:	ed97 7a00 	vldr	s14, [r7]
 800ebd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe0:	bfc4      	itt	gt
 800ebe2:	eef0 7a47 	vmovgt.f32	s15, s14
 800ebe6:	1a0d      	subgt	r5, r1, r0
 800ebe8:	3801      	subs	r0, #1
 800ebea:	d015      	beq.n	800ec18 <arm_max_f32+0xcc>
 800ebec:	ed97 7a01 	vldr	s14, [r7, #4]
 800ebf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf8:	bf44      	itt	mi
 800ebfa:	eef0 7a47 	vmovmi.f32	s15, s14
 800ebfe:	1a0d      	submi	r5, r1, r0
 800ec00:	2801      	cmp	r0, #1
 800ec02:	d009      	beq.n	800ec18 <arm_max_f32+0xcc>
 800ec04:	ed97 7a02 	vldr	s14, [r7, #8]
 800ec08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec10:	bfc4      	itt	gt
 800ec12:	eef0 7a47 	vmovgt.f32	s15, s14
 800ec16:	4665      	movgt	r5, ip
 800ec18:	edc2 7a00 	vstr	s15, [r2]
 800ec1c:	601d      	str	r5, [r3, #0]
 800ec1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec20:	4675      	mov	r5, lr
 800ec22:	e7d4      	b.n	800ebce <arm_max_f32+0x82>

0800ec24 <arm_fir_init_f32>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	9c04      	ldr	r4, [sp, #16]
 800ec28:	6082      	str	r2, [r0, #8]
 800ec2a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800ec2e:	3c01      	subs	r4, #1
 800ec30:	440c      	add	r4, r1
 800ec32:	8001      	strh	r1, [r0, #0]
 800ec34:	4605      	mov	r5, r0
 800ec36:	00a2      	lsls	r2, r4, #2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	f000 fac6 	bl	800f1cc <memset>
 800ec40:	6068      	str	r0, [r5, #4]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}

0800ec44 <arm_fir_f32>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	ed2d 8b10 	vpush	{d8-d15}
 800ec4c:	b08b      	sub	sp, #44	; 0x2c
 800ec4e:	f8b0 8000 	ldrh.w	r8, [r0]
 800ec52:	9003      	str	r0, [sp, #12]
 800ec54:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800ec58:	461e      	mov	r6, r3
 800ec5a:	9304      	str	r3, [sp, #16]
 800ec5c:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 800ec60:	3b01      	subs	r3, #1
 800ec62:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800ec66:	08f3      	lsrs	r3, r6, #3
 800ec68:	9002      	str	r0, [sp, #8]
 800ec6a:	9500      	str	r5, [sp, #0]
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	f000 81f1 	beq.w	800f054 <arm_fir_f32+0x410>
 800ec72:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800ec76:	f100 0620 	add.w	r6, r0, #32
 800ec7a:	9405      	str	r4, [sp, #20]
 800ec7c:	0164      	lsls	r4, r4, #5
 800ec7e:	4420      	add	r0, r4
 800ec80:	f008 0a07 	and.w	sl, r8, #7
 800ec84:	9607      	str	r6, [sp, #28]
 800ec86:	9006      	str	r0, [sp, #24]
 800ec88:	469c      	mov	ip, r3
 800ec8a:	4650      	mov	r0, sl
 800ec8c:	4623      	mov	r3, r4
 800ec8e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ec92:	f8cd 8020 	str.w	r8, [sp, #32]
 800ec96:	1937      	adds	r7, r6, r4
 800ec98:	f109 0b1c 	add.w	fp, r9, #28
 800ec9c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800eca0:	9209      	str	r2, [sp, #36]	; 0x24
 800eca2:	f8cd 9014 	str.w	r9, [sp, #20]
 800eca6:	f101 0620 	add.w	r6, r1, #32
 800ecaa:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ecae:	9106      	str	r1, [sp, #24]
 800ecb0:	3520      	adds	r5, #32
 800ecb2:	f102 0420 	add.w	r4, r2, #32
 800ecb6:	4698      	mov	r8, r3
 800ecb8:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800ecbc:	f845 3c20 	str.w	r3, [r5, #-32]
 800ecc0:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800ecc4:	f845 3c1c 	str.w	r3, [r5, #-28]
 800ecc8:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800eccc:	f845 3c18 	str.w	r3, [r5, #-24]
 800ecd0:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800ecd4:	f845 3c14 	str.w	r3, [r5, #-20]
 800ecd8:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800ecdc:	f845 3c10 	str.w	r3, [r5, #-16]
 800ece0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800ece4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800ece8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ecec:	f845 3c08 	str.w	r3, [r5, #-8]
 800ecf0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecf4:	f845 3c04 	str.w	r3, [r5, #-4]
 800ecf8:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 800ecfc:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 800ed00:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 800ed04:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800ed08:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800ed0c:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800ed10:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800ed14:	eddf 6af5 	vldr	s13, [pc, #980]	; 800f0ec <arm_fir_f32+0x4a8>
 800ed18:	465a      	mov	r2, fp
 800ed1a:	f1be 0f00 	cmp.w	lr, #0
 800ed1e:	f000 81fe 	beq.w	800f11e <arm_fir_f32+0x4da>
 800ed22:	f10b 0120 	add.w	r1, fp, #32
 800ed26:	eef0 ba66 	vmov.f32	s23, s13
 800ed2a:	eeb0 6a66 	vmov.f32	s12, s13
 800ed2e:	eeb0 9a66 	vmov.f32	s18, s13
 800ed32:	eef0 9a66 	vmov.f32	s19, s13
 800ed36:	eeb0 aa66 	vmov.f32	s20, s13
 800ed3a:	eef0 aa66 	vmov.f32	s21, s13
 800ed3e:	eeb0 ba66 	vmov.f32	s22, s13
 800ed42:	460a      	mov	r2, r1
 800ed44:	4653      	mov	r3, sl
 800ed46:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800ed4a:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 800ed4e:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 800ed52:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 800ed56:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 800ed5a:	ed53 ca04 	vldr	s25, [r3, #-16]
 800ed5e:	ed53 2a03 	vldr	s5, [r3, #-12]
 800ed62:	ed13 4a02 	vldr	s8, [r3, #-8]
 800ed66:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ed6a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800ed6e:	ee27 da21 	vmul.f32	s26, s14, s3
 800ed72:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 800ed76:	ee27 ca01 	vmul.f32	s24, s14, s2
 800ed7a:	ee27 3a20 	vmul.f32	s6, s14, s1
 800ed7e:	ee67 3a00 	vmul.f32	s7, s14, s0
 800ed82:	ee67 5a08 	vmul.f32	s11, s14, s16
 800ed86:	ee27 fa28 	vmul.f32	s30, s14, s17
 800ed8a:	ee67 7a24 	vmul.f32	s15, s14, s9
 800ed8e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ed92:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ed96:	ee6e faa1 	vmul.f32	s31, s29, s3
 800ed9a:	ee2e da81 	vmul.f32	s26, s29, s2
 800ed9e:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 800eda2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800eda6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800edaa:	ee2e caa0 	vmul.f32	s24, s29, s1
 800edae:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800edb2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800edb6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800edba:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800edbe:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800edc2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800edc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edca:	ee24 faae 	vmul.f32	s30, s9, s29
 800edce:	ee6e ea82 	vmul.f32	s29, s29, s4
 800edd2:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800edd6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800edda:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 800edde:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ede2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ede6:	ee2e da20 	vmul.f32	s26, s28, s1
 800edea:	ee2e ca00 	vmul.f32	s24, s28, s0
 800edee:	ee73 9a29 	vadd.f32	s19, s6, s19
 800edf2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800edf6:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800edfa:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800edfe:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee02:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee06:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800ee0a:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800ee0e:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800ee12:	ee2e ea21 	vmul.f32	s28, s28, s3
 800ee16:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800ee1a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ee1e:	ed52 0a04 	vldr	s1, [r2, #-16]
 800ee22:	ee2d da80 	vmul.f32	s26, s27, s0
 800ee26:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800ee2a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ee2e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ee32:	ee2d ca88 	vmul.f32	s24, s27, s16
 800ee36:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800ee3a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ee3e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee42:	ee64 3aad 	vmul.f32	s7, s9, s27
 800ee46:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800ee4a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee4e:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ee52:	ee21 faad 	vmul.f32	s30, s3, s27
 800ee56:	ee6d da81 	vmul.f32	s27, s27, s2
 800ee5a:	ee6c fa80 	vmul.f32	s31, s25, s0
 800ee5e:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800ee62:	ed12 0a03 	vldr	s0, [r2, #-12]
 800ee66:	ee3d da2a 	vadd.f32	s26, s26, s21
 800ee6a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ee6e:	ee6c aa88 	vmul.f32	s21, s25, s16
 800ee72:	ee2c caa8 	vmul.f32	s24, s25, s17
 800ee76:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ee7a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ee7e:	ee24 3aac 	vmul.f32	s6, s9, s25
 800ee82:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800ee86:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ee8a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ee8e:	ee61 5aac 	vmul.f32	s11, s3, s25
 800ee92:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800ee96:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ee9a:	ee6c caa0 	vmul.f32	s25, s25, s1
 800ee9e:	ee62 ea88 	vmul.f32	s29, s5, s16
 800eea2:	ee3a da8d 	vadd.f32	s26, s21, s26
 800eea6:	ed12 8a02 	vldr	s16, [r2, #-8]
 800eeaa:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800eeae:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800eeb2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800eeb6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800eeba:	ee24 caa2 	vmul.f32	s24, s9, s5
 800eebe:	ee22 3a22 	vmul.f32	s6, s4, s5
 800eec2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800eec6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800eeca:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800eece:	ee61 5a22 	vmul.f32	s11, s2, s5
 800eed2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800eed6:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800eeda:	ee20 faa2 	vmul.f32	s30, s1, s5
 800eede:	ee62 2a80 	vmul.f32	s5, s5, s0
 800eee2:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800eee6:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800eeea:	ee24 ba28 	vmul.f32	s22, s8, s17
 800eeee:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800eef2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800eef6:	ee24 da84 	vmul.f32	s26, s9, s8
 800eefa:	ee22 ca04 	vmul.f32	s24, s4, s8
 800eefe:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ef02:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ef06:	ee21 3a84 	vmul.f32	s6, s3, s8
 800ef0a:	ee61 3a04 	vmul.f32	s7, s2, s8
 800ef0e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ef12:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ef16:	ee60 5a84 	vmul.f32	s11, s1, s8
 800ef1a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800ef1e:	ee64 6a08 	vmul.f32	s13, s8, s16
 800ef22:	ed52 8a01 	vldr	s17, [r2, #-4]
 800ef26:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ef2a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ef2e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ef32:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800ef36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ef3a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800ef3e:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ef42:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ef46:	ee22 4a05 	vmul.f32	s8, s4, s10
 800ef4a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ef4e:	ee61 2a85 	vmul.f32	s5, s3, s10
 800ef52:	ee21 3a05 	vmul.f32	s6, s2, s10
 800ef56:	ee60 3a85 	vmul.f32	s7, s1, s10
 800ef5a:	ee60 5a05 	vmul.f32	s11, s0, s10
 800ef5e:	ee68 ba05 	vmul.f32	s23, s16, s10
 800ef62:	ee65 7a28 	vmul.f32	s15, s10, s17
 800ef66:	3320      	adds	r3, #32
 800ef68:	429f      	cmp	r7, r3
 800ef6a:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800ef6e:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800ef72:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800ef76:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ef7a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ef7e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ef82:	ee7b ba87 	vadd.f32	s23, s23, s14
 800ef86:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ef8a:	f102 0220 	add.w	r2, r2, #32
 800ef8e:	f47f aeda 	bne.w	800ed46 <arm_fir_f32+0x102>
 800ef92:	eb0b 0208 	add.w	r2, fp, r8
 800ef96:	46cb      	mov	fp, r9
 800ef98:	b3a0      	cbz	r0, 800f004 <arm_fir_f32+0x3c0>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	ecfb 7a01 	vldmia	fp!, {s15}
 800efa0:	ecf2 5a01 	vldmia	r2!, {s11}
 800efa4:	ee27 2a82 	vmul.f32	s4, s15, s4
 800efa8:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800efac:	ee27 3a81 	vmul.f32	s6, s15, s2
 800efb0:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800efb4:	ee27 4a80 	vmul.f32	s8, s15, s0
 800efb8:	ee67 4a88 	vmul.f32	s9, s15, s16
 800efbc:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800efc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800efc4:	3b01      	subs	r3, #1
 800efc6:	ee3b ba02 	vadd.f32	s22, s22, s4
 800efca:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800efce:	eeb0 2a61 	vmov.f32	s4, s3
 800efd2:	ee3a aa03 	vadd.f32	s20, s20, s6
 800efd6:	eef0 1a41 	vmov.f32	s3, s2
 800efda:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800efde:	eeb0 1a60 	vmov.f32	s2, s1
 800efe2:	ee39 9a04 	vadd.f32	s18, s18, s8
 800efe6:	eef0 0a40 	vmov.f32	s1, s0
 800efea:	ee36 6a24 	vadd.f32	s12, s12, s9
 800efee:	eeb0 0a48 	vmov.f32	s0, s16
 800eff2:	ee7b ba85 	vadd.f32	s23, s23, s10
 800eff6:	eeb0 8a68 	vmov.f32	s16, s17
 800effa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800effe:	eef0 8a65 	vmov.f32	s17, s11
 800f002:	d1cb      	bne.n	800ef9c <arm_fir_f32+0x358>
 800f004:	f1bc 0c01 	subs.w	ip, ip, #1
 800f008:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 800f00c:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 800f010:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 800f014:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 800f018:	ed04 9a04 	vstr	s18, [r4, #-16]
 800f01c:	ed04 6a03 	vstr	s12, [r4, #-12]
 800f020:	ed44 ba02 	vstr	s23, [r4, #-8]
 800f024:	ed44 6a01 	vstr	s13, [r4, #-4]
 800f028:	f106 0620 	add.w	r6, r6, #32
 800f02c:	f105 0520 	add.w	r5, r5, #32
 800f030:	f104 0420 	add.w	r4, r4, #32
 800f034:	468b      	mov	fp, r1
 800f036:	f47f ae3f 	bne.w	800ecb8 <arm_fir_f32+0x74>
 800f03a:	9b01      	ldr	r3, [sp, #4]
 800f03c:	9800      	ldr	r0, [sp, #0]
 800f03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f044:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800f048:	015b      	lsls	r3, r3, #5
 800f04a:	4418      	add	r0, r3
 800f04c:	4419      	add	r1, r3
 800f04e:	441a      	add	r2, r3
 800f050:	4499      	add	r9, r3
 800f052:	9000      	str	r0, [sp, #0]
 800f054:	9b04      	ldr	r3, [sp, #16]
 800f056:	f013 0707 	ands.w	r7, r3, #7
 800f05a:	d020      	beq.n	800f09e <arm_fir_f32+0x45a>
 800f05c:	00bf      	lsls	r7, r7, #2
 800f05e:	9e00      	ldr	r6, [sp, #0]
 800f060:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f064:	eb01 0c07 	add.w	ip, r1, r7
 800f068:	464d      	mov	r5, r9
 800f06a:	f851 3b04 	ldr.w	r3, [r1], #4
 800f06e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f0ec <arm_fir_f32+0x4a8>
 800f072:	f846 3b04 	str.w	r3, [r6], #4
 800f076:	4674      	mov	r4, lr
 800f078:	4643      	mov	r3, r8
 800f07a:	4628      	mov	r0, r5
 800f07c:	ecf0 7a01 	vldmia	r0!, {s15}
 800f080:	ecf4 6a01 	vldmia	r4!, {s13}
 800f084:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f088:	3b01      	subs	r3, #1
 800f08a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f08e:	d1f5      	bne.n	800f07c <arm_fir_f32+0x438>
 800f090:	4561      	cmp	r1, ip
 800f092:	eca2 7a01 	vstmia	r2!, {s14}
 800f096:	f105 0504 	add.w	r5, r5, #4
 800f09a:	d1e6      	bne.n	800f06a <arm_fir_f32+0x426>
 800f09c:	44b9      	add	r9, r7
 800f09e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f0a8:	685d      	ldr	r5, [r3, #4]
 800f0aa:	d021      	beq.n	800f0f0 <arm_fir_f32+0x4ac>
 800f0ac:	f109 0210 	add.w	r2, r9, #16
 800f0b0:	f105 0310 	add.w	r3, r5, #16
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f0ba:	f843 0c10 	str.w	r0, [r3, #-16]
 800f0be:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800f0c2:	f843 0c0c 	str.w	r0, [r3, #-12]
 800f0c6:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800f0ca:	f843 0c08 	str.w	r0, [r3, #-8]
 800f0ce:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f0d2:	f843 0c04 	str.w	r0, [r3, #-4]
 800f0d6:	3901      	subs	r1, #1
 800f0d8:	f102 0210 	add.w	r2, r2, #16
 800f0dc:	f103 0310 	add.w	r3, r3, #16
 800f0e0:	d1e9      	bne.n	800f0b6 <arm_fir_f32+0x472>
 800f0e2:	0124      	lsls	r4, r4, #4
 800f0e4:	44a1      	add	r9, r4
 800f0e6:	4425      	add	r5, r4
 800f0e8:	e002      	b.n	800f0f0 <arm_fir_f32+0x4ac>
 800f0ea:	bf00      	nop
 800f0ec:	00000000 	.word	0x00000000
 800f0f0:	f018 0803 	ands.w	r8, r8, #3
 800f0f4:	d00e      	beq.n	800f114 <arm_fir_f32+0x4d0>
 800f0f6:	f8d9 3000 	ldr.w	r3, [r9]
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	f1b8 0801 	subs.w	r8, r8, #1
 800f100:	d008      	beq.n	800f114 <arm_fir_f32+0x4d0>
 800f102:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f106:	606b      	str	r3, [r5, #4]
 800f108:	f1b8 0f01 	cmp.w	r8, #1
 800f10c:	bf1c      	itt	ne
 800f10e:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800f112:	60ab      	strne	r3, [r5, #8]
 800f114:	b00b      	add	sp, #44	; 0x2c
 800f116:	ecbd 8b10 	vpop	{d8-d15}
 800f11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11e:	eef0 ba66 	vmov.f32	s23, s13
 800f122:	eeb0 6a66 	vmov.f32	s12, s13
 800f126:	eeb0 9a66 	vmov.f32	s18, s13
 800f12a:	eef0 9a66 	vmov.f32	s19, s13
 800f12e:	eeb0 aa66 	vmov.f32	s20, s13
 800f132:	eef0 aa66 	vmov.f32	s21, s13
 800f136:	eeb0 ba66 	vmov.f32	s22, s13
 800f13a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f13e:	f102 0120 	add.w	r1, r2, #32
 800f142:	e729      	b.n	800ef98 <arm_fir_f32+0x354>

0800f144 <atoi>:
 800f144:	220a      	movs	r2, #10
 800f146:	2100      	movs	r1, #0
 800f148:	f000 be4c 	b.w	800fde4 <strtol>

0800f14c <__errno>:
 800f14c:	4b01      	ldr	r3, [pc, #4]	; (800f154 <__errno+0x8>)
 800f14e:	6818      	ldr	r0, [r3, #0]
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	20000bac 	.word	0x20000bac

0800f158 <__libc_init_array>:
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	4d0d      	ldr	r5, [pc, #52]	; (800f190 <__libc_init_array+0x38>)
 800f15c:	4c0d      	ldr	r4, [pc, #52]	; (800f194 <__libc_init_array+0x3c>)
 800f15e:	1b64      	subs	r4, r4, r5
 800f160:	10a4      	asrs	r4, r4, #2
 800f162:	2600      	movs	r6, #0
 800f164:	42a6      	cmp	r6, r4
 800f166:	d109      	bne.n	800f17c <__libc_init_array+0x24>
 800f168:	4d0b      	ldr	r5, [pc, #44]	; (800f198 <__libc_init_array+0x40>)
 800f16a:	4c0c      	ldr	r4, [pc, #48]	; (800f19c <__libc_init_array+0x44>)
 800f16c:	f003 f950 	bl	8012410 <_init>
 800f170:	1b64      	subs	r4, r4, r5
 800f172:	10a4      	asrs	r4, r4, #2
 800f174:	2600      	movs	r6, #0
 800f176:	42a6      	cmp	r6, r4
 800f178:	d105      	bne.n	800f186 <__libc_init_array+0x2e>
 800f17a:	bd70      	pop	{r4, r5, r6, pc}
 800f17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f180:	4798      	blx	r3
 800f182:	3601      	adds	r6, #1
 800f184:	e7ee      	b.n	800f164 <__libc_init_array+0xc>
 800f186:	f855 3b04 	ldr.w	r3, [r5], #4
 800f18a:	4798      	blx	r3
 800f18c:	3601      	adds	r6, #1
 800f18e:	e7f2      	b.n	800f176 <__libc_init_array+0x1e>
 800f190:	0814685c 	.word	0x0814685c
 800f194:	0814685c 	.word	0x0814685c
 800f198:	0814685c 	.word	0x0814685c
 800f19c:	08146860 	.word	0x08146860

0800f1a0 <malloc>:
 800f1a0:	4b02      	ldr	r3, [pc, #8]	; (800f1ac <malloc+0xc>)
 800f1a2:	4601      	mov	r1, r0
 800f1a4:	6818      	ldr	r0, [r3, #0]
 800f1a6:	f000 b885 	b.w	800f2b4 <_malloc_r>
 800f1aa:	bf00      	nop
 800f1ac:	20000bac 	.word	0x20000bac

0800f1b0 <memcpy>:
 800f1b0:	440a      	add	r2, r1
 800f1b2:	4291      	cmp	r1, r2
 800f1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1b8:	d100      	bne.n	800f1bc <memcpy+0xc>
 800f1ba:	4770      	bx	lr
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1c6:	4291      	cmp	r1, r2
 800f1c8:	d1f9      	bne.n	800f1be <memcpy+0xe>
 800f1ca:	bd10      	pop	{r4, pc}

0800f1cc <memset>:
 800f1cc:	4402      	add	r2, r0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d100      	bne.n	800f1d6 <memset+0xa>
 800f1d4:	4770      	bx	lr
 800f1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f1da:	e7f9      	b.n	800f1d0 <memset+0x4>

0800f1dc <_free_r>:
 800f1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1de:	2900      	cmp	r1, #0
 800f1e0:	d044      	beq.n	800f26c <_free_r+0x90>
 800f1e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1e6:	9001      	str	r0, [sp, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ee:	bfb8      	it	lt
 800f1f0:	18e4      	addlt	r4, r4, r3
 800f1f2:	f001 fc7f 	bl	8010af4 <__malloc_lock>
 800f1f6:	4a1e      	ldr	r2, [pc, #120]	; (800f270 <_free_r+0x94>)
 800f1f8:	9801      	ldr	r0, [sp, #4]
 800f1fa:	6813      	ldr	r3, [r2, #0]
 800f1fc:	b933      	cbnz	r3, 800f20c <_free_r+0x30>
 800f1fe:	6063      	str	r3, [r4, #4]
 800f200:	6014      	str	r4, [r2, #0]
 800f202:	b003      	add	sp, #12
 800f204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f208:	f001 bc7a 	b.w	8010b00 <__malloc_unlock>
 800f20c:	42a3      	cmp	r3, r4
 800f20e:	d908      	bls.n	800f222 <_free_r+0x46>
 800f210:	6825      	ldr	r5, [r4, #0]
 800f212:	1961      	adds	r1, r4, r5
 800f214:	428b      	cmp	r3, r1
 800f216:	bf01      	itttt	eq
 800f218:	6819      	ldreq	r1, [r3, #0]
 800f21a:	685b      	ldreq	r3, [r3, #4]
 800f21c:	1949      	addeq	r1, r1, r5
 800f21e:	6021      	streq	r1, [r4, #0]
 800f220:	e7ed      	b.n	800f1fe <_free_r+0x22>
 800f222:	461a      	mov	r2, r3
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	b10b      	cbz	r3, 800f22c <_free_r+0x50>
 800f228:	42a3      	cmp	r3, r4
 800f22a:	d9fa      	bls.n	800f222 <_free_r+0x46>
 800f22c:	6811      	ldr	r1, [r2, #0]
 800f22e:	1855      	adds	r5, r2, r1
 800f230:	42a5      	cmp	r5, r4
 800f232:	d10b      	bne.n	800f24c <_free_r+0x70>
 800f234:	6824      	ldr	r4, [r4, #0]
 800f236:	4421      	add	r1, r4
 800f238:	1854      	adds	r4, r2, r1
 800f23a:	42a3      	cmp	r3, r4
 800f23c:	6011      	str	r1, [r2, #0]
 800f23e:	d1e0      	bne.n	800f202 <_free_r+0x26>
 800f240:	681c      	ldr	r4, [r3, #0]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	6053      	str	r3, [r2, #4]
 800f246:	4421      	add	r1, r4
 800f248:	6011      	str	r1, [r2, #0]
 800f24a:	e7da      	b.n	800f202 <_free_r+0x26>
 800f24c:	d902      	bls.n	800f254 <_free_r+0x78>
 800f24e:	230c      	movs	r3, #12
 800f250:	6003      	str	r3, [r0, #0]
 800f252:	e7d6      	b.n	800f202 <_free_r+0x26>
 800f254:	6825      	ldr	r5, [r4, #0]
 800f256:	1961      	adds	r1, r4, r5
 800f258:	428b      	cmp	r3, r1
 800f25a:	bf04      	itt	eq
 800f25c:	6819      	ldreq	r1, [r3, #0]
 800f25e:	685b      	ldreq	r3, [r3, #4]
 800f260:	6063      	str	r3, [r4, #4]
 800f262:	bf04      	itt	eq
 800f264:	1949      	addeq	r1, r1, r5
 800f266:	6021      	streq	r1, [r4, #0]
 800f268:	6054      	str	r4, [r2, #4]
 800f26a:	e7ca      	b.n	800f202 <_free_r+0x26>
 800f26c:	b003      	add	sp, #12
 800f26e:	bd30      	pop	{r4, r5, pc}
 800f270:	2000202c 	.word	0x2000202c

0800f274 <sbrk_aligned>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	4e0e      	ldr	r6, [pc, #56]	; (800f2b0 <sbrk_aligned+0x3c>)
 800f278:	460c      	mov	r4, r1
 800f27a:	6831      	ldr	r1, [r6, #0]
 800f27c:	4605      	mov	r5, r0
 800f27e:	b911      	cbnz	r1, 800f286 <sbrk_aligned+0x12>
 800f280:	f000 fcf6 	bl	800fc70 <_sbrk_r>
 800f284:	6030      	str	r0, [r6, #0]
 800f286:	4621      	mov	r1, r4
 800f288:	4628      	mov	r0, r5
 800f28a:	f000 fcf1 	bl	800fc70 <_sbrk_r>
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	d00a      	beq.n	800f2a8 <sbrk_aligned+0x34>
 800f292:	1cc4      	adds	r4, r0, #3
 800f294:	f024 0403 	bic.w	r4, r4, #3
 800f298:	42a0      	cmp	r0, r4
 800f29a:	d007      	beq.n	800f2ac <sbrk_aligned+0x38>
 800f29c:	1a21      	subs	r1, r4, r0
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f000 fce6 	bl	800fc70 <_sbrk_r>
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	d101      	bne.n	800f2ac <sbrk_aligned+0x38>
 800f2a8:	f04f 34ff 	mov.w	r4, #4294967295
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}
 800f2b0:	20002030 	.word	0x20002030

0800f2b4 <_malloc_r>:
 800f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b8:	1ccd      	adds	r5, r1, #3
 800f2ba:	f025 0503 	bic.w	r5, r5, #3
 800f2be:	3508      	adds	r5, #8
 800f2c0:	2d0c      	cmp	r5, #12
 800f2c2:	bf38      	it	cc
 800f2c4:	250c      	movcc	r5, #12
 800f2c6:	2d00      	cmp	r5, #0
 800f2c8:	4607      	mov	r7, r0
 800f2ca:	db01      	blt.n	800f2d0 <_malloc_r+0x1c>
 800f2cc:	42a9      	cmp	r1, r5
 800f2ce:	d905      	bls.n	800f2dc <_malloc_r+0x28>
 800f2d0:	230c      	movs	r3, #12
 800f2d2:	603b      	str	r3, [r7, #0]
 800f2d4:	2600      	movs	r6, #0
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	4e2e      	ldr	r6, [pc, #184]	; (800f398 <_malloc_r+0xe4>)
 800f2de:	f001 fc09 	bl	8010af4 <__malloc_lock>
 800f2e2:	6833      	ldr	r3, [r6, #0]
 800f2e4:	461c      	mov	r4, r3
 800f2e6:	bb34      	cbnz	r4, 800f336 <_malloc_r+0x82>
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	4638      	mov	r0, r7
 800f2ec:	f7ff ffc2 	bl	800f274 <sbrk_aligned>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	d14d      	bne.n	800f392 <_malloc_r+0xde>
 800f2f6:	6834      	ldr	r4, [r6, #0]
 800f2f8:	4626      	mov	r6, r4
 800f2fa:	2e00      	cmp	r6, #0
 800f2fc:	d140      	bne.n	800f380 <_malloc_r+0xcc>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	4631      	mov	r1, r6
 800f302:	4638      	mov	r0, r7
 800f304:	eb04 0803 	add.w	r8, r4, r3
 800f308:	f000 fcb2 	bl	800fc70 <_sbrk_r>
 800f30c:	4580      	cmp	r8, r0
 800f30e:	d13a      	bne.n	800f386 <_malloc_r+0xd2>
 800f310:	6821      	ldr	r1, [r4, #0]
 800f312:	3503      	adds	r5, #3
 800f314:	1a6d      	subs	r5, r5, r1
 800f316:	f025 0503 	bic.w	r5, r5, #3
 800f31a:	3508      	adds	r5, #8
 800f31c:	2d0c      	cmp	r5, #12
 800f31e:	bf38      	it	cc
 800f320:	250c      	movcc	r5, #12
 800f322:	4629      	mov	r1, r5
 800f324:	4638      	mov	r0, r7
 800f326:	f7ff ffa5 	bl	800f274 <sbrk_aligned>
 800f32a:	3001      	adds	r0, #1
 800f32c:	d02b      	beq.n	800f386 <_malloc_r+0xd2>
 800f32e:	6823      	ldr	r3, [r4, #0]
 800f330:	442b      	add	r3, r5
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	e00e      	b.n	800f354 <_malloc_r+0xa0>
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	1b52      	subs	r2, r2, r5
 800f33a:	d41e      	bmi.n	800f37a <_malloc_r+0xc6>
 800f33c:	2a0b      	cmp	r2, #11
 800f33e:	d916      	bls.n	800f36e <_malloc_r+0xba>
 800f340:	1961      	adds	r1, r4, r5
 800f342:	42a3      	cmp	r3, r4
 800f344:	6025      	str	r5, [r4, #0]
 800f346:	bf18      	it	ne
 800f348:	6059      	strne	r1, [r3, #4]
 800f34a:	6863      	ldr	r3, [r4, #4]
 800f34c:	bf08      	it	eq
 800f34e:	6031      	streq	r1, [r6, #0]
 800f350:	5162      	str	r2, [r4, r5]
 800f352:	604b      	str	r3, [r1, #4]
 800f354:	4638      	mov	r0, r7
 800f356:	f104 060b 	add.w	r6, r4, #11
 800f35a:	f001 fbd1 	bl	8010b00 <__malloc_unlock>
 800f35e:	f026 0607 	bic.w	r6, r6, #7
 800f362:	1d23      	adds	r3, r4, #4
 800f364:	1af2      	subs	r2, r6, r3
 800f366:	d0b6      	beq.n	800f2d6 <_malloc_r+0x22>
 800f368:	1b9b      	subs	r3, r3, r6
 800f36a:	50a3      	str	r3, [r4, r2]
 800f36c:	e7b3      	b.n	800f2d6 <_malloc_r+0x22>
 800f36e:	6862      	ldr	r2, [r4, #4]
 800f370:	42a3      	cmp	r3, r4
 800f372:	bf0c      	ite	eq
 800f374:	6032      	streq	r2, [r6, #0]
 800f376:	605a      	strne	r2, [r3, #4]
 800f378:	e7ec      	b.n	800f354 <_malloc_r+0xa0>
 800f37a:	4623      	mov	r3, r4
 800f37c:	6864      	ldr	r4, [r4, #4]
 800f37e:	e7b2      	b.n	800f2e6 <_malloc_r+0x32>
 800f380:	4634      	mov	r4, r6
 800f382:	6876      	ldr	r6, [r6, #4]
 800f384:	e7b9      	b.n	800f2fa <_malloc_r+0x46>
 800f386:	230c      	movs	r3, #12
 800f388:	603b      	str	r3, [r7, #0]
 800f38a:	4638      	mov	r0, r7
 800f38c:	f001 fbb8 	bl	8010b00 <__malloc_unlock>
 800f390:	e7a1      	b.n	800f2d6 <_malloc_r+0x22>
 800f392:	6025      	str	r5, [r4, #0]
 800f394:	e7de      	b.n	800f354 <_malloc_r+0xa0>
 800f396:	bf00      	nop
 800f398:	2000202c 	.word	0x2000202c

0800f39c <__cvt>:
 800f39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a0:	ec55 4b10 	vmov	r4, r5, d0
 800f3a4:	2d00      	cmp	r5, #0
 800f3a6:	460e      	mov	r6, r1
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	bfbb      	ittet	lt
 800f3ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3b2:	461d      	movlt	r5, r3
 800f3b4:	2300      	movge	r3, #0
 800f3b6:	232d      	movlt	r3, #45	; 0x2d
 800f3b8:	700b      	strb	r3, [r1, #0]
 800f3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3c0:	4691      	mov	r9, r2
 800f3c2:	f023 0820 	bic.w	r8, r3, #32
 800f3c6:	bfbc      	itt	lt
 800f3c8:	4622      	movlt	r2, r4
 800f3ca:	4614      	movlt	r4, r2
 800f3cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3d0:	d005      	beq.n	800f3de <__cvt+0x42>
 800f3d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3d6:	d100      	bne.n	800f3da <__cvt+0x3e>
 800f3d8:	3601      	adds	r6, #1
 800f3da:	2102      	movs	r1, #2
 800f3dc:	e000      	b.n	800f3e0 <__cvt+0x44>
 800f3de:	2103      	movs	r1, #3
 800f3e0:	ab03      	add	r3, sp, #12
 800f3e2:	9301      	str	r3, [sp, #4]
 800f3e4:	ab02      	add	r3, sp, #8
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ec:	4653      	mov	r3, sl
 800f3ee:	4632      	mov	r2, r6
 800f3f0:	f000 fd8e 	bl	800ff10 <_dtoa_r>
 800f3f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	d102      	bne.n	800f402 <__cvt+0x66>
 800f3fc:	f019 0f01 	tst.w	r9, #1
 800f400:	d022      	beq.n	800f448 <__cvt+0xac>
 800f402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f406:	eb07 0906 	add.w	r9, r7, r6
 800f40a:	d110      	bne.n	800f42e <__cvt+0x92>
 800f40c:	783b      	ldrb	r3, [r7, #0]
 800f40e:	2b30      	cmp	r3, #48	; 0x30
 800f410:	d10a      	bne.n	800f428 <__cvt+0x8c>
 800f412:	2200      	movs	r2, #0
 800f414:	2300      	movs	r3, #0
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f1 fb6d 	bl	8000af8 <__aeabi_dcmpeq>
 800f41e:	b918      	cbnz	r0, 800f428 <__cvt+0x8c>
 800f420:	f1c6 0601 	rsb	r6, r6, #1
 800f424:	f8ca 6000 	str.w	r6, [sl]
 800f428:	f8da 3000 	ldr.w	r3, [sl]
 800f42c:	4499      	add	r9, r3
 800f42e:	2200      	movs	r2, #0
 800f430:	2300      	movs	r3, #0
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	f7f1 fb5f 	bl	8000af8 <__aeabi_dcmpeq>
 800f43a:	b108      	cbz	r0, 800f440 <__cvt+0xa4>
 800f43c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f440:	2230      	movs	r2, #48	; 0x30
 800f442:	9b03      	ldr	r3, [sp, #12]
 800f444:	454b      	cmp	r3, r9
 800f446:	d307      	bcc.n	800f458 <__cvt+0xbc>
 800f448:	9b03      	ldr	r3, [sp, #12]
 800f44a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f44c:	1bdb      	subs	r3, r3, r7
 800f44e:	4638      	mov	r0, r7
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	b004      	add	sp, #16
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	1c59      	adds	r1, r3, #1
 800f45a:	9103      	str	r1, [sp, #12]
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	e7f0      	b.n	800f442 <__cvt+0xa6>

0800f460 <__exponent>:
 800f460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f462:	4603      	mov	r3, r0
 800f464:	2900      	cmp	r1, #0
 800f466:	bfb8      	it	lt
 800f468:	4249      	neglt	r1, r1
 800f46a:	f803 2b02 	strb.w	r2, [r3], #2
 800f46e:	bfb4      	ite	lt
 800f470:	222d      	movlt	r2, #45	; 0x2d
 800f472:	222b      	movge	r2, #43	; 0x2b
 800f474:	2909      	cmp	r1, #9
 800f476:	7042      	strb	r2, [r0, #1]
 800f478:	dd2a      	ble.n	800f4d0 <__exponent+0x70>
 800f47a:	f10d 0407 	add.w	r4, sp, #7
 800f47e:	46a4      	mov	ip, r4
 800f480:	270a      	movs	r7, #10
 800f482:	46a6      	mov	lr, r4
 800f484:	460a      	mov	r2, r1
 800f486:	fb91 f6f7 	sdiv	r6, r1, r7
 800f48a:	fb07 1516 	mls	r5, r7, r6, r1
 800f48e:	3530      	adds	r5, #48	; 0x30
 800f490:	2a63      	cmp	r2, #99	; 0x63
 800f492:	f104 34ff 	add.w	r4, r4, #4294967295
 800f496:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f49a:	4631      	mov	r1, r6
 800f49c:	dcf1      	bgt.n	800f482 <__exponent+0x22>
 800f49e:	3130      	adds	r1, #48	; 0x30
 800f4a0:	f1ae 0502 	sub.w	r5, lr, #2
 800f4a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f4a8:	1c44      	adds	r4, r0, #1
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	4561      	cmp	r1, ip
 800f4ae:	d30a      	bcc.n	800f4c6 <__exponent+0x66>
 800f4b0:	f10d 0209 	add.w	r2, sp, #9
 800f4b4:	eba2 020e 	sub.w	r2, r2, lr
 800f4b8:	4565      	cmp	r5, ip
 800f4ba:	bf88      	it	hi
 800f4bc:	2200      	movhi	r2, #0
 800f4be:	4413      	add	r3, r2
 800f4c0:	1a18      	subs	r0, r3, r0
 800f4c2:	b003      	add	sp, #12
 800f4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f4ce:	e7ed      	b.n	800f4ac <__exponent+0x4c>
 800f4d0:	2330      	movs	r3, #48	; 0x30
 800f4d2:	3130      	adds	r1, #48	; 0x30
 800f4d4:	7083      	strb	r3, [r0, #2]
 800f4d6:	70c1      	strb	r1, [r0, #3]
 800f4d8:	1d03      	adds	r3, r0, #4
 800f4da:	e7f1      	b.n	800f4c0 <__exponent+0x60>

0800f4dc <_printf_float>:
 800f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	ed2d 8b02 	vpush	{d8}
 800f4e4:	b08d      	sub	sp, #52	; 0x34
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4ec:	4616      	mov	r6, r2
 800f4ee:	461f      	mov	r7, r3
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	f001 fafb 	bl	8010aec <_localeconv_r>
 800f4f6:	f8d0 a000 	ldr.w	sl, [r0]
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	f7f0 fe80 	bl	8000200 <strlen>
 800f500:	2300      	movs	r3, #0
 800f502:	930a      	str	r3, [sp, #40]	; 0x28
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	9305      	str	r3, [sp, #20]
 800f508:	f8d8 3000 	ldr.w	r3, [r8]
 800f50c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f510:	3307      	adds	r3, #7
 800f512:	f023 0307 	bic.w	r3, r3, #7
 800f516:	f103 0208 	add.w	r2, r3, #8
 800f51a:	f8c8 2000 	str.w	r2, [r8]
 800f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f522:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f526:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f52a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f52e:	9307      	str	r3, [sp, #28]
 800f530:	f8cd 8018 	str.w	r8, [sp, #24]
 800f534:	ee08 0a10 	vmov	s16, r0
 800f538:	4b9f      	ldr	r3, [pc, #636]	; (800f7b8 <_printf_float+0x2dc>)
 800f53a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f53e:	f04f 32ff 	mov.w	r2, #4294967295
 800f542:	f7f1 fb0b 	bl	8000b5c <__aeabi_dcmpun>
 800f546:	bb88      	cbnz	r0, 800f5ac <_printf_float+0xd0>
 800f548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f54c:	4b9a      	ldr	r3, [pc, #616]	; (800f7b8 <_printf_float+0x2dc>)
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295
 800f552:	f7f1 fae5 	bl	8000b20 <__aeabi_dcmple>
 800f556:	bb48      	cbnz	r0, 800f5ac <_printf_float+0xd0>
 800f558:	2200      	movs	r2, #0
 800f55a:	2300      	movs	r3, #0
 800f55c:	4640      	mov	r0, r8
 800f55e:	4649      	mov	r1, r9
 800f560:	f7f1 fad4 	bl	8000b0c <__aeabi_dcmplt>
 800f564:	b110      	cbz	r0, 800f56c <_printf_float+0x90>
 800f566:	232d      	movs	r3, #45	; 0x2d
 800f568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f56c:	4b93      	ldr	r3, [pc, #588]	; (800f7bc <_printf_float+0x2e0>)
 800f56e:	4894      	ldr	r0, [pc, #592]	; (800f7c0 <_printf_float+0x2e4>)
 800f570:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f574:	bf94      	ite	ls
 800f576:	4698      	movls	r8, r3
 800f578:	4680      	movhi	r8, r0
 800f57a:	2303      	movs	r3, #3
 800f57c:	6123      	str	r3, [r4, #16]
 800f57e:	9b05      	ldr	r3, [sp, #20]
 800f580:	f023 0204 	bic.w	r2, r3, #4
 800f584:	6022      	str	r2, [r4, #0]
 800f586:	f04f 0900 	mov.w	r9, #0
 800f58a:	9700      	str	r7, [sp, #0]
 800f58c:	4633      	mov	r3, r6
 800f58e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f590:	4621      	mov	r1, r4
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f9d8 	bl	800f948 <_printf_common>
 800f598:	3001      	adds	r0, #1
 800f59a:	f040 8090 	bne.w	800f6be <_printf_float+0x1e2>
 800f59e:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a2:	b00d      	add	sp, #52	; 0x34
 800f5a4:	ecbd 8b02 	vpop	{d8}
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	4642      	mov	r2, r8
 800f5ae:	464b      	mov	r3, r9
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f1 fad2 	bl	8000b5c <__aeabi_dcmpun>
 800f5b8:	b140      	cbz	r0, 800f5cc <_printf_float+0xf0>
 800f5ba:	464b      	mov	r3, r9
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfbc      	itt	lt
 800f5c0:	232d      	movlt	r3, #45	; 0x2d
 800f5c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5c6:	487f      	ldr	r0, [pc, #508]	; (800f7c4 <_printf_float+0x2e8>)
 800f5c8:	4b7f      	ldr	r3, [pc, #508]	; (800f7c8 <_printf_float+0x2ec>)
 800f5ca:	e7d1      	b.n	800f570 <_printf_float+0x94>
 800f5cc:	6863      	ldr	r3, [r4, #4]
 800f5ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5d2:	9206      	str	r2, [sp, #24]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	d13f      	bne.n	800f658 <_printf_float+0x17c>
 800f5d8:	2306      	movs	r3, #6
 800f5da:	6063      	str	r3, [r4, #4]
 800f5dc:	9b05      	ldr	r3, [sp, #20]
 800f5de:	6861      	ldr	r1, [r4, #4]
 800f5e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	ab0a      	add	r3, sp, #40	; 0x28
 800f5ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5ee:	ab09      	add	r3, sp, #36	; 0x24
 800f5f0:	ec49 8b10 	vmov	d0, r8, r9
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	6022      	str	r2, [r4, #0]
 800f5f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	f7ff fecd 	bl	800f39c <__cvt>
 800f602:	9b06      	ldr	r3, [sp, #24]
 800f604:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f606:	2b47      	cmp	r3, #71	; 0x47
 800f608:	4680      	mov	r8, r0
 800f60a:	d108      	bne.n	800f61e <_printf_float+0x142>
 800f60c:	1cc8      	adds	r0, r1, #3
 800f60e:	db02      	blt.n	800f616 <_printf_float+0x13a>
 800f610:	6863      	ldr	r3, [r4, #4]
 800f612:	4299      	cmp	r1, r3
 800f614:	dd41      	ble.n	800f69a <_printf_float+0x1be>
 800f616:	f1ab 0b02 	sub.w	fp, fp, #2
 800f61a:	fa5f fb8b 	uxtb.w	fp, fp
 800f61e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f622:	d820      	bhi.n	800f666 <_printf_float+0x18a>
 800f624:	3901      	subs	r1, #1
 800f626:	465a      	mov	r2, fp
 800f628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f62c:	9109      	str	r1, [sp, #36]	; 0x24
 800f62e:	f7ff ff17 	bl	800f460 <__exponent>
 800f632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f634:	1813      	adds	r3, r2, r0
 800f636:	2a01      	cmp	r2, #1
 800f638:	4681      	mov	r9, r0
 800f63a:	6123      	str	r3, [r4, #16]
 800f63c:	dc02      	bgt.n	800f644 <_printf_float+0x168>
 800f63e:	6822      	ldr	r2, [r4, #0]
 800f640:	07d2      	lsls	r2, r2, #31
 800f642:	d501      	bpl.n	800f648 <_printf_float+0x16c>
 800f644:	3301      	adds	r3, #1
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d09c      	beq.n	800f58a <_printf_float+0xae>
 800f650:	232d      	movs	r3, #45	; 0x2d
 800f652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f656:	e798      	b.n	800f58a <_printf_float+0xae>
 800f658:	9a06      	ldr	r2, [sp, #24]
 800f65a:	2a47      	cmp	r2, #71	; 0x47
 800f65c:	d1be      	bne.n	800f5dc <_printf_float+0x100>
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1bc      	bne.n	800f5dc <_printf_float+0x100>
 800f662:	2301      	movs	r3, #1
 800f664:	e7b9      	b.n	800f5da <_printf_float+0xfe>
 800f666:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f66a:	d118      	bne.n	800f69e <_printf_float+0x1c2>
 800f66c:	2900      	cmp	r1, #0
 800f66e:	6863      	ldr	r3, [r4, #4]
 800f670:	dd0b      	ble.n	800f68a <_printf_float+0x1ae>
 800f672:	6121      	str	r1, [r4, #16]
 800f674:	b913      	cbnz	r3, 800f67c <_printf_float+0x1a0>
 800f676:	6822      	ldr	r2, [r4, #0]
 800f678:	07d0      	lsls	r0, r2, #31
 800f67a:	d502      	bpl.n	800f682 <_printf_float+0x1a6>
 800f67c:	3301      	adds	r3, #1
 800f67e:	440b      	add	r3, r1
 800f680:	6123      	str	r3, [r4, #16]
 800f682:	65a1      	str	r1, [r4, #88]	; 0x58
 800f684:	f04f 0900 	mov.w	r9, #0
 800f688:	e7de      	b.n	800f648 <_printf_float+0x16c>
 800f68a:	b913      	cbnz	r3, 800f692 <_printf_float+0x1b6>
 800f68c:	6822      	ldr	r2, [r4, #0]
 800f68e:	07d2      	lsls	r2, r2, #31
 800f690:	d501      	bpl.n	800f696 <_printf_float+0x1ba>
 800f692:	3302      	adds	r3, #2
 800f694:	e7f4      	b.n	800f680 <_printf_float+0x1a4>
 800f696:	2301      	movs	r3, #1
 800f698:	e7f2      	b.n	800f680 <_printf_float+0x1a4>
 800f69a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6a0:	4299      	cmp	r1, r3
 800f6a2:	db05      	blt.n	800f6b0 <_printf_float+0x1d4>
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	6121      	str	r1, [r4, #16]
 800f6a8:	07d8      	lsls	r0, r3, #31
 800f6aa:	d5ea      	bpl.n	800f682 <_printf_float+0x1a6>
 800f6ac:	1c4b      	adds	r3, r1, #1
 800f6ae:	e7e7      	b.n	800f680 <_printf_float+0x1a4>
 800f6b0:	2900      	cmp	r1, #0
 800f6b2:	bfd4      	ite	le
 800f6b4:	f1c1 0202 	rsble	r2, r1, #2
 800f6b8:	2201      	movgt	r2, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	e7e0      	b.n	800f680 <_printf_float+0x1a4>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	055a      	lsls	r2, r3, #21
 800f6c2:	d407      	bmi.n	800f6d4 <_printf_float+0x1f8>
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	4642      	mov	r2, r8
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	47b8      	blx	r7
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	d12c      	bne.n	800f72c <_printf_float+0x250>
 800f6d2:	e764      	b.n	800f59e <_printf_float+0xc2>
 800f6d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6d8:	f240 80e0 	bls.w	800f89c <_printf_float+0x3c0>
 800f6dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f7f1 fa08 	bl	8000af8 <__aeabi_dcmpeq>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d034      	beq.n	800f756 <_printf_float+0x27a>
 800f6ec:	4a37      	ldr	r2, [pc, #220]	; (800f7cc <_printf_float+0x2f0>)
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	47b8      	blx	r7
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	f43f af51 	beq.w	800f59e <_printf_float+0xc2>
 800f6fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f700:	429a      	cmp	r2, r3
 800f702:	db02      	blt.n	800f70a <_printf_float+0x22e>
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	07d8      	lsls	r0, r3, #31
 800f708:	d510      	bpl.n	800f72c <_printf_float+0x250>
 800f70a:	ee18 3a10 	vmov	r3, s16
 800f70e:	4652      	mov	r2, sl
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	f43f af41 	beq.w	800f59e <_printf_float+0xc2>
 800f71c:	f04f 0800 	mov.w	r8, #0
 800f720:	f104 091a 	add.w	r9, r4, #26
 800f724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f726:	3b01      	subs	r3, #1
 800f728:	4543      	cmp	r3, r8
 800f72a:	dc09      	bgt.n	800f740 <_printf_float+0x264>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	079b      	lsls	r3, r3, #30
 800f730:	f100 8105 	bmi.w	800f93e <_printf_float+0x462>
 800f734:	68e0      	ldr	r0, [r4, #12]
 800f736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f738:	4298      	cmp	r0, r3
 800f73a:	bfb8      	it	lt
 800f73c:	4618      	movlt	r0, r3
 800f73e:	e730      	b.n	800f5a2 <_printf_float+0xc6>
 800f740:	2301      	movs	r3, #1
 800f742:	464a      	mov	r2, r9
 800f744:	4631      	mov	r1, r6
 800f746:	4628      	mov	r0, r5
 800f748:	47b8      	blx	r7
 800f74a:	3001      	adds	r0, #1
 800f74c:	f43f af27 	beq.w	800f59e <_printf_float+0xc2>
 800f750:	f108 0801 	add.w	r8, r8, #1
 800f754:	e7e6      	b.n	800f724 <_printf_float+0x248>
 800f756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dc39      	bgt.n	800f7d0 <_printf_float+0x2f4>
 800f75c:	4a1b      	ldr	r2, [pc, #108]	; (800f7cc <_printf_float+0x2f0>)
 800f75e:	2301      	movs	r3, #1
 800f760:	4631      	mov	r1, r6
 800f762:	4628      	mov	r0, r5
 800f764:	47b8      	blx	r7
 800f766:	3001      	adds	r0, #1
 800f768:	f43f af19 	beq.w	800f59e <_printf_float+0xc2>
 800f76c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f770:	4313      	orrs	r3, r2
 800f772:	d102      	bne.n	800f77a <_printf_float+0x29e>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	07d9      	lsls	r1, r3, #31
 800f778:	d5d8      	bpl.n	800f72c <_printf_float+0x250>
 800f77a:	ee18 3a10 	vmov	r3, s16
 800f77e:	4652      	mov	r2, sl
 800f780:	4631      	mov	r1, r6
 800f782:	4628      	mov	r0, r5
 800f784:	47b8      	blx	r7
 800f786:	3001      	adds	r0, #1
 800f788:	f43f af09 	beq.w	800f59e <_printf_float+0xc2>
 800f78c:	f04f 0900 	mov.w	r9, #0
 800f790:	f104 0a1a 	add.w	sl, r4, #26
 800f794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f796:	425b      	negs	r3, r3
 800f798:	454b      	cmp	r3, r9
 800f79a:	dc01      	bgt.n	800f7a0 <_printf_float+0x2c4>
 800f79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79e:	e792      	b.n	800f6c6 <_printf_float+0x1ea>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	4652      	mov	r2, sl
 800f7a4:	4631      	mov	r1, r6
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	47b8      	blx	r7
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	f43f aef7 	beq.w	800f59e <_printf_float+0xc2>
 800f7b0:	f109 0901 	add.w	r9, r9, #1
 800f7b4:	e7ee      	b.n	800f794 <_printf_float+0x2b8>
 800f7b6:	bf00      	nop
 800f7b8:	7fefffff 	.word	0x7fefffff
 800f7bc:	08146464 	.word	0x08146464
 800f7c0:	08146468 	.word	0x08146468
 800f7c4:	08146470 	.word	0x08146470
 800f7c8:	0814646c 	.word	0x0814646c
 800f7cc:	08146474 	.word	0x08146474
 800f7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	bfa8      	it	ge
 800f7d8:	461a      	movge	r2, r3
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	4691      	mov	r9, r2
 800f7de:	dc37      	bgt.n	800f850 <_printf_float+0x374>
 800f7e0:	f04f 0b00 	mov.w	fp, #0
 800f7e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7e8:	f104 021a 	add.w	r2, r4, #26
 800f7ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7ee:	9305      	str	r3, [sp, #20]
 800f7f0:	eba3 0309 	sub.w	r3, r3, r9
 800f7f4:	455b      	cmp	r3, fp
 800f7f6:	dc33      	bgt.n	800f860 <_printf_float+0x384>
 800f7f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	db3b      	blt.n	800f878 <_printf_float+0x39c>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	07da      	lsls	r2, r3, #31
 800f804:	d438      	bmi.n	800f878 <_printf_float+0x39c>
 800f806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f808:	9a05      	ldr	r2, [sp, #20]
 800f80a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f80c:	1a9a      	subs	r2, r3, r2
 800f80e:	eba3 0901 	sub.w	r9, r3, r1
 800f812:	4591      	cmp	r9, r2
 800f814:	bfa8      	it	ge
 800f816:	4691      	movge	r9, r2
 800f818:	f1b9 0f00 	cmp.w	r9, #0
 800f81c:	dc35      	bgt.n	800f88a <_printf_float+0x3ae>
 800f81e:	f04f 0800 	mov.w	r8, #0
 800f822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f826:	f104 0a1a 	add.w	sl, r4, #26
 800f82a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f82e:	1a9b      	subs	r3, r3, r2
 800f830:	eba3 0309 	sub.w	r3, r3, r9
 800f834:	4543      	cmp	r3, r8
 800f836:	f77f af79 	ble.w	800f72c <_printf_float+0x250>
 800f83a:	2301      	movs	r3, #1
 800f83c:	4652      	mov	r2, sl
 800f83e:	4631      	mov	r1, r6
 800f840:	4628      	mov	r0, r5
 800f842:	47b8      	blx	r7
 800f844:	3001      	adds	r0, #1
 800f846:	f43f aeaa 	beq.w	800f59e <_printf_float+0xc2>
 800f84a:	f108 0801 	add.w	r8, r8, #1
 800f84e:	e7ec      	b.n	800f82a <_printf_float+0x34e>
 800f850:	4613      	mov	r3, r2
 800f852:	4631      	mov	r1, r6
 800f854:	4642      	mov	r2, r8
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	d1c0      	bne.n	800f7e0 <_printf_float+0x304>
 800f85e:	e69e      	b.n	800f59e <_printf_float+0xc2>
 800f860:	2301      	movs	r3, #1
 800f862:	4631      	mov	r1, r6
 800f864:	4628      	mov	r0, r5
 800f866:	9205      	str	r2, [sp, #20]
 800f868:	47b8      	blx	r7
 800f86a:	3001      	adds	r0, #1
 800f86c:	f43f ae97 	beq.w	800f59e <_printf_float+0xc2>
 800f870:	9a05      	ldr	r2, [sp, #20]
 800f872:	f10b 0b01 	add.w	fp, fp, #1
 800f876:	e7b9      	b.n	800f7ec <_printf_float+0x310>
 800f878:	ee18 3a10 	vmov	r3, s16
 800f87c:	4652      	mov	r2, sl
 800f87e:	4631      	mov	r1, r6
 800f880:	4628      	mov	r0, r5
 800f882:	47b8      	blx	r7
 800f884:	3001      	adds	r0, #1
 800f886:	d1be      	bne.n	800f806 <_printf_float+0x32a>
 800f888:	e689      	b.n	800f59e <_printf_float+0xc2>
 800f88a:	9a05      	ldr	r2, [sp, #20]
 800f88c:	464b      	mov	r3, r9
 800f88e:	4442      	add	r2, r8
 800f890:	4631      	mov	r1, r6
 800f892:	4628      	mov	r0, r5
 800f894:	47b8      	blx	r7
 800f896:	3001      	adds	r0, #1
 800f898:	d1c1      	bne.n	800f81e <_printf_float+0x342>
 800f89a:	e680      	b.n	800f59e <_printf_float+0xc2>
 800f89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89e:	2a01      	cmp	r2, #1
 800f8a0:	dc01      	bgt.n	800f8a6 <_printf_float+0x3ca>
 800f8a2:	07db      	lsls	r3, r3, #31
 800f8a4:	d538      	bpl.n	800f918 <_printf_float+0x43c>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4642      	mov	r2, r8
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47b8      	blx	r7
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f43f ae74 	beq.w	800f59e <_printf_float+0xc2>
 800f8b6:	ee18 3a10 	vmov	r3, s16
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4628      	mov	r0, r5
 800f8c0:	47b8      	blx	r7
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	f43f ae6b 	beq.w	800f59e <_printf_float+0xc2>
 800f8c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f7f1 f912 	bl	8000af8 <__aeabi_dcmpeq>
 800f8d4:	b9d8      	cbnz	r0, 800f90e <_printf_float+0x432>
 800f8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d8:	f108 0201 	add.w	r2, r8, #1
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d10e      	bne.n	800f906 <_printf_float+0x42a>
 800f8e8:	e659      	b.n	800f59e <_printf_float+0xc2>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4652      	mov	r2, sl
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	47b8      	blx	r7
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	f43f ae52 	beq.w	800f59e <_printf_float+0xc2>
 800f8fa:	f108 0801 	add.w	r8, r8, #1
 800f8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f900:	3b01      	subs	r3, #1
 800f902:	4543      	cmp	r3, r8
 800f904:	dcf1      	bgt.n	800f8ea <_printf_float+0x40e>
 800f906:	464b      	mov	r3, r9
 800f908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f90c:	e6dc      	b.n	800f6c8 <_printf_float+0x1ec>
 800f90e:	f04f 0800 	mov.w	r8, #0
 800f912:	f104 0a1a 	add.w	sl, r4, #26
 800f916:	e7f2      	b.n	800f8fe <_printf_float+0x422>
 800f918:	2301      	movs	r3, #1
 800f91a:	4642      	mov	r2, r8
 800f91c:	e7df      	b.n	800f8de <_printf_float+0x402>
 800f91e:	2301      	movs	r3, #1
 800f920:	464a      	mov	r2, r9
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	f43f ae38 	beq.w	800f59e <_printf_float+0xc2>
 800f92e:	f108 0801 	add.w	r8, r8, #1
 800f932:	68e3      	ldr	r3, [r4, #12]
 800f934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f936:	1a5b      	subs	r3, r3, r1
 800f938:	4543      	cmp	r3, r8
 800f93a:	dcf0      	bgt.n	800f91e <_printf_float+0x442>
 800f93c:	e6fa      	b.n	800f734 <_printf_float+0x258>
 800f93e:	f04f 0800 	mov.w	r8, #0
 800f942:	f104 0919 	add.w	r9, r4, #25
 800f946:	e7f4      	b.n	800f932 <_printf_float+0x456>

0800f948 <_printf_common>:
 800f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	4616      	mov	r6, r2
 800f94e:	4699      	mov	r9, r3
 800f950:	688a      	ldr	r2, [r1, #8]
 800f952:	690b      	ldr	r3, [r1, #16]
 800f954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f958:	4293      	cmp	r3, r2
 800f95a:	bfb8      	it	lt
 800f95c:	4613      	movlt	r3, r2
 800f95e:	6033      	str	r3, [r6, #0]
 800f960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f964:	4607      	mov	r7, r0
 800f966:	460c      	mov	r4, r1
 800f968:	b10a      	cbz	r2, 800f96e <_printf_common+0x26>
 800f96a:	3301      	adds	r3, #1
 800f96c:	6033      	str	r3, [r6, #0]
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	0699      	lsls	r1, r3, #26
 800f972:	bf42      	ittt	mi
 800f974:	6833      	ldrmi	r3, [r6, #0]
 800f976:	3302      	addmi	r3, #2
 800f978:	6033      	strmi	r3, [r6, #0]
 800f97a:	6825      	ldr	r5, [r4, #0]
 800f97c:	f015 0506 	ands.w	r5, r5, #6
 800f980:	d106      	bne.n	800f990 <_printf_common+0x48>
 800f982:	f104 0a19 	add.w	sl, r4, #25
 800f986:	68e3      	ldr	r3, [r4, #12]
 800f988:	6832      	ldr	r2, [r6, #0]
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	42ab      	cmp	r3, r5
 800f98e:	dc26      	bgt.n	800f9de <_printf_common+0x96>
 800f990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f994:	1e13      	subs	r3, r2, #0
 800f996:	6822      	ldr	r2, [r4, #0]
 800f998:	bf18      	it	ne
 800f99a:	2301      	movne	r3, #1
 800f99c:	0692      	lsls	r2, r2, #26
 800f99e:	d42b      	bmi.n	800f9f8 <_printf_common+0xb0>
 800f9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	47c0      	blx	r8
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	d01e      	beq.n	800f9ec <_printf_common+0xa4>
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	68e5      	ldr	r5, [r4, #12]
 800f9b2:	6832      	ldr	r2, [r6, #0]
 800f9b4:	f003 0306 	and.w	r3, r3, #6
 800f9b8:	2b04      	cmp	r3, #4
 800f9ba:	bf08      	it	eq
 800f9bc:	1aad      	subeq	r5, r5, r2
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	6922      	ldr	r2, [r4, #16]
 800f9c2:	bf0c      	ite	eq
 800f9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9c8:	2500      	movne	r5, #0
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	bfc4      	itt	gt
 800f9ce:	1a9b      	subgt	r3, r3, r2
 800f9d0:	18ed      	addgt	r5, r5, r3
 800f9d2:	2600      	movs	r6, #0
 800f9d4:	341a      	adds	r4, #26
 800f9d6:	42b5      	cmp	r5, r6
 800f9d8:	d11a      	bne.n	800fa10 <_printf_common+0xc8>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	e008      	b.n	800f9f0 <_printf_common+0xa8>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	4652      	mov	r2, sl
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	47c0      	blx	r8
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d103      	bne.n	800f9f4 <_printf_common+0xac>
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f4:	3501      	adds	r5, #1
 800f9f6:	e7c6      	b.n	800f986 <_printf_common+0x3e>
 800f9f8:	18e1      	adds	r1, r4, r3
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	2030      	movs	r0, #48	; 0x30
 800f9fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa02:	4422      	add	r2, r4
 800fa04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa0c:	3302      	adds	r3, #2
 800fa0e:	e7c7      	b.n	800f9a0 <_printf_common+0x58>
 800fa10:	2301      	movs	r3, #1
 800fa12:	4622      	mov	r2, r4
 800fa14:	4649      	mov	r1, r9
 800fa16:	4638      	mov	r0, r7
 800fa18:	47c0      	blx	r8
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d0e6      	beq.n	800f9ec <_printf_common+0xa4>
 800fa1e:	3601      	adds	r6, #1
 800fa20:	e7d9      	b.n	800f9d6 <_printf_common+0x8e>
	...

0800fa24 <_printf_i>:
 800fa24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa28:	7e0f      	ldrb	r7, [r1, #24]
 800fa2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa2c:	2f78      	cmp	r7, #120	; 0x78
 800fa2e:	4691      	mov	r9, r2
 800fa30:	4680      	mov	r8, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	469a      	mov	sl, r3
 800fa36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa3a:	d807      	bhi.n	800fa4c <_printf_i+0x28>
 800fa3c:	2f62      	cmp	r7, #98	; 0x62
 800fa3e:	d80a      	bhi.n	800fa56 <_printf_i+0x32>
 800fa40:	2f00      	cmp	r7, #0
 800fa42:	f000 80d8 	beq.w	800fbf6 <_printf_i+0x1d2>
 800fa46:	2f58      	cmp	r7, #88	; 0x58
 800fa48:	f000 80a3 	beq.w	800fb92 <_printf_i+0x16e>
 800fa4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa54:	e03a      	b.n	800facc <_printf_i+0xa8>
 800fa56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa5a:	2b15      	cmp	r3, #21
 800fa5c:	d8f6      	bhi.n	800fa4c <_printf_i+0x28>
 800fa5e:	a101      	add	r1, pc, #4	; (adr r1, 800fa64 <_printf_i+0x40>)
 800fa60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa64:	0800fabd 	.word	0x0800fabd
 800fa68:	0800fad1 	.word	0x0800fad1
 800fa6c:	0800fa4d 	.word	0x0800fa4d
 800fa70:	0800fa4d 	.word	0x0800fa4d
 800fa74:	0800fa4d 	.word	0x0800fa4d
 800fa78:	0800fa4d 	.word	0x0800fa4d
 800fa7c:	0800fad1 	.word	0x0800fad1
 800fa80:	0800fa4d 	.word	0x0800fa4d
 800fa84:	0800fa4d 	.word	0x0800fa4d
 800fa88:	0800fa4d 	.word	0x0800fa4d
 800fa8c:	0800fa4d 	.word	0x0800fa4d
 800fa90:	0800fbdd 	.word	0x0800fbdd
 800fa94:	0800fb01 	.word	0x0800fb01
 800fa98:	0800fbbf 	.word	0x0800fbbf
 800fa9c:	0800fa4d 	.word	0x0800fa4d
 800faa0:	0800fa4d 	.word	0x0800fa4d
 800faa4:	0800fbff 	.word	0x0800fbff
 800faa8:	0800fa4d 	.word	0x0800fa4d
 800faac:	0800fb01 	.word	0x0800fb01
 800fab0:	0800fa4d 	.word	0x0800fa4d
 800fab4:	0800fa4d 	.word	0x0800fa4d
 800fab8:	0800fbc7 	.word	0x0800fbc7
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	1d1a      	adds	r2, r3, #4
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	602a      	str	r2, [r5, #0]
 800fac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800facc:	2301      	movs	r3, #1
 800face:	e0a3      	b.n	800fc18 <_printf_i+0x1f4>
 800fad0:	6820      	ldr	r0, [r4, #0]
 800fad2:	6829      	ldr	r1, [r5, #0]
 800fad4:	0606      	lsls	r6, r0, #24
 800fad6:	f101 0304 	add.w	r3, r1, #4
 800fada:	d50a      	bpl.n	800faf2 <_printf_i+0xce>
 800fadc:	680e      	ldr	r6, [r1, #0]
 800fade:	602b      	str	r3, [r5, #0]
 800fae0:	2e00      	cmp	r6, #0
 800fae2:	da03      	bge.n	800faec <_printf_i+0xc8>
 800fae4:	232d      	movs	r3, #45	; 0x2d
 800fae6:	4276      	negs	r6, r6
 800fae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faec:	485e      	ldr	r0, [pc, #376]	; (800fc68 <_printf_i+0x244>)
 800faee:	230a      	movs	r3, #10
 800faf0:	e019      	b.n	800fb26 <_printf_i+0x102>
 800faf2:	680e      	ldr	r6, [r1, #0]
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fafa:	bf18      	it	ne
 800fafc:	b236      	sxthne	r6, r6
 800fafe:	e7ef      	b.n	800fae0 <_printf_i+0xbc>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	6820      	ldr	r0, [r4, #0]
 800fb04:	1d19      	adds	r1, r3, #4
 800fb06:	6029      	str	r1, [r5, #0]
 800fb08:	0601      	lsls	r1, r0, #24
 800fb0a:	d501      	bpl.n	800fb10 <_printf_i+0xec>
 800fb0c:	681e      	ldr	r6, [r3, #0]
 800fb0e:	e002      	b.n	800fb16 <_printf_i+0xf2>
 800fb10:	0646      	lsls	r6, r0, #25
 800fb12:	d5fb      	bpl.n	800fb0c <_printf_i+0xe8>
 800fb14:	881e      	ldrh	r6, [r3, #0]
 800fb16:	4854      	ldr	r0, [pc, #336]	; (800fc68 <_printf_i+0x244>)
 800fb18:	2f6f      	cmp	r7, #111	; 0x6f
 800fb1a:	bf0c      	ite	eq
 800fb1c:	2308      	moveq	r3, #8
 800fb1e:	230a      	movne	r3, #10
 800fb20:	2100      	movs	r1, #0
 800fb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb26:	6865      	ldr	r5, [r4, #4]
 800fb28:	60a5      	str	r5, [r4, #8]
 800fb2a:	2d00      	cmp	r5, #0
 800fb2c:	bfa2      	ittt	ge
 800fb2e:	6821      	ldrge	r1, [r4, #0]
 800fb30:	f021 0104 	bicge.w	r1, r1, #4
 800fb34:	6021      	strge	r1, [r4, #0]
 800fb36:	b90e      	cbnz	r6, 800fb3c <_printf_i+0x118>
 800fb38:	2d00      	cmp	r5, #0
 800fb3a:	d04d      	beq.n	800fbd8 <_printf_i+0x1b4>
 800fb3c:	4615      	mov	r5, r2
 800fb3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb42:	fb03 6711 	mls	r7, r3, r1, r6
 800fb46:	5dc7      	ldrb	r7, [r0, r7]
 800fb48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb4c:	4637      	mov	r7, r6
 800fb4e:	42bb      	cmp	r3, r7
 800fb50:	460e      	mov	r6, r1
 800fb52:	d9f4      	bls.n	800fb3e <_printf_i+0x11a>
 800fb54:	2b08      	cmp	r3, #8
 800fb56:	d10b      	bne.n	800fb70 <_printf_i+0x14c>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	07de      	lsls	r6, r3, #31
 800fb5c:	d508      	bpl.n	800fb70 <_printf_i+0x14c>
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	6861      	ldr	r1, [r4, #4]
 800fb62:	4299      	cmp	r1, r3
 800fb64:	bfde      	ittt	le
 800fb66:	2330      	movle	r3, #48	; 0x30
 800fb68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb70:	1b52      	subs	r2, r2, r5
 800fb72:	6122      	str	r2, [r4, #16]
 800fb74:	f8cd a000 	str.w	sl, [sp]
 800fb78:	464b      	mov	r3, r9
 800fb7a:	aa03      	add	r2, sp, #12
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	4640      	mov	r0, r8
 800fb80:	f7ff fee2 	bl	800f948 <_printf_common>
 800fb84:	3001      	adds	r0, #1
 800fb86:	d14c      	bne.n	800fc22 <_printf_i+0x1fe>
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8c:	b004      	add	sp, #16
 800fb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb92:	4835      	ldr	r0, [pc, #212]	; (800fc68 <_printf_i+0x244>)
 800fb94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb98:	6829      	ldr	r1, [r5, #0]
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fba0:	6029      	str	r1, [r5, #0]
 800fba2:	061d      	lsls	r5, r3, #24
 800fba4:	d514      	bpl.n	800fbd0 <_printf_i+0x1ac>
 800fba6:	07df      	lsls	r7, r3, #31
 800fba8:	bf44      	itt	mi
 800fbaa:	f043 0320 	orrmi.w	r3, r3, #32
 800fbae:	6023      	strmi	r3, [r4, #0]
 800fbb0:	b91e      	cbnz	r6, 800fbba <_printf_i+0x196>
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	f023 0320 	bic.w	r3, r3, #32
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	2310      	movs	r3, #16
 800fbbc:	e7b0      	b.n	800fb20 <_printf_i+0xfc>
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	f043 0320 	orr.w	r3, r3, #32
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	2378      	movs	r3, #120	; 0x78
 800fbc8:	4828      	ldr	r0, [pc, #160]	; (800fc6c <_printf_i+0x248>)
 800fbca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbce:	e7e3      	b.n	800fb98 <_printf_i+0x174>
 800fbd0:	0659      	lsls	r1, r3, #25
 800fbd2:	bf48      	it	mi
 800fbd4:	b2b6      	uxthmi	r6, r6
 800fbd6:	e7e6      	b.n	800fba6 <_printf_i+0x182>
 800fbd8:	4615      	mov	r5, r2
 800fbda:	e7bb      	b.n	800fb54 <_printf_i+0x130>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	6826      	ldr	r6, [r4, #0]
 800fbe0:	6961      	ldr	r1, [r4, #20]
 800fbe2:	1d18      	adds	r0, r3, #4
 800fbe4:	6028      	str	r0, [r5, #0]
 800fbe6:	0635      	lsls	r5, r6, #24
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	d501      	bpl.n	800fbf0 <_printf_i+0x1cc>
 800fbec:	6019      	str	r1, [r3, #0]
 800fbee:	e002      	b.n	800fbf6 <_printf_i+0x1d2>
 800fbf0:	0670      	lsls	r0, r6, #25
 800fbf2:	d5fb      	bpl.n	800fbec <_printf_i+0x1c8>
 800fbf4:	8019      	strh	r1, [r3, #0]
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	4615      	mov	r5, r2
 800fbfc:	e7ba      	b.n	800fb74 <_printf_i+0x150>
 800fbfe:	682b      	ldr	r3, [r5, #0]
 800fc00:	1d1a      	adds	r2, r3, #4
 800fc02:	602a      	str	r2, [r5, #0]
 800fc04:	681d      	ldr	r5, [r3, #0]
 800fc06:	6862      	ldr	r2, [r4, #4]
 800fc08:	2100      	movs	r1, #0
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	f7f0 fb00 	bl	8000210 <memchr>
 800fc10:	b108      	cbz	r0, 800fc16 <_printf_i+0x1f2>
 800fc12:	1b40      	subs	r0, r0, r5
 800fc14:	6060      	str	r0, [r4, #4]
 800fc16:	6863      	ldr	r3, [r4, #4]
 800fc18:	6123      	str	r3, [r4, #16]
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc20:	e7a8      	b.n	800fb74 <_printf_i+0x150>
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	462a      	mov	r2, r5
 800fc26:	4649      	mov	r1, r9
 800fc28:	4640      	mov	r0, r8
 800fc2a:	47d0      	blx	sl
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d0ab      	beq.n	800fb88 <_printf_i+0x164>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	079b      	lsls	r3, r3, #30
 800fc34:	d413      	bmi.n	800fc5e <_printf_i+0x23a>
 800fc36:	68e0      	ldr	r0, [r4, #12]
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	4298      	cmp	r0, r3
 800fc3c:	bfb8      	it	lt
 800fc3e:	4618      	movlt	r0, r3
 800fc40:	e7a4      	b.n	800fb8c <_printf_i+0x168>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4632      	mov	r2, r6
 800fc46:	4649      	mov	r1, r9
 800fc48:	4640      	mov	r0, r8
 800fc4a:	47d0      	blx	sl
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d09b      	beq.n	800fb88 <_printf_i+0x164>
 800fc50:	3501      	adds	r5, #1
 800fc52:	68e3      	ldr	r3, [r4, #12]
 800fc54:	9903      	ldr	r1, [sp, #12]
 800fc56:	1a5b      	subs	r3, r3, r1
 800fc58:	42ab      	cmp	r3, r5
 800fc5a:	dcf2      	bgt.n	800fc42 <_printf_i+0x21e>
 800fc5c:	e7eb      	b.n	800fc36 <_printf_i+0x212>
 800fc5e:	2500      	movs	r5, #0
 800fc60:	f104 0619 	add.w	r6, r4, #25
 800fc64:	e7f5      	b.n	800fc52 <_printf_i+0x22e>
 800fc66:	bf00      	nop
 800fc68:	08146476 	.word	0x08146476
 800fc6c:	08146487 	.word	0x08146487

0800fc70 <_sbrk_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d06      	ldr	r5, [pc, #24]	; (800fc8c <_sbrk_r+0x1c>)
 800fc74:	2300      	movs	r3, #0
 800fc76:	4604      	mov	r4, r0
 800fc78:	4608      	mov	r0, r1
 800fc7a:	602b      	str	r3, [r5, #0]
 800fc7c:	f7f3 f9f8 	bl	8003070 <_sbrk>
 800fc80:	1c43      	adds	r3, r0, #1
 800fc82:	d102      	bne.n	800fc8a <_sbrk_r+0x1a>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	b103      	cbz	r3, 800fc8a <_sbrk_r+0x1a>
 800fc88:	6023      	str	r3, [r4, #0]
 800fc8a:	bd38      	pop	{r3, r4, r5, pc}
 800fc8c:	20002034 	.word	0x20002034

0800fc90 <siprintf>:
 800fc90:	b40e      	push	{r1, r2, r3}
 800fc92:	b500      	push	{lr}
 800fc94:	b09c      	sub	sp, #112	; 0x70
 800fc96:	ab1d      	add	r3, sp, #116	; 0x74
 800fc98:	9002      	str	r0, [sp, #8]
 800fc9a:	9006      	str	r0, [sp, #24]
 800fc9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fca0:	4809      	ldr	r0, [pc, #36]	; (800fcc8 <siprintf+0x38>)
 800fca2:	9107      	str	r1, [sp, #28]
 800fca4:	9104      	str	r1, [sp, #16]
 800fca6:	4909      	ldr	r1, [pc, #36]	; (800fccc <siprintf+0x3c>)
 800fca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcac:	9105      	str	r1, [sp, #20]
 800fcae:	6800      	ldr	r0, [r0, #0]
 800fcb0:	9301      	str	r3, [sp, #4]
 800fcb2:	a902      	add	r1, sp, #8
 800fcb4:	f001 fb4e 	bl	8011354 <_svfiprintf_r>
 800fcb8:	9b02      	ldr	r3, [sp, #8]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	701a      	strb	r2, [r3, #0]
 800fcbe:	b01c      	add	sp, #112	; 0x70
 800fcc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcc4:	b003      	add	sp, #12
 800fcc6:	4770      	bx	lr
 800fcc8:	20000bac 	.word	0x20000bac
 800fccc:	ffff0208 	.word	0xffff0208

0800fcd0 <strcpy>:
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcd6:	f803 2b01 	strb.w	r2, [r3], #1
 800fcda:	2a00      	cmp	r2, #0
 800fcdc:	d1f9      	bne.n	800fcd2 <strcpy+0x2>
 800fcde:	4770      	bx	lr

0800fce0 <_strtol_l.constprop.0>:
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce6:	d001      	beq.n	800fcec <_strtol_l.constprop.0+0xc>
 800fce8:	2b24      	cmp	r3, #36	; 0x24
 800fcea:	d906      	bls.n	800fcfa <_strtol_l.constprop.0+0x1a>
 800fcec:	f7ff fa2e 	bl	800f14c <__errno>
 800fcf0:	2316      	movs	r3, #22
 800fcf2:	6003      	str	r3, [r0, #0]
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fde0 <_strtol_l.constprop.0+0x100>
 800fcfe:	460d      	mov	r5, r1
 800fd00:	462e      	mov	r6, r5
 800fd02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd06:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fd0a:	f017 0708 	ands.w	r7, r7, #8
 800fd0e:	d1f7      	bne.n	800fd00 <_strtol_l.constprop.0+0x20>
 800fd10:	2c2d      	cmp	r4, #45	; 0x2d
 800fd12:	d132      	bne.n	800fd7a <_strtol_l.constprop.0+0x9a>
 800fd14:	782c      	ldrb	r4, [r5, #0]
 800fd16:	2701      	movs	r7, #1
 800fd18:	1cb5      	adds	r5, r6, #2
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d05b      	beq.n	800fdd6 <_strtol_l.constprop.0+0xf6>
 800fd1e:	2b10      	cmp	r3, #16
 800fd20:	d109      	bne.n	800fd36 <_strtol_l.constprop.0+0x56>
 800fd22:	2c30      	cmp	r4, #48	; 0x30
 800fd24:	d107      	bne.n	800fd36 <_strtol_l.constprop.0+0x56>
 800fd26:	782c      	ldrb	r4, [r5, #0]
 800fd28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd2c:	2c58      	cmp	r4, #88	; 0x58
 800fd2e:	d14d      	bne.n	800fdcc <_strtol_l.constprop.0+0xec>
 800fd30:	786c      	ldrb	r4, [r5, #1]
 800fd32:	2310      	movs	r3, #16
 800fd34:	3502      	adds	r5, #2
 800fd36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd3e:	f04f 0c00 	mov.w	ip, #0
 800fd42:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd46:	4666      	mov	r6, ip
 800fd48:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd50:	f1be 0f09 	cmp.w	lr, #9
 800fd54:	d816      	bhi.n	800fd84 <_strtol_l.constprop.0+0xa4>
 800fd56:	4674      	mov	r4, lr
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	dd24      	ble.n	800fda6 <_strtol_l.constprop.0+0xc6>
 800fd5c:	f1bc 0f00 	cmp.w	ip, #0
 800fd60:	db1e      	blt.n	800fda0 <_strtol_l.constprop.0+0xc0>
 800fd62:	45b1      	cmp	r9, r6
 800fd64:	d31c      	bcc.n	800fda0 <_strtol_l.constprop.0+0xc0>
 800fd66:	d101      	bne.n	800fd6c <_strtol_l.constprop.0+0x8c>
 800fd68:	45a2      	cmp	sl, r4
 800fd6a:	db19      	blt.n	800fda0 <_strtol_l.constprop.0+0xc0>
 800fd6c:	fb06 4603 	mla	r6, r6, r3, r4
 800fd70:	f04f 0c01 	mov.w	ip, #1
 800fd74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd78:	e7e8      	b.n	800fd4c <_strtol_l.constprop.0+0x6c>
 800fd7a:	2c2b      	cmp	r4, #43	; 0x2b
 800fd7c:	bf04      	itt	eq
 800fd7e:	782c      	ldrbeq	r4, [r5, #0]
 800fd80:	1cb5      	addeq	r5, r6, #2
 800fd82:	e7ca      	b.n	800fd1a <_strtol_l.constprop.0+0x3a>
 800fd84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd88:	f1be 0f19 	cmp.w	lr, #25
 800fd8c:	d801      	bhi.n	800fd92 <_strtol_l.constprop.0+0xb2>
 800fd8e:	3c37      	subs	r4, #55	; 0x37
 800fd90:	e7e2      	b.n	800fd58 <_strtol_l.constprop.0+0x78>
 800fd92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd96:	f1be 0f19 	cmp.w	lr, #25
 800fd9a:	d804      	bhi.n	800fda6 <_strtol_l.constprop.0+0xc6>
 800fd9c:	3c57      	subs	r4, #87	; 0x57
 800fd9e:	e7db      	b.n	800fd58 <_strtol_l.constprop.0+0x78>
 800fda0:	f04f 3cff 	mov.w	ip, #4294967295
 800fda4:	e7e6      	b.n	800fd74 <_strtol_l.constprop.0+0x94>
 800fda6:	f1bc 0f00 	cmp.w	ip, #0
 800fdaa:	da05      	bge.n	800fdb8 <_strtol_l.constprop.0+0xd8>
 800fdac:	2322      	movs	r3, #34	; 0x22
 800fdae:	6003      	str	r3, [r0, #0]
 800fdb0:	4646      	mov	r6, r8
 800fdb2:	b942      	cbnz	r2, 800fdc6 <_strtol_l.constprop.0+0xe6>
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	e79e      	b.n	800fcf6 <_strtol_l.constprop.0+0x16>
 800fdb8:	b107      	cbz	r7, 800fdbc <_strtol_l.constprop.0+0xdc>
 800fdba:	4276      	negs	r6, r6
 800fdbc:	2a00      	cmp	r2, #0
 800fdbe:	d0f9      	beq.n	800fdb4 <_strtol_l.constprop.0+0xd4>
 800fdc0:	f1bc 0f00 	cmp.w	ip, #0
 800fdc4:	d000      	beq.n	800fdc8 <_strtol_l.constprop.0+0xe8>
 800fdc6:	1e69      	subs	r1, r5, #1
 800fdc8:	6011      	str	r1, [r2, #0]
 800fdca:	e7f3      	b.n	800fdb4 <_strtol_l.constprop.0+0xd4>
 800fdcc:	2430      	movs	r4, #48	; 0x30
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1b1      	bne.n	800fd36 <_strtol_l.constprop.0+0x56>
 800fdd2:	2308      	movs	r3, #8
 800fdd4:	e7af      	b.n	800fd36 <_strtol_l.constprop.0+0x56>
 800fdd6:	2c30      	cmp	r4, #48	; 0x30
 800fdd8:	d0a5      	beq.n	800fd26 <_strtol_l.constprop.0+0x46>
 800fdda:	230a      	movs	r3, #10
 800fddc:	e7ab      	b.n	800fd36 <_strtol_l.constprop.0+0x56>
 800fdde:	bf00      	nop
 800fde0:	08146499 	.word	0x08146499

0800fde4 <strtol>:
 800fde4:	4613      	mov	r3, r2
 800fde6:	460a      	mov	r2, r1
 800fde8:	4601      	mov	r1, r0
 800fdea:	4802      	ldr	r0, [pc, #8]	; (800fdf4 <strtol+0x10>)
 800fdec:	6800      	ldr	r0, [r0, #0]
 800fdee:	f7ff bf77 	b.w	800fce0 <_strtol_l.constprop.0>
 800fdf2:	bf00      	nop
 800fdf4:	20000bac 	.word	0x20000bac

0800fdf8 <quorem>:
 800fdf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	6903      	ldr	r3, [r0, #16]
 800fdfe:	690c      	ldr	r4, [r1, #16]
 800fe00:	42a3      	cmp	r3, r4
 800fe02:	4607      	mov	r7, r0
 800fe04:	f2c0 8081 	blt.w	800ff0a <quorem+0x112>
 800fe08:	3c01      	subs	r4, #1
 800fe0a:	f101 0814 	add.w	r8, r1, #20
 800fe0e:	f100 0514 	add.w	r5, r0, #20
 800fe12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe20:	3301      	adds	r3, #1
 800fe22:	429a      	cmp	r2, r3
 800fe24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe30:	d331      	bcc.n	800fe96 <quorem+0x9e>
 800fe32:	f04f 0e00 	mov.w	lr, #0
 800fe36:	4640      	mov	r0, r8
 800fe38:	46ac      	mov	ip, r5
 800fe3a:	46f2      	mov	sl, lr
 800fe3c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe40:	b293      	uxth	r3, r2
 800fe42:	fb06 e303 	mla	r3, r6, r3, lr
 800fe46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	ebaa 0303 	sub.w	r3, sl, r3
 800fe50:	f8dc a000 	ldr.w	sl, [ip]
 800fe54:	0c12      	lsrs	r2, r2, #16
 800fe56:	fa13 f38a 	uxtah	r3, r3, sl
 800fe5a:	fb06 e202 	mla	r2, r6, r2, lr
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	9b00      	ldr	r3, [sp, #0]
 800fe62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe66:	b292      	uxth	r2, r2
 800fe68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe70:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe74:	4581      	cmp	r9, r0
 800fe76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe7a:	f84c 3b04 	str.w	r3, [ip], #4
 800fe7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe82:	d2db      	bcs.n	800fe3c <quorem+0x44>
 800fe84:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe88:	b92b      	cbnz	r3, 800fe96 <quorem+0x9e>
 800fe8a:	9b01      	ldr	r3, [sp, #4]
 800fe8c:	3b04      	subs	r3, #4
 800fe8e:	429d      	cmp	r5, r3
 800fe90:	461a      	mov	r2, r3
 800fe92:	d32e      	bcc.n	800fef2 <quorem+0xfa>
 800fe94:	613c      	str	r4, [r7, #16]
 800fe96:	4638      	mov	r0, r7
 800fe98:	f001 f8ba 	bl	8011010 <__mcmp>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	db24      	blt.n	800feea <quorem+0xf2>
 800fea0:	3601      	adds	r6, #1
 800fea2:	4628      	mov	r0, r5
 800fea4:	f04f 0c00 	mov.w	ip, #0
 800fea8:	f858 2b04 	ldr.w	r2, [r8], #4
 800feac:	f8d0 e000 	ldr.w	lr, [r0]
 800feb0:	b293      	uxth	r3, r2
 800feb2:	ebac 0303 	sub.w	r3, ip, r3
 800feb6:	0c12      	lsrs	r2, r2, #16
 800feb8:	fa13 f38e 	uxtah	r3, r3, lr
 800febc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800feca:	45c1      	cmp	r9, r8
 800fecc:	f840 3b04 	str.w	r3, [r0], #4
 800fed0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fed4:	d2e8      	bcs.n	800fea8 <quorem+0xb0>
 800fed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800feda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fede:	b922      	cbnz	r2, 800feea <quorem+0xf2>
 800fee0:	3b04      	subs	r3, #4
 800fee2:	429d      	cmp	r5, r3
 800fee4:	461a      	mov	r2, r3
 800fee6:	d30a      	bcc.n	800fefe <quorem+0x106>
 800fee8:	613c      	str	r4, [r7, #16]
 800feea:	4630      	mov	r0, r6
 800feec:	b003      	add	sp, #12
 800feee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef2:	6812      	ldr	r2, [r2, #0]
 800fef4:	3b04      	subs	r3, #4
 800fef6:	2a00      	cmp	r2, #0
 800fef8:	d1cc      	bne.n	800fe94 <quorem+0x9c>
 800fefa:	3c01      	subs	r4, #1
 800fefc:	e7c7      	b.n	800fe8e <quorem+0x96>
 800fefe:	6812      	ldr	r2, [r2, #0]
 800ff00:	3b04      	subs	r3, #4
 800ff02:	2a00      	cmp	r2, #0
 800ff04:	d1f0      	bne.n	800fee8 <quorem+0xf0>
 800ff06:	3c01      	subs	r4, #1
 800ff08:	e7eb      	b.n	800fee2 <quorem+0xea>
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	e7ee      	b.n	800feec <quorem+0xf4>
	...

0800ff10 <_dtoa_r>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	ed2d 8b04 	vpush	{d8-d9}
 800ff18:	ec57 6b10 	vmov	r6, r7, d0
 800ff1c:	b093      	sub	sp, #76	; 0x4c
 800ff1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ff24:	9106      	str	r1, [sp, #24]
 800ff26:	ee10 aa10 	vmov	sl, s0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ff2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ff30:	46bb      	mov	fp, r7
 800ff32:	b975      	cbnz	r5, 800ff52 <_dtoa_r+0x42>
 800ff34:	2010      	movs	r0, #16
 800ff36:	f7ff f933 	bl	800f1a0 <malloc>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	6260      	str	r0, [r4, #36]	; 0x24
 800ff3e:	b920      	cbnz	r0, 800ff4a <_dtoa_r+0x3a>
 800ff40:	4ba7      	ldr	r3, [pc, #668]	; (80101e0 <_dtoa_r+0x2d0>)
 800ff42:	21ea      	movs	r1, #234	; 0xea
 800ff44:	48a7      	ldr	r0, [pc, #668]	; (80101e4 <_dtoa_r+0x2d4>)
 800ff46:	f001 fb05 	bl	8011554 <__assert_func>
 800ff4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff4e:	6005      	str	r5, [r0, #0]
 800ff50:	60c5      	str	r5, [r0, #12]
 800ff52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff54:	6819      	ldr	r1, [r3, #0]
 800ff56:	b151      	cbz	r1, 800ff6e <_dtoa_r+0x5e>
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	604a      	str	r2, [r1, #4]
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	4093      	lsls	r3, r2
 800ff60:	608b      	str	r3, [r1, #8]
 800ff62:	4620      	mov	r0, r4
 800ff64:	f000 fe12 	bl	8010b8c <_Bfree>
 800ff68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	1e3b      	subs	r3, r7, #0
 800ff70:	bfaa      	itet	ge
 800ff72:	2300      	movge	r3, #0
 800ff74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ff78:	f8c8 3000 	strge.w	r3, [r8]
 800ff7c:	4b9a      	ldr	r3, [pc, #616]	; (80101e8 <_dtoa_r+0x2d8>)
 800ff7e:	bfbc      	itt	lt
 800ff80:	2201      	movlt	r2, #1
 800ff82:	f8c8 2000 	strlt.w	r2, [r8]
 800ff86:	ea33 030b 	bics.w	r3, r3, fp
 800ff8a:	d11b      	bne.n	800ffc4 <_dtoa_r+0xb4>
 800ff8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff98:	4333      	orrs	r3, r6
 800ff9a:	f000 8592 	beq.w	8010ac2 <_dtoa_r+0xbb2>
 800ff9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffa0:	b963      	cbnz	r3, 800ffbc <_dtoa_r+0xac>
 800ffa2:	4b92      	ldr	r3, [pc, #584]	; (80101ec <_dtoa_r+0x2dc>)
 800ffa4:	e022      	b.n	800ffec <_dtoa_r+0xdc>
 800ffa6:	4b92      	ldr	r3, [pc, #584]	; (80101f0 <_dtoa_r+0x2e0>)
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	3308      	adds	r3, #8
 800ffac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	9801      	ldr	r0, [sp, #4]
 800ffb2:	b013      	add	sp, #76	; 0x4c
 800ffb4:	ecbd 8b04 	vpop	{d8-d9}
 800ffb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbc:	4b8b      	ldr	r3, [pc, #556]	; (80101ec <_dtoa_r+0x2dc>)
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	3303      	adds	r3, #3
 800ffc2:	e7f3      	b.n	800ffac <_dtoa_r+0x9c>
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	4650      	mov	r0, sl
 800ffca:	4659      	mov	r1, fp
 800ffcc:	f7f0 fd94 	bl	8000af8 <__aeabi_dcmpeq>
 800ffd0:	ec4b ab19 	vmov	d9, sl, fp
 800ffd4:	4680      	mov	r8, r0
 800ffd6:	b158      	cbz	r0, 800fff0 <_dtoa_r+0xe0>
 800ffd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffda:	2301      	movs	r3, #1
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f000 856b 	beq.w	8010abc <_dtoa_r+0xbac>
 800ffe6:	4883      	ldr	r0, [pc, #524]	; (80101f4 <_dtoa_r+0x2e4>)
 800ffe8:	6018      	str	r0, [r3, #0]
 800ffea:	1e43      	subs	r3, r0, #1
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	e7df      	b.n	800ffb0 <_dtoa_r+0xa0>
 800fff0:	ec4b ab10 	vmov	d0, sl, fp
 800fff4:	aa10      	add	r2, sp, #64	; 0x40
 800fff6:	a911      	add	r1, sp, #68	; 0x44
 800fff8:	4620      	mov	r0, r4
 800fffa:	f001 f8af 	bl	801115c <__d2b>
 800fffe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010002:	ee08 0a10 	vmov	s16, r0
 8010006:	2d00      	cmp	r5, #0
 8010008:	f000 8084 	beq.w	8010114 <_dtoa_r+0x204>
 801000c:	ee19 3a90 	vmov	r3, s19
 8010010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010014:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010018:	4656      	mov	r6, sl
 801001a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801001e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010022:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010026:	4b74      	ldr	r3, [pc, #464]	; (80101f8 <_dtoa_r+0x2e8>)
 8010028:	2200      	movs	r2, #0
 801002a:	4630      	mov	r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	f7f0 f943 	bl	80002b8 <__aeabi_dsub>
 8010032:	a365      	add	r3, pc, #404	; (adr r3, 80101c8 <_dtoa_r+0x2b8>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f7f0 faf6 	bl	8000628 <__aeabi_dmul>
 801003c:	a364      	add	r3, pc, #400	; (adr r3, 80101d0 <_dtoa_r+0x2c0>)
 801003e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010042:	f7f0 f93b 	bl	80002bc <__adddf3>
 8010046:	4606      	mov	r6, r0
 8010048:	4628      	mov	r0, r5
 801004a:	460f      	mov	r7, r1
 801004c:	f7f0 fa82 	bl	8000554 <__aeabi_i2d>
 8010050:	a361      	add	r3, pc, #388	; (adr r3, 80101d8 <_dtoa_r+0x2c8>)
 8010052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010056:	f7f0 fae7 	bl	8000628 <__aeabi_dmul>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4630      	mov	r0, r6
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 f92b 	bl	80002bc <__adddf3>
 8010066:	4606      	mov	r6, r0
 8010068:	460f      	mov	r7, r1
 801006a:	f7f0 fd8d 	bl	8000b88 <__aeabi_d2iz>
 801006e:	2200      	movs	r2, #0
 8010070:	9000      	str	r0, [sp, #0]
 8010072:	2300      	movs	r3, #0
 8010074:	4630      	mov	r0, r6
 8010076:	4639      	mov	r1, r7
 8010078:	f7f0 fd48 	bl	8000b0c <__aeabi_dcmplt>
 801007c:	b150      	cbz	r0, 8010094 <_dtoa_r+0x184>
 801007e:	9800      	ldr	r0, [sp, #0]
 8010080:	f7f0 fa68 	bl	8000554 <__aeabi_i2d>
 8010084:	4632      	mov	r2, r6
 8010086:	463b      	mov	r3, r7
 8010088:	f7f0 fd36 	bl	8000af8 <__aeabi_dcmpeq>
 801008c:	b910      	cbnz	r0, 8010094 <_dtoa_r+0x184>
 801008e:	9b00      	ldr	r3, [sp, #0]
 8010090:	3b01      	subs	r3, #1
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	2b16      	cmp	r3, #22
 8010098:	d85a      	bhi.n	8010150 <_dtoa_r+0x240>
 801009a:	9a00      	ldr	r2, [sp, #0]
 801009c:	4b57      	ldr	r3, [pc, #348]	; (80101fc <_dtoa_r+0x2ec>)
 801009e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a6:	ec51 0b19 	vmov	r0, r1, d9
 80100aa:	f7f0 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d050      	beq.n	8010154 <_dtoa_r+0x244>
 80100b2:	9b00      	ldr	r3, [sp, #0]
 80100b4:	3b01      	subs	r3, #1
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	2300      	movs	r3, #0
 80100ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80100bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100be:	1b5d      	subs	r5, r3, r5
 80100c0:	1e6b      	subs	r3, r5, #1
 80100c2:	9305      	str	r3, [sp, #20]
 80100c4:	bf45      	ittet	mi
 80100c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80100ca:	9304      	strmi	r3, [sp, #16]
 80100cc:	2300      	movpl	r3, #0
 80100ce:	2300      	movmi	r3, #0
 80100d0:	bf4c      	ite	mi
 80100d2:	9305      	strmi	r3, [sp, #20]
 80100d4:	9304      	strpl	r3, [sp, #16]
 80100d6:	9b00      	ldr	r3, [sp, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	db3d      	blt.n	8010158 <_dtoa_r+0x248>
 80100dc:	9b05      	ldr	r3, [sp, #20]
 80100de:	9a00      	ldr	r2, [sp, #0]
 80100e0:	920a      	str	r2, [sp, #40]	; 0x28
 80100e2:	4413      	add	r3, r2
 80100e4:	9305      	str	r3, [sp, #20]
 80100e6:	2300      	movs	r3, #0
 80100e8:	9307      	str	r3, [sp, #28]
 80100ea:	9b06      	ldr	r3, [sp, #24]
 80100ec:	2b09      	cmp	r3, #9
 80100ee:	f200 8089 	bhi.w	8010204 <_dtoa_r+0x2f4>
 80100f2:	2b05      	cmp	r3, #5
 80100f4:	bfc4      	itt	gt
 80100f6:	3b04      	subgt	r3, #4
 80100f8:	9306      	strgt	r3, [sp, #24]
 80100fa:	9b06      	ldr	r3, [sp, #24]
 80100fc:	f1a3 0302 	sub.w	r3, r3, #2
 8010100:	bfcc      	ite	gt
 8010102:	2500      	movgt	r5, #0
 8010104:	2501      	movle	r5, #1
 8010106:	2b03      	cmp	r3, #3
 8010108:	f200 8087 	bhi.w	801021a <_dtoa_r+0x30a>
 801010c:	e8df f003 	tbb	[pc, r3]
 8010110:	59383a2d 	.word	0x59383a2d
 8010114:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010118:	441d      	add	r5, r3
 801011a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801011e:	2b20      	cmp	r3, #32
 8010120:	bfc1      	itttt	gt
 8010122:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010126:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801012a:	fa0b f303 	lslgt.w	r3, fp, r3
 801012e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010132:	bfda      	itte	le
 8010134:	f1c3 0320 	rsble	r3, r3, #32
 8010138:	fa06 f003 	lslle.w	r0, r6, r3
 801013c:	4318      	orrgt	r0, r3
 801013e:	f7f0 f9f9 	bl	8000534 <__aeabi_ui2d>
 8010142:	2301      	movs	r3, #1
 8010144:	4606      	mov	r6, r0
 8010146:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801014a:	3d01      	subs	r5, #1
 801014c:	930e      	str	r3, [sp, #56]	; 0x38
 801014e:	e76a      	b.n	8010026 <_dtoa_r+0x116>
 8010150:	2301      	movs	r3, #1
 8010152:	e7b2      	b.n	80100ba <_dtoa_r+0x1aa>
 8010154:	900b      	str	r0, [sp, #44]	; 0x2c
 8010156:	e7b1      	b.n	80100bc <_dtoa_r+0x1ac>
 8010158:	9b04      	ldr	r3, [sp, #16]
 801015a:	9a00      	ldr	r2, [sp, #0]
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	9304      	str	r3, [sp, #16]
 8010160:	4253      	negs	r3, r2
 8010162:	9307      	str	r3, [sp, #28]
 8010164:	2300      	movs	r3, #0
 8010166:	930a      	str	r3, [sp, #40]	; 0x28
 8010168:	e7bf      	b.n	80100ea <_dtoa_r+0x1da>
 801016a:	2300      	movs	r3, #0
 801016c:	9308      	str	r3, [sp, #32]
 801016e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	dc55      	bgt.n	8010220 <_dtoa_r+0x310>
 8010174:	2301      	movs	r3, #1
 8010176:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801017a:	461a      	mov	r2, r3
 801017c:	9209      	str	r2, [sp, #36]	; 0x24
 801017e:	e00c      	b.n	801019a <_dtoa_r+0x28a>
 8010180:	2301      	movs	r3, #1
 8010182:	e7f3      	b.n	801016c <_dtoa_r+0x25c>
 8010184:	2300      	movs	r3, #0
 8010186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010188:	9308      	str	r3, [sp, #32]
 801018a:	9b00      	ldr	r3, [sp, #0]
 801018c:	4413      	add	r3, r2
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	3301      	adds	r3, #1
 8010192:	2b01      	cmp	r3, #1
 8010194:	9303      	str	r3, [sp, #12]
 8010196:	bfb8      	it	lt
 8010198:	2301      	movlt	r3, #1
 801019a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801019c:	2200      	movs	r2, #0
 801019e:	6042      	str	r2, [r0, #4]
 80101a0:	2204      	movs	r2, #4
 80101a2:	f102 0614 	add.w	r6, r2, #20
 80101a6:	429e      	cmp	r6, r3
 80101a8:	6841      	ldr	r1, [r0, #4]
 80101aa:	d93d      	bls.n	8010228 <_dtoa_r+0x318>
 80101ac:	4620      	mov	r0, r4
 80101ae:	f000 fcad 	bl	8010b0c <_Balloc>
 80101b2:	9001      	str	r0, [sp, #4]
 80101b4:	2800      	cmp	r0, #0
 80101b6:	d13b      	bne.n	8010230 <_dtoa_r+0x320>
 80101b8:	4b11      	ldr	r3, [pc, #68]	; (8010200 <_dtoa_r+0x2f0>)
 80101ba:	4602      	mov	r2, r0
 80101bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80101c0:	e6c0      	b.n	800ff44 <_dtoa_r+0x34>
 80101c2:	2301      	movs	r3, #1
 80101c4:	e7df      	b.n	8010186 <_dtoa_r+0x276>
 80101c6:	bf00      	nop
 80101c8:	636f4361 	.word	0x636f4361
 80101cc:	3fd287a7 	.word	0x3fd287a7
 80101d0:	8b60c8b3 	.word	0x8b60c8b3
 80101d4:	3fc68a28 	.word	0x3fc68a28
 80101d8:	509f79fb 	.word	0x509f79fb
 80101dc:	3fd34413 	.word	0x3fd34413
 80101e0:	081465a6 	.word	0x081465a6
 80101e4:	081465bd 	.word	0x081465bd
 80101e8:	7ff00000 	.word	0x7ff00000
 80101ec:	081465a2 	.word	0x081465a2
 80101f0:	08146599 	.word	0x08146599
 80101f4:	08146475 	.word	0x08146475
 80101f8:	3ff80000 	.word	0x3ff80000
 80101fc:	081466b0 	.word	0x081466b0
 8010200:	08146618 	.word	0x08146618
 8010204:	2501      	movs	r5, #1
 8010206:	2300      	movs	r3, #0
 8010208:	9306      	str	r3, [sp, #24]
 801020a:	9508      	str	r5, [sp, #32]
 801020c:	f04f 33ff 	mov.w	r3, #4294967295
 8010210:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010214:	2200      	movs	r2, #0
 8010216:	2312      	movs	r3, #18
 8010218:	e7b0      	b.n	801017c <_dtoa_r+0x26c>
 801021a:	2301      	movs	r3, #1
 801021c:	9308      	str	r3, [sp, #32]
 801021e:	e7f5      	b.n	801020c <_dtoa_r+0x2fc>
 8010220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010222:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010226:	e7b8      	b.n	801019a <_dtoa_r+0x28a>
 8010228:	3101      	adds	r1, #1
 801022a:	6041      	str	r1, [r0, #4]
 801022c:	0052      	lsls	r2, r2, #1
 801022e:	e7b8      	b.n	80101a2 <_dtoa_r+0x292>
 8010230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010232:	9a01      	ldr	r2, [sp, #4]
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	9b03      	ldr	r3, [sp, #12]
 8010238:	2b0e      	cmp	r3, #14
 801023a:	f200 809d 	bhi.w	8010378 <_dtoa_r+0x468>
 801023e:	2d00      	cmp	r5, #0
 8010240:	f000 809a 	beq.w	8010378 <_dtoa_r+0x468>
 8010244:	9b00      	ldr	r3, [sp, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	dd32      	ble.n	80102b0 <_dtoa_r+0x3a0>
 801024a:	4ab7      	ldr	r2, [pc, #732]	; (8010528 <_dtoa_r+0x618>)
 801024c:	f003 030f 	and.w	r3, r3, #15
 8010250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010258:	9b00      	ldr	r3, [sp, #0]
 801025a:	05d8      	lsls	r0, r3, #23
 801025c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010260:	d516      	bpl.n	8010290 <_dtoa_r+0x380>
 8010262:	4bb2      	ldr	r3, [pc, #712]	; (801052c <_dtoa_r+0x61c>)
 8010264:	ec51 0b19 	vmov	r0, r1, d9
 8010268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801026c:	f7f0 fb06 	bl	800087c <__aeabi_ddiv>
 8010270:	f007 070f 	and.w	r7, r7, #15
 8010274:	4682      	mov	sl, r0
 8010276:	468b      	mov	fp, r1
 8010278:	2503      	movs	r5, #3
 801027a:	4eac      	ldr	r6, [pc, #688]	; (801052c <_dtoa_r+0x61c>)
 801027c:	b957      	cbnz	r7, 8010294 <_dtoa_r+0x384>
 801027e:	4642      	mov	r2, r8
 8010280:	464b      	mov	r3, r9
 8010282:	4650      	mov	r0, sl
 8010284:	4659      	mov	r1, fp
 8010286:	f7f0 faf9 	bl	800087c <__aeabi_ddiv>
 801028a:	4682      	mov	sl, r0
 801028c:	468b      	mov	fp, r1
 801028e:	e028      	b.n	80102e2 <_dtoa_r+0x3d2>
 8010290:	2502      	movs	r5, #2
 8010292:	e7f2      	b.n	801027a <_dtoa_r+0x36a>
 8010294:	07f9      	lsls	r1, r7, #31
 8010296:	d508      	bpl.n	80102aa <_dtoa_r+0x39a>
 8010298:	4640      	mov	r0, r8
 801029a:	4649      	mov	r1, r9
 801029c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102a0:	f7f0 f9c2 	bl	8000628 <__aeabi_dmul>
 80102a4:	3501      	adds	r5, #1
 80102a6:	4680      	mov	r8, r0
 80102a8:	4689      	mov	r9, r1
 80102aa:	107f      	asrs	r7, r7, #1
 80102ac:	3608      	adds	r6, #8
 80102ae:	e7e5      	b.n	801027c <_dtoa_r+0x36c>
 80102b0:	f000 809b 	beq.w	80103ea <_dtoa_r+0x4da>
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	4f9d      	ldr	r7, [pc, #628]	; (801052c <_dtoa_r+0x61c>)
 80102b8:	425e      	negs	r6, r3
 80102ba:	4b9b      	ldr	r3, [pc, #620]	; (8010528 <_dtoa_r+0x618>)
 80102bc:	f006 020f 	and.w	r2, r6, #15
 80102c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	ec51 0b19 	vmov	r0, r1, d9
 80102cc:	f7f0 f9ac 	bl	8000628 <__aeabi_dmul>
 80102d0:	1136      	asrs	r6, r6, #4
 80102d2:	4682      	mov	sl, r0
 80102d4:	468b      	mov	fp, r1
 80102d6:	2300      	movs	r3, #0
 80102d8:	2502      	movs	r5, #2
 80102da:	2e00      	cmp	r6, #0
 80102dc:	d17a      	bne.n	80103d4 <_dtoa_r+0x4c4>
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1d3      	bne.n	801028a <_dtoa_r+0x37a>
 80102e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 8082 	beq.w	80103ee <_dtoa_r+0x4de>
 80102ea:	4b91      	ldr	r3, [pc, #580]	; (8010530 <_dtoa_r+0x620>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	4650      	mov	r0, sl
 80102f0:	4659      	mov	r1, fp
 80102f2:	f7f0 fc0b 	bl	8000b0c <__aeabi_dcmplt>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d079      	beq.n	80103ee <_dtoa_r+0x4de>
 80102fa:	9b03      	ldr	r3, [sp, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d076      	beq.n	80103ee <_dtoa_r+0x4de>
 8010300:	9b02      	ldr	r3, [sp, #8]
 8010302:	2b00      	cmp	r3, #0
 8010304:	dd36      	ble.n	8010374 <_dtoa_r+0x464>
 8010306:	9b00      	ldr	r3, [sp, #0]
 8010308:	4650      	mov	r0, sl
 801030a:	4659      	mov	r1, fp
 801030c:	1e5f      	subs	r7, r3, #1
 801030e:	2200      	movs	r2, #0
 8010310:	4b88      	ldr	r3, [pc, #544]	; (8010534 <_dtoa_r+0x624>)
 8010312:	f7f0 f989 	bl	8000628 <__aeabi_dmul>
 8010316:	9e02      	ldr	r6, [sp, #8]
 8010318:	4682      	mov	sl, r0
 801031a:	468b      	mov	fp, r1
 801031c:	3501      	adds	r5, #1
 801031e:	4628      	mov	r0, r5
 8010320:	f7f0 f918 	bl	8000554 <__aeabi_i2d>
 8010324:	4652      	mov	r2, sl
 8010326:	465b      	mov	r3, fp
 8010328:	f7f0 f97e 	bl	8000628 <__aeabi_dmul>
 801032c:	4b82      	ldr	r3, [pc, #520]	; (8010538 <_dtoa_r+0x628>)
 801032e:	2200      	movs	r2, #0
 8010330:	f7ef ffc4 	bl	80002bc <__adddf3>
 8010334:	46d0      	mov	r8, sl
 8010336:	46d9      	mov	r9, fp
 8010338:	4682      	mov	sl, r0
 801033a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801033e:	2e00      	cmp	r6, #0
 8010340:	d158      	bne.n	80103f4 <_dtoa_r+0x4e4>
 8010342:	4b7e      	ldr	r3, [pc, #504]	; (801053c <_dtoa_r+0x62c>)
 8010344:	2200      	movs	r2, #0
 8010346:	4640      	mov	r0, r8
 8010348:	4649      	mov	r1, r9
 801034a:	f7ef ffb5 	bl	80002b8 <__aeabi_dsub>
 801034e:	4652      	mov	r2, sl
 8010350:	465b      	mov	r3, fp
 8010352:	4680      	mov	r8, r0
 8010354:	4689      	mov	r9, r1
 8010356:	f7f0 fbf7 	bl	8000b48 <__aeabi_dcmpgt>
 801035a:	2800      	cmp	r0, #0
 801035c:	f040 8295 	bne.w	801088a <_dtoa_r+0x97a>
 8010360:	4652      	mov	r2, sl
 8010362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010366:	4640      	mov	r0, r8
 8010368:	4649      	mov	r1, r9
 801036a:	f7f0 fbcf 	bl	8000b0c <__aeabi_dcmplt>
 801036e:	2800      	cmp	r0, #0
 8010370:	f040 8289 	bne.w	8010886 <_dtoa_r+0x976>
 8010374:	ec5b ab19 	vmov	sl, fp, d9
 8010378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801037a:	2b00      	cmp	r3, #0
 801037c:	f2c0 8148 	blt.w	8010610 <_dtoa_r+0x700>
 8010380:	9a00      	ldr	r2, [sp, #0]
 8010382:	2a0e      	cmp	r2, #14
 8010384:	f300 8144 	bgt.w	8010610 <_dtoa_r+0x700>
 8010388:	4b67      	ldr	r3, [pc, #412]	; (8010528 <_dtoa_r+0x618>)
 801038a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801038e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010394:	2b00      	cmp	r3, #0
 8010396:	f280 80d5 	bge.w	8010544 <_dtoa_r+0x634>
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	f300 80d1 	bgt.w	8010544 <_dtoa_r+0x634>
 80103a2:	f040 826f 	bne.w	8010884 <_dtoa_r+0x974>
 80103a6:	4b65      	ldr	r3, [pc, #404]	; (801053c <_dtoa_r+0x62c>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7f0 f93b 	bl	8000628 <__aeabi_dmul>
 80103b2:	4652      	mov	r2, sl
 80103b4:	465b      	mov	r3, fp
 80103b6:	f7f0 fbbd 	bl	8000b34 <__aeabi_dcmpge>
 80103ba:	9e03      	ldr	r6, [sp, #12]
 80103bc:	4637      	mov	r7, r6
 80103be:	2800      	cmp	r0, #0
 80103c0:	f040 8245 	bne.w	801084e <_dtoa_r+0x93e>
 80103c4:	9d01      	ldr	r5, [sp, #4]
 80103c6:	2331      	movs	r3, #49	; 0x31
 80103c8:	f805 3b01 	strb.w	r3, [r5], #1
 80103cc:	9b00      	ldr	r3, [sp, #0]
 80103ce:	3301      	adds	r3, #1
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	e240      	b.n	8010856 <_dtoa_r+0x946>
 80103d4:	07f2      	lsls	r2, r6, #31
 80103d6:	d505      	bpl.n	80103e4 <_dtoa_r+0x4d4>
 80103d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103dc:	f7f0 f924 	bl	8000628 <__aeabi_dmul>
 80103e0:	3501      	adds	r5, #1
 80103e2:	2301      	movs	r3, #1
 80103e4:	1076      	asrs	r6, r6, #1
 80103e6:	3708      	adds	r7, #8
 80103e8:	e777      	b.n	80102da <_dtoa_r+0x3ca>
 80103ea:	2502      	movs	r5, #2
 80103ec:	e779      	b.n	80102e2 <_dtoa_r+0x3d2>
 80103ee:	9f00      	ldr	r7, [sp, #0]
 80103f0:	9e03      	ldr	r6, [sp, #12]
 80103f2:	e794      	b.n	801031e <_dtoa_r+0x40e>
 80103f4:	9901      	ldr	r1, [sp, #4]
 80103f6:	4b4c      	ldr	r3, [pc, #304]	; (8010528 <_dtoa_r+0x618>)
 80103f8:	4431      	add	r1, r6
 80103fa:	910d      	str	r1, [sp, #52]	; 0x34
 80103fc:	9908      	ldr	r1, [sp, #32]
 80103fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010402:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010406:	2900      	cmp	r1, #0
 8010408:	d043      	beq.n	8010492 <_dtoa_r+0x582>
 801040a:	494d      	ldr	r1, [pc, #308]	; (8010540 <_dtoa_r+0x630>)
 801040c:	2000      	movs	r0, #0
 801040e:	f7f0 fa35 	bl	800087c <__aeabi_ddiv>
 8010412:	4652      	mov	r2, sl
 8010414:	465b      	mov	r3, fp
 8010416:	f7ef ff4f 	bl	80002b8 <__aeabi_dsub>
 801041a:	9d01      	ldr	r5, [sp, #4]
 801041c:	4682      	mov	sl, r0
 801041e:	468b      	mov	fp, r1
 8010420:	4649      	mov	r1, r9
 8010422:	4640      	mov	r0, r8
 8010424:	f7f0 fbb0 	bl	8000b88 <__aeabi_d2iz>
 8010428:	4606      	mov	r6, r0
 801042a:	f7f0 f893 	bl	8000554 <__aeabi_i2d>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4640      	mov	r0, r8
 8010434:	4649      	mov	r1, r9
 8010436:	f7ef ff3f 	bl	80002b8 <__aeabi_dsub>
 801043a:	3630      	adds	r6, #48	; 0x30
 801043c:	f805 6b01 	strb.w	r6, [r5], #1
 8010440:	4652      	mov	r2, sl
 8010442:	465b      	mov	r3, fp
 8010444:	4680      	mov	r8, r0
 8010446:	4689      	mov	r9, r1
 8010448:	f7f0 fb60 	bl	8000b0c <__aeabi_dcmplt>
 801044c:	2800      	cmp	r0, #0
 801044e:	d163      	bne.n	8010518 <_dtoa_r+0x608>
 8010450:	4642      	mov	r2, r8
 8010452:	464b      	mov	r3, r9
 8010454:	4936      	ldr	r1, [pc, #216]	; (8010530 <_dtoa_r+0x620>)
 8010456:	2000      	movs	r0, #0
 8010458:	f7ef ff2e 	bl	80002b8 <__aeabi_dsub>
 801045c:	4652      	mov	r2, sl
 801045e:	465b      	mov	r3, fp
 8010460:	f7f0 fb54 	bl	8000b0c <__aeabi_dcmplt>
 8010464:	2800      	cmp	r0, #0
 8010466:	f040 80b5 	bne.w	80105d4 <_dtoa_r+0x6c4>
 801046a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801046c:	429d      	cmp	r5, r3
 801046e:	d081      	beq.n	8010374 <_dtoa_r+0x464>
 8010470:	4b30      	ldr	r3, [pc, #192]	; (8010534 <_dtoa_r+0x624>)
 8010472:	2200      	movs	r2, #0
 8010474:	4650      	mov	r0, sl
 8010476:	4659      	mov	r1, fp
 8010478:	f7f0 f8d6 	bl	8000628 <__aeabi_dmul>
 801047c:	4b2d      	ldr	r3, [pc, #180]	; (8010534 <_dtoa_r+0x624>)
 801047e:	4682      	mov	sl, r0
 8010480:	468b      	mov	fp, r1
 8010482:	4640      	mov	r0, r8
 8010484:	4649      	mov	r1, r9
 8010486:	2200      	movs	r2, #0
 8010488:	f7f0 f8ce 	bl	8000628 <__aeabi_dmul>
 801048c:	4680      	mov	r8, r0
 801048e:	4689      	mov	r9, r1
 8010490:	e7c6      	b.n	8010420 <_dtoa_r+0x510>
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	f7f0 f8c7 	bl	8000628 <__aeabi_dmul>
 801049a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801049c:	9d01      	ldr	r5, [sp, #4]
 801049e:	930f      	str	r3, [sp, #60]	; 0x3c
 80104a0:	4682      	mov	sl, r0
 80104a2:	468b      	mov	fp, r1
 80104a4:	4649      	mov	r1, r9
 80104a6:	4640      	mov	r0, r8
 80104a8:	f7f0 fb6e 	bl	8000b88 <__aeabi_d2iz>
 80104ac:	4606      	mov	r6, r0
 80104ae:	f7f0 f851 	bl	8000554 <__aeabi_i2d>
 80104b2:	3630      	adds	r6, #48	; 0x30
 80104b4:	4602      	mov	r2, r0
 80104b6:	460b      	mov	r3, r1
 80104b8:	4640      	mov	r0, r8
 80104ba:	4649      	mov	r1, r9
 80104bc:	f7ef fefc 	bl	80002b8 <__aeabi_dsub>
 80104c0:	f805 6b01 	strb.w	r6, [r5], #1
 80104c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104c6:	429d      	cmp	r5, r3
 80104c8:	4680      	mov	r8, r0
 80104ca:	4689      	mov	r9, r1
 80104cc:	f04f 0200 	mov.w	r2, #0
 80104d0:	d124      	bne.n	801051c <_dtoa_r+0x60c>
 80104d2:	4b1b      	ldr	r3, [pc, #108]	; (8010540 <_dtoa_r+0x630>)
 80104d4:	4650      	mov	r0, sl
 80104d6:	4659      	mov	r1, fp
 80104d8:	f7ef fef0 	bl	80002bc <__adddf3>
 80104dc:	4602      	mov	r2, r0
 80104de:	460b      	mov	r3, r1
 80104e0:	4640      	mov	r0, r8
 80104e2:	4649      	mov	r1, r9
 80104e4:	f7f0 fb30 	bl	8000b48 <__aeabi_dcmpgt>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d173      	bne.n	80105d4 <_dtoa_r+0x6c4>
 80104ec:	4652      	mov	r2, sl
 80104ee:	465b      	mov	r3, fp
 80104f0:	4913      	ldr	r1, [pc, #76]	; (8010540 <_dtoa_r+0x630>)
 80104f2:	2000      	movs	r0, #0
 80104f4:	f7ef fee0 	bl	80002b8 <__aeabi_dsub>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	4640      	mov	r0, r8
 80104fe:	4649      	mov	r1, r9
 8010500:	f7f0 fb04 	bl	8000b0c <__aeabi_dcmplt>
 8010504:	2800      	cmp	r0, #0
 8010506:	f43f af35 	beq.w	8010374 <_dtoa_r+0x464>
 801050a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801050c:	1e6b      	subs	r3, r5, #1
 801050e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010514:	2b30      	cmp	r3, #48	; 0x30
 8010516:	d0f8      	beq.n	801050a <_dtoa_r+0x5fa>
 8010518:	9700      	str	r7, [sp, #0]
 801051a:	e049      	b.n	80105b0 <_dtoa_r+0x6a0>
 801051c:	4b05      	ldr	r3, [pc, #20]	; (8010534 <_dtoa_r+0x624>)
 801051e:	f7f0 f883 	bl	8000628 <__aeabi_dmul>
 8010522:	4680      	mov	r8, r0
 8010524:	4689      	mov	r9, r1
 8010526:	e7bd      	b.n	80104a4 <_dtoa_r+0x594>
 8010528:	081466b0 	.word	0x081466b0
 801052c:	08146688 	.word	0x08146688
 8010530:	3ff00000 	.word	0x3ff00000
 8010534:	40240000 	.word	0x40240000
 8010538:	401c0000 	.word	0x401c0000
 801053c:	40140000 	.word	0x40140000
 8010540:	3fe00000 	.word	0x3fe00000
 8010544:	9d01      	ldr	r5, [sp, #4]
 8010546:	4656      	mov	r6, sl
 8010548:	465f      	mov	r7, fp
 801054a:	4642      	mov	r2, r8
 801054c:	464b      	mov	r3, r9
 801054e:	4630      	mov	r0, r6
 8010550:	4639      	mov	r1, r7
 8010552:	f7f0 f993 	bl	800087c <__aeabi_ddiv>
 8010556:	f7f0 fb17 	bl	8000b88 <__aeabi_d2iz>
 801055a:	4682      	mov	sl, r0
 801055c:	f7ef fffa 	bl	8000554 <__aeabi_i2d>
 8010560:	4642      	mov	r2, r8
 8010562:	464b      	mov	r3, r9
 8010564:	f7f0 f860 	bl	8000628 <__aeabi_dmul>
 8010568:	4602      	mov	r2, r0
 801056a:	460b      	mov	r3, r1
 801056c:	4630      	mov	r0, r6
 801056e:	4639      	mov	r1, r7
 8010570:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010574:	f7ef fea0 	bl	80002b8 <__aeabi_dsub>
 8010578:	f805 6b01 	strb.w	r6, [r5], #1
 801057c:	9e01      	ldr	r6, [sp, #4]
 801057e:	9f03      	ldr	r7, [sp, #12]
 8010580:	1bae      	subs	r6, r5, r6
 8010582:	42b7      	cmp	r7, r6
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	d135      	bne.n	80105f6 <_dtoa_r+0x6e6>
 801058a:	f7ef fe97 	bl	80002bc <__adddf3>
 801058e:	4642      	mov	r2, r8
 8010590:	464b      	mov	r3, r9
 8010592:	4606      	mov	r6, r0
 8010594:	460f      	mov	r7, r1
 8010596:	f7f0 fad7 	bl	8000b48 <__aeabi_dcmpgt>
 801059a:	b9d0      	cbnz	r0, 80105d2 <_dtoa_r+0x6c2>
 801059c:	4642      	mov	r2, r8
 801059e:	464b      	mov	r3, r9
 80105a0:	4630      	mov	r0, r6
 80105a2:	4639      	mov	r1, r7
 80105a4:	f7f0 faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80105a8:	b110      	cbz	r0, 80105b0 <_dtoa_r+0x6a0>
 80105aa:	f01a 0f01 	tst.w	sl, #1
 80105ae:	d110      	bne.n	80105d2 <_dtoa_r+0x6c2>
 80105b0:	4620      	mov	r0, r4
 80105b2:	ee18 1a10 	vmov	r1, s16
 80105b6:	f000 fae9 	bl	8010b8c <_Bfree>
 80105ba:	2300      	movs	r3, #0
 80105bc:	9800      	ldr	r0, [sp, #0]
 80105be:	702b      	strb	r3, [r5, #0]
 80105c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105c2:	3001      	adds	r0, #1
 80105c4:	6018      	str	r0, [r3, #0]
 80105c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f43f acf1 	beq.w	800ffb0 <_dtoa_r+0xa0>
 80105ce:	601d      	str	r5, [r3, #0]
 80105d0:	e4ee      	b.n	800ffb0 <_dtoa_r+0xa0>
 80105d2:	9f00      	ldr	r7, [sp, #0]
 80105d4:	462b      	mov	r3, r5
 80105d6:	461d      	mov	r5, r3
 80105d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105dc:	2a39      	cmp	r2, #57	; 0x39
 80105de:	d106      	bne.n	80105ee <_dtoa_r+0x6de>
 80105e0:	9a01      	ldr	r2, [sp, #4]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d1f7      	bne.n	80105d6 <_dtoa_r+0x6c6>
 80105e6:	9901      	ldr	r1, [sp, #4]
 80105e8:	2230      	movs	r2, #48	; 0x30
 80105ea:	3701      	adds	r7, #1
 80105ec:	700a      	strb	r2, [r1, #0]
 80105ee:	781a      	ldrb	r2, [r3, #0]
 80105f0:	3201      	adds	r2, #1
 80105f2:	701a      	strb	r2, [r3, #0]
 80105f4:	e790      	b.n	8010518 <_dtoa_r+0x608>
 80105f6:	4ba6      	ldr	r3, [pc, #664]	; (8010890 <_dtoa_r+0x980>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	f7f0 f815 	bl	8000628 <__aeabi_dmul>
 80105fe:	2200      	movs	r2, #0
 8010600:	2300      	movs	r3, #0
 8010602:	4606      	mov	r6, r0
 8010604:	460f      	mov	r7, r1
 8010606:	f7f0 fa77 	bl	8000af8 <__aeabi_dcmpeq>
 801060a:	2800      	cmp	r0, #0
 801060c:	d09d      	beq.n	801054a <_dtoa_r+0x63a>
 801060e:	e7cf      	b.n	80105b0 <_dtoa_r+0x6a0>
 8010610:	9a08      	ldr	r2, [sp, #32]
 8010612:	2a00      	cmp	r2, #0
 8010614:	f000 80d7 	beq.w	80107c6 <_dtoa_r+0x8b6>
 8010618:	9a06      	ldr	r2, [sp, #24]
 801061a:	2a01      	cmp	r2, #1
 801061c:	f300 80ba 	bgt.w	8010794 <_dtoa_r+0x884>
 8010620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010622:	2a00      	cmp	r2, #0
 8010624:	f000 80b2 	beq.w	801078c <_dtoa_r+0x87c>
 8010628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801062c:	9e07      	ldr	r6, [sp, #28]
 801062e:	9d04      	ldr	r5, [sp, #16]
 8010630:	9a04      	ldr	r2, [sp, #16]
 8010632:	441a      	add	r2, r3
 8010634:	9204      	str	r2, [sp, #16]
 8010636:	9a05      	ldr	r2, [sp, #20]
 8010638:	2101      	movs	r1, #1
 801063a:	441a      	add	r2, r3
 801063c:	4620      	mov	r0, r4
 801063e:	9205      	str	r2, [sp, #20]
 8010640:	f000 fb5c 	bl	8010cfc <__i2b>
 8010644:	4607      	mov	r7, r0
 8010646:	2d00      	cmp	r5, #0
 8010648:	dd0c      	ble.n	8010664 <_dtoa_r+0x754>
 801064a:	9b05      	ldr	r3, [sp, #20]
 801064c:	2b00      	cmp	r3, #0
 801064e:	dd09      	ble.n	8010664 <_dtoa_r+0x754>
 8010650:	42ab      	cmp	r3, r5
 8010652:	9a04      	ldr	r2, [sp, #16]
 8010654:	bfa8      	it	ge
 8010656:	462b      	movge	r3, r5
 8010658:	1ad2      	subs	r2, r2, r3
 801065a:	9204      	str	r2, [sp, #16]
 801065c:	9a05      	ldr	r2, [sp, #20]
 801065e:	1aed      	subs	r5, r5, r3
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	9305      	str	r3, [sp, #20]
 8010664:	9b07      	ldr	r3, [sp, #28]
 8010666:	b31b      	cbz	r3, 80106b0 <_dtoa_r+0x7a0>
 8010668:	9b08      	ldr	r3, [sp, #32]
 801066a:	2b00      	cmp	r3, #0
 801066c:	f000 80af 	beq.w	80107ce <_dtoa_r+0x8be>
 8010670:	2e00      	cmp	r6, #0
 8010672:	dd13      	ble.n	801069c <_dtoa_r+0x78c>
 8010674:	4639      	mov	r1, r7
 8010676:	4632      	mov	r2, r6
 8010678:	4620      	mov	r0, r4
 801067a:	f000 fbff 	bl	8010e7c <__pow5mult>
 801067e:	ee18 2a10 	vmov	r2, s16
 8010682:	4601      	mov	r1, r0
 8010684:	4607      	mov	r7, r0
 8010686:	4620      	mov	r0, r4
 8010688:	f000 fb4e 	bl	8010d28 <__multiply>
 801068c:	ee18 1a10 	vmov	r1, s16
 8010690:	4680      	mov	r8, r0
 8010692:	4620      	mov	r0, r4
 8010694:	f000 fa7a 	bl	8010b8c <_Bfree>
 8010698:	ee08 8a10 	vmov	s16, r8
 801069c:	9b07      	ldr	r3, [sp, #28]
 801069e:	1b9a      	subs	r2, r3, r6
 80106a0:	d006      	beq.n	80106b0 <_dtoa_r+0x7a0>
 80106a2:	ee18 1a10 	vmov	r1, s16
 80106a6:	4620      	mov	r0, r4
 80106a8:	f000 fbe8 	bl	8010e7c <__pow5mult>
 80106ac:	ee08 0a10 	vmov	s16, r0
 80106b0:	2101      	movs	r1, #1
 80106b2:	4620      	mov	r0, r4
 80106b4:	f000 fb22 	bl	8010cfc <__i2b>
 80106b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	4606      	mov	r6, r0
 80106be:	f340 8088 	ble.w	80107d2 <_dtoa_r+0x8c2>
 80106c2:	461a      	mov	r2, r3
 80106c4:	4601      	mov	r1, r0
 80106c6:	4620      	mov	r0, r4
 80106c8:	f000 fbd8 	bl	8010e7c <__pow5mult>
 80106cc:	9b06      	ldr	r3, [sp, #24]
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	4606      	mov	r6, r0
 80106d2:	f340 8081 	ble.w	80107d8 <_dtoa_r+0x8c8>
 80106d6:	f04f 0800 	mov.w	r8, #0
 80106da:	6933      	ldr	r3, [r6, #16]
 80106dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106e0:	6918      	ldr	r0, [r3, #16]
 80106e2:	f000 fabb 	bl	8010c5c <__hi0bits>
 80106e6:	f1c0 0020 	rsb	r0, r0, #32
 80106ea:	9b05      	ldr	r3, [sp, #20]
 80106ec:	4418      	add	r0, r3
 80106ee:	f010 001f 	ands.w	r0, r0, #31
 80106f2:	f000 8092 	beq.w	801081a <_dtoa_r+0x90a>
 80106f6:	f1c0 0320 	rsb	r3, r0, #32
 80106fa:	2b04      	cmp	r3, #4
 80106fc:	f340 808a 	ble.w	8010814 <_dtoa_r+0x904>
 8010700:	f1c0 001c 	rsb	r0, r0, #28
 8010704:	9b04      	ldr	r3, [sp, #16]
 8010706:	4403      	add	r3, r0
 8010708:	9304      	str	r3, [sp, #16]
 801070a:	9b05      	ldr	r3, [sp, #20]
 801070c:	4403      	add	r3, r0
 801070e:	4405      	add	r5, r0
 8010710:	9305      	str	r3, [sp, #20]
 8010712:	9b04      	ldr	r3, [sp, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	dd07      	ble.n	8010728 <_dtoa_r+0x818>
 8010718:	ee18 1a10 	vmov	r1, s16
 801071c:	461a      	mov	r2, r3
 801071e:	4620      	mov	r0, r4
 8010720:	f000 fc06 	bl	8010f30 <__lshift>
 8010724:	ee08 0a10 	vmov	s16, r0
 8010728:	9b05      	ldr	r3, [sp, #20]
 801072a:	2b00      	cmp	r3, #0
 801072c:	dd05      	ble.n	801073a <_dtoa_r+0x82a>
 801072e:	4631      	mov	r1, r6
 8010730:	461a      	mov	r2, r3
 8010732:	4620      	mov	r0, r4
 8010734:	f000 fbfc 	bl	8010f30 <__lshift>
 8010738:	4606      	mov	r6, r0
 801073a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801073c:	2b00      	cmp	r3, #0
 801073e:	d06e      	beq.n	801081e <_dtoa_r+0x90e>
 8010740:	ee18 0a10 	vmov	r0, s16
 8010744:	4631      	mov	r1, r6
 8010746:	f000 fc63 	bl	8011010 <__mcmp>
 801074a:	2800      	cmp	r0, #0
 801074c:	da67      	bge.n	801081e <_dtoa_r+0x90e>
 801074e:	9b00      	ldr	r3, [sp, #0]
 8010750:	3b01      	subs	r3, #1
 8010752:	ee18 1a10 	vmov	r1, s16
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	220a      	movs	r2, #10
 801075a:	2300      	movs	r3, #0
 801075c:	4620      	mov	r0, r4
 801075e:	f000 fa37 	bl	8010bd0 <__multadd>
 8010762:	9b08      	ldr	r3, [sp, #32]
 8010764:	ee08 0a10 	vmov	s16, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 81b1 	beq.w	8010ad0 <_dtoa_r+0xbc0>
 801076e:	2300      	movs	r3, #0
 8010770:	4639      	mov	r1, r7
 8010772:	220a      	movs	r2, #10
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fa2b 	bl	8010bd0 <__multadd>
 801077a:	9b02      	ldr	r3, [sp, #8]
 801077c:	2b00      	cmp	r3, #0
 801077e:	4607      	mov	r7, r0
 8010780:	f300 808e 	bgt.w	80108a0 <_dtoa_r+0x990>
 8010784:	9b06      	ldr	r3, [sp, #24]
 8010786:	2b02      	cmp	r3, #2
 8010788:	dc51      	bgt.n	801082e <_dtoa_r+0x91e>
 801078a:	e089      	b.n	80108a0 <_dtoa_r+0x990>
 801078c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801078e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010792:	e74b      	b.n	801062c <_dtoa_r+0x71c>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	1e5e      	subs	r6, r3, #1
 8010798:	9b07      	ldr	r3, [sp, #28]
 801079a:	42b3      	cmp	r3, r6
 801079c:	bfbf      	itttt	lt
 801079e:	9b07      	ldrlt	r3, [sp, #28]
 80107a0:	9607      	strlt	r6, [sp, #28]
 80107a2:	1af2      	sublt	r2, r6, r3
 80107a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80107a6:	bfb6      	itet	lt
 80107a8:	189b      	addlt	r3, r3, r2
 80107aa:	1b9e      	subge	r6, r3, r6
 80107ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80107ae:	9b03      	ldr	r3, [sp, #12]
 80107b0:	bfb8      	it	lt
 80107b2:	2600      	movlt	r6, #0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	bfb7      	itett	lt
 80107b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80107bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80107c0:	1a9d      	sublt	r5, r3, r2
 80107c2:	2300      	movlt	r3, #0
 80107c4:	e734      	b.n	8010630 <_dtoa_r+0x720>
 80107c6:	9e07      	ldr	r6, [sp, #28]
 80107c8:	9d04      	ldr	r5, [sp, #16]
 80107ca:	9f08      	ldr	r7, [sp, #32]
 80107cc:	e73b      	b.n	8010646 <_dtoa_r+0x736>
 80107ce:	9a07      	ldr	r2, [sp, #28]
 80107d0:	e767      	b.n	80106a2 <_dtoa_r+0x792>
 80107d2:	9b06      	ldr	r3, [sp, #24]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	dc18      	bgt.n	801080a <_dtoa_r+0x8fa>
 80107d8:	f1ba 0f00 	cmp.w	sl, #0
 80107dc:	d115      	bne.n	801080a <_dtoa_r+0x8fa>
 80107de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107e2:	b993      	cbnz	r3, 801080a <_dtoa_r+0x8fa>
 80107e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80107e8:	0d1b      	lsrs	r3, r3, #20
 80107ea:	051b      	lsls	r3, r3, #20
 80107ec:	b183      	cbz	r3, 8010810 <_dtoa_r+0x900>
 80107ee:	9b04      	ldr	r3, [sp, #16]
 80107f0:	3301      	adds	r3, #1
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	9b05      	ldr	r3, [sp, #20]
 80107f6:	3301      	adds	r3, #1
 80107f8:	9305      	str	r3, [sp, #20]
 80107fa:	f04f 0801 	mov.w	r8, #1
 80107fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010800:	2b00      	cmp	r3, #0
 8010802:	f47f af6a 	bne.w	80106da <_dtoa_r+0x7ca>
 8010806:	2001      	movs	r0, #1
 8010808:	e76f      	b.n	80106ea <_dtoa_r+0x7da>
 801080a:	f04f 0800 	mov.w	r8, #0
 801080e:	e7f6      	b.n	80107fe <_dtoa_r+0x8ee>
 8010810:	4698      	mov	r8, r3
 8010812:	e7f4      	b.n	80107fe <_dtoa_r+0x8ee>
 8010814:	f43f af7d 	beq.w	8010712 <_dtoa_r+0x802>
 8010818:	4618      	mov	r0, r3
 801081a:	301c      	adds	r0, #28
 801081c:	e772      	b.n	8010704 <_dtoa_r+0x7f4>
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	2b00      	cmp	r3, #0
 8010822:	dc37      	bgt.n	8010894 <_dtoa_r+0x984>
 8010824:	9b06      	ldr	r3, [sp, #24]
 8010826:	2b02      	cmp	r3, #2
 8010828:	dd34      	ble.n	8010894 <_dtoa_r+0x984>
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	9302      	str	r3, [sp, #8]
 801082e:	9b02      	ldr	r3, [sp, #8]
 8010830:	b96b      	cbnz	r3, 801084e <_dtoa_r+0x93e>
 8010832:	4631      	mov	r1, r6
 8010834:	2205      	movs	r2, #5
 8010836:	4620      	mov	r0, r4
 8010838:	f000 f9ca 	bl	8010bd0 <__multadd>
 801083c:	4601      	mov	r1, r0
 801083e:	4606      	mov	r6, r0
 8010840:	ee18 0a10 	vmov	r0, s16
 8010844:	f000 fbe4 	bl	8011010 <__mcmp>
 8010848:	2800      	cmp	r0, #0
 801084a:	f73f adbb 	bgt.w	80103c4 <_dtoa_r+0x4b4>
 801084e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010850:	9d01      	ldr	r5, [sp, #4]
 8010852:	43db      	mvns	r3, r3
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	f04f 0800 	mov.w	r8, #0
 801085a:	4631      	mov	r1, r6
 801085c:	4620      	mov	r0, r4
 801085e:	f000 f995 	bl	8010b8c <_Bfree>
 8010862:	2f00      	cmp	r7, #0
 8010864:	f43f aea4 	beq.w	80105b0 <_dtoa_r+0x6a0>
 8010868:	f1b8 0f00 	cmp.w	r8, #0
 801086c:	d005      	beq.n	801087a <_dtoa_r+0x96a>
 801086e:	45b8      	cmp	r8, r7
 8010870:	d003      	beq.n	801087a <_dtoa_r+0x96a>
 8010872:	4641      	mov	r1, r8
 8010874:	4620      	mov	r0, r4
 8010876:	f000 f989 	bl	8010b8c <_Bfree>
 801087a:	4639      	mov	r1, r7
 801087c:	4620      	mov	r0, r4
 801087e:	f000 f985 	bl	8010b8c <_Bfree>
 8010882:	e695      	b.n	80105b0 <_dtoa_r+0x6a0>
 8010884:	2600      	movs	r6, #0
 8010886:	4637      	mov	r7, r6
 8010888:	e7e1      	b.n	801084e <_dtoa_r+0x93e>
 801088a:	9700      	str	r7, [sp, #0]
 801088c:	4637      	mov	r7, r6
 801088e:	e599      	b.n	80103c4 <_dtoa_r+0x4b4>
 8010890:	40240000 	.word	0x40240000
 8010894:	9b08      	ldr	r3, [sp, #32]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 80ca 	beq.w	8010a30 <_dtoa_r+0xb20>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	9302      	str	r3, [sp, #8]
 80108a0:	2d00      	cmp	r5, #0
 80108a2:	dd05      	ble.n	80108b0 <_dtoa_r+0x9a0>
 80108a4:	4639      	mov	r1, r7
 80108a6:	462a      	mov	r2, r5
 80108a8:	4620      	mov	r0, r4
 80108aa:	f000 fb41 	bl	8010f30 <__lshift>
 80108ae:	4607      	mov	r7, r0
 80108b0:	f1b8 0f00 	cmp.w	r8, #0
 80108b4:	d05b      	beq.n	801096e <_dtoa_r+0xa5e>
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 f927 	bl	8010b0c <_Balloc>
 80108be:	4605      	mov	r5, r0
 80108c0:	b928      	cbnz	r0, 80108ce <_dtoa_r+0x9be>
 80108c2:	4b87      	ldr	r3, [pc, #540]	; (8010ae0 <_dtoa_r+0xbd0>)
 80108c4:	4602      	mov	r2, r0
 80108c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80108ca:	f7ff bb3b 	b.w	800ff44 <_dtoa_r+0x34>
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	3202      	adds	r2, #2
 80108d2:	0092      	lsls	r2, r2, #2
 80108d4:	f107 010c 	add.w	r1, r7, #12
 80108d8:	300c      	adds	r0, #12
 80108da:	f7fe fc69 	bl	800f1b0 <memcpy>
 80108de:	2201      	movs	r2, #1
 80108e0:	4629      	mov	r1, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 fb24 	bl	8010f30 <__lshift>
 80108e8:	9b01      	ldr	r3, [sp, #4]
 80108ea:	f103 0901 	add.w	r9, r3, #1
 80108ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80108f2:	4413      	add	r3, r2
 80108f4:	9305      	str	r3, [sp, #20]
 80108f6:	f00a 0301 	and.w	r3, sl, #1
 80108fa:	46b8      	mov	r8, r7
 80108fc:	9304      	str	r3, [sp, #16]
 80108fe:	4607      	mov	r7, r0
 8010900:	4631      	mov	r1, r6
 8010902:	ee18 0a10 	vmov	r0, s16
 8010906:	f7ff fa77 	bl	800fdf8 <quorem>
 801090a:	4641      	mov	r1, r8
 801090c:	9002      	str	r0, [sp, #8]
 801090e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010912:	ee18 0a10 	vmov	r0, s16
 8010916:	f000 fb7b 	bl	8011010 <__mcmp>
 801091a:	463a      	mov	r2, r7
 801091c:	9003      	str	r0, [sp, #12]
 801091e:	4631      	mov	r1, r6
 8010920:	4620      	mov	r0, r4
 8010922:	f000 fb91 	bl	8011048 <__mdiff>
 8010926:	68c2      	ldr	r2, [r0, #12]
 8010928:	f109 3bff 	add.w	fp, r9, #4294967295
 801092c:	4605      	mov	r5, r0
 801092e:	bb02      	cbnz	r2, 8010972 <_dtoa_r+0xa62>
 8010930:	4601      	mov	r1, r0
 8010932:	ee18 0a10 	vmov	r0, s16
 8010936:	f000 fb6b 	bl	8011010 <__mcmp>
 801093a:	4602      	mov	r2, r0
 801093c:	4629      	mov	r1, r5
 801093e:	4620      	mov	r0, r4
 8010940:	9207      	str	r2, [sp, #28]
 8010942:	f000 f923 	bl	8010b8c <_Bfree>
 8010946:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801094a:	ea43 0102 	orr.w	r1, r3, r2
 801094e:	9b04      	ldr	r3, [sp, #16]
 8010950:	430b      	orrs	r3, r1
 8010952:	464d      	mov	r5, r9
 8010954:	d10f      	bne.n	8010976 <_dtoa_r+0xa66>
 8010956:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801095a:	d02a      	beq.n	80109b2 <_dtoa_r+0xaa2>
 801095c:	9b03      	ldr	r3, [sp, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd02      	ble.n	8010968 <_dtoa_r+0xa58>
 8010962:	9b02      	ldr	r3, [sp, #8]
 8010964:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010968:	f88b a000 	strb.w	sl, [fp]
 801096c:	e775      	b.n	801085a <_dtoa_r+0x94a>
 801096e:	4638      	mov	r0, r7
 8010970:	e7ba      	b.n	80108e8 <_dtoa_r+0x9d8>
 8010972:	2201      	movs	r2, #1
 8010974:	e7e2      	b.n	801093c <_dtoa_r+0xa2c>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	2b00      	cmp	r3, #0
 801097a:	db04      	blt.n	8010986 <_dtoa_r+0xa76>
 801097c:	9906      	ldr	r1, [sp, #24]
 801097e:	430b      	orrs	r3, r1
 8010980:	9904      	ldr	r1, [sp, #16]
 8010982:	430b      	orrs	r3, r1
 8010984:	d122      	bne.n	80109cc <_dtoa_r+0xabc>
 8010986:	2a00      	cmp	r2, #0
 8010988:	ddee      	ble.n	8010968 <_dtoa_r+0xa58>
 801098a:	ee18 1a10 	vmov	r1, s16
 801098e:	2201      	movs	r2, #1
 8010990:	4620      	mov	r0, r4
 8010992:	f000 facd 	bl	8010f30 <__lshift>
 8010996:	4631      	mov	r1, r6
 8010998:	ee08 0a10 	vmov	s16, r0
 801099c:	f000 fb38 	bl	8011010 <__mcmp>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	dc03      	bgt.n	80109ac <_dtoa_r+0xa9c>
 80109a4:	d1e0      	bne.n	8010968 <_dtoa_r+0xa58>
 80109a6:	f01a 0f01 	tst.w	sl, #1
 80109aa:	d0dd      	beq.n	8010968 <_dtoa_r+0xa58>
 80109ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80109b0:	d1d7      	bne.n	8010962 <_dtoa_r+0xa52>
 80109b2:	2339      	movs	r3, #57	; 0x39
 80109b4:	f88b 3000 	strb.w	r3, [fp]
 80109b8:	462b      	mov	r3, r5
 80109ba:	461d      	mov	r5, r3
 80109bc:	3b01      	subs	r3, #1
 80109be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80109c2:	2a39      	cmp	r2, #57	; 0x39
 80109c4:	d071      	beq.n	8010aaa <_dtoa_r+0xb9a>
 80109c6:	3201      	adds	r2, #1
 80109c8:	701a      	strb	r2, [r3, #0]
 80109ca:	e746      	b.n	801085a <_dtoa_r+0x94a>
 80109cc:	2a00      	cmp	r2, #0
 80109ce:	dd07      	ble.n	80109e0 <_dtoa_r+0xad0>
 80109d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80109d4:	d0ed      	beq.n	80109b2 <_dtoa_r+0xaa2>
 80109d6:	f10a 0301 	add.w	r3, sl, #1
 80109da:	f88b 3000 	strb.w	r3, [fp]
 80109de:	e73c      	b.n	801085a <_dtoa_r+0x94a>
 80109e0:	9b05      	ldr	r3, [sp, #20]
 80109e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80109e6:	4599      	cmp	r9, r3
 80109e8:	d047      	beq.n	8010a7a <_dtoa_r+0xb6a>
 80109ea:	ee18 1a10 	vmov	r1, s16
 80109ee:	2300      	movs	r3, #0
 80109f0:	220a      	movs	r2, #10
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 f8ec 	bl	8010bd0 <__multadd>
 80109f8:	45b8      	cmp	r8, r7
 80109fa:	ee08 0a10 	vmov	s16, r0
 80109fe:	f04f 0300 	mov.w	r3, #0
 8010a02:	f04f 020a 	mov.w	r2, #10
 8010a06:	4641      	mov	r1, r8
 8010a08:	4620      	mov	r0, r4
 8010a0a:	d106      	bne.n	8010a1a <_dtoa_r+0xb0a>
 8010a0c:	f000 f8e0 	bl	8010bd0 <__multadd>
 8010a10:	4680      	mov	r8, r0
 8010a12:	4607      	mov	r7, r0
 8010a14:	f109 0901 	add.w	r9, r9, #1
 8010a18:	e772      	b.n	8010900 <_dtoa_r+0x9f0>
 8010a1a:	f000 f8d9 	bl	8010bd0 <__multadd>
 8010a1e:	4639      	mov	r1, r7
 8010a20:	4680      	mov	r8, r0
 8010a22:	2300      	movs	r3, #0
 8010a24:	220a      	movs	r2, #10
 8010a26:	4620      	mov	r0, r4
 8010a28:	f000 f8d2 	bl	8010bd0 <__multadd>
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	e7f1      	b.n	8010a14 <_dtoa_r+0xb04>
 8010a30:	9b03      	ldr	r3, [sp, #12]
 8010a32:	9302      	str	r3, [sp, #8]
 8010a34:	9d01      	ldr	r5, [sp, #4]
 8010a36:	ee18 0a10 	vmov	r0, s16
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	f7ff f9dc 	bl	800fdf8 <quorem>
 8010a40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a44:	9b01      	ldr	r3, [sp, #4]
 8010a46:	f805 ab01 	strb.w	sl, [r5], #1
 8010a4a:	1aea      	subs	r2, r5, r3
 8010a4c:	9b02      	ldr	r3, [sp, #8]
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	dd09      	ble.n	8010a66 <_dtoa_r+0xb56>
 8010a52:	ee18 1a10 	vmov	r1, s16
 8010a56:	2300      	movs	r3, #0
 8010a58:	220a      	movs	r2, #10
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f000 f8b8 	bl	8010bd0 <__multadd>
 8010a60:	ee08 0a10 	vmov	s16, r0
 8010a64:	e7e7      	b.n	8010a36 <_dtoa_r+0xb26>
 8010a66:	9b02      	ldr	r3, [sp, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	bfc8      	it	gt
 8010a6c:	461d      	movgt	r5, r3
 8010a6e:	9b01      	ldr	r3, [sp, #4]
 8010a70:	bfd8      	it	le
 8010a72:	2501      	movle	r5, #1
 8010a74:	441d      	add	r5, r3
 8010a76:	f04f 0800 	mov.w	r8, #0
 8010a7a:	ee18 1a10 	vmov	r1, s16
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fa55 	bl	8010f30 <__lshift>
 8010a86:	4631      	mov	r1, r6
 8010a88:	ee08 0a10 	vmov	s16, r0
 8010a8c:	f000 fac0 	bl	8011010 <__mcmp>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	dc91      	bgt.n	80109b8 <_dtoa_r+0xaa8>
 8010a94:	d102      	bne.n	8010a9c <_dtoa_r+0xb8c>
 8010a96:	f01a 0f01 	tst.w	sl, #1
 8010a9a:	d18d      	bne.n	80109b8 <_dtoa_r+0xaa8>
 8010a9c:	462b      	mov	r3, r5
 8010a9e:	461d      	mov	r5, r3
 8010aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010aa4:	2a30      	cmp	r2, #48	; 0x30
 8010aa6:	d0fa      	beq.n	8010a9e <_dtoa_r+0xb8e>
 8010aa8:	e6d7      	b.n	801085a <_dtoa_r+0x94a>
 8010aaa:	9a01      	ldr	r2, [sp, #4]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d184      	bne.n	80109ba <_dtoa_r+0xaaa>
 8010ab0:	9b00      	ldr	r3, [sp, #0]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	2331      	movs	r3, #49	; 0x31
 8010ab8:	7013      	strb	r3, [r2, #0]
 8010aba:	e6ce      	b.n	801085a <_dtoa_r+0x94a>
 8010abc:	4b09      	ldr	r3, [pc, #36]	; (8010ae4 <_dtoa_r+0xbd4>)
 8010abe:	f7ff ba95 	b.w	800ffec <_dtoa_r+0xdc>
 8010ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f47f aa6e 	bne.w	800ffa6 <_dtoa_r+0x96>
 8010aca:	4b07      	ldr	r3, [pc, #28]	; (8010ae8 <_dtoa_r+0xbd8>)
 8010acc:	f7ff ba8e 	b.w	800ffec <_dtoa_r+0xdc>
 8010ad0:	9b02      	ldr	r3, [sp, #8]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	dcae      	bgt.n	8010a34 <_dtoa_r+0xb24>
 8010ad6:	9b06      	ldr	r3, [sp, #24]
 8010ad8:	2b02      	cmp	r3, #2
 8010ada:	f73f aea8 	bgt.w	801082e <_dtoa_r+0x91e>
 8010ade:	e7a9      	b.n	8010a34 <_dtoa_r+0xb24>
 8010ae0:	08146618 	.word	0x08146618
 8010ae4:	08146474 	.word	0x08146474
 8010ae8:	08146599 	.word	0x08146599

08010aec <_localeconv_r>:
 8010aec:	4800      	ldr	r0, [pc, #0]	; (8010af0 <_localeconv_r+0x4>)
 8010aee:	4770      	bx	lr
 8010af0:	20000d00 	.word	0x20000d00

08010af4 <__malloc_lock>:
 8010af4:	4801      	ldr	r0, [pc, #4]	; (8010afc <__malloc_lock+0x8>)
 8010af6:	f000 bd5e 	b.w	80115b6 <__retarget_lock_acquire_recursive>
 8010afa:	bf00      	nop
 8010afc:	20002038 	.word	0x20002038

08010b00 <__malloc_unlock>:
 8010b00:	4801      	ldr	r0, [pc, #4]	; (8010b08 <__malloc_unlock+0x8>)
 8010b02:	f000 bd59 	b.w	80115b8 <__retarget_lock_release_recursive>
 8010b06:	bf00      	nop
 8010b08:	20002038 	.word	0x20002038

08010b0c <_Balloc>:
 8010b0c:	b570      	push	{r4, r5, r6, lr}
 8010b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b10:	4604      	mov	r4, r0
 8010b12:	460d      	mov	r5, r1
 8010b14:	b976      	cbnz	r6, 8010b34 <_Balloc+0x28>
 8010b16:	2010      	movs	r0, #16
 8010b18:	f7fe fb42 	bl	800f1a0 <malloc>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	6260      	str	r0, [r4, #36]	; 0x24
 8010b20:	b920      	cbnz	r0, 8010b2c <_Balloc+0x20>
 8010b22:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <_Balloc+0x78>)
 8010b24:	4818      	ldr	r0, [pc, #96]	; (8010b88 <_Balloc+0x7c>)
 8010b26:	2166      	movs	r1, #102	; 0x66
 8010b28:	f000 fd14 	bl	8011554 <__assert_func>
 8010b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b30:	6006      	str	r6, [r0, #0]
 8010b32:	60c6      	str	r6, [r0, #12]
 8010b34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010b36:	68f3      	ldr	r3, [r6, #12]
 8010b38:	b183      	cbz	r3, 8010b5c <_Balloc+0x50>
 8010b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b42:	b9b8      	cbnz	r0, 8010b74 <_Balloc+0x68>
 8010b44:	2101      	movs	r1, #1
 8010b46:	fa01 f605 	lsl.w	r6, r1, r5
 8010b4a:	1d72      	adds	r2, r6, #5
 8010b4c:	0092      	lsls	r2, r2, #2
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f000 fb60 	bl	8011214 <_calloc_r>
 8010b54:	b160      	cbz	r0, 8010b70 <_Balloc+0x64>
 8010b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b5a:	e00e      	b.n	8010b7a <_Balloc+0x6e>
 8010b5c:	2221      	movs	r2, #33	; 0x21
 8010b5e:	2104      	movs	r1, #4
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fb57 	bl	8011214 <_calloc_r>
 8010b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b68:	60f0      	str	r0, [r6, #12]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d1e4      	bne.n	8010b3a <_Balloc+0x2e>
 8010b70:	2000      	movs	r0, #0
 8010b72:	bd70      	pop	{r4, r5, r6, pc}
 8010b74:	6802      	ldr	r2, [r0, #0]
 8010b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b80:	e7f7      	b.n	8010b72 <_Balloc+0x66>
 8010b82:	bf00      	nop
 8010b84:	081465a6 	.word	0x081465a6
 8010b88:	08146629 	.word	0x08146629

08010b8c <_Bfree>:
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b90:	4605      	mov	r5, r0
 8010b92:	460c      	mov	r4, r1
 8010b94:	b976      	cbnz	r6, 8010bb4 <_Bfree+0x28>
 8010b96:	2010      	movs	r0, #16
 8010b98:	f7fe fb02 	bl	800f1a0 <malloc>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	6268      	str	r0, [r5, #36]	; 0x24
 8010ba0:	b920      	cbnz	r0, 8010bac <_Bfree+0x20>
 8010ba2:	4b09      	ldr	r3, [pc, #36]	; (8010bc8 <_Bfree+0x3c>)
 8010ba4:	4809      	ldr	r0, [pc, #36]	; (8010bcc <_Bfree+0x40>)
 8010ba6:	218a      	movs	r1, #138	; 0x8a
 8010ba8:	f000 fcd4 	bl	8011554 <__assert_func>
 8010bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bb0:	6006      	str	r6, [r0, #0]
 8010bb2:	60c6      	str	r6, [r0, #12]
 8010bb4:	b13c      	cbz	r4, 8010bc6 <_Bfree+0x3a>
 8010bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010bb8:	6862      	ldr	r2, [r4, #4]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010bc0:	6021      	str	r1, [r4, #0]
 8010bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010bc6:	bd70      	pop	{r4, r5, r6, pc}
 8010bc8:	081465a6 	.word	0x081465a6
 8010bcc:	08146629 	.word	0x08146629

08010bd0 <__multadd>:
 8010bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd4:	690d      	ldr	r5, [r1, #16]
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	460c      	mov	r4, r1
 8010bda:	461e      	mov	r6, r3
 8010bdc:	f101 0c14 	add.w	ip, r1, #20
 8010be0:	2000      	movs	r0, #0
 8010be2:	f8dc 3000 	ldr.w	r3, [ip]
 8010be6:	b299      	uxth	r1, r3
 8010be8:	fb02 6101 	mla	r1, r2, r1, r6
 8010bec:	0c1e      	lsrs	r6, r3, #16
 8010bee:	0c0b      	lsrs	r3, r1, #16
 8010bf0:	fb02 3306 	mla	r3, r2, r6, r3
 8010bf4:	b289      	uxth	r1, r1
 8010bf6:	3001      	adds	r0, #1
 8010bf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bfc:	4285      	cmp	r5, r0
 8010bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8010c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c06:	dcec      	bgt.n	8010be2 <__multadd+0x12>
 8010c08:	b30e      	cbz	r6, 8010c4e <__multadd+0x7e>
 8010c0a:	68a3      	ldr	r3, [r4, #8]
 8010c0c:	42ab      	cmp	r3, r5
 8010c0e:	dc19      	bgt.n	8010c44 <__multadd+0x74>
 8010c10:	6861      	ldr	r1, [r4, #4]
 8010c12:	4638      	mov	r0, r7
 8010c14:	3101      	adds	r1, #1
 8010c16:	f7ff ff79 	bl	8010b0c <_Balloc>
 8010c1a:	4680      	mov	r8, r0
 8010c1c:	b928      	cbnz	r0, 8010c2a <__multadd+0x5a>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	4b0c      	ldr	r3, [pc, #48]	; (8010c54 <__multadd+0x84>)
 8010c22:	480d      	ldr	r0, [pc, #52]	; (8010c58 <__multadd+0x88>)
 8010c24:	21b5      	movs	r1, #181	; 0xb5
 8010c26:	f000 fc95 	bl	8011554 <__assert_func>
 8010c2a:	6922      	ldr	r2, [r4, #16]
 8010c2c:	3202      	adds	r2, #2
 8010c2e:	f104 010c 	add.w	r1, r4, #12
 8010c32:	0092      	lsls	r2, r2, #2
 8010c34:	300c      	adds	r0, #12
 8010c36:	f7fe fabb 	bl	800f1b0 <memcpy>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	4638      	mov	r0, r7
 8010c3e:	f7ff ffa5 	bl	8010b8c <_Bfree>
 8010c42:	4644      	mov	r4, r8
 8010c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c48:	3501      	adds	r5, #1
 8010c4a:	615e      	str	r6, [r3, #20]
 8010c4c:	6125      	str	r5, [r4, #16]
 8010c4e:	4620      	mov	r0, r4
 8010c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c54:	08146618 	.word	0x08146618
 8010c58:	08146629 	.word	0x08146629

08010c5c <__hi0bits>:
 8010c5c:	0c03      	lsrs	r3, r0, #16
 8010c5e:	041b      	lsls	r3, r3, #16
 8010c60:	b9d3      	cbnz	r3, 8010c98 <__hi0bits+0x3c>
 8010c62:	0400      	lsls	r0, r0, #16
 8010c64:	2310      	movs	r3, #16
 8010c66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010c6a:	bf04      	itt	eq
 8010c6c:	0200      	lsleq	r0, r0, #8
 8010c6e:	3308      	addeq	r3, #8
 8010c70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010c74:	bf04      	itt	eq
 8010c76:	0100      	lsleq	r0, r0, #4
 8010c78:	3304      	addeq	r3, #4
 8010c7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010c7e:	bf04      	itt	eq
 8010c80:	0080      	lsleq	r0, r0, #2
 8010c82:	3302      	addeq	r3, #2
 8010c84:	2800      	cmp	r0, #0
 8010c86:	db05      	blt.n	8010c94 <__hi0bits+0x38>
 8010c88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c8c:	f103 0301 	add.w	r3, r3, #1
 8010c90:	bf08      	it	eq
 8010c92:	2320      	moveq	r3, #32
 8010c94:	4618      	mov	r0, r3
 8010c96:	4770      	bx	lr
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e7e4      	b.n	8010c66 <__hi0bits+0xa>

08010c9c <__lo0bits>:
 8010c9c:	6803      	ldr	r3, [r0, #0]
 8010c9e:	f013 0207 	ands.w	r2, r3, #7
 8010ca2:	4601      	mov	r1, r0
 8010ca4:	d00b      	beq.n	8010cbe <__lo0bits+0x22>
 8010ca6:	07da      	lsls	r2, r3, #31
 8010ca8:	d423      	bmi.n	8010cf2 <__lo0bits+0x56>
 8010caa:	0798      	lsls	r0, r3, #30
 8010cac:	bf49      	itett	mi
 8010cae:	085b      	lsrmi	r3, r3, #1
 8010cb0:	089b      	lsrpl	r3, r3, #2
 8010cb2:	2001      	movmi	r0, #1
 8010cb4:	600b      	strmi	r3, [r1, #0]
 8010cb6:	bf5c      	itt	pl
 8010cb8:	600b      	strpl	r3, [r1, #0]
 8010cba:	2002      	movpl	r0, #2
 8010cbc:	4770      	bx	lr
 8010cbe:	b298      	uxth	r0, r3
 8010cc0:	b9a8      	cbnz	r0, 8010cee <__lo0bits+0x52>
 8010cc2:	0c1b      	lsrs	r3, r3, #16
 8010cc4:	2010      	movs	r0, #16
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	b90a      	cbnz	r2, 8010cce <__lo0bits+0x32>
 8010cca:	3008      	adds	r0, #8
 8010ccc:	0a1b      	lsrs	r3, r3, #8
 8010cce:	071a      	lsls	r2, r3, #28
 8010cd0:	bf04      	itt	eq
 8010cd2:	091b      	lsreq	r3, r3, #4
 8010cd4:	3004      	addeq	r0, #4
 8010cd6:	079a      	lsls	r2, r3, #30
 8010cd8:	bf04      	itt	eq
 8010cda:	089b      	lsreq	r3, r3, #2
 8010cdc:	3002      	addeq	r0, #2
 8010cde:	07da      	lsls	r2, r3, #31
 8010ce0:	d403      	bmi.n	8010cea <__lo0bits+0x4e>
 8010ce2:	085b      	lsrs	r3, r3, #1
 8010ce4:	f100 0001 	add.w	r0, r0, #1
 8010ce8:	d005      	beq.n	8010cf6 <__lo0bits+0x5a>
 8010cea:	600b      	str	r3, [r1, #0]
 8010cec:	4770      	bx	lr
 8010cee:	4610      	mov	r0, r2
 8010cf0:	e7e9      	b.n	8010cc6 <__lo0bits+0x2a>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	4770      	bx	lr
 8010cf6:	2020      	movs	r0, #32
 8010cf8:	4770      	bx	lr
	...

08010cfc <__i2b>:
 8010cfc:	b510      	push	{r4, lr}
 8010cfe:	460c      	mov	r4, r1
 8010d00:	2101      	movs	r1, #1
 8010d02:	f7ff ff03 	bl	8010b0c <_Balloc>
 8010d06:	4602      	mov	r2, r0
 8010d08:	b928      	cbnz	r0, 8010d16 <__i2b+0x1a>
 8010d0a:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <__i2b+0x24>)
 8010d0c:	4805      	ldr	r0, [pc, #20]	; (8010d24 <__i2b+0x28>)
 8010d0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d12:	f000 fc1f 	bl	8011554 <__assert_func>
 8010d16:	2301      	movs	r3, #1
 8010d18:	6144      	str	r4, [r0, #20]
 8010d1a:	6103      	str	r3, [r0, #16]
 8010d1c:	bd10      	pop	{r4, pc}
 8010d1e:	bf00      	nop
 8010d20:	08146618 	.word	0x08146618
 8010d24:	08146629 	.word	0x08146629

08010d28 <__multiply>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	4691      	mov	r9, r2
 8010d2e:	690a      	ldr	r2, [r1, #16]
 8010d30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	bfb8      	it	lt
 8010d38:	460b      	movlt	r3, r1
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	bfbc      	itt	lt
 8010d3e:	464c      	movlt	r4, r9
 8010d40:	4699      	movlt	r9, r3
 8010d42:	6927      	ldr	r7, [r4, #16]
 8010d44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d48:	68a3      	ldr	r3, [r4, #8]
 8010d4a:	6861      	ldr	r1, [r4, #4]
 8010d4c:	eb07 060a 	add.w	r6, r7, sl
 8010d50:	42b3      	cmp	r3, r6
 8010d52:	b085      	sub	sp, #20
 8010d54:	bfb8      	it	lt
 8010d56:	3101      	addlt	r1, #1
 8010d58:	f7ff fed8 	bl	8010b0c <_Balloc>
 8010d5c:	b930      	cbnz	r0, 8010d6c <__multiply+0x44>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	4b44      	ldr	r3, [pc, #272]	; (8010e74 <__multiply+0x14c>)
 8010d62:	4845      	ldr	r0, [pc, #276]	; (8010e78 <__multiply+0x150>)
 8010d64:	f240 115d 	movw	r1, #349	; 0x15d
 8010d68:	f000 fbf4 	bl	8011554 <__assert_func>
 8010d6c:	f100 0514 	add.w	r5, r0, #20
 8010d70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d74:	462b      	mov	r3, r5
 8010d76:	2200      	movs	r2, #0
 8010d78:	4543      	cmp	r3, r8
 8010d7a:	d321      	bcc.n	8010dc0 <__multiply+0x98>
 8010d7c:	f104 0314 	add.w	r3, r4, #20
 8010d80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010d84:	f109 0314 	add.w	r3, r9, #20
 8010d88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010d8c:	9202      	str	r2, [sp, #8]
 8010d8e:	1b3a      	subs	r2, r7, r4
 8010d90:	3a15      	subs	r2, #21
 8010d92:	f022 0203 	bic.w	r2, r2, #3
 8010d96:	3204      	adds	r2, #4
 8010d98:	f104 0115 	add.w	r1, r4, #21
 8010d9c:	428f      	cmp	r7, r1
 8010d9e:	bf38      	it	cc
 8010da0:	2204      	movcc	r2, #4
 8010da2:	9201      	str	r2, [sp, #4]
 8010da4:	9a02      	ldr	r2, [sp, #8]
 8010da6:	9303      	str	r3, [sp, #12]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d80c      	bhi.n	8010dc6 <__multiply+0x9e>
 8010dac:	2e00      	cmp	r6, #0
 8010dae:	dd03      	ble.n	8010db8 <__multiply+0x90>
 8010db0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d05a      	beq.n	8010e6e <__multiply+0x146>
 8010db8:	6106      	str	r6, [r0, #16]
 8010dba:	b005      	add	sp, #20
 8010dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc0:	f843 2b04 	str.w	r2, [r3], #4
 8010dc4:	e7d8      	b.n	8010d78 <__multiply+0x50>
 8010dc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8010dca:	f1ba 0f00 	cmp.w	sl, #0
 8010dce:	d024      	beq.n	8010e1a <__multiply+0xf2>
 8010dd0:	f104 0e14 	add.w	lr, r4, #20
 8010dd4:	46a9      	mov	r9, r5
 8010dd6:	f04f 0c00 	mov.w	ip, #0
 8010dda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010dde:	f8d9 1000 	ldr.w	r1, [r9]
 8010de2:	fa1f fb82 	uxth.w	fp, r2
 8010de6:	b289      	uxth	r1, r1
 8010de8:	fb0a 110b 	mla	r1, sl, fp, r1
 8010dec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010df0:	f8d9 2000 	ldr.w	r2, [r9]
 8010df4:	4461      	add	r1, ip
 8010df6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010dfa:	fb0a c20b 	mla	r2, sl, fp, ip
 8010dfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e02:	b289      	uxth	r1, r1
 8010e04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e08:	4577      	cmp	r7, lr
 8010e0a:	f849 1b04 	str.w	r1, [r9], #4
 8010e0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e12:	d8e2      	bhi.n	8010dda <__multiply+0xb2>
 8010e14:	9a01      	ldr	r2, [sp, #4]
 8010e16:	f845 c002 	str.w	ip, [r5, r2]
 8010e1a:	9a03      	ldr	r2, [sp, #12]
 8010e1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e20:	3304      	adds	r3, #4
 8010e22:	f1b9 0f00 	cmp.w	r9, #0
 8010e26:	d020      	beq.n	8010e6a <__multiply+0x142>
 8010e28:	6829      	ldr	r1, [r5, #0]
 8010e2a:	f104 0c14 	add.w	ip, r4, #20
 8010e2e:	46ae      	mov	lr, r5
 8010e30:	f04f 0a00 	mov.w	sl, #0
 8010e34:	f8bc b000 	ldrh.w	fp, [ip]
 8010e38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e3c:	fb09 220b 	mla	r2, r9, fp, r2
 8010e40:	4492      	add	sl, r2
 8010e42:	b289      	uxth	r1, r1
 8010e44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010e48:	f84e 1b04 	str.w	r1, [lr], #4
 8010e4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e50:	f8be 1000 	ldrh.w	r1, [lr]
 8010e54:	0c12      	lsrs	r2, r2, #16
 8010e56:	fb09 1102 	mla	r1, r9, r2, r1
 8010e5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010e5e:	4567      	cmp	r7, ip
 8010e60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e64:	d8e6      	bhi.n	8010e34 <__multiply+0x10c>
 8010e66:	9a01      	ldr	r2, [sp, #4]
 8010e68:	50a9      	str	r1, [r5, r2]
 8010e6a:	3504      	adds	r5, #4
 8010e6c:	e79a      	b.n	8010da4 <__multiply+0x7c>
 8010e6e:	3e01      	subs	r6, #1
 8010e70:	e79c      	b.n	8010dac <__multiply+0x84>
 8010e72:	bf00      	nop
 8010e74:	08146618 	.word	0x08146618
 8010e78:	08146629 	.word	0x08146629

08010e7c <__pow5mult>:
 8010e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e80:	4615      	mov	r5, r2
 8010e82:	f012 0203 	ands.w	r2, r2, #3
 8010e86:	4606      	mov	r6, r0
 8010e88:	460f      	mov	r7, r1
 8010e8a:	d007      	beq.n	8010e9c <__pow5mult+0x20>
 8010e8c:	4c25      	ldr	r4, [pc, #148]	; (8010f24 <__pow5mult+0xa8>)
 8010e8e:	3a01      	subs	r2, #1
 8010e90:	2300      	movs	r3, #0
 8010e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e96:	f7ff fe9b 	bl	8010bd0 <__multadd>
 8010e9a:	4607      	mov	r7, r0
 8010e9c:	10ad      	asrs	r5, r5, #2
 8010e9e:	d03d      	beq.n	8010f1c <__pow5mult+0xa0>
 8010ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010ea2:	b97c      	cbnz	r4, 8010ec4 <__pow5mult+0x48>
 8010ea4:	2010      	movs	r0, #16
 8010ea6:	f7fe f97b 	bl	800f1a0 <malloc>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	6270      	str	r0, [r6, #36]	; 0x24
 8010eae:	b928      	cbnz	r0, 8010ebc <__pow5mult+0x40>
 8010eb0:	4b1d      	ldr	r3, [pc, #116]	; (8010f28 <__pow5mult+0xac>)
 8010eb2:	481e      	ldr	r0, [pc, #120]	; (8010f2c <__pow5mult+0xb0>)
 8010eb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010eb8:	f000 fb4c 	bl	8011554 <__assert_func>
 8010ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ec0:	6004      	str	r4, [r0, #0]
 8010ec2:	60c4      	str	r4, [r0, #12]
 8010ec4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ecc:	b94c      	cbnz	r4, 8010ee2 <__pow5mult+0x66>
 8010ece:	f240 2171 	movw	r1, #625	; 0x271
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f7ff ff12 	bl	8010cfc <__i2b>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ede:	4604      	mov	r4, r0
 8010ee0:	6003      	str	r3, [r0, #0]
 8010ee2:	f04f 0900 	mov.w	r9, #0
 8010ee6:	07eb      	lsls	r3, r5, #31
 8010ee8:	d50a      	bpl.n	8010f00 <__pow5mult+0x84>
 8010eea:	4639      	mov	r1, r7
 8010eec:	4622      	mov	r2, r4
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f7ff ff1a 	bl	8010d28 <__multiply>
 8010ef4:	4639      	mov	r1, r7
 8010ef6:	4680      	mov	r8, r0
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f7ff fe47 	bl	8010b8c <_Bfree>
 8010efe:	4647      	mov	r7, r8
 8010f00:	106d      	asrs	r5, r5, #1
 8010f02:	d00b      	beq.n	8010f1c <__pow5mult+0xa0>
 8010f04:	6820      	ldr	r0, [r4, #0]
 8010f06:	b938      	cbnz	r0, 8010f18 <__pow5mult+0x9c>
 8010f08:	4622      	mov	r2, r4
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7ff ff0b 	bl	8010d28 <__multiply>
 8010f12:	6020      	str	r0, [r4, #0]
 8010f14:	f8c0 9000 	str.w	r9, [r0]
 8010f18:	4604      	mov	r4, r0
 8010f1a:	e7e4      	b.n	8010ee6 <__pow5mult+0x6a>
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f22:	bf00      	nop
 8010f24:	08146778 	.word	0x08146778
 8010f28:	081465a6 	.word	0x081465a6
 8010f2c:	08146629 	.word	0x08146629

08010f30 <__lshift>:
 8010f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f34:	460c      	mov	r4, r1
 8010f36:	6849      	ldr	r1, [r1, #4]
 8010f38:	6923      	ldr	r3, [r4, #16]
 8010f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	4607      	mov	r7, r0
 8010f42:	4691      	mov	r9, r2
 8010f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f48:	f108 0601 	add.w	r6, r8, #1
 8010f4c:	42b3      	cmp	r3, r6
 8010f4e:	db0b      	blt.n	8010f68 <__lshift+0x38>
 8010f50:	4638      	mov	r0, r7
 8010f52:	f7ff fddb 	bl	8010b0c <_Balloc>
 8010f56:	4605      	mov	r5, r0
 8010f58:	b948      	cbnz	r0, 8010f6e <__lshift+0x3e>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	4b2a      	ldr	r3, [pc, #168]	; (8011008 <__lshift+0xd8>)
 8010f5e:	482b      	ldr	r0, [pc, #172]	; (801100c <__lshift+0xdc>)
 8010f60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010f64:	f000 faf6 	bl	8011554 <__assert_func>
 8010f68:	3101      	adds	r1, #1
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	e7ee      	b.n	8010f4c <__lshift+0x1c>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	f100 0114 	add.w	r1, r0, #20
 8010f74:	f100 0210 	add.w	r2, r0, #16
 8010f78:	4618      	mov	r0, r3
 8010f7a:	4553      	cmp	r3, sl
 8010f7c:	db37      	blt.n	8010fee <__lshift+0xbe>
 8010f7e:	6920      	ldr	r0, [r4, #16]
 8010f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f84:	f104 0314 	add.w	r3, r4, #20
 8010f88:	f019 091f 	ands.w	r9, r9, #31
 8010f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f94:	d02f      	beq.n	8010ff6 <__lshift+0xc6>
 8010f96:	f1c9 0e20 	rsb	lr, r9, #32
 8010f9a:	468a      	mov	sl, r1
 8010f9c:	f04f 0c00 	mov.w	ip, #0
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	fa02 f209 	lsl.w	r2, r2, r9
 8010fa6:	ea42 020c 	orr.w	r2, r2, ip
 8010faa:	f84a 2b04 	str.w	r2, [sl], #4
 8010fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fb2:	4298      	cmp	r0, r3
 8010fb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010fb8:	d8f2      	bhi.n	8010fa0 <__lshift+0x70>
 8010fba:	1b03      	subs	r3, r0, r4
 8010fbc:	3b15      	subs	r3, #21
 8010fbe:	f023 0303 	bic.w	r3, r3, #3
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	f104 0215 	add.w	r2, r4, #21
 8010fc8:	4290      	cmp	r0, r2
 8010fca:	bf38      	it	cc
 8010fcc:	2304      	movcc	r3, #4
 8010fce:	f841 c003 	str.w	ip, [r1, r3]
 8010fd2:	f1bc 0f00 	cmp.w	ip, #0
 8010fd6:	d001      	beq.n	8010fdc <__lshift+0xac>
 8010fd8:	f108 0602 	add.w	r6, r8, #2
 8010fdc:	3e01      	subs	r6, #1
 8010fde:	4638      	mov	r0, r7
 8010fe0:	612e      	str	r6, [r5, #16]
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	f7ff fdd2 	bl	8010b8c <_Bfree>
 8010fe8:	4628      	mov	r0, r5
 8010fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	e7c1      	b.n	8010f7a <__lshift+0x4a>
 8010ff6:	3904      	subs	r1, #4
 8010ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ffc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011000:	4298      	cmp	r0, r3
 8011002:	d8f9      	bhi.n	8010ff8 <__lshift+0xc8>
 8011004:	e7ea      	b.n	8010fdc <__lshift+0xac>
 8011006:	bf00      	nop
 8011008:	08146618 	.word	0x08146618
 801100c:	08146629 	.word	0x08146629

08011010 <__mcmp>:
 8011010:	b530      	push	{r4, r5, lr}
 8011012:	6902      	ldr	r2, [r0, #16]
 8011014:	690c      	ldr	r4, [r1, #16]
 8011016:	1b12      	subs	r2, r2, r4
 8011018:	d10e      	bne.n	8011038 <__mcmp+0x28>
 801101a:	f100 0314 	add.w	r3, r0, #20
 801101e:	3114      	adds	r1, #20
 8011020:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011024:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011028:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801102c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011030:	42a5      	cmp	r5, r4
 8011032:	d003      	beq.n	801103c <__mcmp+0x2c>
 8011034:	d305      	bcc.n	8011042 <__mcmp+0x32>
 8011036:	2201      	movs	r2, #1
 8011038:	4610      	mov	r0, r2
 801103a:	bd30      	pop	{r4, r5, pc}
 801103c:	4283      	cmp	r3, r0
 801103e:	d3f3      	bcc.n	8011028 <__mcmp+0x18>
 8011040:	e7fa      	b.n	8011038 <__mcmp+0x28>
 8011042:	f04f 32ff 	mov.w	r2, #4294967295
 8011046:	e7f7      	b.n	8011038 <__mcmp+0x28>

08011048 <__mdiff>:
 8011048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	460c      	mov	r4, r1
 801104e:	4606      	mov	r6, r0
 8011050:	4611      	mov	r1, r2
 8011052:	4620      	mov	r0, r4
 8011054:	4690      	mov	r8, r2
 8011056:	f7ff ffdb 	bl	8011010 <__mcmp>
 801105a:	1e05      	subs	r5, r0, #0
 801105c:	d110      	bne.n	8011080 <__mdiff+0x38>
 801105e:	4629      	mov	r1, r5
 8011060:	4630      	mov	r0, r6
 8011062:	f7ff fd53 	bl	8010b0c <_Balloc>
 8011066:	b930      	cbnz	r0, 8011076 <__mdiff+0x2e>
 8011068:	4b3a      	ldr	r3, [pc, #232]	; (8011154 <__mdiff+0x10c>)
 801106a:	4602      	mov	r2, r0
 801106c:	f240 2132 	movw	r1, #562	; 0x232
 8011070:	4839      	ldr	r0, [pc, #228]	; (8011158 <__mdiff+0x110>)
 8011072:	f000 fa6f 	bl	8011554 <__assert_func>
 8011076:	2301      	movs	r3, #1
 8011078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801107c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011080:	bfa4      	itt	ge
 8011082:	4643      	movge	r3, r8
 8011084:	46a0      	movge	r8, r4
 8011086:	4630      	mov	r0, r6
 8011088:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801108c:	bfa6      	itte	ge
 801108e:	461c      	movge	r4, r3
 8011090:	2500      	movge	r5, #0
 8011092:	2501      	movlt	r5, #1
 8011094:	f7ff fd3a 	bl	8010b0c <_Balloc>
 8011098:	b920      	cbnz	r0, 80110a4 <__mdiff+0x5c>
 801109a:	4b2e      	ldr	r3, [pc, #184]	; (8011154 <__mdiff+0x10c>)
 801109c:	4602      	mov	r2, r0
 801109e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80110a2:	e7e5      	b.n	8011070 <__mdiff+0x28>
 80110a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80110a8:	6926      	ldr	r6, [r4, #16]
 80110aa:	60c5      	str	r5, [r0, #12]
 80110ac:	f104 0914 	add.w	r9, r4, #20
 80110b0:	f108 0514 	add.w	r5, r8, #20
 80110b4:	f100 0e14 	add.w	lr, r0, #20
 80110b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80110bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80110c0:	f108 0210 	add.w	r2, r8, #16
 80110c4:	46f2      	mov	sl, lr
 80110c6:	2100      	movs	r1, #0
 80110c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80110cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80110d0:	fa1f f883 	uxth.w	r8, r3
 80110d4:	fa11 f18b 	uxtah	r1, r1, fp
 80110d8:	0c1b      	lsrs	r3, r3, #16
 80110da:	eba1 0808 	sub.w	r8, r1, r8
 80110de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80110e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80110e6:	fa1f f888 	uxth.w	r8, r8
 80110ea:	1419      	asrs	r1, r3, #16
 80110ec:	454e      	cmp	r6, r9
 80110ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80110f2:	f84a 3b04 	str.w	r3, [sl], #4
 80110f6:	d8e7      	bhi.n	80110c8 <__mdiff+0x80>
 80110f8:	1b33      	subs	r3, r6, r4
 80110fa:	3b15      	subs	r3, #21
 80110fc:	f023 0303 	bic.w	r3, r3, #3
 8011100:	3304      	adds	r3, #4
 8011102:	3415      	adds	r4, #21
 8011104:	42a6      	cmp	r6, r4
 8011106:	bf38      	it	cc
 8011108:	2304      	movcc	r3, #4
 801110a:	441d      	add	r5, r3
 801110c:	4473      	add	r3, lr
 801110e:	469e      	mov	lr, r3
 8011110:	462e      	mov	r6, r5
 8011112:	4566      	cmp	r6, ip
 8011114:	d30e      	bcc.n	8011134 <__mdiff+0xec>
 8011116:	f10c 0203 	add.w	r2, ip, #3
 801111a:	1b52      	subs	r2, r2, r5
 801111c:	f022 0203 	bic.w	r2, r2, #3
 8011120:	3d03      	subs	r5, #3
 8011122:	45ac      	cmp	ip, r5
 8011124:	bf38      	it	cc
 8011126:	2200      	movcc	r2, #0
 8011128:	441a      	add	r2, r3
 801112a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801112e:	b17b      	cbz	r3, 8011150 <__mdiff+0x108>
 8011130:	6107      	str	r7, [r0, #16]
 8011132:	e7a3      	b.n	801107c <__mdiff+0x34>
 8011134:	f856 8b04 	ldr.w	r8, [r6], #4
 8011138:	fa11 f288 	uxtah	r2, r1, r8
 801113c:	1414      	asrs	r4, r2, #16
 801113e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011142:	b292      	uxth	r2, r2
 8011144:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011148:	f84e 2b04 	str.w	r2, [lr], #4
 801114c:	1421      	asrs	r1, r4, #16
 801114e:	e7e0      	b.n	8011112 <__mdiff+0xca>
 8011150:	3f01      	subs	r7, #1
 8011152:	e7ea      	b.n	801112a <__mdiff+0xe2>
 8011154:	08146618 	.word	0x08146618
 8011158:	08146629 	.word	0x08146629

0801115c <__d2b>:
 801115c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011160:	4689      	mov	r9, r1
 8011162:	2101      	movs	r1, #1
 8011164:	ec57 6b10 	vmov	r6, r7, d0
 8011168:	4690      	mov	r8, r2
 801116a:	f7ff fccf 	bl	8010b0c <_Balloc>
 801116e:	4604      	mov	r4, r0
 8011170:	b930      	cbnz	r0, 8011180 <__d2b+0x24>
 8011172:	4602      	mov	r2, r0
 8011174:	4b25      	ldr	r3, [pc, #148]	; (801120c <__d2b+0xb0>)
 8011176:	4826      	ldr	r0, [pc, #152]	; (8011210 <__d2b+0xb4>)
 8011178:	f240 310a 	movw	r1, #778	; 0x30a
 801117c:	f000 f9ea 	bl	8011554 <__assert_func>
 8011180:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011184:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011188:	bb35      	cbnz	r5, 80111d8 <__d2b+0x7c>
 801118a:	2e00      	cmp	r6, #0
 801118c:	9301      	str	r3, [sp, #4]
 801118e:	d028      	beq.n	80111e2 <__d2b+0x86>
 8011190:	4668      	mov	r0, sp
 8011192:	9600      	str	r6, [sp, #0]
 8011194:	f7ff fd82 	bl	8010c9c <__lo0bits>
 8011198:	9900      	ldr	r1, [sp, #0]
 801119a:	b300      	cbz	r0, 80111de <__d2b+0x82>
 801119c:	9a01      	ldr	r2, [sp, #4]
 801119e:	f1c0 0320 	rsb	r3, r0, #32
 80111a2:	fa02 f303 	lsl.w	r3, r2, r3
 80111a6:	430b      	orrs	r3, r1
 80111a8:	40c2      	lsrs	r2, r0
 80111aa:	6163      	str	r3, [r4, #20]
 80111ac:	9201      	str	r2, [sp, #4]
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	61a3      	str	r3, [r4, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	bf14      	ite	ne
 80111b6:	2202      	movne	r2, #2
 80111b8:	2201      	moveq	r2, #1
 80111ba:	6122      	str	r2, [r4, #16]
 80111bc:	b1d5      	cbz	r5, 80111f4 <__d2b+0x98>
 80111be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80111c2:	4405      	add	r5, r0
 80111c4:	f8c9 5000 	str.w	r5, [r9]
 80111c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80111cc:	f8c8 0000 	str.w	r0, [r8]
 80111d0:	4620      	mov	r0, r4
 80111d2:	b003      	add	sp, #12
 80111d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80111dc:	e7d5      	b.n	801118a <__d2b+0x2e>
 80111de:	6161      	str	r1, [r4, #20]
 80111e0:	e7e5      	b.n	80111ae <__d2b+0x52>
 80111e2:	a801      	add	r0, sp, #4
 80111e4:	f7ff fd5a 	bl	8010c9c <__lo0bits>
 80111e8:	9b01      	ldr	r3, [sp, #4]
 80111ea:	6163      	str	r3, [r4, #20]
 80111ec:	2201      	movs	r2, #1
 80111ee:	6122      	str	r2, [r4, #16]
 80111f0:	3020      	adds	r0, #32
 80111f2:	e7e3      	b.n	80111bc <__d2b+0x60>
 80111f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111fc:	f8c9 0000 	str.w	r0, [r9]
 8011200:	6918      	ldr	r0, [r3, #16]
 8011202:	f7ff fd2b 	bl	8010c5c <__hi0bits>
 8011206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801120a:	e7df      	b.n	80111cc <__d2b+0x70>
 801120c:	08146618 	.word	0x08146618
 8011210:	08146629 	.word	0x08146629

08011214 <_calloc_r>:
 8011214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011216:	fba1 2402 	umull	r2, r4, r1, r2
 801121a:	b94c      	cbnz	r4, 8011230 <_calloc_r+0x1c>
 801121c:	4611      	mov	r1, r2
 801121e:	9201      	str	r2, [sp, #4]
 8011220:	f7fe f848 	bl	800f2b4 <_malloc_r>
 8011224:	9a01      	ldr	r2, [sp, #4]
 8011226:	4605      	mov	r5, r0
 8011228:	b930      	cbnz	r0, 8011238 <_calloc_r+0x24>
 801122a:	4628      	mov	r0, r5
 801122c:	b003      	add	sp, #12
 801122e:	bd30      	pop	{r4, r5, pc}
 8011230:	220c      	movs	r2, #12
 8011232:	6002      	str	r2, [r0, #0]
 8011234:	2500      	movs	r5, #0
 8011236:	e7f8      	b.n	801122a <_calloc_r+0x16>
 8011238:	4621      	mov	r1, r4
 801123a:	f7fd ffc7 	bl	800f1cc <memset>
 801123e:	e7f4      	b.n	801122a <_calloc_r+0x16>

08011240 <_realloc_r>:
 8011240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011244:	4680      	mov	r8, r0
 8011246:	4614      	mov	r4, r2
 8011248:	460e      	mov	r6, r1
 801124a:	b921      	cbnz	r1, 8011256 <_realloc_r+0x16>
 801124c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011250:	4611      	mov	r1, r2
 8011252:	f7fe b82f 	b.w	800f2b4 <_malloc_r>
 8011256:	b92a      	cbnz	r2, 8011264 <_realloc_r+0x24>
 8011258:	f7fd ffc0 	bl	800f1dc <_free_r>
 801125c:	4625      	mov	r5, r4
 801125e:	4628      	mov	r0, r5
 8011260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011264:	f000 f9d5 	bl	8011612 <_malloc_usable_size_r>
 8011268:	4284      	cmp	r4, r0
 801126a:	4607      	mov	r7, r0
 801126c:	d802      	bhi.n	8011274 <_realloc_r+0x34>
 801126e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011272:	d812      	bhi.n	801129a <_realloc_r+0x5a>
 8011274:	4621      	mov	r1, r4
 8011276:	4640      	mov	r0, r8
 8011278:	f7fe f81c 	bl	800f2b4 <_malloc_r>
 801127c:	4605      	mov	r5, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	d0ed      	beq.n	801125e <_realloc_r+0x1e>
 8011282:	42bc      	cmp	r4, r7
 8011284:	4622      	mov	r2, r4
 8011286:	4631      	mov	r1, r6
 8011288:	bf28      	it	cs
 801128a:	463a      	movcs	r2, r7
 801128c:	f7fd ff90 	bl	800f1b0 <memcpy>
 8011290:	4631      	mov	r1, r6
 8011292:	4640      	mov	r0, r8
 8011294:	f7fd ffa2 	bl	800f1dc <_free_r>
 8011298:	e7e1      	b.n	801125e <_realloc_r+0x1e>
 801129a:	4635      	mov	r5, r6
 801129c:	e7df      	b.n	801125e <_realloc_r+0x1e>

0801129e <__ssputs_r>:
 801129e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112a2:	688e      	ldr	r6, [r1, #8]
 80112a4:	429e      	cmp	r6, r3
 80112a6:	4682      	mov	sl, r0
 80112a8:	460c      	mov	r4, r1
 80112aa:	4690      	mov	r8, r2
 80112ac:	461f      	mov	r7, r3
 80112ae:	d838      	bhi.n	8011322 <__ssputs_r+0x84>
 80112b0:	898a      	ldrh	r2, [r1, #12]
 80112b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112b6:	d032      	beq.n	801131e <__ssputs_r+0x80>
 80112b8:	6825      	ldr	r5, [r4, #0]
 80112ba:	6909      	ldr	r1, [r1, #16]
 80112bc:	eba5 0901 	sub.w	r9, r5, r1
 80112c0:	6965      	ldr	r5, [r4, #20]
 80112c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112ca:	3301      	adds	r3, #1
 80112cc:	444b      	add	r3, r9
 80112ce:	106d      	asrs	r5, r5, #1
 80112d0:	429d      	cmp	r5, r3
 80112d2:	bf38      	it	cc
 80112d4:	461d      	movcc	r5, r3
 80112d6:	0553      	lsls	r3, r2, #21
 80112d8:	d531      	bpl.n	801133e <__ssputs_r+0xa0>
 80112da:	4629      	mov	r1, r5
 80112dc:	f7fd ffea 	bl	800f2b4 <_malloc_r>
 80112e0:	4606      	mov	r6, r0
 80112e2:	b950      	cbnz	r0, 80112fa <__ssputs_r+0x5c>
 80112e4:	230c      	movs	r3, #12
 80112e6:	f8ca 3000 	str.w	r3, [sl]
 80112ea:	89a3      	ldrh	r3, [r4, #12]
 80112ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112f0:	81a3      	strh	r3, [r4, #12]
 80112f2:	f04f 30ff 	mov.w	r0, #4294967295
 80112f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112fa:	6921      	ldr	r1, [r4, #16]
 80112fc:	464a      	mov	r2, r9
 80112fe:	f7fd ff57 	bl	800f1b0 <memcpy>
 8011302:	89a3      	ldrh	r3, [r4, #12]
 8011304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801130c:	81a3      	strh	r3, [r4, #12]
 801130e:	6126      	str	r6, [r4, #16]
 8011310:	6165      	str	r5, [r4, #20]
 8011312:	444e      	add	r6, r9
 8011314:	eba5 0509 	sub.w	r5, r5, r9
 8011318:	6026      	str	r6, [r4, #0]
 801131a:	60a5      	str	r5, [r4, #8]
 801131c:	463e      	mov	r6, r7
 801131e:	42be      	cmp	r6, r7
 8011320:	d900      	bls.n	8011324 <__ssputs_r+0x86>
 8011322:	463e      	mov	r6, r7
 8011324:	6820      	ldr	r0, [r4, #0]
 8011326:	4632      	mov	r2, r6
 8011328:	4641      	mov	r1, r8
 801132a:	f000 f958 	bl	80115de <memmove>
 801132e:	68a3      	ldr	r3, [r4, #8]
 8011330:	1b9b      	subs	r3, r3, r6
 8011332:	60a3      	str	r3, [r4, #8]
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	4433      	add	r3, r6
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	2000      	movs	r0, #0
 801133c:	e7db      	b.n	80112f6 <__ssputs_r+0x58>
 801133e:	462a      	mov	r2, r5
 8011340:	f7ff ff7e 	bl	8011240 <_realloc_r>
 8011344:	4606      	mov	r6, r0
 8011346:	2800      	cmp	r0, #0
 8011348:	d1e1      	bne.n	801130e <__ssputs_r+0x70>
 801134a:	6921      	ldr	r1, [r4, #16]
 801134c:	4650      	mov	r0, sl
 801134e:	f7fd ff45 	bl	800f1dc <_free_r>
 8011352:	e7c7      	b.n	80112e4 <__ssputs_r+0x46>

08011354 <_svfiprintf_r>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	4698      	mov	r8, r3
 801135a:	898b      	ldrh	r3, [r1, #12]
 801135c:	061b      	lsls	r3, r3, #24
 801135e:	b09d      	sub	sp, #116	; 0x74
 8011360:	4607      	mov	r7, r0
 8011362:	460d      	mov	r5, r1
 8011364:	4614      	mov	r4, r2
 8011366:	d50e      	bpl.n	8011386 <_svfiprintf_r+0x32>
 8011368:	690b      	ldr	r3, [r1, #16]
 801136a:	b963      	cbnz	r3, 8011386 <_svfiprintf_r+0x32>
 801136c:	2140      	movs	r1, #64	; 0x40
 801136e:	f7fd ffa1 	bl	800f2b4 <_malloc_r>
 8011372:	6028      	str	r0, [r5, #0]
 8011374:	6128      	str	r0, [r5, #16]
 8011376:	b920      	cbnz	r0, 8011382 <_svfiprintf_r+0x2e>
 8011378:	230c      	movs	r3, #12
 801137a:	603b      	str	r3, [r7, #0]
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	e0d1      	b.n	8011526 <_svfiprintf_r+0x1d2>
 8011382:	2340      	movs	r3, #64	; 0x40
 8011384:	616b      	str	r3, [r5, #20]
 8011386:	2300      	movs	r3, #0
 8011388:	9309      	str	r3, [sp, #36]	; 0x24
 801138a:	2320      	movs	r3, #32
 801138c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011390:	f8cd 800c 	str.w	r8, [sp, #12]
 8011394:	2330      	movs	r3, #48	; 0x30
 8011396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011540 <_svfiprintf_r+0x1ec>
 801139a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801139e:	f04f 0901 	mov.w	r9, #1
 80113a2:	4623      	mov	r3, r4
 80113a4:	469a      	mov	sl, r3
 80113a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113aa:	b10a      	cbz	r2, 80113b0 <_svfiprintf_r+0x5c>
 80113ac:	2a25      	cmp	r2, #37	; 0x25
 80113ae:	d1f9      	bne.n	80113a4 <_svfiprintf_r+0x50>
 80113b0:	ebba 0b04 	subs.w	fp, sl, r4
 80113b4:	d00b      	beq.n	80113ce <_svfiprintf_r+0x7a>
 80113b6:	465b      	mov	r3, fp
 80113b8:	4622      	mov	r2, r4
 80113ba:	4629      	mov	r1, r5
 80113bc:	4638      	mov	r0, r7
 80113be:	f7ff ff6e 	bl	801129e <__ssputs_r>
 80113c2:	3001      	adds	r0, #1
 80113c4:	f000 80aa 	beq.w	801151c <_svfiprintf_r+0x1c8>
 80113c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ca:	445a      	add	r2, fp
 80113cc:	9209      	str	r2, [sp, #36]	; 0x24
 80113ce:	f89a 3000 	ldrb.w	r3, [sl]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f000 80a2 	beq.w	801151c <_svfiprintf_r+0x1c8>
 80113d8:	2300      	movs	r3, #0
 80113da:	f04f 32ff 	mov.w	r2, #4294967295
 80113de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113e2:	f10a 0a01 	add.w	sl, sl, #1
 80113e6:	9304      	str	r3, [sp, #16]
 80113e8:	9307      	str	r3, [sp, #28]
 80113ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113ee:	931a      	str	r3, [sp, #104]	; 0x68
 80113f0:	4654      	mov	r4, sl
 80113f2:	2205      	movs	r2, #5
 80113f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f8:	4851      	ldr	r0, [pc, #324]	; (8011540 <_svfiprintf_r+0x1ec>)
 80113fa:	f7ee ff09 	bl	8000210 <memchr>
 80113fe:	9a04      	ldr	r2, [sp, #16]
 8011400:	b9d8      	cbnz	r0, 801143a <_svfiprintf_r+0xe6>
 8011402:	06d0      	lsls	r0, r2, #27
 8011404:	bf44      	itt	mi
 8011406:	2320      	movmi	r3, #32
 8011408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801140c:	0711      	lsls	r1, r2, #28
 801140e:	bf44      	itt	mi
 8011410:	232b      	movmi	r3, #43	; 0x2b
 8011412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011416:	f89a 3000 	ldrb.w	r3, [sl]
 801141a:	2b2a      	cmp	r3, #42	; 0x2a
 801141c:	d015      	beq.n	801144a <_svfiprintf_r+0xf6>
 801141e:	9a07      	ldr	r2, [sp, #28]
 8011420:	4654      	mov	r4, sl
 8011422:	2000      	movs	r0, #0
 8011424:	f04f 0c0a 	mov.w	ip, #10
 8011428:	4621      	mov	r1, r4
 801142a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801142e:	3b30      	subs	r3, #48	; 0x30
 8011430:	2b09      	cmp	r3, #9
 8011432:	d94e      	bls.n	80114d2 <_svfiprintf_r+0x17e>
 8011434:	b1b0      	cbz	r0, 8011464 <_svfiprintf_r+0x110>
 8011436:	9207      	str	r2, [sp, #28]
 8011438:	e014      	b.n	8011464 <_svfiprintf_r+0x110>
 801143a:	eba0 0308 	sub.w	r3, r0, r8
 801143e:	fa09 f303 	lsl.w	r3, r9, r3
 8011442:	4313      	orrs	r3, r2
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	46a2      	mov	sl, r4
 8011448:	e7d2      	b.n	80113f0 <_svfiprintf_r+0x9c>
 801144a:	9b03      	ldr	r3, [sp, #12]
 801144c:	1d19      	adds	r1, r3, #4
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	9103      	str	r1, [sp, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	bfbb      	ittet	lt
 8011456:	425b      	neglt	r3, r3
 8011458:	f042 0202 	orrlt.w	r2, r2, #2
 801145c:	9307      	strge	r3, [sp, #28]
 801145e:	9307      	strlt	r3, [sp, #28]
 8011460:	bfb8      	it	lt
 8011462:	9204      	strlt	r2, [sp, #16]
 8011464:	7823      	ldrb	r3, [r4, #0]
 8011466:	2b2e      	cmp	r3, #46	; 0x2e
 8011468:	d10c      	bne.n	8011484 <_svfiprintf_r+0x130>
 801146a:	7863      	ldrb	r3, [r4, #1]
 801146c:	2b2a      	cmp	r3, #42	; 0x2a
 801146e:	d135      	bne.n	80114dc <_svfiprintf_r+0x188>
 8011470:	9b03      	ldr	r3, [sp, #12]
 8011472:	1d1a      	adds	r2, r3, #4
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	9203      	str	r2, [sp, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	bfb8      	it	lt
 801147c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011480:	3402      	adds	r4, #2
 8011482:	9305      	str	r3, [sp, #20]
 8011484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011550 <_svfiprintf_r+0x1fc>
 8011488:	7821      	ldrb	r1, [r4, #0]
 801148a:	2203      	movs	r2, #3
 801148c:	4650      	mov	r0, sl
 801148e:	f7ee febf 	bl	8000210 <memchr>
 8011492:	b140      	cbz	r0, 80114a6 <_svfiprintf_r+0x152>
 8011494:	2340      	movs	r3, #64	; 0x40
 8011496:	eba0 000a 	sub.w	r0, r0, sl
 801149a:	fa03 f000 	lsl.w	r0, r3, r0
 801149e:	9b04      	ldr	r3, [sp, #16]
 80114a0:	4303      	orrs	r3, r0
 80114a2:	3401      	adds	r4, #1
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114aa:	4826      	ldr	r0, [pc, #152]	; (8011544 <_svfiprintf_r+0x1f0>)
 80114ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114b0:	2206      	movs	r2, #6
 80114b2:	f7ee fead 	bl	8000210 <memchr>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d038      	beq.n	801152c <_svfiprintf_r+0x1d8>
 80114ba:	4b23      	ldr	r3, [pc, #140]	; (8011548 <_svfiprintf_r+0x1f4>)
 80114bc:	bb1b      	cbnz	r3, 8011506 <_svfiprintf_r+0x1b2>
 80114be:	9b03      	ldr	r3, [sp, #12]
 80114c0:	3307      	adds	r3, #7
 80114c2:	f023 0307 	bic.w	r3, r3, #7
 80114c6:	3308      	adds	r3, #8
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114cc:	4433      	add	r3, r6
 80114ce:	9309      	str	r3, [sp, #36]	; 0x24
 80114d0:	e767      	b.n	80113a2 <_svfiprintf_r+0x4e>
 80114d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80114d6:	460c      	mov	r4, r1
 80114d8:	2001      	movs	r0, #1
 80114da:	e7a5      	b.n	8011428 <_svfiprintf_r+0xd4>
 80114dc:	2300      	movs	r3, #0
 80114de:	3401      	adds	r4, #1
 80114e0:	9305      	str	r3, [sp, #20]
 80114e2:	4619      	mov	r1, r3
 80114e4:	f04f 0c0a 	mov.w	ip, #10
 80114e8:	4620      	mov	r0, r4
 80114ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ee:	3a30      	subs	r2, #48	; 0x30
 80114f0:	2a09      	cmp	r2, #9
 80114f2:	d903      	bls.n	80114fc <_svfiprintf_r+0x1a8>
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d0c5      	beq.n	8011484 <_svfiprintf_r+0x130>
 80114f8:	9105      	str	r1, [sp, #20]
 80114fa:	e7c3      	b.n	8011484 <_svfiprintf_r+0x130>
 80114fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011500:	4604      	mov	r4, r0
 8011502:	2301      	movs	r3, #1
 8011504:	e7f0      	b.n	80114e8 <_svfiprintf_r+0x194>
 8011506:	ab03      	add	r3, sp, #12
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	462a      	mov	r2, r5
 801150c:	4b0f      	ldr	r3, [pc, #60]	; (801154c <_svfiprintf_r+0x1f8>)
 801150e:	a904      	add	r1, sp, #16
 8011510:	4638      	mov	r0, r7
 8011512:	f7fd ffe3 	bl	800f4dc <_printf_float>
 8011516:	1c42      	adds	r2, r0, #1
 8011518:	4606      	mov	r6, r0
 801151a:	d1d6      	bne.n	80114ca <_svfiprintf_r+0x176>
 801151c:	89ab      	ldrh	r3, [r5, #12]
 801151e:	065b      	lsls	r3, r3, #25
 8011520:	f53f af2c 	bmi.w	801137c <_svfiprintf_r+0x28>
 8011524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011526:	b01d      	add	sp, #116	; 0x74
 8011528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801152c:	ab03      	add	r3, sp, #12
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	462a      	mov	r2, r5
 8011532:	4b06      	ldr	r3, [pc, #24]	; (801154c <_svfiprintf_r+0x1f8>)
 8011534:	a904      	add	r1, sp, #16
 8011536:	4638      	mov	r0, r7
 8011538:	f7fe fa74 	bl	800fa24 <_printf_i>
 801153c:	e7eb      	b.n	8011516 <_svfiprintf_r+0x1c2>
 801153e:	bf00      	nop
 8011540:	08146784 	.word	0x08146784
 8011544:	0814678e 	.word	0x0814678e
 8011548:	0800f4dd 	.word	0x0800f4dd
 801154c:	0801129f 	.word	0x0801129f
 8011550:	0814678a 	.word	0x0814678a

08011554 <__assert_func>:
 8011554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011556:	4614      	mov	r4, r2
 8011558:	461a      	mov	r2, r3
 801155a:	4b09      	ldr	r3, [pc, #36]	; (8011580 <__assert_func+0x2c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	4605      	mov	r5, r0
 8011560:	68d8      	ldr	r0, [r3, #12]
 8011562:	b14c      	cbz	r4, 8011578 <__assert_func+0x24>
 8011564:	4b07      	ldr	r3, [pc, #28]	; (8011584 <__assert_func+0x30>)
 8011566:	9100      	str	r1, [sp, #0]
 8011568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801156c:	4906      	ldr	r1, [pc, #24]	; (8011588 <__assert_func+0x34>)
 801156e:	462b      	mov	r3, r5
 8011570:	f000 f80e 	bl	8011590 <fiprintf>
 8011574:	f000 fa7c 	bl	8011a70 <abort>
 8011578:	4b04      	ldr	r3, [pc, #16]	; (801158c <__assert_func+0x38>)
 801157a:	461c      	mov	r4, r3
 801157c:	e7f3      	b.n	8011566 <__assert_func+0x12>
 801157e:	bf00      	nop
 8011580:	20000bac 	.word	0x20000bac
 8011584:	08146795 	.word	0x08146795
 8011588:	081467a2 	.word	0x081467a2
 801158c:	081467d0 	.word	0x081467d0

08011590 <fiprintf>:
 8011590:	b40e      	push	{r1, r2, r3}
 8011592:	b503      	push	{r0, r1, lr}
 8011594:	4601      	mov	r1, r0
 8011596:	ab03      	add	r3, sp, #12
 8011598:	4805      	ldr	r0, [pc, #20]	; (80115b0 <fiprintf+0x20>)
 801159a:	f853 2b04 	ldr.w	r2, [r3], #4
 801159e:	6800      	ldr	r0, [r0, #0]
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	f000 f867 	bl	8011674 <_vfiprintf_r>
 80115a6:	b002      	add	sp, #8
 80115a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115ac:	b003      	add	sp, #12
 80115ae:	4770      	bx	lr
 80115b0:	20000bac 	.word	0x20000bac

080115b4 <__retarget_lock_init_recursive>:
 80115b4:	4770      	bx	lr

080115b6 <__retarget_lock_acquire_recursive>:
 80115b6:	4770      	bx	lr

080115b8 <__retarget_lock_release_recursive>:
 80115b8:	4770      	bx	lr

080115ba <__ascii_mbtowc>:
 80115ba:	b082      	sub	sp, #8
 80115bc:	b901      	cbnz	r1, 80115c0 <__ascii_mbtowc+0x6>
 80115be:	a901      	add	r1, sp, #4
 80115c0:	b142      	cbz	r2, 80115d4 <__ascii_mbtowc+0x1a>
 80115c2:	b14b      	cbz	r3, 80115d8 <__ascii_mbtowc+0x1e>
 80115c4:	7813      	ldrb	r3, [r2, #0]
 80115c6:	600b      	str	r3, [r1, #0]
 80115c8:	7812      	ldrb	r2, [r2, #0]
 80115ca:	1e10      	subs	r0, r2, #0
 80115cc:	bf18      	it	ne
 80115ce:	2001      	movne	r0, #1
 80115d0:	b002      	add	sp, #8
 80115d2:	4770      	bx	lr
 80115d4:	4610      	mov	r0, r2
 80115d6:	e7fb      	b.n	80115d0 <__ascii_mbtowc+0x16>
 80115d8:	f06f 0001 	mvn.w	r0, #1
 80115dc:	e7f8      	b.n	80115d0 <__ascii_mbtowc+0x16>

080115de <memmove>:
 80115de:	4288      	cmp	r0, r1
 80115e0:	b510      	push	{r4, lr}
 80115e2:	eb01 0402 	add.w	r4, r1, r2
 80115e6:	d902      	bls.n	80115ee <memmove+0x10>
 80115e8:	4284      	cmp	r4, r0
 80115ea:	4623      	mov	r3, r4
 80115ec:	d807      	bhi.n	80115fe <memmove+0x20>
 80115ee:	1e43      	subs	r3, r0, #1
 80115f0:	42a1      	cmp	r1, r4
 80115f2:	d008      	beq.n	8011606 <memmove+0x28>
 80115f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115fc:	e7f8      	b.n	80115f0 <memmove+0x12>
 80115fe:	4402      	add	r2, r0
 8011600:	4601      	mov	r1, r0
 8011602:	428a      	cmp	r2, r1
 8011604:	d100      	bne.n	8011608 <memmove+0x2a>
 8011606:	bd10      	pop	{r4, pc}
 8011608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801160c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011610:	e7f7      	b.n	8011602 <memmove+0x24>

08011612 <_malloc_usable_size_r>:
 8011612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011616:	1f18      	subs	r0, r3, #4
 8011618:	2b00      	cmp	r3, #0
 801161a:	bfbc      	itt	lt
 801161c:	580b      	ldrlt	r3, [r1, r0]
 801161e:	18c0      	addlt	r0, r0, r3
 8011620:	4770      	bx	lr

08011622 <__sfputc_r>:
 8011622:	6893      	ldr	r3, [r2, #8]
 8011624:	3b01      	subs	r3, #1
 8011626:	2b00      	cmp	r3, #0
 8011628:	b410      	push	{r4}
 801162a:	6093      	str	r3, [r2, #8]
 801162c:	da08      	bge.n	8011640 <__sfputc_r+0x1e>
 801162e:	6994      	ldr	r4, [r2, #24]
 8011630:	42a3      	cmp	r3, r4
 8011632:	db01      	blt.n	8011638 <__sfputc_r+0x16>
 8011634:	290a      	cmp	r1, #10
 8011636:	d103      	bne.n	8011640 <__sfputc_r+0x1e>
 8011638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801163c:	f000 b94a 	b.w	80118d4 <__swbuf_r>
 8011640:	6813      	ldr	r3, [r2, #0]
 8011642:	1c58      	adds	r0, r3, #1
 8011644:	6010      	str	r0, [r2, #0]
 8011646:	7019      	strb	r1, [r3, #0]
 8011648:	4608      	mov	r0, r1
 801164a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801164e:	4770      	bx	lr

08011650 <__sfputs_r>:
 8011650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011652:	4606      	mov	r6, r0
 8011654:	460f      	mov	r7, r1
 8011656:	4614      	mov	r4, r2
 8011658:	18d5      	adds	r5, r2, r3
 801165a:	42ac      	cmp	r4, r5
 801165c:	d101      	bne.n	8011662 <__sfputs_r+0x12>
 801165e:	2000      	movs	r0, #0
 8011660:	e007      	b.n	8011672 <__sfputs_r+0x22>
 8011662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011666:	463a      	mov	r2, r7
 8011668:	4630      	mov	r0, r6
 801166a:	f7ff ffda 	bl	8011622 <__sfputc_r>
 801166e:	1c43      	adds	r3, r0, #1
 8011670:	d1f3      	bne.n	801165a <__sfputs_r+0xa>
 8011672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011674 <_vfiprintf_r>:
 8011674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011678:	460d      	mov	r5, r1
 801167a:	b09d      	sub	sp, #116	; 0x74
 801167c:	4614      	mov	r4, r2
 801167e:	4698      	mov	r8, r3
 8011680:	4606      	mov	r6, r0
 8011682:	b118      	cbz	r0, 801168c <_vfiprintf_r+0x18>
 8011684:	6983      	ldr	r3, [r0, #24]
 8011686:	b90b      	cbnz	r3, 801168c <_vfiprintf_r+0x18>
 8011688:	f000 fb14 	bl	8011cb4 <__sinit>
 801168c:	4b89      	ldr	r3, [pc, #548]	; (80118b4 <_vfiprintf_r+0x240>)
 801168e:	429d      	cmp	r5, r3
 8011690:	d11b      	bne.n	80116ca <_vfiprintf_r+0x56>
 8011692:	6875      	ldr	r5, [r6, #4]
 8011694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011696:	07d9      	lsls	r1, r3, #31
 8011698:	d405      	bmi.n	80116a6 <_vfiprintf_r+0x32>
 801169a:	89ab      	ldrh	r3, [r5, #12]
 801169c:	059a      	lsls	r2, r3, #22
 801169e:	d402      	bmi.n	80116a6 <_vfiprintf_r+0x32>
 80116a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116a2:	f7ff ff88 	bl	80115b6 <__retarget_lock_acquire_recursive>
 80116a6:	89ab      	ldrh	r3, [r5, #12]
 80116a8:	071b      	lsls	r3, r3, #28
 80116aa:	d501      	bpl.n	80116b0 <_vfiprintf_r+0x3c>
 80116ac:	692b      	ldr	r3, [r5, #16]
 80116ae:	b9eb      	cbnz	r3, 80116ec <_vfiprintf_r+0x78>
 80116b0:	4629      	mov	r1, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	f000 f96e 	bl	8011994 <__swsetup_r>
 80116b8:	b1c0      	cbz	r0, 80116ec <_vfiprintf_r+0x78>
 80116ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116bc:	07dc      	lsls	r4, r3, #31
 80116be:	d50e      	bpl.n	80116de <_vfiprintf_r+0x6a>
 80116c0:	f04f 30ff 	mov.w	r0, #4294967295
 80116c4:	b01d      	add	sp, #116	; 0x74
 80116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ca:	4b7b      	ldr	r3, [pc, #492]	; (80118b8 <_vfiprintf_r+0x244>)
 80116cc:	429d      	cmp	r5, r3
 80116ce:	d101      	bne.n	80116d4 <_vfiprintf_r+0x60>
 80116d0:	68b5      	ldr	r5, [r6, #8]
 80116d2:	e7df      	b.n	8011694 <_vfiprintf_r+0x20>
 80116d4:	4b79      	ldr	r3, [pc, #484]	; (80118bc <_vfiprintf_r+0x248>)
 80116d6:	429d      	cmp	r5, r3
 80116d8:	bf08      	it	eq
 80116da:	68f5      	ldreq	r5, [r6, #12]
 80116dc:	e7da      	b.n	8011694 <_vfiprintf_r+0x20>
 80116de:	89ab      	ldrh	r3, [r5, #12]
 80116e0:	0598      	lsls	r0, r3, #22
 80116e2:	d4ed      	bmi.n	80116c0 <_vfiprintf_r+0x4c>
 80116e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116e6:	f7ff ff67 	bl	80115b8 <__retarget_lock_release_recursive>
 80116ea:	e7e9      	b.n	80116c0 <_vfiprintf_r+0x4c>
 80116ec:	2300      	movs	r3, #0
 80116ee:	9309      	str	r3, [sp, #36]	; 0x24
 80116f0:	2320      	movs	r3, #32
 80116f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80116fa:	2330      	movs	r3, #48	; 0x30
 80116fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118c0 <_vfiprintf_r+0x24c>
 8011700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011704:	f04f 0901 	mov.w	r9, #1
 8011708:	4623      	mov	r3, r4
 801170a:	469a      	mov	sl, r3
 801170c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011710:	b10a      	cbz	r2, 8011716 <_vfiprintf_r+0xa2>
 8011712:	2a25      	cmp	r2, #37	; 0x25
 8011714:	d1f9      	bne.n	801170a <_vfiprintf_r+0x96>
 8011716:	ebba 0b04 	subs.w	fp, sl, r4
 801171a:	d00b      	beq.n	8011734 <_vfiprintf_r+0xc0>
 801171c:	465b      	mov	r3, fp
 801171e:	4622      	mov	r2, r4
 8011720:	4629      	mov	r1, r5
 8011722:	4630      	mov	r0, r6
 8011724:	f7ff ff94 	bl	8011650 <__sfputs_r>
 8011728:	3001      	adds	r0, #1
 801172a:	f000 80aa 	beq.w	8011882 <_vfiprintf_r+0x20e>
 801172e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011730:	445a      	add	r2, fp
 8011732:	9209      	str	r2, [sp, #36]	; 0x24
 8011734:	f89a 3000 	ldrb.w	r3, [sl]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 80a2 	beq.w	8011882 <_vfiprintf_r+0x20e>
 801173e:	2300      	movs	r3, #0
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	9307      	str	r3, [sp, #28]
 8011750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011754:	931a      	str	r3, [sp, #104]	; 0x68
 8011756:	4654      	mov	r4, sl
 8011758:	2205      	movs	r2, #5
 801175a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801175e:	4858      	ldr	r0, [pc, #352]	; (80118c0 <_vfiprintf_r+0x24c>)
 8011760:	f7ee fd56 	bl	8000210 <memchr>
 8011764:	9a04      	ldr	r2, [sp, #16]
 8011766:	b9d8      	cbnz	r0, 80117a0 <_vfiprintf_r+0x12c>
 8011768:	06d1      	lsls	r1, r2, #27
 801176a:	bf44      	itt	mi
 801176c:	2320      	movmi	r3, #32
 801176e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011772:	0713      	lsls	r3, r2, #28
 8011774:	bf44      	itt	mi
 8011776:	232b      	movmi	r3, #43	; 0x2b
 8011778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801177c:	f89a 3000 	ldrb.w	r3, [sl]
 8011780:	2b2a      	cmp	r3, #42	; 0x2a
 8011782:	d015      	beq.n	80117b0 <_vfiprintf_r+0x13c>
 8011784:	9a07      	ldr	r2, [sp, #28]
 8011786:	4654      	mov	r4, sl
 8011788:	2000      	movs	r0, #0
 801178a:	f04f 0c0a 	mov.w	ip, #10
 801178e:	4621      	mov	r1, r4
 8011790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011794:	3b30      	subs	r3, #48	; 0x30
 8011796:	2b09      	cmp	r3, #9
 8011798:	d94e      	bls.n	8011838 <_vfiprintf_r+0x1c4>
 801179a:	b1b0      	cbz	r0, 80117ca <_vfiprintf_r+0x156>
 801179c:	9207      	str	r2, [sp, #28]
 801179e:	e014      	b.n	80117ca <_vfiprintf_r+0x156>
 80117a0:	eba0 0308 	sub.w	r3, r0, r8
 80117a4:	fa09 f303 	lsl.w	r3, r9, r3
 80117a8:	4313      	orrs	r3, r2
 80117aa:	9304      	str	r3, [sp, #16]
 80117ac:	46a2      	mov	sl, r4
 80117ae:	e7d2      	b.n	8011756 <_vfiprintf_r+0xe2>
 80117b0:	9b03      	ldr	r3, [sp, #12]
 80117b2:	1d19      	adds	r1, r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	9103      	str	r1, [sp, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfbb      	ittet	lt
 80117bc:	425b      	neglt	r3, r3
 80117be:	f042 0202 	orrlt.w	r2, r2, #2
 80117c2:	9307      	strge	r3, [sp, #28]
 80117c4:	9307      	strlt	r3, [sp, #28]
 80117c6:	bfb8      	it	lt
 80117c8:	9204      	strlt	r2, [sp, #16]
 80117ca:	7823      	ldrb	r3, [r4, #0]
 80117cc:	2b2e      	cmp	r3, #46	; 0x2e
 80117ce:	d10c      	bne.n	80117ea <_vfiprintf_r+0x176>
 80117d0:	7863      	ldrb	r3, [r4, #1]
 80117d2:	2b2a      	cmp	r3, #42	; 0x2a
 80117d4:	d135      	bne.n	8011842 <_vfiprintf_r+0x1ce>
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	1d1a      	adds	r2, r3, #4
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	9203      	str	r2, [sp, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	bfb8      	it	lt
 80117e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80117e6:	3402      	adds	r4, #2
 80117e8:	9305      	str	r3, [sp, #20]
 80117ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80118d0 <_vfiprintf_r+0x25c>
 80117ee:	7821      	ldrb	r1, [r4, #0]
 80117f0:	2203      	movs	r2, #3
 80117f2:	4650      	mov	r0, sl
 80117f4:	f7ee fd0c 	bl	8000210 <memchr>
 80117f8:	b140      	cbz	r0, 801180c <_vfiprintf_r+0x198>
 80117fa:	2340      	movs	r3, #64	; 0x40
 80117fc:	eba0 000a 	sub.w	r0, r0, sl
 8011800:	fa03 f000 	lsl.w	r0, r3, r0
 8011804:	9b04      	ldr	r3, [sp, #16]
 8011806:	4303      	orrs	r3, r0
 8011808:	3401      	adds	r4, #1
 801180a:	9304      	str	r3, [sp, #16]
 801180c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011810:	482c      	ldr	r0, [pc, #176]	; (80118c4 <_vfiprintf_r+0x250>)
 8011812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011816:	2206      	movs	r2, #6
 8011818:	f7ee fcfa 	bl	8000210 <memchr>
 801181c:	2800      	cmp	r0, #0
 801181e:	d03f      	beq.n	80118a0 <_vfiprintf_r+0x22c>
 8011820:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <_vfiprintf_r+0x254>)
 8011822:	bb1b      	cbnz	r3, 801186c <_vfiprintf_r+0x1f8>
 8011824:	9b03      	ldr	r3, [sp, #12]
 8011826:	3307      	adds	r3, #7
 8011828:	f023 0307 	bic.w	r3, r3, #7
 801182c:	3308      	adds	r3, #8
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011832:	443b      	add	r3, r7
 8011834:	9309      	str	r3, [sp, #36]	; 0x24
 8011836:	e767      	b.n	8011708 <_vfiprintf_r+0x94>
 8011838:	fb0c 3202 	mla	r2, ip, r2, r3
 801183c:	460c      	mov	r4, r1
 801183e:	2001      	movs	r0, #1
 8011840:	e7a5      	b.n	801178e <_vfiprintf_r+0x11a>
 8011842:	2300      	movs	r3, #0
 8011844:	3401      	adds	r4, #1
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	4619      	mov	r1, r3
 801184a:	f04f 0c0a 	mov.w	ip, #10
 801184e:	4620      	mov	r0, r4
 8011850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011854:	3a30      	subs	r2, #48	; 0x30
 8011856:	2a09      	cmp	r2, #9
 8011858:	d903      	bls.n	8011862 <_vfiprintf_r+0x1ee>
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0c5      	beq.n	80117ea <_vfiprintf_r+0x176>
 801185e:	9105      	str	r1, [sp, #20]
 8011860:	e7c3      	b.n	80117ea <_vfiprintf_r+0x176>
 8011862:	fb0c 2101 	mla	r1, ip, r1, r2
 8011866:	4604      	mov	r4, r0
 8011868:	2301      	movs	r3, #1
 801186a:	e7f0      	b.n	801184e <_vfiprintf_r+0x1da>
 801186c:	ab03      	add	r3, sp, #12
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	462a      	mov	r2, r5
 8011872:	4b16      	ldr	r3, [pc, #88]	; (80118cc <_vfiprintf_r+0x258>)
 8011874:	a904      	add	r1, sp, #16
 8011876:	4630      	mov	r0, r6
 8011878:	f7fd fe30 	bl	800f4dc <_printf_float>
 801187c:	4607      	mov	r7, r0
 801187e:	1c78      	adds	r0, r7, #1
 8011880:	d1d6      	bne.n	8011830 <_vfiprintf_r+0x1bc>
 8011882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011884:	07d9      	lsls	r1, r3, #31
 8011886:	d405      	bmi.n	8011894 <_vfiprintf_r+0x220>
 8011888:	89ab      	ldrh	r3, [r5, #12]
 801188a:	059a      	lsls	r2, r3, #22
 801188c:	d402      	bmi.n	8011894 <_vfiprintf_r+0x220>
 801188e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011890:	f7ff fe92 	bl	80115b8 <__retarget_lock_release_recursive>
 8011894:	89ab      	ldrh	r3, [r5, #12]
 8011896:	065b      	lsls	r3, r3, #25
 8011898:	f53f af12 	bmi.w	80116c0 <_vfiprintf_r+0x4c>
 801189c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801189e:	e711      	b.n	80116c4 <_vfiprintf_r+0x50>
 80118a0:	ab03      	add	r3, sp, #12
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	462a      	mov	r2, r5
 80118a6:	4b09      	ldr	r3, [pc, #36]	; (80118cc <_vfiprintf_r+0x258>)
 80118a8:	a904      	add	r1, sp, #16
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7fe f8ba 	bl	800fa24 <_printf_i>
 80118b0:	e7e4      	b.n	801187c <_vfiprintf_r+0x208>
 80118b2:	bf00      	nop
 80118b4:	081467fc 	.word	0x081467fc
 80118b8:	0814681c 	.word	0x0814681c
 80118bc:	081467dc 	.word	0x081467dc
 80118c0:	08146784 	.word	0x08146784
 80118c4:	0814678e 	.word	0x0814678e
 80118c8:	0800f4dd 	.word	0x0800f4dd
 80118cc:	08011651 	.word	0x08011651
 80118d0:	0814678a 	.word	0x0814678a

080118d4 <__swbuf_r>:
 80118d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d6:	460e      	mov	r6, r1
 80118d8:	4614      	mov	r4, r2
 80118da:	4605      	mov	r5, r0
 80118dc:	b118      	cbz	r0, 80118e6 <__swbuf_r+0x12>
 80118de:	6983      	ldr	r3, [r0, #24]
 80118e0:	b90b      	cbnz	r3, 80118e6 <__swbuf_r+0x12>
 80118e2:	f000 f9e7 	bl	8011cb4 <__sinit>
 80118e6:	4b21      	ldr	r3, [pc, #132]	; (801196c <__swbuf_r+0x98>)
 80118e8:	429c      	cmp	r4, r3
 80118ea:	d12b      	bne.n	8011944 <__swbuf_r+0x70>
 80118ec:	686c      	ldr	r4, [r5, #4]
 80118ee:	69a3      	ldr	r3, [r4, #24]
 80118f0:	60a3      	str	r3, [r4, #8]
 80118f2:	89a3      	ldrh	r3, [r4, #12]
 80118f4:	071a      	lsls	r2, r3, #28
 80118f6:	d52f      	bpl.n	8011958 <__swbuf_r+0x84>
 80118f8:	6923      	ldr	r3, [r4, #16]
 80118fa:	b36b      	cbz	r3, 8011958 <__swbuf_r+0x84>
 80118fc:	6923      	ldr	r3, [r4, #16]
 80118fe:	6820      	ldr	r0, [r4, #0]
 8011900:	1ac0      	subs	r0, r0, r3
 8011902:	6963      	ldr	r3, [r4, #20]
 8011904:	b2f6      	uxtb	r6, r6
 8011906:	4283      	cmp	r3, r0
 8011908:	4637      	mov	r7, r6
 801190a:	dc04      	bgt.n	8011916 <__swbuf_r+0x42>
 801190c:	4621      	mov	r1, r4
 801190e:	4628      	mov	r0, r5
 8011910:	f000 f93c 	bl	8011b8c <_fflush_r>
 8011914:	bb30      	cbnz	r0, 8011964 <__swbuf_r+0x90>
 8011916:	68a3      	ldr	r3, [r4, #8]
 8011918:	3b01      	subs	r3, #1
 801191a:	60a3      	str	r3, [r4, #8]
 801191c:	6823      	ldr	r3, [r4, #0]
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	6022      	str	r2, [r4, #0]
 8011922:	701e      	strb	r6, [r3, #0]
 8011924:	6963      	ldr	r3, [r4, #20]
 8011926:	3001      	adds	r0, #1
 8011928:	4283      	cmp	r3, r0
 801192a:	d004      	beq.n	8011936 <__swbuf_r+0x62>
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	07db      	lsls	r3, r3, #31
 8011930:	d506      	bpl.n	8011940 <__swbuf_r+0x6c>
 8011932:	2e0a      	cmp	r6, #10
 8011934:	d104      	bne.n	8011940 <__swbuf_r+0x6c>
 8011936:	4621      	mov	r1, r4
 8011938:	4628      	mov	r0, r5
 801193a:	f000 f927 	bl	8011b8c <_fflush_r>
 801193e:	b988      	cbnz	r0, 8011964 <__swbuf_r+0x90>
 8011940:	4638      	mov	r0, r7
 8011942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011944:	4b0a      	ldr	r3, [pc, #40]	; (8011970 <__swbuf_r+0x9c>)
 8011946:	429c      	cmp	r4, r3
 8011948:	d101      	bne.n	801194e <__swbuf_r+0x7a>
 801194a:	68ac      	ldr	r4, [r5, #8]
 801194c:	e7cf      	b.n	80118ee <__swbuf_r+0x1a>
 801194e:	4b09      	ldr	r3, [pc, #36]	; (8011974 <__swbuf_r+0xa0>)
 8011950:	429c      	cmp	r4, r3
 8011952:	bf08      	it	eq
 8011954:	68ec      	ldreq	r4, [r5, #12]
 8011956:	e7ca      	b.n	80118ee <__swbuf_r+0x1a>
 8011958:	4621      	mov	r1, r4
 801195a:	4628      	mov	r0, r5
 801195c:	f000 f81a 	bl	8011994 <__swsetup_r>
 8011960:	2800      	cmp	r0, #0
 8011962:	d0cb      	beq.n	80118fc <__swbuf_r+0x28>
 8011964:	f04f 37ff 	mov.w	r7, #4294967295
 8011968:	e7ea      	b.n	8011940 <__swbuf_r+0x6c>
 801196a:	bf00      	nop
 801196c:	081467fc 	.word	0x081467fc
 8011970:	0814681c 	.word	0x0814681c
 8011974:	081467dc 	.word	0x081467dc

08011978 <__ascii_wctomb>:
 8011978:	b149      	cbz	r1, 801198e <__ascii_wctomb+0x16>
 801197a:	2aff      	cmp	r2, #255	; 0xff
 801197c:	bf85      	ittet	hi
 801197e:	238a      	movhi	r3, #138	; 0x8a
 8011980:	6003      	strhi	r3, [r0, #0]
 8011982:	700a      	strbls	r2, [r1, #0]
 8011984:	f04f 30ff 	movhi.w	r0, #4294967295
 8011988:	bf98      	it	ls
 801198a:	2001      	movls	r0, #1
 801198c:	4770      	bx	lr
 801198e:	4608      	mov	r0, r1
 8011990:	4770      	bx	lr
	...

08011994 <__swsetup_r>:
 8011994:	4b32      	ldr	r3, [pc, #200]	; (8011a60 <__swsetup_r+0xcc>)
 8011996:	b570      	push	{r4, r5, r6, lr}
 8011998:	681d      	ldr	r5, [r3, #0]
 801199a:	4606      	mov	r6, r0
 801199c:	460c      	mov	r4, r1
 801199e:	b125      	cbz	r5, 80119aa <__swsetup_r+0x16>
 80119a0:	69ab      	ldr	r3, [r5, #24]
 80119a2:	b913      	cbnz	r3, 80119aa <__swsetup_r+0x16>
 80119a4:	4628      	mov	r0, r5
 80119a6:	f000 f985 	bl	8011cb4 <__sinit>
 80119aa:	4b2e      	ldr	r3, [pc, #184]	; (8011a64 <__swsetup_r+0xd0>)
 80119ac:	429c      	cmp	r4, r3
 80119ae:	d10f      	bne.n	80119d0 <__swsetup_r+0x3c>
 80119b0:	686c      	ldr	r4, [r5, #4]
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119b8:	0719      	lsls	r1, r3, #28
 80119ba:	d42c      	bmi.n	8011a16 <__swsetup_r+0x82>
 80119bc:	06dd      	lsls	r5, r3, #27
 80119be:	d411      	bmi.n	80119e4 <__swsetup_r+0x50>
 80119c0:	2309      	movs	r3, #9
 80119c2:	6033      	str	r3, [r6, #0]
 80119c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119c8:	81a3      	strh	r3, [r4, #12]
 80119ca:	f04f 30ff 	mov.w	r0, #4294967295
 80119ce:	e03e      	b.n	8011a4e <__swsetup_r+0xba>
 80119d0:	4b25      	ldr	r3, [pc, #148]	; (8011a68 <__swsetup_r+0xd4>)
 80119d2:	429c      	cmp	r4, r3
 80119d4:	d101      	bne.n	80119da <__swsetup_r+0x46>
 80119d6:	68ac      	ldr	r4, [r5, #8]
 80119d8:	e7eb      	b.n	80119b2 <__swsetup_r+0x1e>
 80119da:	4b24      	ldr	r3, [pc, #144]	; (8011a6c <__swsetup_r+0xd8>)
 80119dc:	429c      	cmp	r4, r3
 80119de:	bf08      	it	eq
 80119e0:	68ec      	ldreq	r4, [r5, #12]
 80119e2:	e7e6      	b.n	80119b2 <__swsetup_r+0x1e>
 80119e4:	0758      	lsls	r0, r3, #29
 80119e6:	d512      	bpl.n	8011a0e <__swsetup_r+0x7a>
 80119e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ea:	b141      	cbz	r1, 80119fe <__swsetup_r+0x6a>
 80119ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119f0:	4299      	cmp	r1, r3
 80119f2:	d002      	beq.n	80119fa <__swsetup_r+0x66>
 80119f4:	4630      	mov	r0, r6
 80119f6:	f7fd fbf1 	bl	800f1dc <_free_r>
 80119fa:	2300      	movs	r3, #0
 80119fc:	6363      	str	r3, [r4, #52]	; 0x34
 80119fe:	89a3      	ldrh	r3, [r4, #12]
 8011a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a04:	81a3      	strh	r3, [r4, #12]
 8011a06:	2300      	movs	r3, #0
 8011a08:	6063      	str	r3, [r4, #4]
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	6023      	str	r3, [r4, #0]
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	f043 0308 	orr.w	r3, r3, #8
 8011a14:	81a3      	strh	r3, [r4, #12]
 8011a16:	6923      	ldr	r3, [r4, #16]
 8011a18:	b94b      	cbnz	r3, 8011a2e <__swsetup_r+0x9a>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a24:	d003      	beq.n	8011a2e <__swsetup_r+0x9a>
 8011a26:	4621      	mov	r1, r4
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f000 fa05 	bl	8011e38 <__smakebuf_r>
 8011a2e:	89a0      	ldrh	r0, [r4, #12]
 8011a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a34:	f010 0301 	ands.w	r3, r0, #1
 8011a38:	d00a      	beq.n	8011a50 <__swsetup_r+0xbc>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	60a3      	str	r3, [r4, #8]
 8011a3e:	6963      	ldr	r3, [r4, #20]
 8011a40:	425b      	negs	r3, r3
 8011a42:	61a3      	str	r3, [r4, #24]
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	b943      	cbnz	r3, 8011a5a <__swsetup_r+0xc6>
 8011a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a4c:	d1ba      	bne.n	80119c4 <__swsetup_r+0x30>
 8011a4e:	bd70      	pop	{r4, r5, r6, pc}
 8011a50:	0781      	lsls	r1, r0, #30
 8011a52:	bf58      	it	pl
 8011a54:	6963      	ldrpl	r3, [r4, #20]
 8011a56:	60a3      	str	r3, [r4, #8]
 8011a58:	e7f4      	b.n	8011a44 <__swsetup_r+0xb0>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	e7f7      	b.n	8011a4e <__swsetup_r+0xba>
 8011a5e:	bf00      	nop
 8011a60:	20000bac 	.word	0x20000bac
 8011a64:	081467fc 	.word	0x081467fc
 8011a68:	0814681c 	.word	0x0814681c
 8011a6c:	081467dc 	.word	0x081467dc

08011a70 <abort>:
 8011a70:	b508      	push	{r3, lr}
 8011a72:	2006      	movs	r0, #6
 8011a74:	f000 fa48 	bl	8011f08 <raise>
 8011a78:	2001      	movs	r0, #1
 8011a7a:	f000 fcc7 	bl	801240c <_exit>
	...

08011a80 <__sflush_r>:
 8011a80:	898a      	ldrh	r2, [r1, #12]
 8011a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a86:	4605      	mov	r5, r0
 8011a88:	0710      	lsls	r0, r2, #28
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	d458      	bmi.n	8011b40 <__sflush_r+0xc0>
 8011a8e:	684b      	ldr	r3, [r1, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	dc05      	bgt.n	8011aa0 <__sflush_r+0x20>
 8011a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	dc02      	bgt.n	8011aa0 <__sflush_r+0x20>
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011aa2:	2e00      	cmp	r6, #0
 8011aa4:	d0f9      	beq.n	8011a9a <__sflush_r+0x1a>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011aac:	682f      	ldr	r7, [r5, #0]
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	d032      	beq.n	8011b18 <__sflush_r+0x98>
 8011ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	075a      	lsls	r2, r3, #29
 8011ab8:	d505      	bpl.n	8011ac6 <__sflush_r+0x46>
 8011aba:	6863      	ldr	r3, [r4, #4]
 8011abc:	1ac0      	subs	r0, r0, r3
 8011abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ac0:	b10b      	cbz	r3, 8011ac6 <__sflush_r+0x46>
 8011ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ac4:	1ac0      	subs	r0, r0, r3
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	4602      	mov	r2, r0
 8011aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011acc:	6a21      	ldr	r1, [r4, #32]
 8011ace:	4628      	mov	r0, r5
 8011ad0:	47b0      	blx	r6
 8011ad2:	1c43      	adds	r3, r0, #1
 8011ad4:	89a3      	ldrh	r3, [r4, #12]
 8011ad6:	d106      	bne.n	8011ae6 <__sflush_r+0x66>
 8011ad8:	6829      	ldr	r1, [r5, #0]
 8011ada:	291d      	cmp	r1, #29
 8011adc:	d82c      	bhi.n	8011b38 <__sflush_r+0xb8>
 8011ade:	4a2a      	ldr	r2, [pc, #168]	; (8011b88 <__sflush_r+0x108>)
 8011ae0:	40ca      	lsrs	r2, r1
 8011ae2:	07d6      	lsls	r6, r2, #31
 8011ae4:	d528      	bpl.n	8011b38 <__sflush_r+0xb8>
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	6062      	str	r2, [r4, #4]
 8011aea:	04d9      	lsls	r1, r3, #19
 8011aec:	6922      	ldr	r2, [r4, #16]
 8011aee:	6022      	str	r2, [r4, #0]
 8011af0:	d504      	bpl.n	8011afc <__sflush_r+0x7c>
 8011af2:	1c42      	adds	r2, r0, #1
 8011af4:	d101      	bne.n	8011afa <__sflush_r+0x7a>
 8011af6:	682b      	ldr	r3, [r5, #0]
 8011af8:	b903      	cbnz	r3, 8011afc <__sflush_r+0x7c>
 8011afa:	6560      	str	r0, [r4, #84]	; 0x54
 8011afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011afe:	602f      	str	r7, [r5, #0]
 8011b00:	2900      	cmp	r1, #0
 8011b02:	d0ca      	beq.n	8011a9a <__sflush_r+0x1a>
 8011b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b08:	4299      	cmp	r1, r3
 8011b0a:	d002      	beq.n	8011b12 <__sflush_r+0x92>
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7fd fb65 	bl	800f1dc <_free_r>
 8011b12:	2000      	movs	r0, #0
 8011b14:	6360      	str	r0, [r4, #52]	; 0x34
 8011b16:	e7c1      	b.n	8011a9c <__sflush_r+0x1c>
 8011b18:	6a21      	ldr	r1, [r4, #32]
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	47b0      	blx	r6
 8011b20:	1c41      	adds	r1, r0, #1
 8011b22:	d1c7      	bne.n	8011ab4 <__sflush_r+0x34>
 8011b24:	682b      	ldr	r3, [r5, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d0c4      	beq.n	8011ab4 <__sflush_r+0x34>
 8011b2a:	2b1d      	cmp	r3, #29
 8011b2c:	d001      	beq.n	8011b32 <__sflush_r+0xb2>
 8011b2e:	2b16      	cmp	r3, #22
 8011b30:	d101      	bne.n	8011b36 <__sflush_r+0xb6>
 8011b32:	602f      	str	r7, [r5, #0]
 8011b34:	e7b1      	b.n	8011a9a <__sflush_r+0x1a>
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b3c:	81a3      	strh	r3, [r4, #12]
 8011b3e:	e7ad      	b.n	8011a9c <__sflush_r+0x1c>
 8011b40:	690f      	ldr	r7, [r1, #16]
 8011b42:	2f00      	cmp	r7, #0
 8011b44:	d0a9      	beq.n	8011a9a <__sflush_r+0x1a>
 8011b46:	0793      	lsls	r3, r2, #30
 8011b48:	680e      	ldr	r6, [r1, #0]
 8011b4a:	bf08      	it	eq
 8011b4c:	694b      	ldreq	r3, [r1, #20]
 8011b4e:	600f      	str	r7, [r1, #0]
 8011b50:	bf18      	it	ne
 8011b52:	2300      	movne	r3, #0
 8011b54:	eba6 0807 	sub.w	r8, r6, r7
 8011b58:	608b      	str	r3, [r1, #8]
 8011b5a:	f1b8 0f00 	cmp.w	r8, #0
 8011b5e:	dd9c      	ble.n	8011a9a <__sflush_r+0x1a>
 8011b60:	6a21      	ldr	r1, [r4, #32]
 8011b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b64:	4643      	mov	r3, r8
 8011b66:	463a      	mov	r2, r7
 8011b68:	4628      	mov	r0, r5
 8011b6a:	47b0      	blx	r6
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	dc06      	bgt.n	8011b7e <__sflush_r+0xfe>
 8011b70:	89a3      	ldrh	r3, [r4, #12]
 8011b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b76:	81a3      	strh	r3, [r4, #12]
 8011b78:	f04f 30ff 	mov.w	r0, #4294967295
 8011b7c:	e78e      	b.n	8011a9c <__sflush_r+0x1c>
 8011b7e:	4407      	add	r7, r0
 8011b80:	eba8 0800 	sub.w	r8, r8, r0
 8011b84:	e7e9      	b.n	8011b5a <__sflush_r+0xda>
 8011b86:	bf00      	nop
 8011b88:	20400001 	.word	0x20400001

08011b8c <_fflush_r>:
 8011b8c:	b538      	push	{r3, r4, r5, lr}
 8011b8e:	690b      	ldr	r3, [r1, #16]
 8011b90:	4605      	mov	r5, r0
 8011b92:	460c      	mov	r4, r1
 8011b94:	b913      	cbnz	r3, 8011b9c <_fflush_r+0x10>
 8011b96:	2500      	movs	r5, #0
 8011b98:	4628      	mov	r0, r5
 8011b9a:	bd38      	pop	{r3, r4, r5, pc}
 8011b9c:	b118      	cbz	r0, 8011ba6 <_fflush_r+0x1a>
 8011b9e:	6983      	ldr	r3, [r0, #24]
 8011ba0:	b90b      	cbnz	r3, 8011ba6 <_fflush_r+0x1a>
 8011ba2:	f000 f887 	bl	8011cb4 <__sinit>
 8011ba6:	4b14      	ldr	r3, [pc, #80]	; (8011bf8 <_fflush_r+0x6c>)
 8011ba8:	429c      	cmp	r4, r3
 8011baa:	d11b      	bne.n	8011be4 <_fflush_r+0x58>
 8011bac:	686c      	ldr	r4, [r5, #4]
 8011bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d0ef      	beq.n	8011b96 <_fflush_r+0xa>
 8011bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011bb8:	07d0      	lsls	r0, r2, #31
 8011bba:	d404      	bmi.n	8011bc6 <_fflush_r+0x3a>
 8011bbc:	0599      	lsls	r1, r3, #22
 8011bbe:	d402      	bmi.n	8011bc6 <_fflush_r+0x3a>
 8011bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bc2:	f7ff fcf8 	bl	80115b6 <__retarget_lock_acquire_recursive>
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	4621      	mov	r1, r4
 8011bca:	f7ff ff59 	bl	8011a80 <__sflush_r>
 8011bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bd0:	07da      	lsls	r2, r3, #31
 8011bd2:	4605      	mov	r5, r0
 8011bd4:	d4e0      	bmi.n	8011b98 <_fflush_r+0xc>
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	059b      	lsls	r3, r3, #22
 8011bda:	d4dd      	bmi.n	8011b98 <_fflush_r+0xc>
 8011bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bde:	f7ff fceb 	bl	80115b8 <__retarget_lock_release_recursive>
 8011be2:	e7d9      	b.n	8011b98 <_fflush_r+0xc>
 8011be4:	4b05      	ldr	r3, [pc, #20]	; (8011bfc <_fflush_r+0x70>)
 8011be6:	429c      	cmp	r4, r3
 8011be8:	d101      	bne.n	8011bee <_fflush_r+0x62>
 8011bea:	68ac      	ldr	r4, [r5, #8]
 8011bec:	e7df      	b.n	8011bae <_fflush_r+0x22>
 8011bee:	4b04      	ldr	r3, [pc, #16]	; (8011c00 <_fflush_r+0x74>)
 8011bf0:	429c      	cmp	r4, r3
 8011bf2:	bf08      	it	eq
 8011bf4:	68ec      	ldreq	r4, [r5, #12]
 8011bf6:	e7da      	b.n	8011bae <_fflush_r+0x22>
 8011bf8:	081467fc 	.word	0x081467fc
 8011bfc:	0814681c 	.word	0x0814681c
 8011c00:	081467dc 	.word	0x081467dc

08011c04 <std>:
 8011c04:	2300      	movs	r3, #0
 8011c06:	b510      	push	{r4, lr}
 8011c08:	4604      	mov	r4, r0
 8011c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c12:	6083      	str	r3, [r0, #8]
 8011c14:	8181      	strh	r1, [r0, #12]
 8011c16:	6643      	str	r3, [r0, #100]	; 0x64
 8011c18:	81c2      	strh	r2, [r0, #14]
 8011c1a:	6183      	str	r3, [r0, #24]
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	2208      	movs	r2, #8
 8011c20:	305c      	adds	r0, #92	; 0x5c
 8011c22:	f7fd fad3 	bl	800f1cc <memset>
 8011c26:	4b05      	ldr	r3, [pc, #20]	; (8011c3c <std+0x38>)
 8011c28:	6263      	str	r3, [r4, #36]	; 0x24
 8011c2a:	4b05      	ldr	r3, [pc, #20]	; (8011c40 <std+0x3c>)
 8011c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c2e:	4b05      	ldr	r3, [pc, #20]	; (8011c44 <std+0x40>)
 8011c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c32:	4b05      	ldr	r3, [pc, #20]	; (8011c48 <std+0x44>)
 8011c34:	6224      	str	r4, [r4, #32]
 8011c36:	6323      	str	r3, [r4, #48]	; 0x30
 8011c38:	bd10      	pop	{r4, pc}
 8011c3a:	bf00      	nop
 8011c3c:	08011f41 	.word	0x08011f41
 8011c40:	08011f63 	.word	0x08011f63
 8011c44:	08011f9b 	.word	0x08011f9b
 8011c48:	08011fbf 	.word	0x08011fbf

08011c4c <_cleanup_r>:
 8011c4c:	4901      	ldr	r1, [pc, #4]	; (8011c54 <_cleanup_r+0x8>)
 8011c4e:	f000 b8af 	b.w	8011db0 <_fwalk_reent>
 8011c52:	bf00      	nop
 8011c54:	08011b8d 	.word	0x08011b8d

08011c58 <__sfmoreglue>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	2268      	movs	r2, #104	; 0x68
 8011c5c:	1e4d      	subs	r5, r1, #1
 8011c5e:	4355      	muls	r5, r2
 8011c60:	460e      	mov	r6, r1
 8011c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c66:	f7fd fb25 	bl	800f2b4 <_malloc_r>
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	b140      	cbz	r0, 8011c80 <__sfmoreglue+0x28>
 8011c6e:	2100      	movs	r1, #0
 8011c70:	e9c0 1600 	strd	r1, r6, [r0]
 8011c74:	300c      	adds	r0, #12
 8011c76:	60a0      	str	r0, [r4, #8]
 8011c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c7c:	f7fd faa6 	bl	800f1cc <memset>
 8011c80:	4620      	mov	r0, r4
 8011c82:	bd70      	pop	{r4, r5, r6, pc}

08011c84 <__sfp_lock_acquire>:
 8011c84:	4801      	ldr	r0, [pc, #4]	; (8011c8c <__sfp_lock_acquire+0x8>)
 8011c86:	f7ff bc96 	b.w	80115b6 <__retarget_lock_acquire_recursive>
 8011c8a:	bf00      	nop
 8011c8c:	20002039 	.word	0x20002039

08011c90 <__sfp_lock_release>:
 8011c90:	4801      	ldr	r0, [pc, #4]	; (8011c98 <__sfp_lock_release+0x8>)
 8011c92:	f7ff bc91 	b.w	80115b8 <__retarget_lock_release_recursive>
 8011c96:	bf00      	nop
 8011c98:	20002039 	.word	0x20002039

08011c9c <__sinit_lock_acquire>:
 8011c9c:	4801      	ldr	r0, [pc, #4]	; (8011ca4 <__sinit_lock_acquire+0x8>)
 8011c9e:	f7ff bc8a 	b.w	80115b6 <__retarget_lock_acquire_recursive>
 8011ca2:	bf00      	nop
 8011ca4:	2000203a 	.word	0x2000203a

08011ca8 <__sinit_lock_release>:
 8011ca8:	4801      	ldr	r0, [pc, #4]	; (8011cb0 <__sinit_lock_release+0x8>)
 8011caa:	f7ff bc85 	b.w	80115b8 <__retarget_lock_release_recursive>
 8011cae:	bf00      	nop
 8011cb0:	2000203a 	.word	0x2000203a

08011cb4 <__sinit>:
 8011cb4:	b510      	push	{r4, lr}
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	f7ff fff0 	bl	8011c9c <__sinit_lock_acquire>
 8011cbc:	69a3      	ldr	r3, [r4, #24]
 8011cbe:	b11b      	cbz	r3, 8011cc8 <__sinit+0x14>
 8011cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc4:	f7ff bff0 	b.w	8011ca8 <__sinit_lock_release>
 8011cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8011cce:	4b13      	ldr	r3, [pc, #76]	; (8011d1c <__sinit+0x68>)
 8011cd0:	4a13      	ldr	r2, [pc, #76]	; (8011d20 <__sinit+0x6c>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011cd6:	42a3      	cmp	r3, r4
 8011cd8:	bf04      	itt	eq
 8011cda:	2301      	moveq	r3, #1
 8011cdc:	61a3      	streq	r3, [r4, #24]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 f820 	bl	8011d24 <__sfp>
 8011ce4:	6060      	str	r0, [r4, #4]
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 f81c 	bl	8011d24 <__sfp>
 8011cec:	60a0      	str	r0, [r4, #8]
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f000 f818 	bl	8011d24 <__sfp>
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	60e0      	str	r0, [r4, #12]
 8011cf8:	2104      	movs	r1, #4
 8011cfa:	6860      	ldr	r0, [r4, #4]
 8011cfc:	f7ff ff82 	bl	8011c04 <std>
 8011d00:	68a0      	ldr	r0, [r4, #8]
 8011d02:	2201      	movs	r2, #1
 8011d04:	2109      	movs	r1, #9
 8011d06:	f7ff ff7d 	bl	8011c04 <std>
 8011d0a:	68e0      	ldr	r0, [r4, #12]
 8011d0c:	2202      	movs	r2, #2
 8011d0e:	2112      	movs	r1, #18
 8011d10:	f7ff ff78 	bl	8011c04 <std>
 8011d14:	2301      	movs	r3, #1
 8011d16:	61a3      	str	r3, [r4, #24]
 8011d18:	e7d2      	b.n	8011cc0 <__sinit+0xc>
 8011d1a:	bf00      	nop
 8011d1c:	08146460 	.word	0x08146460
 8011d20:	08011c4d 	.word	0x08011c4d

08011d24 <__sfp>:
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d26:	4607      	mov	r7, r0
 8011d28:	f7ff ffac 	bl	8011c84 <__sfp_lock_acquire>
 8011d2c:	4b1e      	ldr	r3, [pc, #120]	; (8011da8 <__sfp+0x84>)
 8011d2e:	681e      	ldr	r6, [r3, #0]
 8011d30:	69b3      	ldr	r3, [r6, #24]
 8011d32:	b913      	cbnz	r3, 8011d3a <__sfp+0x16>
 8011d34:	4630      	mov	r0, r6
 8011d36:	f7ff ffbd 	bl	8011cb4 <__sinit>
 8011d3a:	3648      	adds	r6, #72	; 0x48
 8011d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d40:	3b01      	subs	r3, #1
 8011d42:	d503      	bpl.n	8011d4c <__sfp+0x28>
 8011d44:	6833      	ldr	r3, [r6, #0]
 8011d46:	b30b      	cbz	r3, 8011d8c <__sfp+0x68>
 8011d48:	6836      	ldr	r6, [r6, #0]
 8011d4a:	e7f7      	b.n	8011d3c <__sfp+0x18>
 8011d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d50:	b9d5      	cbnz	r5, 8011d88 <__sfp+0x64>
 8011d52:	4b16      	ldr	r3, [pc, #88]	; (8011dac <__sfp+0x88>)
 8011d54:	60e3      	str	r3, [r4, #12]
 8011d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8011d5c:	f7ff fc2a 	bl	80115b4 <__retarget_lock_init_recursive>
 8011d60:	f7ff ff96 	bl	8011c90 <__sfp_lock_release>
 8011d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d6c:	6025      	str	r5, [r4, #0]
 8011d6e:	61a5      	str	r5, [r4, #24]
 8011d70:	2208      	movs	r2, #8
 8011d72:	4629      	mov	r1, r5
 8011d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d78:	f7fd fa28 	bl	800f1cc <memset>
 8011d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d84:	4620      	mov	r0, r4
 8011d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d88:	3468      	adds	r4, #104	; 0x68
 8011d8a:	e7d9      	b.n	8011d40 <__sfp+0x1c>
 8011d8c:	2104      	movs	r1, #4
 8011d8e:	4638      	mov	r0, r7
 8011d90:	f7ff ff62 	bl	8011c58 <__sfmoreglue>
 8011d94:	4604      	mov	r4, r0
 8011d96:	6030      	str	r0, [r6, #0]
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d1d5      	bne.n	8011d48 <__sfp+0x24>
 8011d9c:	f7ff ff78 	bl	8011c90 <__sfp_lock_release>
 8011da0:	230c      	movs	r3, #12
 8011da2:	603b      	str	r3, [r7, #0]
 8011da4:	e7ee      	b.n	8011d84 <__sfp+0x60>
 8011da6:	bf00      	nop
 8011da8:	08146460 	.word	0x08146460
 8011dac:	ffff0001 	.word	0xffff0001

08011db0 <_fwalk_reent>:
 8011db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011db4:	4606      	mov	r6, r0
 8011db6:	4688      	mov	r8, r1
 8011db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011dbc:	2700      	movs	r7, #0
 8011dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8011dc6:	d505      	bpl.n	8011dd4 <_fwalk_reent+0x24>
 8011dc8:	6824      	ldr	r4, [r4, #0]
 8011dca:	2c00      	cmp	r4, #0
 8011dcc:	d1f7      	bne.n	8011dbe <_fwalk_reent+0xe>
 8011dce:	4638      	mov	r0, r7
 8011dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dd4:	89ab      	ldrh	r3, [r5, #12]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d907      	bls.n	8011dea <_fwalk_reent+0x3a>
 8011dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dde:	3301      	adds	r3, #1
 8011de0:	d003      	beq.n	8011dea <_fwalk_reent+0x3a>
 8011de2:	4629      	mov	r1, r5
 8011de4:	4630      	mov	r0, r6
 8011de6:	47c0      	blx	r8
 8011de8:	4307      	orrs	r7, r0
 8011dea:	3568      	adds	r5, #104	; 0x68
 8011dec:	e7e9      	b.n	8011dc2 <_fwalk_reent+0x12>

08011dee <__swhatbuf_r>:
 8011dee:	b570      	push	{r4, r5, r6, lr}
 8011df0:	460e      	mov	r6, r1
 8011df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df6:	2900      	cmp	r1, #0
 8011df8:	b096      	sub	sp, #88	; 0x58
 8011dfa:	4614      	mov	r4, r2
 8011dfc:	461d      	mov	r5, r3
 8011dfe:	da08      	bge.n	8011e12 <__swhatbuf_r+0x24>
 8011e00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011e04:	2200      	movs	r2, #0
 8011e06:	602a      	str	r2, [r5, #0]
 8011e08:	061a      	lsls	r2, r3, #24
 8011e0a:	d410      	bmi.n	8011e2e <__swhatbuf_r+0x40>
 8011e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e10:	e00e      	b.n	8011e30 <__swhatbuf_r+0x42>
 8011e12:	466a      	mov	r2, sp
 8011e14:	f000 f8fa 	bl	801200c <_fstat_r>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	dbf1      	blt.n	8011e00 <__swhatbuf_r+0x12>
 8011e1c:	9a01      	ldr	r2, [sp, #4]
 8011e1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e26:	425a      	negs	r2, r3
 8011e28:	415a      	adcs	r2, r3
 8011e2a:	602a      	str	r2, [r5, #0]
 8011e2c:	e7ee      	b.n	8011e0c <__swhatbuf_r+0x1e>
 8011e2e:	2340      	movs	r3, #64	; 0x40
 8011e30:	2000      	movs	r0, #0
 8011e32:	6023      	str	r3, [r4, #0]
 8011e34:	b016      	add	sp, #88	; 0x58
 8011e36:	bd70      	pop	{r4, r5, r6, pc}

08011e38 <__smakebuf_r>:
 8011e38:	898b      	ldrh	r3, [r1, #12]
 8011e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e3c:	079d      	lsls	r5, r3, #30
 8011e3e:	4606      	mov	r6, r0
 8011e40:	460c      	mov	r4, r1
 8011e42:	d507      	bpl.n	8011e54 <__smakebuf_r+0x1c>
 8011e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	6123      	str	r3, [r4, #16]
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	6163      	str	r3, [r4, #20]
 8011e50:	b002      	add	sp, #8
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	ab01      	add	r3, sp, #4
 8011e56:	466a      	mov	r2, sp
 8011e58:	f7ff ffc9 	bl	8011dee <__swhatbuf_r>
 8011e5c:	9900      	ldr	r1, [sp, #0]
 8011e5e:	4605      	mov	r5, r0
 8011e60:	4630      	mov	r0, r6
 8011e62:	f7fd fa27 	bl	800f2b4 <_malloc_r>
 8011e66:	b948      	cbnz	r0, 8011e7c <__smakebuf_r+0x44>
 8011e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e6c:	059a      	lsls	r2, r3, #22
 8011e6e:	d4ef      	bmi.n	8011e50 <__smakebuf_r+0x18>
 8011e70:	f023 0303 	bic.w	r3, r3, #3
 8011e74:	f043 0302 	orr.w	r3, r3, #2
 8011e78:	81a3      	strh	r3, [r4, #12]
 8011e7a:	e7e3      	b.n	8011e44 <__smakebuf_r+0xc>
 8011e7c:	4b0d      	ldr	r3, [pc, #52]	; (8011eb4 <__smakebuf_r+0x7c>)
 8011e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	6020      	str	r0, [r4, #0]
 8011e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e88:	81a3      	strh	r3, [r4, #12]
 8011e8a:	9b00      	ldr	r3, [sp, #0]
 8011e8c:	6163      	str	r3, [r4, #20]
 8011e8e:	9b01      	ldr	r3, [sp, #4]
 8011e90:	6120      	str	r0, [r4, #16]
 8011e92:	b15b      	cbz	r3, 8011eac <__smakebuf_r+0x74>
 8011e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f000 f8c9 	bl	8012030 <_isatty_r>
 8011e9e:	b128      	cbz	r0, 8011eac <__smakebuf_r+0x74>
 8011ea0:	89a3      	ldrh	r3, [r4, #12]
 8011ea2:	f023 0303 	bic.w	r3, r3, #3
 8011ea6:	f043 0301 	orr.w	r3, r3, #1
 8011eaa:	81a3      	strh	r3, [r4, #12]
 8011eac:	89a0      	ldrh	r0, [r4, #12]
 8011eae:	4305      	orrs	r5, r0
 8011eb0:	81a5      	strh	r5, [r4, #12]
 8011eb2:	e7cd      	b.n	8011e50 <__smakebuf_r+0x18>
 8011eb4:	08011c4d 	.word	0x08011c4d

08011eb8 <_raise_r>:
 8011eb8:	291f      	cmp	r1, #31
 8011eba:	b538      	push	{r3, r4, r5, lr}
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	d904      	bls.n	8011ecc <_raise_r+0x14>
 8011ec2:	2316      	movs	r3, #22
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eca:	bd38      	pop	{r3, r4, r5, pc}
 8011ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ece:	b112      	cbz	r2, 8011ed6 <_raise_r+0x1e>
 8011ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ed4:	b94b      	cbnz	r3, 8011eea <_raise_r+0x32>
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f000 f830 	bl	8011f3c <_getpid_r>
 8011edc:	462a      	mov	r2, r5
 8011ede:	4601      	mov	r1, r0
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee6:	f000 b817 	b.w	8011f18 <_kill_r>
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d00a      	beq.n	8011f04 <_raise_r+0x4c>
 8011eee:	1c59      	adds	r1, r3, #1
 8011ef0:	d103      	bne.n	8011efa <_raise_r+0x42>
 8011ef2:	2316      	movs	r3, #22
 8011ef4:	6003      	str	r3, [r0, #0]
 8011ef6:	2001      	movs	r0, #1
 8011ef8:	e7e7      	b.n	8011eca <_raise_r+0x12>
 8011efa:	2400      	movs	r4, #0
 8011efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f00:	4628      	mov	r0, r5
 8011f02:	4798      	blx	r3
 8011f04:	2000      	movs	r0, #0
 8011f06:	e7e0      	b.n	8011eca <_raise_r+0x12>

08011f08 <raise>:
 8011f08:	4b02      	ldr	r3, [pc, #8]	; (8011f14 <raise+0xc>)
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	6818      	ldr	r0, [r3, #0]
 8011f0e:	f7ff bfd3 	b.w	8011eb8 <_raise_r>
 8011f12:	bf00      	nop
 8011f14:	20000bac 	.word	0x20000bac

08011f18 <_kill_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4d07      	ldr	r5, [pc, #28]	; (8011f38 <_kill_r+0x20>)
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4604      	mov	r4, r0
 8011f20:	4608      	mov	r0, r1
 8011f22:	4611      	mov	r1, r2
 8011f24:	602b      	str	r3, [r5, #0]
 8011f26:	f000 fa51 	bl	80123cc <_kill>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	d102      	bne.n	8011f34 <_kill_r+0x1c>
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	b103      	cbz	r3, 8011f34 <_kill_r+0x1c>
 8011f32:	6023      	str	r3, [r4, #0]
 8011f34:	bd38      	pop	{r3, r4, r5, pc}
 8011f36:	bf00      	nop
 8011f38:	20002034 	.word	0x20002034

08011f3c <_getpid_r>:
 8011f3c:	f000 ba36 	b.w	80123ac <_getpid>

08011f40 <__sread>:
 8011f40:	b510      	push	{r4, lr}
 8011f42:	460c      	mov	r4, r1
 8011f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f48:	f000 f894 	bl	8012074 <_read_r>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	bfab      	itete	ge
 8011f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f52:	89a3      	ldrhlt	r3, [r4, #12]
 8011f54:	181b      	addge	r3, r3, r0
 8011f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f5a:	bfac      	ite	ge
 8011f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f5e:	81a3      	strhlt	r3, [r4, #12]
 8011f60:	bd10      	pop	{r4, pc}

08011f62 <__swrite>:
 8011f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f66:	461f      	mov	r7, r3
 8011f68:	898b      	ldrh	r3, [r1, #12]
 8011f6a:	05db      	lsls	r3, r3, #23
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	460c      	mov	r4, r1
 8011f70:	4616      	mov	r6, r2
 8011f72:	d505      	bpl.n	8011f80 <__swrite+0x1e>
 8011f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f78:	2302      	movs	r3, #2
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f000 f868 	bl	8012050 <_lseek_r>
 8011f80:	89a3      	ldrh	r3, [r4, #12]
 8011f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f8a:	81a3      	strh	r3, [r4, #12]
 8011f8c:	4632      	mov	r2, r6
 8011f8e:	463b      	mov	r3, r7
 8011f90:	4628      	mov	r0, r5
 8011f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f96:	f000 b817 	b.w	8011fc8 <_write_r>

08011f9a <__sseek>:
 8011f9a:	b510      	push	{r4, lr}
 8011f9c:	460c      	mov	r4, r1
 8011f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa2:	f000 f855 	bl	8012050 <_lseek_r>
 8011fa6:	1c43      	adds	r3, r0, #1
 8011fa8:	89a3      	ldrh	r3, [r4, #12]
 8011faa:	bf15      	itete	ne
 8011fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fb6:	81a3      	strheq	r3, [r4, #12]
 8011fb8:	bf18      	it	ne
 8011fba:	81a3      	strhne	r3, [r4, #12]
 8011fbc:	bd10      	pop	{r4, pc}

08011fbe <__sclose>:
 8011fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fc2:	f000 b813 	b.w	8011fec <_close_r>
	...

08011fc8 <_write_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	; (8011fe8 <_write_r+0x20>)
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4608      	mov	r0, r1
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f000 fa10 	bl	80123fc <_write>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_write_r+0x1e>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_write_r+0x1e>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	20002034 	.word	0x20002034

08011fec <_close_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d06      	ldr	r5, [pc, #24]	; (8012008 <_close_r+0x1c>)
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	4608      	mov	r0, r1
 8011ff6:	602b      	str	r3, [r5, #0]
 8011ff8:	f000 f9c8 	bl	801238c <_close>
 8011ffc:	1c43      	adds	r3, r0, #1
 8011ffe:	d102      	bne.n	8012006 <_close_r+0x1a>
 8012000:	682b      	ldr	r3, [r5, #0]
 8012002:	b103      	cbz	r3, 8012006 <_close_r+0x1a>
 8012004:	6023      	str	r3, [r4, #0]
 8012006:	bd38      	pop	{r3, r4, r5, pc}
 8012008:	20002034 	.word	0x20002034

0801200c <_fstat_r>:
 801200c:	b538      	push	{r3, r4, r5, lr}
 801200e:	4d07      	ldr	r5, [pc, #28]	; (801202c <_fstat_r+0x20>)
 8012010:	2300      	movs	r3, #0
 8012012:	4604      	mov	r4, r0
 8012014:	4608      	mov	r0, r1
 8012016:	4611      	mov	r1, r2
 8012018:	602b      	str	r3, [r5, #0]
 801201a:	f000 f9bf 	bl	801239c <_fstat>
 801201e:	1c43      	adds	r3, r0, #1
 8012020:	d102      	bne.n	8012028 <_fstat_r+0x1c>
 8012022:	682b      	ldr	r3, [r5, #0]
 8012024:	b103      	cbz	r3, 8012028 <_fstat_r+0x1c>
 8012026:	6023      	str	r3, [r4, #0]
 8012028:	bd38      	pop	{r3, r4, r5, pc}
 801202a:	bf00      	nop
 801202c:	20002034 	.word	0x20002034

08012030 <_isatty_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d06      	ldr	r5, [pc, #24]	; (801204c <_isatty_r+0x1c>)
 8012034:	2300      	movs	r3, #0
 8012036:	4604      	mov	r4, r0
 8012038:	4608      	mov	r0, r1
 801203a:	602b      	str	r3, [r5, #0]
 801203c:	f000 f9be 	bl	80123bc <_isatty>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_isatty_r+0x1a>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_isatty_r+0x1a>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	20002034 	.word	0x20002034

08012050 <_lseek_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d07      	ldr	r5, [pc, #28]	; (8012070 <_lseek_r+0x20>)
 8012054:	4604      	mov	r4, r0
 8012056:	4608      	mov	r0, r1
 8012058:	4611      	mov	r1, r2
 801205a:	2200      	movs	r2, #0
 801205c:	602a      	str	r2, [r5, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	f000 f9bc 	bl	80123dc <_lseek>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_lseek_r+0x1e>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_lseek_r+0x1e>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	20002034 	.word	0x20002034

08012074 <_read_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d07      	ldr	r5, [pc, #28]	; (8012094 <_read_r+0x20>)
 8012078:	4604      	mov	r4, r0
 801207a:	4608      	mov	r0, r1
 801207c:	4611      	mov	r1, r2
 801207e:	2200      	movs	r2, #0
 8012080:	602a      	str	r2, [r5, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	f000 f9b2 	bl	80123ec <_read>
 8012088:	1c43      	adds	r3, r0, #1
 801208a:	d102      	bne.n	8012092 <_read_r+0x1e>
 801208c:	682b      	ldr	r3, [r5, #0]
 801208e:	b103      	cbz	r3, 8012092 <_read_r+0x1e>
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	bd38      	pop	{r3, r4, r5, pc}
 8012094:	20002034 	.word	0x20002034

08012098 <round>:
 8012098:	ec51 0b10 	vmov	r0, r1, d0
 801209c:	b570      	push	{r4, r5, r6, lr}
 801209e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80120a2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80120a6:	2c13      	cmp	r4, #19
 80120a8:	ee10 2a10 	vmov	r2, s0
 80120ac:	460b      	mov	r3, r1
 80120ae:	dc19      	bgt.n	80120e4 <round+0x4c>
 80120b0:	2c00      	cmp	r4, #0
 80120b2:	da09      	bge.n	80120c8 <round+0x30>
 80120b4:	3401      	adds	r4, #1
 80120b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80120ba:	d103      	bne.n	80120c4 <round+0x2c>
 80120bc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80120c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80120c4:	2200      	movs	r2, #0
 80120c6:	e028      	b.n	801211a <round+0x82>
 80120c8:	4d15      	ldr	r5, [pc, #84]	; (8012120 <round+0x88>)
 80120ca:	4125      	asrs	r5, r4
 80120cc:	ea01 0605 	and.w	r6, r1, r5
 80120d0:	4332      	orrs	r2, r6
 80120d2:	d00e      	beq.n	80120f2 <round+0x5a>
 80120d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80120d8:	fa42 f404 	asr.w	r4, r2, r4
 80120dc:	4423      	add	r3, r4
 80120de:	ea23 0305 	bic.w	r3, r3, r5
 80120e2:	e7ef      	b.n	80120c4 <round+0x2c>
 80120e4:	2c33      	cmp	r4, #51	; 0x33
 80120e6:	dd07      	ble.n	80120f8 <round+0x60>
 80120e8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80120ec:	d101      	bne.n	80120f2 <round+0x5a>
 80120ee:	f7ee f8e5 	bl	80002bc <__adddf3>
 80120f2:	ec41 0b10 	vmov	d0, r0, r1
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80120fc:	f04f 35ff 	mov.w	r5, #4294967295
 8012100:	40f5      	lsrs	r5, r6
 8012102:	4228      	tst	r0, r5
 8012104:	d0f5      	beq.n	80120f2 <round+0x5a>
 8012106:	2101      	movs	r1, #1
 8012108:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801210c:	fa01 f404 	lsl.w	r4, r1, r4
 8012110:	1912      	adds	r2, r2, r4
 8012112:	bf28      	it	cs
 8012114:	185b      	addcs	r3, r3, r1
 8012116:	ea22 0205 	bic.w	r2, r2, r5
 801211a:	4619      	mov	r1, r3
 801211c:	4610      	mov	r0, r2
 801211e:	e7e8      	b.n	80120f2 <round+0x5a>
 8012120:	000fffff 	.word	0x000fffff

08012124 <expf>:
 8012124:	b508      	push	{r3, lr}
 8012126:	ed2d 8b02 	vpush	{d8}
 801212a:	eef0 8a40 	vmov.f32	s17, s0
 801212e:	f000 f82f 	bl	8012190 <__ieee754_expf>
 8012132:	eeb0 8a40 	vmov.f32	s16, s0
 8012136:	eeb0 0a68 	vmov.f32	s0, s17
 801213a:	f000 f919 	bl	8012370 <finitef>
 801213e:	b160      	cbz	r0, 801215a <expf+0x36>
 8012140:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012180 <expf+0x5c>
 8012144:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214c:	dd0a      	ble.n	8012164 <expf+0x40>
 801214e:	f7fc fffd 	bl	800f14c <__errno>
 8012152:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012184 <expf+0x60>
 8012156:	2322      	movs	r3, #34	; 0x22
 8012158:	6003      	str	r3, [r0, #0]
 801215a:	eeb0 0a48 	vmov.f32	s0, s16
 801215e:	ecbd 8b02 	vpop	{d8}
 8012162:	bd08      	pop	{r3, pc}
 8012164:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012188 <expf+0x64>
 8012168:	eef4 8ae7 	vcmpe.f32	s17, s15
 801216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012170:	d5f3      	bpl.n	801215a <expf+0x36>
 8012172:	f7fc ffeb 	bl	800f14c <__errno>
 8012176:	2322      	movs	r3, #34	; 0x22
 8012178:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801218c <expf+0x68>
 801217c:	6003      	str	r3, [r0, #0]
 801217e:	e7ec      	b.n	801215a <expf+0x36>
 8012180:	42b17180 	.word	0x42b17180
 8012184:	7f800000 	.word	0x7f800000
 8012188:	c2cff1b5 	.word	0xc2cff1b5
 801218c:	00000000 	.word	0x00000000

08012190 <__ieee754_expf>:
 8012190:	ee10 2a10 	vmov	r2, s0
 8012194:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012198:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801219c:	d902      	bls.n	80121a4 <__ieee754_expf+0x14>
 801219e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80121a2:	4770      	bx	lr
 80121a4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80121a8:	d106      	bne.n	80121b8 <__ieee754_expf+0x28>
 80121aa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80122e4 <__ieee754_expf+0x154>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	bf18      	it	ne
 80121b2:	eeb0 0a67 	vmovne.f32	s0, s15
 80121b6:	4770      	bx	lr
 80121b8:	484b      	ldr	r0, [pc, #300]	; (80122e8 <__ieee754_expf+0x158>)
 80121ba:	4282      	cmp	r2, r0
 80121bc:	dd02      	ble.n	80121c4 <__ieee754_expf+0x34>
 80121be:	2000      	movs	r0, #0
 80121c0:	f000 b8d0 	b.w	8012364 <__math_oflowf>
 80121c4:	2a00      	cmp	r2, #0
 80121c6:	da05      	bge.n	80121d4 <__ieee754_expf+0x44>
 80121c8:	4a48      	ldr	r2, [pc, #288]	; (80122ec <__ieee754_expf+0x15c>)
 80121ca:	4291      	cmp	r1, r2
 80121cc:	d902      	bls.n	80121d4 <__ieee754_expf+0x44>
 80121ce:	2000      	movs	r0, #0
 80121d0:	f000 b8c2 	b.w	8012358 <__math_uflowf>
 80121d4:	4a46      	ldr	r2, [pc, #280]	; (80122f0 <__ieee754_expf+0x160>)
 80121d6:	4291      	cmp	r1, r2
 80121d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80121dc:	d952      	bls.n	8012284 <__ieee754_expf+0xf4>
 80121de:	4a45      	ldr	r2, [pc, #276]	; (80122f4 <__ieee754_expf+0x164>)
 80121e0:	4291      	cmp	r1, r2
 80121e2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80121e6:	d834      	bhi.n	8012252 <__ieee754_expf+0xc2>
 80121e8:	4943      	ldr	r1, [pc, #268]	; (80122f8 <__ieee754_expf+0x168>)
 80121ea:	4411      	add	r1, r2
 80121ec:	ed91 7a00 	vldr	s14, [r1]
 80121f0:	4942      	ldr	r1, [pc, #264]	; (80122fc <__ieee754_expf+0x16c>)
 80121f2:	440a      	add	r2, r1
 80121f4:	edd2 7a00 	vldr	s15, [r2]
 80121f8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80121fc:	f1c3 0201 	rsb	r2, r3, #1
 8012200:	1ad2      	subs	r2, r2, r3
 8012202:	ee37 0a67 	vsub.f32	s0, s14, s15
 8012206:	ee20 6a00 	vmul.f32	s12, s0, s0
 801220a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012300 <__ieee754_expf+0x170>
 801220e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012304 <__ieee754_expf+0x174>
 8012212:	eee6 6a05 	vfma.f32	s13, s12, s10
 8012216:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8012308 <__ieee754_expf+0x178>
 801221a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801221e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801230c <__ieee754_expf+0x17c>
 8012222:	eee5 6a06 	vfma.f32	s13, s10, s12
 8012226:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8012310 <__ieee754_expf+0x180>
 801222a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801222e:	eef0 6a40 	vmov.f32	s13, s0
 8012232:	eee5 6a46 	vfms.f32	s13, s10, s12
 8012236:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801223a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801223e:	bb92      	cbnz	r2, 80122a6 <__ieee754_expf+0x116>
 8012240:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012244:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8012248:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801224c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8012250:	4770      	bx	lr
 8012252:	4b30      	ldr	r3, [pc, #192]	; (8012314 <__ieee754_expf+0x184>)
 8012254:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012318 <__ieee754_expf+0x188>
 8012258:	eddf 6a30 	vldr	s13, [pc, #192]	; 801231c <__ieee754_expf+0x18c>
 801225c:	4413      	add	r3, r2
 801225e:	edd3 7a00 	vldr	s15, [r3]
 8012262:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012266:	eeb0 7a40 	vmov.f32	s14, s0
 801226a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801226e:	ee17 2a90 	vmov	r2, s15
 8012272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012276:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801227a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8012320 <__ieee754_expf+0x190>
 801227e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012282:	e7be      	b.n	8012202 <__ieee754_expf+0x72>
 8012284:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8012288:	d20b      	bcs.n	80122a2 <__ieee754_expf+0x112>
 801228a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012324 <__ieee754_expf+0x194>
 801228e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8012292:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229a:	dd02      	ble.n	80122a2 <__ieee754_expf+0x112>
 801229c:	ee30 0a25 	vadd.f32	s0, s0, s11
 80122a0:	4770      	bx	lr
 80122a2:	2200      	movs	r2, #0
 80122a4:	e7af      	b.n	8012206 <__ieee754_expf+0x76>
 80122a6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80122aa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80122ae:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80122b2:	bfb8      	it	lt
 80122b4:	3264      	addlt	r2, #100	; 0x64
 80122b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80122ba:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80122be:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80122c2:	ee17 3a90 	vmov	r3, s15
 80122c6:	bfab      	itete	ge
 80122c8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80122cc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80122d0:	ee00 3a10 	vmovge	s0, r3
 80122d4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8012328 <__ieee754_expf+0x198>
 80122d8:	bfbc      	itt	lt
 80122da:	ee00 3a10 	vmovlt	s0, r3
 80122de:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80122e2:	4770      	bx	lr
 80122e4:	00000000 	.word	0x00000000
 80122e8:	42b17217 	.word	0x42b17217
 80122ec:	42cff1b5 	.word	0x42cff1b5
 80122f0:	3eb17218 	.word	0x3eb17218
 80122f4:	3f851591 	.word	0x3f851591
 80122f8:	08146844 	.word	0x08146844
 80122fc:	0814684c 	.word	0x0814684c
 8012300:	3331bb4c 	.word	0x3331bb4c
 8012304:	b5ddea0e 	.word	0xb5ddea0e
 8012308:	388ab355 	.word	0x388ab355
 801230c:	bb360b61 	.word	0xbb360b61
 8012310:	3e2aaaab 	.word	0x3e2aaaab
 8012314:	0814683c 	.word	0x0814683c
 8012318:	3fb8aa3b 	.word	0x3fb8aa3b
 801231c:	3f317180 	.word	0x3f317180
 8012320:	3717f7d1 	.word	0x3717f7d1
 8012324:	7149f2ca 	.word	0x7149f2ca
 8012328:	0d800000 	.word	0x0d800000

0801232c <with_errnof>:
 801232c:	b513      	push	{r0, r1, r4, lr}
 801232e:	4604      	mov	r4, r0
 8012330:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012334:	f7fc ff0a 	bl	800f14c <__errno>
 8012338:	ed9d 0a01 	vldr	s0, [sp, #4]
 801233c:	6004      	str	r4, [r0, #0]
 801233e:	b002      	add	sp, #8
 8012340:	bd10      	pop	{r4, pc}

08012342 <xflowf>:
 8012342:	b130      	cbz	r0, 8012352 <xflowf+0x10>
 8012344:	eef1 7a40 	vneg.f32	s15, s0
 8012348:	ee27 0a80 	vmul.f32	s0, s15, s0
 801234c:	2022      	movs	r0, #34	; 0x22
 801234e:	f7ff bfed 	b.w	801232c <with_errnof>
 8012352:	eef0 7a40 	vmov.f32	s15, s0
 8012356:	e7f7      	b.n	8012348 <xflowf+0x6>

08012358 <__math_uflowf>:
 8012358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012360 <__math_uflowf+0x8>
 801235c:	f7ff bff1 	b.w	8012342 <xflowf>
 8012360:	10000000 	.word	0x10000000

08012364 <__math_oflowf>:
 8012364:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801236c <__math_oflowf+0x8>
 8012368:	f7ff bfeb 	b.w	8012342 <xflowf>
 801236c:	70000000 	.word	0x70000000

08012370 <finitef>:
 8012370:	b082      	sub	sp, #8
 8012372:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012376:	9801      	ldr	r0, [sp, #4]
 8012378:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801237c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012380:	bfac      	ite	ge
 8012382:	2000      	movge	r0, #0
 8012384:	2001      	movlt	r0, #1
 8012386:	b002      	add	sp, #8
 8012388:	4770      	bx	lr
	...

0801238c <_close>:
 801238c:	4b02      	ldr	r3, [pc, #8]	; (8012398 <_close+0xc>)
 801238e:	2258      	movs	r2, #88	; 0x58
 8012390:	601a      	str	r2, [r3, #0]
 8012392:	f04f 30ff 	mov.w	r0, #4294967295
 8012396:	4770      	bx	lr
 8012398:	20002034 	.word	0x20002034

0801239c <_fstat>:
 801239c:	4b02      	ldr	r3, [pc, #8]	; (80123a8 <_fstat+0xc>)
 801239e:	2258      	movs	r2, #88	; 0x58
 80123a0:	601a      	str	r2, [r3, #0]
 80123a2:	f04f 30ff 	mov.w	r0, #4294967295
 80123a6:	4770      	bx	lr
 80123a8:	20002034 	.word	0x20002034

080123ac <_getpid>:
 80123ac:	4b02      	ldr	r3, [pc, #8]	; (80123b8 <_getpid+0xc>)
 80123ae:	2258      	movs	r2, #88	; 0x58
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	f04f 30ff 	mov.w	r0, #4294967295
 80123b6:	4770      	bx	lr
 80123b8:	20002034 	.word	0x20002034

080123bc <_isatty>:
 80123bc:	4b02      	ldr	r3, [pc, #8]	; (80123c8 <_isatty+0xc>)
 80123be:	2258      	movs	r2, #88	; 0x58
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	2000      	movs	r0, #0
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	20002034 	.word	0x20002034

080123cc <_kill>:
 80123cc:	4b02      	ldr	r3, [pc, #8]	; (80123d8 <_kill+0xc>)
 80123ce:	2258      	movs	r2, #88	; 0x58
 80123d0:	601a      	str	r2, [r3, #0]
 80123d2:	f04f 30ff 	mov.w	r0, #4294967295
 80123d6:	4770      	bx	lr
 80123d8:	20002034 	.word	0x20002034

080123dc <_lseek>:
 80123dc:	4b02      	ldr	r3, [pc, #8]	; (80123e8 <_lseek+0xc>)
 80123de:	2258      	movs	r2, #88	; 0x58
 80123e0:	601a      	str	r2, [r3, #0]
 80123e2:	f04f 30ff 	mov.w	r0, #4294967295
 80123e6:	4770      	bx	lr
 80123e8:	20002034 	.word	0x20002034

080123ec <_read>:
 80123ec:	4b02      	ldr	r3, [pc, #8]	; (80123f8 <_read+0xc>)
 80123ee:	2258      	movs	r2, #88	; 0x58
 80123f0:	601a      	str	r2, [r3, #0]
 80123f2:	f04f 30ff 	mov.w	r0, #4294967295
 80123f6:	4770      	bx	lr
 80123f8:	20002034 	.word	0x20002034

080123fc <_write>:
 80123fc:	4b02      	ldr	r3, [pc, #8]	; (8012408 <_write+0xc>)
 80123fe:	2258      	movs	r2, #88	; 0x58
 8012400:	601a      	str	r2, [r3, #0]
 8012402:	f04f 30ff 	mov.w	r0, #4294967295
 8012406:	4770      	bx	lr
 8012408:	20002034 	.word	0x20002034

0801240c <_exit>:
 801240c:	e7fe      	b.n	801240c <_exit>
	...

08012410 <_init>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	bf00      	nop
 8012414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012416:	bc08      	pop	{r3}
 8012418:	469e      	mov	lr, r3
 801241a:	4770      	bx	lr

0801241c <_fini>:
 801241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241e:	bf00      	nop
 8012420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012422:	bc08      	pop	{r3}
 8012424:	469e      	mov	lr, r3
 8012426:	4770      	bx	lr
